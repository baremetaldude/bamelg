//
// Created by %USERNAME%
//

using System;
using System.IO;
using System.Net;
using System.Web;

using Platform;
using Platform.IO;

namespace Example {
	public partial class App {
		public class CustomHttpServer : HttpServer {
			public CustomHttpServer() {
			}

			protected override RequestHandler CreateHandler( SessionHandler session ) {
				switch( session.Resource ) {
					case "/stat.json": return new HttpStatisticPageHandler( session );
					case "/stat.txt": return new HttpStatisticTextPageHandler( session );

					case "/":
					case "/index.html":
					case "/Default.aspx":
						return new TestPageHandler( session );

					case "/time.event":
						return new TimeEventHandler( session );

					case "/hello.aspx":
						return new HelloWorldPageHandler( session );

					case "/favicon.ico": return new EmbeddedResourceHandler( session, System.Net.Mime.MediaTypeNames.Image.Icon, new MemorySegment( &EmbeddedResources.favicon_ico[0], ( uint ) EmbeddedResources.favicon_ico.Length ) );
					case "/time.html": return new EmbeddedResourceHandler( session, System.Net.Mime.MediaTypeNames.Text.Html, new MemorySegment( &EmbeddedResources.time_html[0], ( uint ) EmbeddedResources.time_html.Length ) );
				}

				return null;
			}

			public class HelloWorldPageHandler : PageHandler {
				public HelloWorldPageHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					Response.Append( "hello, world!" );
				}

				protected override void AddCustomHeaders() {
					AddHeaderContentType( MediaType );
				}
			}

			public class TimeEventHandler : PageHandler {
				public TimeEventHandler( SessionHandler session )
					: base( session ) {
					MediaType = System.Net.Mime.MediaTypeNames.Text.EventStream;
					TextEncodingKind = System.Text.TextEncodingKind.Utf8;
				}

				public override void OnRender() {
					var delay = TimeSpan.FromSeconds( 1 );
					Fiber.Sleep( new TimeSpan( delay.Ticks - ( Fiber.UtcNow.Ticks % delay.Ticks ) ) ); // wait for event completion

					Response.Append( "retry: 0\n" );
					Response.Append( "data: " ); Response.Append( Fiber.UtcNow.ToUnixMilliseconds() );

					Response.Append( "\n\n" );
				}

				protected override void AddCustomHeaders() {
					AddHeaderContentType( MediaType );

					HttpFormatter.HeaderAccessControl( Headers, "allow" );
					HttpFormatter.HeaderAccessControlAllowOrigin( Headers, "*" );
				}
			}

			public class TestPageHandler : PageHandler {
				public TestPageHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					var server = ( CustomHttpServer ) Session.Server;
					var time = Fiber.Now;

					Response.Append( "<html>" );
					{
						Response.Append( "<head>" );
						{
							Response.Append( @"<title>Bamelg server</title>" );
						}
						Response.Append( "</head>" );

						Response.Append( "<body>" );
						{
							Response.AppendFormat( "<p>Bamelg server {0}! ValidRequestCount={1,10}</p>", time, server.ValidRequestCount );
							Response.Concat( "<p>TotalAcceptedClientCount: ", server.TotalAcceptedClientCount, "; InvalidRequestCount=", server.InvalidRequestCount, "; ActiveSessionCount=", server.ActiveSessionCount, "</p>" );
							Response.Append( "<p>Some unicode symbols: тут немножко Юникода</p>" );
							Response.Append( @"<p><a href=""time.html"">Current time ( server-side event )</a></p>" );
						}
						Response.Append( "</body>" );
					}
					Response.Append( "</html>" );
				}
			}
		}

		public const int TcpConnectionPort = 8080;
		public const Utf8String NamedPipeConnectionPath = @"\\.\pipe\BamelgHttpServer";

		private static WinsockInitializer _winsockInitializer = new WinsockInitializer();

		[EntryPoint]
		private static void Main() {
			var eventLoop = new EventLoop();
			eventLoop.CatchConsoleQuit();

			var server = new CustomHttpServer();

			Fiber.Start( 16, () => {
				var tcpListen = false;
				var tcpListenReported = false;

				var pipeListen = false;
				var pipeListenReported = false;

				while( true ) {
					if( !tcpListen ) {
						tcpListen = server.Listen( TcpConnectionPort );

						if( tcpListen )
							Console.WriteLine( "Listen TCP port {0}", TcpConnectionPort );
						else if( !tcpListenReported ) {
							Console.WriteLine( "Unable bind TCP port {0}", TcpConnectionPort );
							tcpListenReported = true;
						}
					}

					if( !pipeListen ) {
						pipeListen = server.Listen( NamedPipeConnectionPath );

						if( pipeListen )
							Console.WriteLine( "Listen named pipe '{0}'", NamedPipeConnectionPath );
						else if( !pipeListenReported ) {
							Console.WriteLine( "Unable to bind named pipe '{0}'", NamedPipeConnectionPath );
							pipeListenReported = true;
						}
					}

					var all = true;

					all &= tcpListen;
					all &= pipeListen;

					if( !all ) {
						using( new Fiber.CancellationRegion() ) {
							Fiber.Sleep( 1000 );
							if( Fiber.IsCancelled ) return;
						}

						continue;
					}

					break;
				}

				PrintConnectionOptions();
			}, "resource allocator" );

			eventLoop.Dispatch();
		}

		static void PrintConnectionOptions() {
			Console.WriteLine( "@{ Possible connection URLs:" );
			Console.WriteLine( "\thttp://127.0.0.1:{0}", TcpConnectionPort );
			Console.WriteLine( "\thttp://localhost:{0}", TcpConnectionPort );
			Console.WriteLine( "\t{0}", NamedPipeConnectionPath );
			Console.WriteLine( "@}" );
		}
	}
}