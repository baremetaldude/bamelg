//
// Created by %USERNAME%
//

using System;
using System.IO;
using System.Net;
using System.Web;

using Platform;
using Platform.IO;

namespace Example {
	public partial class App {
		public class CustomHttpServer : HttpServer {
			public CustomHttpServer() {
			}

			protected override NetworkServer.SessionHandler CreateSession( IStream stream ) {
				return new SessionHandler( this, stream );
			}

			public class SessionHandler : basetype.SessionHandler {
				[Overlapped( Offset = memberinfo( basetype.Server ).ByteOffset )]
				public new declaringtype Server; // override field type

				public SessionHandler( declaringtype parent, IStream stream )
					: base( parent, stream ) {
				}

				protected override RequestHandler CreateHandler() {
					switch( Resource ) {
						case "/stat.json": return new HttpStatisticPageHandler( this );
						case "/stat.txt": return new HttpStatisticTextPageHandler( this );

						case "/":
						case "/index.html":
						case "/Default.aspx":
							return new TestPageHandler( this );

						case "/time.event":
							return new TimeEventHandler( this );

						case "/hello.aspx":
							return new HelloWorldPageHandler( this );

						case "/favicon.ico": return new EmbeddedResourceHandler( this, System.Net.Mime.MediaTypeNames.Image.Icon, new MemorySegment( EmbeddedResources.favicon_ico ) );
						case "/time.html": return new EmbeddedResourceHandler( this, System.Net.Mime.MediaTypeNames.Text.Html, new MemorySegment( EmbeddedResources.time_html ) );
					}

					return null;
				}
			}

			public class HelloWorldPageHandler : PageHandler {
				public HelloWorldPageHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					Response.Append( "hello, world!" );
				}

				protected override void AddCustomHeaders() {
					AddHeaderContentType( MediaType );
				}
			}

			public class TimeEventHandler : ServerSentEventHandler {
				public TimeEventHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					Response.UseAutoFlush = false;

					var delay = TimeSpan.FromSeconds( 1 );

					while( true ) {
						using( Fiber.CancellationRegion() ) {
							Response.Write( "data: " );
							Response.Write( Fiber.UtcNow.ToUnixMilliseconds() );
							Response.WriteLine();

							Response.Write( "id: " );
							Response.Write( @Fiber.UtcNow.Ticks );
							Response.WriteLine();

							Flush();
							if( Session.StreamError ) break;

							Fiber.Sleep( new TimeSpan( delay.Ticks - ( Fiber.UtcNow.Ticks % delay.Ticks ) ) ); // wait for event completion
							if( Fiber.IsCancelled ) break;
						}
					}
				}

				protected override void AddCustomHeaders() {
					base.AddCustomHeaders();

					// for debug purpose
					HttpFormatter.HeaderAccessControl( Headers, "allow" ); 
					HttpFormatter.HeaderAccessControlAllowOrigin( Headers, "*" );
				}
			}

			public class TestPageHandler : PageHandler {
				public TestPageHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					var server = ( CustomHttpServer ) Session.Server;
					var time = Fiber.Now;

					Response.Append( "<html>" );
					{
						Response.Append( "<head>" );
						{
							Response.Append( @"<title>Bamelg server</title>" );
						}
						Response.Append( "</head>" );

						Response.Append( "<body>" );
						{
							Response.AppendFormat( "<p>Bamelg server {0}! ValidRequestCount={1,10}</p>", time, server.ValidRequestCount );
							Response.Concat( "<p>TotalAcceptedClientCount: ", server.TotalAcceptedClientCount, "; InvalidRequestCount=", server.InvalidRequestCount, "; ActiveSessionCount=", server.ActiveSessionCount, "</p>" );
							Response.Append( "<p>Some unicode symbols: тут немножко Юникода</p>" );
							Response.Append( @"<p>Server sent events <a href=""time.html"">example</a></p>" );
						}
						Response.Append( "</body>" );
					}
					Response.Append( "</html>" );
				}
			}
		}

		public const int TcpConnectionPort = 8080;
		public const Utf8String NamedPipeConnectionPath = @"\\.\pipe\BamelgHttpServer";

		private static WinsockInitializer _winsockInitializer = new WinsockInitializer();

		[EntryPoint]
		private static void Main() {
			var eventLoop = new EventLoop() { Tracing = true };
			eventLoop.CatchConsoleQuit();

			var server = new CustomHttpServer();

			// eventLoop.BeginInvoke( () => {
			//	Fiber.Start( 16, () => {
			var tcpListen = false;
			var tcpListenReported = false;

			var pipeListen = false;
			var pipeListenReported = false;

			while( true ) {
				if( !tcpListen ) {
					tcpListen = server.Listen( TcpConnectionPort );

					if( tcpListen )
						Console.WriteLine( "Listen TCP port {0}", TcpConnectionPort );
					else if( !tcpListenReported ) {
						Console.WriteLine( "Unable bind TCP port {0}", TcpConnectionPort );
						tcpListenReported = true;
					}
				}

				if( !pipeListen ) {
					pipeListen = server.Listen( NamedPipeConnectionPath );

					if( pipeListen )
						Console.WriteLine( "Listen named pipe '{0}'", NamedPipeConnectionPath );
					else if( !pipeListenReported ) {
						Console.WriteLine( "Unable to bind named pipe '{0}'", NamedPipeConnectionPath );
						pipeListenReported = true;
					}
				}

				var all = true;

				all &= tcpListen;
				all &= pipeListen;

				if( !all ) {
					using( Fiber.CancellationRegion() ) {
						Fiber.Sleep( 1000 );
						if( Fiber.IsCancelled ) return;
					}

					continue;
				}

				break;
			}

			PrintConnectionOptions();
			//	}, "resource allocator" );
			// } );

			eventLoop.Dispatch();
		}

		static void PrintConnectionOptions() {
			Console.WriteLine( "@{ Possible connection URLs:" );
			Console.WriteLine( "\thttp://127.0.0.1:{0}", TcpConnectionPort );
			Console.WriteLine( "\thttp://localhost:{0}", TcpConnectionPort );
			Console.WriteLine( "\t{0}", NamedPipeConnectionPath );
			Console.WriteLine( "@}" );
		}
	}
}