//
// Created by Eugeny Grishul
//
// No API for non-blocking 'CreateFile' defined so additional threads created to prevent blocking eventloop
//

using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Runtime;
using System.Runtime.InteropServices;
using System.Web;

using Platform;
using Platform.IO;

namespace BamelgForwarder {
	public partial class App {
		[ReflectionMetadata( Mask = ReflectionMetadata.PublicFields )]
		internal struct AppSettings : IFormattable {
			public AppSettings() {
			}

			public bool Trace = true, TraceTransfer = true;
			public bool HttpApi = true;
			public TimeSpan RestoreTimeout = TimeSpan.FromSeconds( 1 );


			public int PagesPerControlFiber = 4;
			public int PagesPerTransferFiber = 4;
			public int PagesPerRestarterFiber = 4;

			public void ToString( StringBuilder builder, string format ) { // use 'sbf' snippet
				builder.Concat( "Trace='", Trace, "' TraceTransfer='", TraceTransfer, "' HttpApi='", HttpApi, '\'' );
			}
		}

		internal static AppSettings Options = new AppSettings();

		public static SERVICE_TABLE_ENTRYW[2] ServiceTable = new SERVICE_TABLE_ENTRYW[2] {
			new SERVICE_TABLE_ENTRYW { lpServiceName = "BamelgForwarder", lpServiceProc = ServiceMain },
			default( SERVICE_TABLE_ENTRYW )
		};

		private static SERVICE_STATUS_HANDLE* _statusHandle;
		private static EventLoop _eventLoop;

		[CallingConvention( Value = NtApi.DefaultCallingConvention )]
		public static void ServiceMain( uint argc, CUtf16String* argv ) {
			_statusHandle = Advapi32Api.RegisterServiceCtrlHandlerW( "BamelgForwarder", ServiceControlHandler );
			if( _statusHandle == null ) return;

			// @{ start pending
			var status = new SERVICE_STATUS {
				dwServiceType = ServiceType.SERVICE_WIN32_OWN_PROCESS,
				dwControlsAccepted = 0,
				dwCurrentState = ServiceStatus.SERVICE_START_PENDING,
				dwWin32ExitCode = 0,
				dwServiceSpecificExitCode = 0,
				dwCheckPoint = 0
			};

			Advapi32Api.SetServiceStatus( _statusHandle, &status );
			// @}

			_eventLoop = new EventLoop();

			ApplySettings();

			// @{ running
			status.dwControlsAccepted = ServiceAcceptedControl.SERVICE_ACCEPT_STOP;
			status.dwCurrentState = ServiceStatus.SERVICE_RUNNING;
			status.dwWin32ExitCode = 0;
			status.dwCheckPoint = 1;

			Advapi32Api.SetServiceStatus( _statusHandle, &status );
			// @}

			_eventLoop.Dispatch();

			// @{ stopped
			status.dwControlsAccepted = 0;
			status.dwCurrentState = ServiceStatus.SERVICE_STOPPED;
			status.dwWin32ExitCode = 0;
			status.dwCheckPoint = 3;

			Advapi32Api.SetServiceStatus( _statusHandle, &status );
			// @}
		}

		[CallingConvention( Value = NtApi.DefaultCallingConvention )]
		public static void ServiceControlHandler( uint dwControl ) {
			switch( dwControl ) {
				case ServiceControl.SERVICE_CONTROL_STOP: {
						var status = new SERVICE_STATUS {
							dwServiceType = ServiceType.SERVICE_WIN32_OWN_PROCESS,
							dwControlsAccepted = 0,
							dwCurrentState = ServiceStatus.SERVICE_STOP_PENDING,
							dwWin32ExitCode = 0,
							dwServiceSpecificExitCode = 0,
							dwCheckPoint = 2
						};

						Advapi32Api.SetServiceStatus( _statusHandle, &status );

						_eventLoop.RequestExit();
					} break;
			}
		}

		private static WinsockInitializer _winsockInitializer = new WinsockInitializer();

		internal static Dictionary<CUtf16StringSpan, Connector> _connectorsByName = new Dictionary<CUtf16StringSpan, Connector>();

		[EntryPoint]
		private static void Main() {
			HKEY.OnError = ( errorCode, context ) => {
				if( App.Options.Trace )
					using( Console.AttributedRegion( RgbColor.Red ) )
						Console.WriteLine( "{0} == {1}", context, errorCode );
			};

			var runService = false;
			for( var i = 0; i < Environment.CommandLine.Length; ++i ) {
				switch( Environment.CommandLine[i] ) {
					case "/service": runService = true; break;
				}
			}

			if( runService ) {
				Advapi32Api.StartServiceCtrlDispatcher( ServiceTable );
			}
			else {
				var eventLoop = new EventLoop();
				// eventLoop.Tracing = true;
				eventLoop.CatchConsoleQuit();

				var setupServer = new HttpApiServer() {
					ClientFiberStackPages = 16
				};

				var setupEndpoint = new IPv4Endpoint( IPv4Address.Loopback, 4015 );

				ApplySettings();

				if( Options.HttpApi ) {
					if( !setupServer.Listen( setupEndpoint ) ) {
						if( Options.Trace ) Console.WriteLine( @"Unable to bind {0}", setupEndpoint );
					}
					else {
						if( Options.Trace ) Console.WriteLine( @"Listen status: http://{0}", setupEndpoint );
					}
				}

				eventLoop.Dispatch();
			}
		}

		internal static yield<Tuple<string, string>> EnumerateComPorts() {
			using( var commKey = HKEY.HKEY_LOCAL_MACHINE.OpenRead( @"HARDWARE\DEVICEMAP\SERIALCOMM" ) )
				foreach( var serialName in commKey.GetValues() )
					yield return new Tuple<string, string>( @"\\.\" + commKey.ValueString[serialName.Name], serialName.Name );
		}

		static Binder.MapperUtf16 _endpointMapper = new Binder.MapperUtf16( 32 );

		static App() {
			_endpointMapper.Add( "", memberinfo( Endpoint.Type ) );
			_endpointMapper.Add( memberinfo( Endpoint.PacketsReaden ) );
			_endpointMapper.Add( memberinfo( Endpoint.BytesReaden ) );
			_endpointMapper.Add( memberinfo( Endpoint.IsHold ) );
			_endpointMapper.Add( memberinfo( Endpoint.IsReadable ) );
			_endpointMapper.Add( memberinfo( Endpoint.IsWritable ) );

			_endpointMapper.Add( memberinfo( Endpoint.TCPKeepAliveTimeout ) );
			_endpointMapper.Add( memberinfo( Endpoint.TCPKeepAliveInterval ) );

			_endpointMapper.Add( memberinfo( Endpoint.SerialPortReadIntervalTimeout ) );
			_endpointMapper.Add( memberinfo( Endpoint.SerialPortPath ) );
			_endpointMapper.Add( memberinfo( Endpoint.SerialPortParity ) );
			_endpointMapper.Add( memberinfo( Endpoint.SerialPortBaudRate ) );
			_endpointMapper.Add( memberinfo( Endpoint.SerialPortStopBits ) );

			_endpointMapper.Add( memberinfo( Endpoint.TCPv4Endpoint ) );
			_endpointMapper.Add( memberinfo( Endpoint.TCPv4Interface ) );

			_endpointMapper.Add( memberinfo( Endpoint.TCPv4ServerEndpoint ) );

			_endpointMapper.Add( memberinfo( Endpoint.TCPv6Endpoint ) );
			_endpointMapper.Add( memberinfo( Endpoint.TCPv6Interface ) );

			_endpointMapper.Add( memberinfo( Endpoint.TCPv6ServerEndpoint ) );

			_endpointMapper.Add( memberinfo( Endpoint.UDPv4BindEndpoint ) );
			_endpointMapper.Add( memberinfo( Endpoint.UDPv4MulticastInterface ) );
			_endpointMapper.Add( memberinfo( Endpoint.UDPv4ReadEndpoint ) );
			_endpointMapper.Add( memberinfo( Endpoint.UDPv4WriteEndpoint ) );

			_endpointMapper.Add( memberinfo( Endpoint.NamedPipePath ) );
			_endpointMapper.Add( memberinfo( Endpoint.NamedPipeServerPath ) );

			_endpointMapper.Apply();
		}

		private static void ApplySettings() {
			var appMapper = new Binder.MapperUtf16( typeof( AppSettings ) );

			using( var root = HKEY.HKEY_LOCAL_MACHINE.OpenRead( RegistrySettingsPath ) ) {
				if( !root.IsValid ) { Console.WriteLine( "Unable to read settings from '{0}'", RegistrySettingsPath ); return; }

				root.GetValues( appMapper.Binder.CreateContext( &Options ), appMapper );

				if( Options.Trace ) Console.WriteConcatLine( "Options: ", Options );

				if( Options.Trace ) {
					foreach( var info in EnumerateComPorts() )
						Console.WriteLine( @"Found serial port: {0} <- {1}", info.Item1, info.Item2 );
				}

				foreach( var connectorName in root.GetKeys() ) {
					using( var connectorKey = root.OpenRead( connectorName ) ) {
						var connector = new Connector() {
							Name = connectorName
						};

						foreach( var endpointName in connectorKey.GetKeys() ) {
							var currentEndpoint = &connector.Endpoint1;
							if( *currentEndpoint != null ) currentEndpoint = &connector.Endpoint2;
							if( *currentEndpoint != null ) {
								if( Options.Trace ) Console.WriteLine( "{0}: Unused endpoint '{1}'", connector, endpointName );
								continue;
							}

							using( var endpointKey = connectorKey.OpenRead( endpointName ) ) {
								var ep = new Endpoint() { Name = endpointName };
								endpointKey.GetValues( _endpointMapper.Binder.CreateContext( &ep ), _endpointMapper );

								if( !( ep.IsReadable | ep.IsWritable ) ) {
									Console.WriteLine( "{0}: Endpoint '{1}' must be readable or writable, or both", connector, endpointName );
									continue;
								}

								*currentEndpoint = ep;
							}
						}

						if( connector.Endpoint1 != null && connector.Endpoint2 != null ) {
							_connectorsByName.Add( connector.Name, connector );

							if( connector.Endpoint1.IsReadable | connector.Endpoint2.IsReadable ) {
								if( Options.Trace ) Console.WriteLine( "{0}: Begin dispatch", connector );
								connector.Run();
							}
							else {
								Console.WriteLine( "{0}: At least one endpoint must be readable", connector );
							}
						}
						else
							Console.WriteLine( "Not sufficient valid endpoints specified for '{0}'", connectorName );
					}
				}
			}
		}

		public static void ReloadSettings() {
			foreach( var connector in _connectorsByName.Values )
				connector.Stop();

			_connectorsByName.Clear();

			ApplySettings();
		}

		public static void SaveSettings() {
			var appMapper = new Binder.MapperUtf16( typeof( AppSettings ) );

			using( var root = HKEY.HKEY_LOCAL_MACHINE.OpenOrCreate( RegistrySettingsPath ) ) {
				if( !root.IsValid ) { Console.WriteLine( "Unable to save settings to '{0}'", RegistrySettingsPath ); return; }

				root.SetValues( appMapper.Binder.CreateContext( &Options ), appMapper );

				foreach( var connectorName in root.GetKeysReversed() )
					if( !_connectorsByName.ContainsKey( connectorName ) )
						root.DeleteTree( connectorName );

				foreach( var connector in _connectorsByName.Values ) {
					using( var connectorKey = root.OpenOrCreate( connector.Name ) ) {
						foreach( var endpointName in connectorKey.GetKeysReversed() ) {
							if( endpointName != connector.Endpoint1.Name && endpointName != connector.Endpoint2.Name ) {
								connectorKey.DeleteTree( endpointName );
								continue;
							}
						}

						using( var endpointKey = connectorKey.OpenOrCreate( connector.Endpoint1.Name ) )
							endpointKey.SetValues( _endpointMapper.Binder.CreateContext( &connector.Endpoint1 ), _endpointMapper );
						using( var endpointKey = connectorKey.OpenOrCreate( connector.Endpoint2.Name ) )
							endpointKey.SetValues( _endpointMapper.Binder.CreateContext( &connector.Endpoint2 ), _endpointMapper );
					}
				}
			}
		}

		public const string RegistrySettingsPath = @"SOFTWARE\Eugeny Grishul\BamelgForwarder";
	}

	public class Connector : IFormattable {
		public string Name;
		public Endpoint Endpoint1, Endpoint2;
		public Fiber RestarterFiber = Fiber.Null;

		public Connector() {
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.AppendFormat( "'{0}': {1} <-> {2}", Name, Endpoint1, Endpoint2 );
		}

		private Fiber.Semaphore _exit = new Fiber.Semaphore();
		private Fiber.Semaphore _restart = new Fiber.Semaphore();

		private void StartFibers() {
			Endpoint1.ControlFiber = Fiber.Start( App.Options.PagesPerControlFiber, () => Transfer( Endpoint1, Endpoint2 ), App.Options.Trace ? Endpoint1.Name + " connector" : null );
			Endpoint2.ControlFiber = Fiber.Start( App.Options.PagesPerControlFiber, () => Transfer( Endpoint2, Endpoint1 ), App.Options.Trace ? Endpoint2.Name + " connector" : null );
		}

		public void Stop() {
			Endpoint1.ControlFiber.Cancel(); Endpoint1.ControlFiber = Fiber.Null;
			Endpoint2.ControlFiber.Cancel(); Endpoint2.ControlFiber = Fiber.Null;

			Endpoint1.WriteFiber.Cancel();
			Endpoint2.WriteFiber.Cancel();
		}

		private void PrepareEndpoints() {
			PrepareEndpoint( Endpoint1 );
			PrepareEndpoint( Endpoint2 );

			if( !Endpoint1.IsHold & !Endpoint2.IsHold ) // at least one endpoint must be listening
				Endpoint1.IsHold = Endpoint2.IsHold = true;
		}

		private void PrepareEndpoint( Endpoint endpoint ) {
			endpoint.Connector = this;
			AddReference();
			if( !endpoint.IsReadable & !endpoint.IsWritable ) endpoint.IsReadable = endpoint.IsWritable = true;
		}

		public void Run() {
			PrepareEndpoints();
			EventLoop.Instance.BeginInvoke( StartFibers );
		}

		public void Restart() {
			if( RestarterFiber == Fiber.Null ) {
				AddReference();

				RestarterFiber = Fiber.Start( App.Options.PagesPerRestarterFiber, Restarter, App.Options.Trace ? Name + " restarter" : null );
			}
			else
				_restart.Increment();
		}

		private void Restarter() {
			while( !Fiber.IsCancelled ) {
				if( App.Options.Trace ) Console.WriteLine( "{0}: stopping endpoints", Name );
				Stop();

				_exit.Decrement(); _exit.Decrement();

				if( App.Options.Trace ) Console.WriteLine( "{0}: restarting endpoints", Name );
				PrepareEndpoints();
				StartFibers();

				using( Fiber.CancellationRegion() )
					_restart.Wait();
			}

			ReleaseReference();
		}

		private void Transfer( Endpoint source, Endpoint destination ) {
			while( !Fiber.IsCancelled ) {
				using( Fiber.CancellationRegion() ) {
					if( source.IsHold || destination.IsAlive ) {
						var isConnected = source.Connect();

						if( !isConnected ) {
							if( App.Options.Trace ) Console.WriteLine( "{0}: Connect failed", source );

							Fiber.Sleep( App.Options.RestoreTimeout );
							destination.ResetNonKeepAlive();
							continue;
						}

						if( App.Options.Trace ) Console.WriteLine( "{0}: Connected", source );
					}
					else {
						source.Close();
						destination.StatusChanged.Wait();
						if( Fiber.IsCancelled ) break;
						continue;
					}
				}

				var sem = new Fiber.Semaphore();
				source.WriteFiber = Fiber.Start( App.Options.PagesPerTransferFiber, () => {
					using( Fiber.CancellationRegion() )
						source.WriteTo( destination );
					sem.Increment();
				}, App.Options.Trace ? source.Name + " r/w" : null );

				sem.Decrement();

				destination.ResetNonKeepAlive();
			}

			_exit.Increment();

			source.Close();
			source.Connector = null;
			ReleaseReference();
		}
	}

	public enum EndpointType {
		SerialPort,      // Serial port, SerialPortPath = \\.\COM1
		TCPv4,           // TCP v4 client, TCPv4Endpoint = 127.0.0.1:4010
		TCPv4Server,     // TCP v4 server, TCPv4ServerEndpoint = 0.0.0.0:4010
		TCPv6,           // TCP v6 client, TCPv6Endpoint = [::1]:2346
		TCPv6Server,     // TCP v6 server, TCPv6ServerEndpoint = [::1]:2346
		UDPv4,           // UDP v4 client, UDPv4Endpoint = 127.0.0.1:4010
		NamedPipe,       // Named pipe client, NamedPipePath = \\.\pipe\PipeName
		NamedPipeServer, // Named pipe, NamedPipeServerPath = \\.\pipe\PipeName
	}

	public class Endpoint : NetworkClient, IPlatformErrorHandler, IFormattable {
		internal Fiber ControlFiber = Fiber.Null, WriteFiber = Fiber.Null;

		public string Name;
		internal Connector Connector;

		public int ReconnectCount;

		public EndpointType Type;

		/// Don't drop active connection when other end down
		public bool IsHold { get; set; } = true;

		/// Is endpoint readable
		public bool IsReadable { get; set; } = true;

		/// Is endpoint writable
		public bool IsWritable { get; set; } = true;

		// @{ serial port settings

		/// Path to serial port device '\\.\COM6'
		public string SerialPortPath;

		/// See http://msdn.microsoft.com/ru-ru/library/windows/desktop/aa363190(v=vs.85).aspx
		public uint SerialPortReadIntervalTimeout = 10;

		private uint _serialPortBaudRate;
		public bool IsSerialPortBaudRateOverriden;
		public uint SerialPortBaudRate { get { return _serialPortBaudRate; } set { _serialPortBaudRate = value; IsSerialPortBaudRateOverriden = true; } }

		private DCB.ParityScheme _serialPortParity;
		public bool IsSerialPortParityOverriden;
		public DCB.ParityScheme SerialPortParity { get { return _serialPortParity; } set { _serialPortParity = value; IsSerialPortParityOverriden = true; } }

		private DCB.StopBitsValue _serialPortStopBits;
		public bool IsSerialPortStopBitsOverriden;
		public DCB.StopBitsValue SerialPortStopBits { get { return _serialPortStopBits; } set { _serialPortStopBits = value; IsSerialPortStopBitsOverriden = true; } }
		// @}

		// @{ TCP settings
		public TimeSpan TCPKeepAliveTimeout;
		public TimeSpan TCPKeepAliveInterval;
		// @}

		// @{ TCPv4 settings
		public IPv4Endpoint TCPv4Endpoint;
		public IPv4Address TCPv4Interface;
		// @}

		// @{ TCPv4Server settings
		public IPv4Endpoint TCPv4ServerEndpoint;
		// @}

		// @{ TCPv6 settings
		public IPv6Endpoint TCPv6Endpoint;
		public IPv6Address TCPv6Interface;
		// @}

		// @{ TCPv6Server settings
		public IPv6Endpoint TCPv6ServerEndpoint;
		// @}

		// @{ UDPv4 settings
		public IPv4Endpoint UDPv4BindEndpoint;
		public IPv4Address UDPv4MulticastInterface;
		public IPv4Endpoint UDPv4ReadEndpoint;
		public IPv4Endpoint UDPv4WriteEndpoint;
		// @}

		// @{ NamedPipe settings
		public string NamedPipePath;
		// @}

		// @{ NamedPipeServer settings
		public string NamedPipeServerPath;
		// @}

		internal Fiber.Semaphore StatusChanged = new Fiber.Semaphore();
		private bool _isAlive;
		public bool IsAlive {
			get {
				return _isAlive;
			}
			private set {
				if( _isAlive == value ) return;
				_isAlive = value;
				StatusChanged.Increment();
			}
		}

		public int PacketsReaden; // well-tuned serial port feed application with OS-buffered packets, bad serial port will awake app after each byte
		public ulong BytesReaden;

		public void Merge( Endpoint other ) {
			Name = other.Name;

			Type = other.Type;
			IsHold = other.IsHold;
			IsReadable = other.IsReadable;
			IsWritable = other.IsWritable;

			SerialPortPath = other.SerialPortPath;
			SerialPortReadIntervalTimeout = other.SerialPortReadIntervalTimeout;

			IsSerialPortBaudRateOverriden = other.IsSerialPortBaudRateOverriden;
			SerialPortBaudRate = other.SerialPortBaudRate;

			IsSerialPortParityOverriden = other.IsSerialPortParityOverriden;
			SerialPortParity = other.SerialPortParity;

			IsSerialPortStopBitsOverriden = other.IsSerialPortStopBitsOverriden;
			SerialPortStopBits = other.SerialPortStopBits;

			TCPKeepAliveTimeout = other.TCPKeepAliveTimeout;
			TCPKeepAliveInterval = other.TCPKeepAliveInterval;

			TCPv4Endpoint = other.TCPv4Endpoint;
			TCPv4Interface = other.TCPv4Interface;

			TCPv4ServerEndpoint = other.TCPv4ServerEndpoint;

			TCPv6Endpoint = other.TCPv6Endpoint;
			TCPv6Interface = other.TCPv6Interface;

			TCPv6ServerEndpoint = other.TCPv6ServerEndpoint;

			UDPv4BindEndpoint = other.UDPv4BindEndpoint;
			UDPv4MulticastInterface = other.UDPv4MulticastInterface;
			UDPv4ReadEndpoint = other.UDPv4ReadEndpoint;
			UDPv4WriteEndpoint = other.UDPv4WriteEndpoint;

			NamedPipePath = other.NamedPipePath;
			NamedPipeServerPath = other.NamedPipeServerPath;

			ReconnectCount = 0;
			PacketsReaden = 0;
			BytesReaden = 0;
		}

		public Endpoint() {
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.AppendFormat( "{0}( {1}:", Name, Type );

			switch( Type ) {
				case EndpointType.SerialPort:
					builder.Append( SerialPortPath );
					if( IsSerialPortBaudRateOverriden ) builder.Concat( " ", memberinfo( SerialPortBaudRate ).Name, "=", SerialPortBaudRate );
					if( IsSerialPortParityOverriden ) builder.Concat( " ", memberinfo( SerialPortParity ).Name, "=", SerialPortParity );
					if( IsSerialPortStopBitsOverriden ) builder.Concat( " ", memberinfo( SerialPortStopBits ).Name, "=", SerialPortStopBits );
					break;

				case EndpointType.TCPv4: builder.Append( TCPv4Endpoint ); break;
				case EndpointType.TCPv4Server: builder.Append( TCPv4ServerEndpoint ); break;
				case EndpointType.TCPv6: builder.Append( TCPv6Endpoint ); break;
				case EndpointType.TCPv6Server: builder.Append( TCPv6ServerEndpoint ); break;
				case EndpointType.UDPv4: builder.Concat( UDPv4ReadEndpoint, "<->", UDPv4WriteEndpoint ); break;
				case EndpointType.NamedPipe: builder.Append( NamedPipePath ); break;
				case EndpointType.NamedPipeServer: builder.Append( NamedPipeServerPath ); break;
			}

			// if( !IsAlive ) builder.Concat( "", memberinfo( IsAlive ).Name, "=", IsAlive );

			builder.Append( " )" );
		}

		public PlatformErrorAction OnError( string operation, IFormattable context, SystemErrorCode errorCode ) {
			IsAlive = false;

			if( App.Options.Trace )
				using( Console.AttributedRegion( RgbColor.Red ) )
					Console.WriteLine( "{0}: {1} {2} {3}", this, context, operation, errorCode );

			return PlatformErrorAction.Default;
		}

		public void ResetNonKeepAlive() {
			if( IsHold ) return;

			var cancel = IsReadable & IsAlive;
			if( App.Options.Trace ) Console.WriteLine( "Reset non-hold endpoint '{0}': {1}", this, cancel );
			if( cancel ) WriteFiber.Cancel();
		}

		public void WriteTo( Endpoint destination ) {
			StreamingBufferInfo* bufferInfo;
			var bufferedStream = _stream.GetBufferedReadStream( bufferInfo );

			for( ; !Fiber.IsCancelled & IsAlive; ) {
				if( bufferInfo->AvailableToRead < bufferInfo->Capacity / 2 ) bufferedStream.Flush( FlushKind.Read );
				if( bufferInfo->AvailableToRead == 0 ) {
					if( App.Options.TraceTransfer ) Console.WriteLine( "{0}: read stream end", this );
					if( Type == EndpointType.SerialPort ) continue;
					IsAlive = Fiber.IsCancelled;
					return;
				}

				++PacketsReaden;
				BytesReaden += bufferInfo->AvailableToRead;

				if( App.Options.TraceTransfer ) Console.WriteLine( "{0}: Transfer {1} bytes to {2}", this, bufferInfo->AvailableToRead, destination );

				if( destination.IsAlive ) {
					if( destination.IsWritable ) destination._stream.Write( bufferInfo->ReadBufferStart, bufferInfo->AvailableToRead );
				}
				else {
					if( !IsHold ) break;
				}

				bufferInfo->OnReadPerformed( bufferInfo->AvailableToRead );
			}
		}

		public void Close() {
			_stream = null;
			IsAlive = false;
		}

		public bool Connect() {
			Close();
			++ReconnectCount;

			switch( Type ) {
				case EndpointType.SerialPort: {
						var fs = new Platform.IO.FileStream() {
							ErrorHandler = ErrorHandler
						};

						if( fs.Open( SerialPortPath, FileAccessRights.GENERIC_WRITE | FileAccessRights.GENERIC_READ, FileCreationDisposition.OPEN_EXISTING ) ) {
							var name2 = SerialPortPath;
							if( name2.StartsWith( @"\\.\" ) ) name2 = name2.Substring( 4 );

							var defaultConfig = default( COMMCONFIG );
							uint defaultConfigSize = sizeof( defaultConfig );
							bool gotDefaults = Kernel32Api.GetDefaultCommConfig( name2, defaultConfig, defaultConfigSize );
							if( gotDefaults ) {
								if( App.Options.Trace )
									using( Console.AttributedRegion( RgbColor.Yellow ) )
										Console.WriteLine( "Serial port defaults for '{0}': '{1}'", name2, defaultConfig.dcb );
							}
							else {
								if( App.Options.Trace ) Console.WriteLine( "Unable to retrieve serial port defaults for '{0}'", name2 );
							}

							var dcb = new DCB();

							if( gotDefaults ) {
								defaultConfig.dcb.fDtrControl = DCB.DtrControl.DTR_CONTROL_ENABLE;
								defaultConfig.dcb.fRtsControl = DCB.RtsControl.RTS_CONTROL_TOGGLE;
								if( IsSerialPortBaudRateOverriden ) defaultConfig.dcb.BaudRate = SerialPortBaudRate;
								if( IsSerialPortStopBitsOverriden ) defaultConfig.dcb.StopBits = SerialPortStopBits;
								if( IsSerialPortParityOverriden ) {
									defaultConfig.dcb.fParity = SerialPortParity != DCB.ParityScheme.NOPARITY;
									defaultConfig.dcb.Parity = SerialPortParity;
								}

								if( Kernel32Api.SetCommState( fs.Handle, &defaultConfig.dcb ) ) {
									if( App.Options.Trace ) Console.WriteLine( "Set DCB '{0}': '{1}'", name2, defaultConfig.dcb );
								}
								else {
									if( App.Options.Trace ) Console.WriteLine( "Unable to set DCB for '{0}': '{1}'", name2, defaultConfig.dcb );
								}
							}

							if( !Kernel32Api.GetCommState( fs.Handle, &dcb ) )
								if( App.Options.Trace ) Console.WriteLine( "Unable to get DCB for '{0}'", name2 );

							if( App.Options.Trace ) {
								using( Console.AttributedRegion( RgbColor.Yellow ) )
									Console.WriteLine( "Active DCB for '{0}': '{1}'", name2, dcb );
							}

							var timeouts = new COMMTIMEOUTS {
								ReadIntervalTimeout = SerialPortReadIntervalTimeout,
								ReadTotalTimeoutMultiplier = 0,
								ReadTotalTimeoutConstant = 0,

								WriteTotalTimeoutMultiplier = 0,
								WriteTotalTimeoutConstant = 0
							};

							if( !Kernel32Api.SetCommTimeouts( fs.Handle, &timeouts ) )
								if( App.Options.Trace ) Console.WriteLine( "Unable to set timeouts for '{0}'", name2 );

							_stream = fs;
							return IsAlive = true;
						}

						break;
					}

				case EndpointType.UDPv4: {
						var socket = new SocketHandleUDP();

						var ns = new Platform.IO.UdpStream( socket ) {
							ErrorHandler = ErrorHandler,
							LastReceiveFrom = new WsaAddress( UDPv4ReadEndpoint ),
							WriteEndpoint = new WsaAddress( UDPv4WriteEndpoint )
						};

						if( UDPv4ReadEndpoint.Address.IsMulticast ) {
							var mreq = new ip_mreq {
								imr_multiaddr = UDPv4WriteEndpoint.Address,
								imr_interface = UDPv4MulticastInterface
							};

							ns.AddMembership( mreq );

							if( !ns.Bind( UDPv4BindEndpoint ) ) break;
						}
						else {
							if( !ns.Bind( UDPv4BindEndpoint ) ) break;
						}

						_stream = ns;
						return IsAlive = true;
					} break;

				case EndpointType.TCPv4: IsAlive = Connect( TCPv4Endpoint, TCPv4Interface ); ApplyTcpSettings(); break;
				case EndpointType.TCPv4Server: IsAlive = Accept( TCPv4ServerEndpoint ); ApplyTcpSettings(); break;
				case EndpointType.TCPv6: IsAlive = Connect( TCPv6Endpoint, TCPv6Interface ); ApplyTcpSettings(); break;
				case EndpointType.TCPv6Server: IsAlive = Accept( TCPv6ServerEndpoint ); ApplyTcpSettings(); break;

				case EndpointType.NamedPipe: return IsAlive = ConnectLocal( NamedPipePath );
				case EndpointType.NamedPipeServer: return IsAlive = AcceptLocal( NamedPipeServerPath );
			}

			return IsAlive;
		}

		protected void ApplyTcpSettings() {
			if( !IsAlive ) return;

			var stream = _stream as NetworkStream;
			if( stream == null ) return;

			var settings = new tcp_keepalive {
				onoff = 1,
				keepalivetime = ( uint ) TCPKeepAliveTimeout.TotalMilliseconds,
				keepaliveinterval = ( uint ) TCPKeepAliveInterval.TotalMilliseconds
			};

			if( settings.keepalivetime == 0 || settings.keepaliveinterval == 0 ) return;

			WinsockApi.SetTcpKeepAlive( stream.Handle, settings );
		}

		protected override IPlatformErrorHandler ErrorHandler { get { return this; } }
	}
}