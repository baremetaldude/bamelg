//
// Created by %USERNAME%
//

using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Runtime;
using System.Serialization;

using Platform;

namespace Example {
	class Test {
		// By default metadata for fields, properties, methods not generated for classes/structs
		// 'ReflectionMetadataAttribute' used to modify default behaviour and specify which metadata you are interesting in. Serialization code use metadata to detect which fields and properties need to be serialized
		[ReflectionMetadata( Mask = ReflectionMetadata.PublicFields | ReflectionMetadata.NonPublicFields )] // generate metadata for public and non-public fields inside 'SerializedStructure'
		public struct SerializedStructure {
			SerializedStructure() { }

			sbyte SByte;
			byte Byte;

			short_littleendian ShortLE;
			ushort_littleendian UShortLE;

			short_bigendian ShortBE;
			ushort_bigendian UShortBE;

			int Int;
			uint UInt;

			long Long;
			ulong ULong;

			SbcsString SbcsString;
			Utf8String Utf8String;
			string Utf16String;
			Utf32String Utf32String;

			float Float;
			double Double;

			TestEnum EnumValue;

			Guid Guid;

			DateTime DateTime;
			TimeSpan TimeSpan;

			IPv4Address IPv4Address;
			IPv4Endpoint IPv4Endpoint;

			byte[] Array;

			static void EnsureEquals( SerializedStructure& x, SerializedStructure& y ) {
				Assert.IsTrue( x.SByte == y.SByte );
				Assert.IsTrue( x.Byte == y.Byte );
				Assert.IsTrue( x.ShortLE == y.ShortLE );
				Assert.IsTrue( x.UShortLE == y.UShortLE );
				Assert.IsTrue( x.ShortBE == y.ShortBE );
				Assert.IsTrue( x.UShortBE == y.UShortBE );
				Assert.IsTrue( x.UInt == y.UInt );
				Assert.IsTrue( x.Long == y.Long );
				Assert.IsTrue( x.ULong == y.ULong );
				Assert.IsTrue( x.EnumValue == y.EnumValue );
				Assert.IsTrue( x.SbcsString == y.SbcsString );
				Assert.IsTrue( x.Utf8String == y.Utf8String );
				Assert.IsTrue( x.Utf16String == y.Utf16String );
				Assert.IsTrue( x.Utf32String == y.Utf32String );
				Assert.IsTrue( x.Float == y.Float );
				Assert.IsTrue( x.Double == y.Double );
				Assert.IsTrue( x.Guid == y.Guid );
				Assert.IsTrue( x.DateTime == y.DateTime );
				Assert.IsTrue( x.TimeSpan == y.TimeSpan );
				Assert.IsTrue( x.IPv4Address == y.IPv4Address );
				Assert.IsTrue( x.IPv4Endpoint == y.IPv4Endpoint );
				Assert.IsTrue( CommonCollectionOperations.Compare<byte>( x.Array, y.Array ) );
			}

			public static Binder.MapperUtf16 MapperUtf16 = new Binder.MapperUtf16( typeof( thistype ) );
		}

		public enum TestEnum {
			Element1,
			Element2,
			Element3,
		}

		[EntryPoint]
		public static void Main() {
			for( var i = 0U; i < typeof( TestEnum ).ElementCount; ++i ) {
				var element = enumvalue<TestEnum>( i );
				Console.WriteLine( "Element[{0}]: {1}", element.GetIndex(), element );
			}

			var x = new SerializedStructure() {
				SByte = 1,
				Byte = 2,
				ShortLE = 3,
				UShortLE = 4,
				Int = 5,
				UInt = 6,
				Long = 7,
				ULong = 8,
				ShortBE = 9,
				UShortBE = 10,
				EnumValue = TestEnum.Element2,
				Array = new[3] byte { 1, 2, 3 },

				SbcsString = new SbcsString( "XYZ1" ),
				Utf8String = new Utf8String( "XYZ2" ),
				Utf16String = new Utf16String( "XYZ3" ),
				Utf32String = new Utf32String( "XYZ4" ),

				Float = 10.5f,
				Double = 11.5,

				Guid = Guid.Parse( "{4C0B33B7-315A-4EF8-9627-10849850E053}" ),

				DateTime = new DateTime( 1986, 1, 5 ),
				TimeSpan = TimeSpan.FromMinutes( 6 ),

				IPv4Address = IPv4Address.Parse( "192.168.1.1" ),
				IPv4Endpoint = IPv4Endpoint.Parse( "192.168.1.2:3456" )
			};

			{
				Console.WriteLine( "== Check binary serializer: FileStream ==" );
				SerializedStructure y;

				using( var stream = File.OpenWrite( "SerializedData.bin" ) )
				using( var writer = new BinaryWriter( stream ) )
					BinarySerializer<SerializedStructure>.Serialize( x, writer );

				using( var stream = File.OpenRead( "SerializedData.bin" ) )
				using( var reader = new BinaryReader( stream ) )
					BinarySerializer<SerializedStructure>.Deserialize( y, reader );

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check ini serializer: FileStream ==" );
				SerializedStructure y;

				using( var stream = File.OpenWrite( "SerializedData.json" ) )
				using( var writer = new StreamWriter( stream ) )
					JsonSerializer<SerializedStructure>.Serialize( x, writer );

				// using( var stream = File.OpenRead( "SerializedData.ini" ) )
				// using( var reader = new StreamReader( stream ) )
				// 	JsonSerializer<SerializedStructure>.Deserialize( y, reader );

				// SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check ini serializer: FileStream ==" );
				SerializedStructure y;

				using( var stream = File.OpenWrite( "SerializedData.ini" ) )
				using( var writer = new StreamWriter( stream ) )
					IniSerializer<SerializedStructure>.Serialize( x, writer );

				using( var stream = File.OpenRead( "SerializedData.ini" ) )
				using( var reader = new StreamReader( stream ) )
					IniSerializer<SerializedStructure>.Deserialize( y, reader );

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check binary serializer: MemoryStream ==" );
				SerializedStructure y;

				using( var stream = new MemoryStream() ) {
					using( var writer = new BinaryWriter( stream ) )
						BinarySerializer<SerializedStructure>.Serialize( x, writer );

					stream.Position = 0;

					using( var reader = new BinaryReader( stream ) )
						BinarySerializer<SerializedStructure>.Deserialize( y, reader );
				}

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check registry binder ==" );
				SerializedStructure y;
				var mapper = SerializedStructure.MapperUtf16;

				using( var root = HKEY.HKEY_CURRENT_USER.OpenOrCreate( @"SOFTWARE\Eugeny Grishul\ReflectionSerialization" ) )
					root.SetValues( mapper.Binder.CreateContext( &x ), mapper );

				using( var root = HKEY.HKEY_CURRENT_USER.OpenRead( @"SOFTWARE\Eugeny Grishul\ReflectionSerialization" ) )
					root.GetValues( mapper.Binder.CreateContext( &y ), mapper );

				SerializedStructure.EnsureEquals( x, y );
			}
		}
	}
}