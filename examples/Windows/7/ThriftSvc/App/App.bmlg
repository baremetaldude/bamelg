//
// Created by $USER
//

using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Serialization.Thrift;

using Platform;
using Platform.IO;

namespace Example {
	public partial class App {
		static ushort TcpConnectionPort = 7070;
		static string NamedPipeConnectionPath = @"\\.\pipe\bamelg.thrift.example";

		static ushort TcpConnectionPortFramed = 7071;
		static string NamedPipeConnectionPathFramed = @"\\.\pipe\bamelg.thrift.example.framed";

		private static WinsockInitializer _winsockInitializer = new WinsockInitializer();

		[EntryPoint]
		private static void Main() {
			var eventLoop = new EventLoop(){ Tracing = true };
			eventLoop.CatchConsoleQuit(); // convert signals to events

			// @{ setup server

			var serverImpl = new ServerImpl();
			var requestHandler = new Svc2.RequestHandler( serverImpl );
			serverImpl.RequestHandler = requestHandler; // for sending exceptions

			var server = new ThriftServer( requestHandler );
			server.Framed = false;
			server.ExceptionHandler = serverImpl;

			var serverFramed = new ThriftServer( requestHandler );
			serverFramed.Framed = true;
			serverFramed.ExceptionHandler = serverImpl;

			Fiber.Start( 16, () => {
				var tcpListen = false;
				var tcpListenReported = false;

				var pipeListen = false;
				var pipeListenReported = false;

				var tcpListenFramed = false;
				var tcpListenReportedFramed = false;

				var pipeListenFramed = false;
				var pipeListenReportedFramed = false;

				while( true ) {
					if( !tcpListen ) {
						tcpListen = server.Listen( TcpConnectionPort );

						if( tcpListen )
							Console.WriteLine( "Listen TCP port {0}. Framed=false", TcpConnectionPort );
						else if( !tcpListenReported ) {
							Console.WriteLine( "Unable bind TCP port {0}", TcpConnectionPort );
							tcpListenReported = true;
						}
					}

					if( !pipeListen ) {
						pipeListen = server.Listen( NamedPipeConnectionPath );

						if( pipeListen )
							Console.WriteLine( "Listen named pipe '{0}'. Framed=false", NamedPipeConnectionPath );
						else if( !pipeListenReported ) {
							Console.WriteLine( "Unable to bind named pipe '{0}'", NamedPipeConnectionPath );
							pipeListenReported = true;
						}
					}

					if( !tcpListenFramed ) {
						tcpListenFramed = serverFramed.Listen( TcpConnectionPortFramed );

						if( tcpListenFramed )
							Console.WriteLine( "Listen TCP port {0}. Framed=true", TcpConnectionPortFramed );
						else if( !tcpListenReportedFramed ) {
							Console.WriteLine( "Unable bind TCP port {0}", TcpConnectionPortFramed );
							tcpListenReportedFramed = true;
						}
					}

					if( !pipeListenFramed ) {
						pipeListenFramed = serverFramed.Listen( NamedPipeConnectionPathFramed );

						if( pipeListenFramed )
							Console.WriteLine( "Listen named pipe '{0}'. Framed=true", NamedPipeConnectionPathFramed );
						else if( !pipeListenReportedFramed ) {
							Console.WriteLine( "Unable to bind named pipe '{0}'", NamedPipeConnectionPathFramed );
							pipeListenReportedFramed = true;
						}
					}
					var all = true;

					all &= tcpListen;
					all &= pipeListen;
					all &= tcpListenFramed;
					all &= pipeListenFramed;

					if( !all ) {
						using( new Fiber.CancellationRegion() ) {
							Fiber.Sleep( 1000 );
							if( Fiber.IsCancelled ) return;
						}

						continue;
					}

					break;
				}

				PrintConnectionOptions();
			}, "resource allocator" );

			// @}

			eventLoop.Dispatch();

			serverImpl.Dispose(); // break cycle refs
		}

		static void PrintConnectionOptions() {
			Console.WriteConcatLine( "Dispatching started: use port ", TcpConnectionPort, " or '", NamedPipeConnectionPath, "' to connect" );
		}

		public class ServerImpl : Svc2.IApi, IExceptionHandler {
			public Svc2.RequestHandler RequestHandler;

			public ServerImpl() {
			}

			public override void Dispose() {
				RequestHandler = null;

				base.Dispose();
			}

			public int add( int left, int right ) {
				return left + right;
			}

			public List<Utf8String> get_strings() {
				var result = new List<Utf8String>();
				result.Add( "yo1" );
				result.Add( "yo2" );
				result.Add( "yo3" );
				return result;
			}

			public Dictionary<Utf8String, Utf8String> echo( Dictionary<Utf8String, Utf8String> value ) {
				value.Add( "google", "maps.google.com" );
				value.Add( "yandex", "maps.yandex.ru" );
				return value;
			}

			public HashSet<Utf8String> get_strings2() {
				var result = new HashSet<Utf8String>();
				result.Add( "bamelg" );
				result.Add( "rocks" );
				return result;
			}

			public KVP echo2( KVP value ) {
				return value;
			}

			public void some_event( Utf8String text ) {
				Console.WriteLine( text );
			}

			public int ThrowException( int value ) {
				if( value == 1 ) { RequestHandler.SendException( new ExceptionWithMessage() { Text = "Exception message" } ); return 1; }
				else if( value == 2 ) { RequestHandler.SendException( new ExceptionWithCode() { Code = 111 } ); return 2; }

				return 333;
			}

			public void log( DateTime date, Guid id, Utf8String text ) {
				Console.WriteLine( "Time: {0} Text: {1} ID: {2}", date, text, id );
			}

			public void ts( List<TimeSpan> span ) {
				foreach( var value in span )
					Console.WriteLine( "TimeSpan: {0}", value );
			}

			void IExceptionHandler.OnException( ProtocolError error ) { Console.WriteLine( "THRIFT: ProtocolError={0}", error ); }
			void IExceptionHandler.OnException( ServerException exception ) { Console.WriteLine( "THRIFT: ServerException={0}", exception ); }
		}
	}
}