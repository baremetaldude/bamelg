/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Example
{
  public abstract partial class UVP : TAbstractBase {
    public abstract void Write(TProtocol protocol);
    public readonly bool Isset;
    public abstract object Data { get; }
    protected UVP(bool isset) {
      Isset = isset;
    }

    public class ___undefined : UVP {
      public override object Data { get { return null; } }
      public ___undefined() : base(false) {}

      public override void Write(TProtocol protocol) {
        throw new TProtocolException( TProtocolException.INVALID_DATA, "Cannot persist an union type which is not set.");
      }

    }

    public class name : UVP {
      private byte[] _data;
      public override object Data { get { return _data; } }
      public name(byte[] data) : base(true) {
        this._data = data;
      }
      public override void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UVP");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(_data);
          oprot.WriteFieldEnd();
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
      }
    }

    public class value : UVP {
      private byte[] _data;
      public override object Data { get { return _data; } }
      public value(byte[] data) : base(true) {
        this._data = data;
      }
      public override void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UVP");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(_data);
          oprot.WriteFieldEnd();
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
      }
    }

    public static UVP Read(TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        UVP retval;
        iprot.ReadStructBegin();
        TField field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop)
        {
          iprot.ReadFieldEnd();
          retval = new ___undefined();
        }
        else
        {
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                byte[] temp;
                temp = iprot.ReadBinary();
                retval = new name(temp);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
                retval = new ___undefined();
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                byte[] temp;
                temp = iprot.ReadBinary();
                retval = new value(temp);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
                retval = new ___undefined();
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              retval = new ___undefined();
              break;
          }
          iprot.ReadFieldEnd();
          if (iprot.ReadFieldBegin().Type != TType.Stop)
          {
            throw new TProtocolException(TProtocolException.INVALID_DATA);
          }
        }
        iprot.ReadStructEnd();
        return retval;
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
    }

  }

}
