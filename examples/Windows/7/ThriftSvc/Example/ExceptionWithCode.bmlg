//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Example {
	public partial struct ExceptionWithCode : IFormattable {
		private int _code;

		public int Code { get { return _code; } set { __isset.Code = true; _code = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool Code { get; set; }
		}

		public ExceptionWithCode() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Int32 ) {
							Code = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "ExceptionWithCode" );
			if( __isset.Code ) {
				writer.WriteFieldBegin( "Code", TypeKind.Int32, 1 );
				writer.WriteInt32( _code );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Code: ", Code );
		}
	}
}