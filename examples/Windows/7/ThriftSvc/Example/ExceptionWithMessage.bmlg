//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Example {
	public partial struct ExceptionWithMessage : IFormattable {
		private Utf8String _text;

		public Utf8String Text { get { return _text; } set { __isset.Text = true; _text = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool Text { get; set; }
		}

		public ExceptionWithMessage() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Text = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "ExceptionWithMessage" );
			if( Text != null && __isset.Text ) {
				writer.WriteFieldBegin( "Text", TypeKind.String, 1 );
				writer.WriteString( _text );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Text: ", Text );
		}
	}
}