//
// Created by Eugeny Grishul
//

using System;
using System.Collections;
using System.Globalization;
using System.IO;

using Platform;
using Platform.IO;

namespace Dmm {
	public partial class App {
		public const int TcpConnectionPort = 8080;
		public const Utf8String NamedPipeConnectionPath = @"\\.\pipe\BamelgDmmServer";

		private static WinsockInitializer _winsockInitializer = new WinsockInitializer();

		private static readonly EventLoop _eventLoop = new EventLoop() { Tracing = true };
		internal static List<DeviceHandler> _devices = new List<DeviceHandler>();

		public static DeviceHandler _debugDevice;
		public static readonly CustomHttpServer Server = new CustomHttpServer();

		static void Break() {
			System.Diagnostics.StackTrace.Print();
			System.Diagnostics.Debugger.Break();
		}

		internal static yield<Tuple<string, string>> EnumerateComPorts() {
			using( var commKey = HKEY.HKEY_LOCAL_MACHINE.OpenRead( @"HARDWARE\DEVICEMAP\SERIALCOMM" ) )
				foreach( var serialName in commKey.GetValues() )
					yield return new Tuple<string, string>( @"\\.\" + commKey.ValueString[serialName.Name], serialName.Name );
		}

		public static ILocalizer Localizer = AppLocalizer.EN.Instance;

		public static bool TraceEvents = true;

		public static string CommandLineSpecifiedPort, LastComPort;

		private enum CommandLineState : byte {
			None,
			WaitForPortName,
		}

		[EntryPoint]
		private static void Main() {
			switch( ( uint ) Kernel32Api.GetConsoleCP() ) {
				case 866:
					CultureInfo.Default = CultureInfo.Current = CultureInfo.RU;
					Localizer = AppLocalizer.RU.Instance;
					break;
			}

			var showUsage = false;
			var state = CommandLineState.None;
			for( uint i = 1; i < Environment.CommandLine.Length; ++i ) {
				switch( state ) {
					case CommandLineState.None:
						switch( Environment.CommandLine[i] ) {
							case "/port":
								state = CommandLineState.WaitForPortName;
								break;

							case "/help":
							case "/?":
								showUsage = true;
								break;
						}
						break;

					case CommandLineState.WaitForPortName:
						state = CommandLineState.None;
						CommandLineSpecifiedPort = Environment.CommandLine[i];
						break;
				}
			}

			if( state == CommandLineState.WaitForPortName ) {
				Console.WriteLine( "Serial port name expected" );
				Environment.ExitCode = 1;
				return;
			}

			if( showUsage ) {
				Console.WriteLine( "Usage:" );
				Console.WriteLine( "    DMM.EXE" );
				Console.WriteLine( @"    DMM.EXE /port \\.\COM1" );
				return;
			}

			_eventLoop.CatchConsoleQuit();

			_eventLoop.BeginInvoke( Initialize );

			_eventLoop.Dispatch();
		}

		static void Initialize() {
			Server.Attach( _eventLoop );

			Server.Listen( TcpConnectionPort );
			Server.Listen( NamedPipeConnectionPath );
			PrintConnectionOptions();

			_devices.Add( _debugDevice = new DeviceHandler() {
				SerialPortPath = CommandLineSpecifiedPort ?? LastComPort
			} );

			foreach( var device in _devices )
				device.Connect();
		}

		static void PrintConnectionOptions() {
			Console.WriteLine( "@{ Possible connection URLs:" );
			Console.WriteLine( "\thttp://127.0.0.1:{0}", TcpConnectionPort );
			Console.WriteLine( "\thttp://localhost:{0}", TcpConnectionPort );
			Console.WriteLine( "{0}", NamedPipeConnectionPath );
			Console.WriteLine( "@}" );

			foreach( var info in EnumerateComPorts() ) {
				Console.WriteLine( @"Found serial port: {0} <- {1}", info.Item1, info.Item2 );
				LastComPort = info.Item1;
			}
		}
	}

	public class DeviceHandler : IPlatformErrorHandler, IFormattable {
		public string SerialPortPath = @"\\.\COM4";
		public string Name = "UT61E";

		public FiberSlidingEventQueue<string> Events = new FiberSlidingEventQueue<string>( TimeSpan.FromMinutes( 1 ) );

		public bool Enabled = true;

		public DeviceHandler() {
		}

		public void ToString( StringBuilder result, string format ) {
			result.AppendFormat( "{0} ( {1} ); Events {{ {2} }}", Name, SerialPortPath, Events.Count );
		}

		#region event buffer

		public void AddEvent( string text ) {
			if( App.TraceEvents ) {
				using( Console.AttributedRegion( ConsoleColor.DarkGray ) )
					Console.WriteLine( text );
			}

			Events.Add( DateTime.UtcNow, text );
		}

		public void AddEvent( string format, vararg TypedReference parameters ) {
			if( App.TraceEvents ) {
				using( Console.AttributedRegion( ConsoleColor.DarkGray ) )
					Console.WriteLine( format, vararg( parameters, parameters.Length ) );
			}

			Events.Add( DateTime.UtcNow, string.Format( format, vararg( parameters, parameters.Length ) ) );
		}

		#endregion

		public void Connect() {
			Fiber.Start( 16, Connector, "serial connector" );
			// Fiber.Start( 16, ShuntTask, "shunt" );
		}

		private void Connector() {
			while( !Fiber.IsCancelled ) {
				ConnectorWorker();

				if( Enabled ) {
					using( Fiber.CancellationRegion() )
						Fiber.Sleep( 1000 );
				}
				else break;
			}
		}

		private bool TaskMeasureResistance = false, TaskMeasureResistanceStarted = false;
		private double MeasuredResistance;
		private Fiber.Semaphore _resistanceCompleted = new Fiber.Semaphore( 0 );
		private Delegates.Action<double> OnResistanceParsed;

		FixedPointSlidingQueue _resistance = new FixedPointSlidingQueue( TimeSpan.FromSeconds( 2 ), 100 );
		FixedPointSlidingQueue.AverageView _avgView = new FixedPointSlidingQueue.AverageView( _resistance, TimeSpan.FromSeconds( 2 ) );

		private void ShuntTask() {
			Console.WriteLine( "{0} ...", App.Localizer.MeasureProbeResistance );

			TaskMeasureResistance = true;
			using( Fiber.CancellationRegion() )
				_resistanceCompleted.Wait();
			if( Fiber.IsCancelled ) return;

			var probe = MeasuredResistance;
			Console.WriteLine( "{0}: {1}", App.Localizer.ProbeResistance, probe );

			Console.WriteLine( "{0} ...", App.Localizer.MeasureShuntResistance );
			TaskMeasureResistance = true;
			using( Fiber.CancellationRegion() )
				_resistanceCompleted.Wait();
			if( Fiber.IsCancelled ) return;

			var shunt = MeasuredResistance;
			shunt -= probe;
			Console.WriteLine( "{0}: {1}", App.Localizer.ShuntResistance, shunt );

			Console.WriteLine( "{0} ...", App.Localizer.MeasureShuntVoltage );

			OnResistanceParsed = data => {
				Console.WriteLine( "{0} A", data / shunt );
			};

			Fiber.FiberManager.Suspend();
		}

		private void ConnectorWorker() {
			StreamError = false;

			var fs = new Platform.IO.FileStream() {
				ErrorHandler = this
			};

			AddEvent( "Connecting to '{0}'", SerialPortPath );

			if( fs.Open( SerialPortPath, FileAccessRights.GENERIC_WRITE | FileAccessRights.GENERIC_READ, FileCreationDisposition.OPEN_EXISTING ) ) {
				var shortName = SerialPortPath;
				if( shortName.StartsWith( @"\\.\" ) ) shortName = shortName.Substring( 4 );

				fs.ReadTimeout = TimeSpan.FromSeconds( 3 );

				var dcb = new DCB() {
					// fBinary = true,
					// fOutxCtsFlow = true,
					fDtrControl = DCB.DtrControl.DTR_CONTROL_ENABLE,
					fRtsControl = DCB.RtsControl.RTS_CONTROL_DISABLE,
					BaudRate = 19200,
					StopBits = DCB.StopBitsValue.ONESTOPBIT,
					fParity = true,
					Parity = DCB.ParityScheme.ODDPARITY,
					ByteSize = 7
					// XonLim = 512,
					// XoffLim = 1
				};

				if( Kernel32Api.SetCommState( fs.Handle, &dcb ) ) {
					AddEvent( "Set DCB '{0}': '{1}'", shortName, dcb );
				}
				else {
					AddEvent( "Unable to set DCB for '{0}': '{1}'", shortName, dcb );
				}

				if( !Kernel32Api.GetCommState( fs.Handle, &dcb ) )
					AddEvent( "Unable to get DCB for '{0}'", shortName );

				using( Console.AttributedRegion( RgbColor.Yellow ) )
					AddEvent( "Active DCB for '{0}': '{1}'", shortName, dcb );

				var timeouts = new COMMTIMEOUTS {
					ReadIntervalTimeout = 10,
					ReadTotalTimeoutMultiplier = 0,
					ReadTotalTimeoutConstant = 0,

					WriteTotalTimeoutMultiplier = 0,
					WriteTotalTimeoutConstant = 0
				};

				if( !Kernel32Api.SetCommTimeouts( fs.Handle, &timeouts ) )
					AddEvent( "Unable to set timeouts for '{0}'", shortName );

				var bufferedStream = new BufferedReadStream( fs, 128 );
				var dmm = new Dmm.UT61E.Parser();

				var requestBuffer = bufferedStream.BufferInfo;
				var prevBufferLength = 0U;

				for( ; ; ) {
					using( Fiber.CancellationRegion() ) {
						bufferedStream.Flush( FlushKind.Read );
						// Console.WriteLine( "requestBuffer->AvailableToRead={0}", requestBuffer->AvailableToRead );
					}

					if( Fiber.IsCancelled || StreamError ) return;
					if( requestBuffer->AvailableToRead == prevBufferLength ) continue; // skip parsing on timeouts

					var result = dmm.Parse( requestBuffer->Start, requestBuffer->AvailableToRead );
					if( result ) {
						AddEvent( "Device data: {0}", dmm );

						if( TaskMeasureResistance ) {
							if( !TaskMeasureResistanceStarted && dmm.Value == Dmm.UT61E.Parser.ResistanceDisconnected ) {
								TaskMeasureResistanceStarted = true;
							}

							if( dmm.Mode == Dmm.UT61E.MeasurementMode.Resistance && TaskMeasureResistanceStarted ) {
								_resistance.Add( Fiber.UtcNow, dmm.Value );

								double dev = 0;
								foreach( var item in _resistance._values ) {
									dev += Math.Sqr( _resistance.ToFloating( item->Value ) - _avgView.Value );
								}

								dev /= _resistance.Count;
								dev = Math.Sqrt( dev );

								if( dev <= 0.01 && _resistance.BufferedTimeframe >= _resistance.Timeframe * 3 / 4 && _avgView.Value != 0 ) {
									MeasuredResistance = _avgView.Value;
									TaskMeasureResistance = TaskMeasureResistanceStarted = false;
									_resistanceCompleted.Increment();

									_resistance.Clear();
									// Console.WriteLine( "Resistance: {0}", MeasuredResistance );
								}

								// Console.WriteLine( "val={0}", dmm.Value );
								// Console.WriteLine( "avg={0}", _avgView.Value );
								// Console.WriteLine( "dev={0}", dev );
								// Console.WriteLine();
							}
						}
						else {
							if( dmm.Mode == Dmm.UT61E.MeasurementMode.Volts ) {
								if( OnResistanceParsed != null ) OnResistanceParsed( dmm.Value );
							}
							else if( dmm.Mode == Dmm.UT61E.MeasurementMode.MilliVolts ) {
								if( OnResistanceParsed != null ) OnResistanceParsed( dmm.Value );
							}
						}
					}
					else
						AddEvent( "parser error: {0}", result );

					bufferedStream.Drain( dmm.SkipBytes );
					prevBufferLength = requestBuffer->AvailableToRead;
				}
			}
		}

		bool StreamError = false;

		#region IPlatformErrorHandler Members

		public PlatformErrorAction OnError( string operation, IFormattable context, SystemErrorCode errorCode ) {
			var message = Kernel32Api.GetLastErrorMessage( errorCode );

			AddEvent( "'{0}': {1} {2} ( {3} )", context, operation, errorCode, message );

			switch( errorCode ) {
				case SystemErrorCode.ERROR_TIMEOUT:
				case SystemErrorCode.ERROR_OPERATION_ABORTED:
					break;

				default:
					StreamError = true;
					break;
			}

			return PlatformErrorAction.Default;
		}

		#endregion
	}

	public struct MemorySizeFormatterUInt64 : IFormattable {
		public ulong Value;

		public MemorySizeFormatterUInt64( ulong value ) { Value = value; }

		public void ToString( StringBuilder builder, string format ) {
			if( Value < 1024 ) builder.AppendFormat( "{0}", Value );
			else if( Value < 1024 * 1024 ) builder.AppendFormat( "{0:F1} KiB", Value / 1024.0 );
			else if( Value < 1024 * 1024 * 1024 ) builder.AppendFormat( "{0:F1} MiB", Value / ( double )( 1024 * 1024 ) );
			else if( Value < 1024UL * 1024 * 1024 * 1024 ) builder.AppendFormat( "{0:F1} GiB", Value / ( double )( 1024 * 1024 * 1024 ) );
			else if( Value < 1024UL * 1024 * 1024 * 1024 * 1024 ) builder.AppendFormat( "{0:F1} TiB", Value / ( double )( 1024UL * 1024 * 1024 * 1024 ) );
			else if( Value < 1024UL * 1024 * 1024 * 1024 * 1024 * 1024 ) builder.AppendFormat( "{0:F1} PiB", Value / ( double )( 1024UL * 1024 * 1024 * 1024 * 1024 ) );
		}
	}

	public struct VoltageFormatter : IFormattable {
		public double Value;

		public VoltageFormatter( double value ) { Value = value; }

		public void ToString( StringBuilder builder, string format ) {
			var value = Value;
			if( value < 0 ) {
				builder.Append( '-' );
				value = -value;
			}

			if( value < 1 ) builder.AppendFormat( "{0} mV", value * 1000 );
			else if( value < 1000 ) builder.AppendFormat( "{0:F1} V", value );
			else if( value < 1000 * 1000 ) builder.AppendFormat( "{0:F1} kV", value / 1000 );
		}
	}

	public struct WattFormatter : IFormattable {
		public double Value;

		public WattFormatter( double value ) { Value = value; }

		public void ToString( StringBuilder builder, string format ) {
			var value = Value;
			if( value < 0 ) {
				builder.Append( '-' );
				value = -value;
			}

			if( value < 1 ) builder.AppendFormat( "{0} mW", value * 1000 );
			else if( value < 1000 ) builder.AppendFormat( "{0:F1} W", value );
			else if( value < 1000 * 1000 ) builder.AppendFormat( "{0:F1} kW", value / 1000 );
		}
	}
}