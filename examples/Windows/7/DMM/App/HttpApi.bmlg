//
// Created by Eugeny Grishul
//

using System;
using System.IO;
using System.Net;
using System.Web;
using System.Xml;

namespace Dmm {
	public class CustomHttpServer : HttpServer {
		public CustomHttpServer() {
		}

		protected override NetworkServer.SessionHandler CreateSession( IStream stream ) {
			return new SessionHandler( this, stream );
		}

		public class SessionHandler : basetype.SessionHandler {
			[Overlapped( Offset = memberinfo( basetype.Server ).ByteOffset )]
			public new declaringtype Server; // override field type

			public SessionHandler( declaringtype parent, IStream stream )
				: base( parent, stream ) {
			}

			protected override RequestHandler CreateHandler() {
				switch( Resource ) {
					case "/stat.json": return new HttpStatisticPageHandler( this );
					case "/stat.txt": return new HttpStatisticTextPageHandler( this );

					case "/":
					case "/index.html":
					case "/Default.aspx":
						return new TestPageHandler( this );

					case "/log.event":
						return new LogStreamHandler( this );

					case "/favicon.ico": return new EmbeddedResourceHandler( this, System.Net.Mime.MediaTypeNames.Image.Icon, EmbeddedResources.favicon_ico );
					case "/log.html": return new EmbeddedResourceHandler( this, System.Net.Mime.MediaTypeNames.Text.Html, EmbeddedResources.log_html );
				}

				SendStatus( HttpStatusCode.NotFound );
				return null;
			}
		}

		public class ComPortsHandler : JsonHandler {
			[Overlapped( Offset = memberinfo( RequestHandler.Session ).ByteOffset )]
			protected new SessionHandler Session; // override field type

			public ComPortsHandler( SessionHandler session )
				: base( session ) {
			}

			public override void OnRender() {
				switch( Method ) {
					case HttpMethod.Get:
						var writer = new JsonWriter( Response );
						using( writer.Array() )
							foreach( var com in App.EnumerateComPorts() )
								using( writer.Array() ) {
									writer.Value( com.Item1 );
									writer.Value( com.Item2 );
								}
						break;

					default:
						StatusCode = HttpStatusCode.MethodNotAllowed;
						// if( App.Options.Trace ) Response.AppendLine( "Wrong HTTP method: '{0}'", Method );
						return;
				}
			}
		}

		// Code a bit complicated due to memory usage optimization for multiple connected clients
		public class LogStreamHandler : ServerSentEventHandler {
			public LogStreamHandler( SessionHandler session )
				: base( session ) {
			}

			DateTime _lastDate;
			bool _fromSpecified = false;

			protected override void ParseLastEventID( CStringSpan& value ) {
				long lastDate;
				if( !long.TryParse( value, lastDate ) ) {
					StatusCode = HttpStatusCode.BadRequest;
					return;
				}

				_fromSpecified = true;
				_lastDate = new DateTime( lastDate, DateTimeKind.Utc );
			}

			public override void OnRender() {
				Response.UseAutoFlush = false;
				var queue = App._debugDevice.Events;

				// wait for first event arrival
				while( App._debugDevice.Events.Count == 0 ) {
					using( Fiber.CancellationRegion() )
						App._debugDevice.Events.FiberWaitEvent();

					if( Fiber.IsCancelled ) return;
				}

				var lastIndex = queue.FirstIndex - 1;
				if( _fromSpecified && _lastDate >= queue.Time[queue.FirstIndex] && _lastDate <= queue.Time[queue.LastIndex] ) {
					while( lastIndex != queue.LastIndex ) {
						++lastIndex;
						if( !queue.IsValid( lastIndex ) ) return;

						var entry = queue[lastIndex];
						if( _lastDate > entry.Time ) {
							--lastIndex;
							break;
						}
					}

					while( lastIndex != queue.LastIndex )
						queue.FiberWaitEvent();
				}

				while( true ) {
					using( Fiber.CancellationRegion() ) {
						while( lastIndex != queue.LastIndex ) {
							++lastIndex;
							if( !queue.IsValid( lastIndex ) ) break;
							var entry = queue[lastIndex];

							Response.Write( "data: " );
							Response.Write( entry.Value );
							Response.WriteLine();

							Response.Write( "id: " );
							Response.Write( entry.Time.Ticks );
							Response.WriteLine();

							WriteEventEnd();
						}

						Flush();
						if( Session.StreamError ) break;
						if( Fiber.IsCancelled ) break;

						queue.FiberWaitEvent();
						if( Fiber.IsCancelled ) break;
					}
				}
			}

			protected override void AddCustomHeaders() {
				base.AddCustomHeaders();

				HttpFormatter.HeaderAccessControl( Headers, "allow" );
				HttpFormatter.HeaderAccessControlAllowOrigin( Headers, "*" );
			}
		}

		public class TestPageHandler : PageHandler {
			public TestPageHandler( SessionHandler session )
				: base( session ) {
			}

			public override void OnRender() {
				var time = Fiber.UtcNow;
				var writer = new XmlWriter( Response );

				using( writer.Tag( "html" ) ) {
					using( writer.Tag( "head" ) ) {
						using( writer.Tag( "title" ) )
							writer.Write( "UT61E DMM" );
					}

					using( writer.Tag( "body" ) ) {
						using( writer.Tag( "ul" ) )
							foreach( var device in App._devices ) {
								using( writer.Tag( "li" ) )
									writer.Write( device );
							}
					}
				}
			}
		}
	}
}