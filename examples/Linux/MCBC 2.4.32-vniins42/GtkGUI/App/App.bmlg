//
// Created by $USER
//

using System;
using System.Diagnostics;

using Platform.Gdk;
using Platform.Glib;
using Platform.Gtk;
using Platform.IO;

namespace Example {
	public partial class App {
		[EntryPoint]
		private static void Main() {
			GThreadApi.g_thread_init( null );
			GdkApi.gdk_threads_init();
			GtkApi.gtk_init( nullref, null );

			GlibApi.g_log_set_default_handler( ( log_domain, log_level, message, user_data ) => {
				Console.WriteLine( "GLib assertion ({0}): '{1}'", log_level.ToString(), message );
				Debugger.Break();
			}, null );

			Platform.X.XApi.XSetIOErrorHandler( display => {
				Debugger.Break();
				return 0;
			} );

			using( GdkThreads.LockRegion() ) {
				var window = GtkWindow.Create();

				using( var display = Platform.X.Display.Open() ) {
					var screen = display->DefaultScreen;
					Console.WriteLine( "Width={0} Height={1}", screen->Width, screen->Height );
					window->MinSize = new Size( screen->Width / 2, screen->Height / 2 );
				}

				window->Title = "Test app";
				var gdkScreen = window->Screen;
				var screenColormap = GdkApi.gdk_screen_get_rgba_colormap( gdkScreen );
				window->Colormap = screenColormap;

				window->ConnectSignalDestroy<void>( ( sender, @this ) => {
					GtkApi.gtk_main_quit();
				}, null );

				window->ConnectSignalDeleteEvent<void>( ( sender, @event, @this ) => {
					var isExiting = ConfirmExit( ( GtkWindow* ) sender );

					return !isExiting;
				}, null );

				_eventLoop = new EventLoop() { Tracing = true };
				EventLoopSubscribe();

				_eventLoop.BeginAlarmUtc( TimeSpan.FromSeconds( 1 ), () => {
					window->Title = Utf8String.Format( "Test app {0}", DateTime.Now );
				} );

				window->IsVisible = true;

				GtkApi.gtk_main();

				_eventLoop.Dispose();
			}
		}

		static EventLoop _eventLoop;

		public static void EventLoopSubscribe() {
			_eventLoop.PollHandlerPrepare = GdkApi.gdk_threads_enter;
			_eventLoop.PollHandlerFinish = GdkApi.gdk_threads_leave;

			GlibApi.g_main_context_set_poll_func( GMainContext.Default, poll_handler );
		}

		private static int poll_handler( GPollFD* passedHandles, uint count, int timeout ) {
			if( _eventLoop != null ) return _eventLoop.Poll( ( Platform.Libc.pollfd* ) passedHandles, count, timeout );
			return Platform.Libc.LibcApi.poll( ( Platform.Libc.pollfd* ) passedHandles, count, timeout );
		}

		public static bool ConfirmExit( GtkWindow* parent ) {
			return GtkMessageDialog.ShowInformationYesNo( parent, "GtkGUI", "Did you really want to kill this app?" ) == GtkResponseType.GTK_RESPONSE_YES;
		}
	}
}