//
// Created by $USER
//

using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Runtime;
using System.Serialization;
using System.Threading;
using System.Web;

using Platform.IO;
using Platform.Libc;

namespace Example {
	public partial class App {
		public class CustomHttpServer : HttpServer {
			public CustomHttpServer() {
			}

			protected override RequestHandler CreateHandler( SessionHandler session ) {
				switch( session.Resource ) {
					case "/stat.json": return new HttpStatisticPageHandler( session );
					case "/stat.txt": return new HttpStatisticTextPageHandler( session );

					case "/":
					case "/index.html":
					case "/Default.aspx":
						return new TestPageHandler( session );

					case "/time.event":
						return new TimeEventHandler( session );

					case "/hello.aspx":
						return new HelloWorldPageHandler( session );

					case "/favicon.ico": return new EmbeddedResourceHandler( session, System.Net.Mime.MediaTypeNames.Image.Icon, new MemorySegment( &EmbeddedResources.favicon_ico[0], ( uint ) EmbeddedResources.favicon_ico.Length ) );
					case "/time.html": return new EmbeddedResourceHandler( session, System.Net.Mime.MediaTypeNames.Text.Html, new MemorySegment( &EmbeddedResources.time_html[0], ( uint ) EmbeddedResources.time_html.Length ) );
				}

				return null;
			}

			public class HelloWorldPageHandler : PageHandler {
				public HelloWorldPageHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					Response.Append( "hello, world!" );
				}

				protected override void AddCustomHeaders() {
					AddHeaderContentType( MediaType );
				}
			}

			public class TimeEventHandler : PageHandler {
				public TimeEventHandler( SessionHandler session )
					: base( session ) {
					MediaType = System.Net.Mime.MediaTypeNames.Text.EventStream;
					TextEncodingKind = System.Text.TextEncodingKind.Utf8;
				}

				public override void OnRender() {
					var delay = TimeSpan.FromSeconds( 1 );
					Fiber.Sleep( new TimeSpan( delay.Ticks - ( Fiber.UtcNow.Ticks % delay.Ticks ) ) ); // wait for event completion

					Response.Append( "retry: 0\n" );
					Response.Append( "data: " ); Response.Append( Fiber.UtcNow.ToUnixMilliseconds() );

					Response.Append( "\n\n" );
				}

				protected override void AddCustomHeaders() {
					AddHeaderContentType( MediaType );

					HttpFormatter.HeaderAccessControl( Headers, "allow" );
					HttpFormatter.HeaderAccessControlAllowOrigin( Headers, "*" );
				}
			}

			public class TestPageHandler : PageHandler {
				public TestPageHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					var server = ( CustomHttpServer ) Session.Server;
					var time = Fiber.Now;

					Response.Append( "<html>" );
					{
						Response.Append( "<head>" );
						{
							Response.Append( @"<title>Bamelg server</title>" );
						}
						Response.Append( "</head>" );

						Response.Append( "<body>" );
						{
							Response.AppendFormat( "<p>Bamelg server {0}! ValidRequestCount={1,10}</p>", time, server.ValidRequestCount );
							Response.Concat( "<p>TotalAcceptedClientCount: ", server.TotalAcceptedClientCount, "; InvalidRequestCount=", server.InvalidRequestCount, "; ActiveSessionCount=", server.ActiveSessionCount, "</p>" );
							Response.Append( "<p>Some unicode symbols: тут немножко Юникода</p>" );
						}
						Response.Append( "</body>" );
					}
					Response.Append( "</html>" );
				}
			}
		}

		public static Thread MainThread = Thread.CurrentThread;

		[EntryPoint]
		private static void Main() {
			if( Environment.CommandLine.Length == 1 ) { // no args
			}
			else if( Environment.CommandLine.Length == 2 ) { // path to config
				var configPath = Environment.CommandLine[1];

				if( System.IO.File.Exists( configPath ) ) {
					using( var stream = System.IO.File.OpenRead( configPath ) )
					using( var reader = new StreamReader( stream ) )
						IniSerializer<AppSettings>.Deserialize( Options, reader );
				}
			}
			else {
				Console.WriteLine( "Usage:" );
				Console.WriteLine( "\t" + "HttpServer" );
				Console.WriteLine( "\t" + "HttpServer /path/config.ini" );
			}

			Memory.MultithreadedEnvironment = Options.AtomicReferenceCounting;

			if( Options.MaxThreads <= 0 ) Options.MaxThreads = Environment.ProcessorCount;

			if( Options.Trace ) {
				utsname value;
				LibcApi.uname( value );

				Console.WriteLine( "PID={0}", LibcApi.getpid() );
				Console.WriteLine( "sysname == '{0}', nodename == '{1}', release == '{2}', version == '{3}', machine == '{4}', domainname == '{5}'", new CString( &value.sysname[0] ), new CString( &value.nodename[0] ), new CString( &value.release[0] ), new CString( &value.version[0] ), new CString( &value.machine[0] ), new CString( &value.domainname[0] ) );
				Console.WriteLine();

				System.Console.WriteLine( "@{ Options:" );
				IniSerializer<AppSettings>.Serialize( Options, Console.Out );
				Console.WriteLine( "@}" );
				System.Console.WriteLine();

				Console.WriteLine( "@{ Environment variables:" );
				for( var i = 0; LibcApi.environ[i] != null; ++i ) Console.WriteLine( "\t{0}", LibcApi.environ[i] );
				Console.WriteLine( "@}" );
				Console.WriteLine();
			}


			if( Options.MaxThreads > 1 ) {
				var threads = new List<Thread>( Options.MaxThreads );
				_eventLoops = new List<EventLoop>();

				for( var i = 1; i < Options.MaxThreads; ++i )
					threads.Add( Thread.Start( CreateAdditionalServer ) );

				CreateServer();

				foreach( var eventLoop in _eventLoops )
					eventLoop.RequestExit();

				foreach( var thread in threads )
					thread.Join();
			}
			else {
				CreateServer();
			}
		}

		static void CreateServer() {
			var eventLoop = new EventLoop();
			eventLoop.CatchExitSignals(); // convert signals to events

			CreateServer( eventLoop );
		}

		static List<EventLoop> _eventLoops;
		static Mutex _eventLoopsLock;

		static void CreateAdditionalServer() {
			var eventLoop = new EventLoop();

			using( _eventLoopsLock.LockRegion() )
				_eventLoops.Add( eventLoop );

			eventLoop.BlockExitSignals(); // block signals

			CreateServer( eventLoop );
		}

		static void CreateServer( EventLoop eventLoop ) {
			var server = new CustomHttpServer() {
				ListenBacklog = Options.ListenBacklog,
				ClientFiberStackPages = Options.ClientFiberStackPages,
				MaxClientRequestLength = Options.MaxClientRequestLength
			};

			Fiber.UseGuardPage = Options.FiberUseGuardPage;

			if( Options.MaxThreads > 1 ) server.ReusePort = true;

			Fiber.Start( 16, () => {
				var tcpListen = false;
				var tcpListenReported = false;

				var unixListen = !MainThread.IsCurrent;
				var unixListenReported = false;

				while( true ) {
					if( !tcpListen ) {
						tcpListen = server.Listen( Options.ListenEndpoint );

						if( tcpListen )
							Console.WriteLine( "Listen {0}", Options.ListenEndpoint );
						else if( !tcpListenReported ) {
							Console.WriteLine( "Unable bind {0}", Options.ListenEndpoint );
							tcpListenReported = true;
						}
					}

					if( !unixListen ) {
						unixListen = server.Listen( Options.ListenUnixPath );

						if( unixListen )
							Console.WriteLine( "Listen socket '{0}'", Options.ListenUnixPath );
						else if( !unixListenReported ) {
							Console.WriteLine( "Unable to bind socket '{0}'", Options.ListenUnixPath );
							unixListenReported = true;
						}
					}

					var all = true;

					all &= tcpListen;
					all &= unixListen;

					if( !all ) {
						using( new Fiber.CancellationRegion() ) {
							Fiber.Sleep( 1000 );
							if( Fiber.IsCancelled ) return;
						}

						continue;
					}

					break;
				}

				if( MainThread.IsCurrent ) PrintConnectionOptions();
			}, "resource allocator" );

			if( Options.Trace ) Console.WriteLine( "Thread {0} dispatching HTTP requests", pthread_t.CurrentThreadId );
			eventLoop.DispatchSync();
		}

		static void PrintConnectionOptions() {
			Console.WriteLine( "@{ Possible connection URLs:" );
			foreach( var @interface in LibcApi.GetNetworkInterfaces() ) {
				if( @interface->ifa_addr == null ) continue;

				if( @interface->ifa_addr->sa_family == ProtocolFamily.PF_INET ) {
					var& address = *( sockaddr_in* ) @interface->ifa_addr;
					Console.WriteLine( "    interface={0,-10} http://{1}:{2}", @interface->ifa_name, cast<IPv4Endpoint>( address ).Address, Options.ListenEndpoint.Port );
				} else if( @interface->ifa_addr->sa_family == ProtocolFamily.PF_INET6 ) {
					var& address = *( sockaddr_in6* ) @interface->ifa_addr;
					Console.WriteLine( "    interface={0,-10} http://[{1}]:{2}", @interface->ifa_name, cast<IPv6Endpoint>( address ).Address, Options.ListenEndpoint.Port );
				}
			}

			Console.WriteLine( "    http://{0}:{1}", LibcApi.GetHostName(), Options.ListenEndpoint.Port );

			Console.WriteLine( "@}" );
		}
	}
}