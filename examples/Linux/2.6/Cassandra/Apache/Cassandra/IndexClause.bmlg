//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// @deprecated use a KeyRange with row_filter in get_range_slices instead
	/// </summary>
	public partial class IndexClause : IFormattable {
		private List<IndexExpression> _expressions;
		private byte[] _start_key;
		private int _count = 100;

		public List<IndexExpression> Expressions { get { return _expressions; } set { __isset.expressions = true; _expressions = value; } }
		public byte[] Start_key { get { return _start_key; } set { __isset.start_key = true; _start_key = value; } }
		public int Count { get { return _count; } set { __isset.count = true; _count = value; } }

		public Isset __isset = new Isset();
		public struct Isset {
			public Isset() { }

			public bool expressions { get; set; }
			public bool start_key { get; set; }
			public bool count { get; set; } = true;
		}

		public IndexClause() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.List ) {
							var _list9 = reader.ReadListBegin();
							Expressions = new List<IndexExpression>( _list9.Count );
							for( var _i10 = 0; _i10 < _list9.Count; ++_i10 ) {
								var _elem11 = new IndexExpression();
								_elem11.Read( reader );
								_expressions.Add( _elem11 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.String ) {
							Start_key = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.Int32 ) {
							Count = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "IndexClause" );
			if( Expressions != null && __isset.expressions ) {
				writer.WriteFieldBegin( "expressions", TypeKind.List, 1 );
				{
					writer.WriteListBegin( TypeKind.Struct, _expressions.Count );
					foreach( var item in _expressions ) {
						item.Write( writer );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			if( Start_key != null && __isset.start_key ) {
				writer.WriteFieldBegin( "start_key", TypeKind.String, 2 );
				writer.WriteBinary( _start_key );
				writer.WriteFieldEnd();
			}
			if( __isset.count ) {
				writer.WriteFieldBegin( "count", TypeKind.Int32, 3 );
				writer.WriteInt32( _count );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Expressions: ", Expressions, " Start_key: ", Start_key, " Count: ", Count );
		}
	}
}