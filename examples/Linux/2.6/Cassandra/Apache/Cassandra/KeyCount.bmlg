//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	public partial class KeyCount : IFormattable {
		private byte[] _key;
		private int _count;

		public byte[] Key { get { return _key; } set { __isset.key = true; _key = value; } }
		public int Count { get { return _count; } set { __isset.count = true; _count = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool key { get; set; }
			public bool count { get; set; }
		}

		public KeyCount() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Key = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Int32 ) {
							Count = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "KeyCount" );
			if( Key != null && __isset.key ) {
				writer.WriteFieldBegin( "key", TypeKind.String, 1 );
				writer.WriteBinary( _key );
				writer.WriteFieldEnd();
			}
			if( __isset.count ) {
				writer.WriteFieldBegin( "count", TypeKind.Int32, 2 );
				writer.WriteInt32( _count );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Key: ", Key, " Count: ", Count );
		}
	}
}