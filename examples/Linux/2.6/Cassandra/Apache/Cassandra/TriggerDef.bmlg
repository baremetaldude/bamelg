//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// Describes a trigger.
	/// `options` should include at least 'class' param.
	/// Other options are not supported yet.
	/// </summary>
	public partial class TriggerDef : IFormattable {
		private Utf8String _name;
		private Dictionary<Utf8String, Utf8String> _options;

		public Utf8String Name { get { return _name; } set { __isset.name = true; _name = value; } }
		public Dictionary<Utf8String, Utf8String> Options { get { return _options; } set { __isset.options = true; _options = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool name { get; set; }
			public bool options { get; set; }
		}

		public TriggerDef() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Name = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Map ) {
							var _map38 = reader.ReadMapBegin();
							Options = new Dictionary<Utf8String, Utf8String>( _map38.Count );
							for( var _i39 = 0; _i39 < _map38.Count; ++_i39 ) {
								var _key40 = reader.ReadString();
								var _val41 = reader.ReadString();
								Options[_key40] = _val41;
							}
							reader.ReadMapEnd();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "TriggerDef" );
			if( Name != null && __isset.name ) {
				writer.WriteFieldBegin( "name", TypeKind.String, 1 );
				writer.WriteString( _name );
				writer.WriteFieldEnd();
			}
			if( Options != null && __isset.options ) {
				writer.WriteFieldBegin( "options", TypeKind.Map, 2 );
				{
					writer.WriteMapBegin( TypeKind.String, TypeKind.String, _options.Count );
					foreach( var item in _options ) {
						writer.WriteString( item.Key );
						writer.WriteString( item.Value );
					}
					writer.WriteMapEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Name: ", Name, " Options: ", Options );
		}
	}
}