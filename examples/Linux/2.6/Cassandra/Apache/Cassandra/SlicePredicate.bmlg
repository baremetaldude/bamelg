//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// A SlicePredicate is similar to a mathematic predicate (see http://en.wikipedia.org/wiki/Predicate_(mathematical_logic)),
	/// which is described as "a property that the elements of a set have in common."
	///
	/// SlicePredicate's in Cassandra are described with either a list of column_names or a SliceRange.  If column_names is
	/// specified, slice_range is ignored.
	///
	/// @param column_name. A list of column names to retrieve. This can be used similar to Memcached's "multi-get" feature
	///                     to fetch N known column names. For instance, if you know you wish to fetch columns 'Joe', 'Jack',
	///                     and 'Jim' you can pass those column names as a list to fetch all three at once.
	/// @param slice_range. A SliceRange describing how to range, order, and/or limit the slice.
	/// </summary>
	public partial class SlicePredicate : IFormattable {
		private List<byte[]> _column_names;
		private SliceRange _slice_range;

		public List<byte[]> Column_names { get { return _column_names; } set { __isset.column_names = true; _column_names = value; } }
		public SliceRange Slice_range { get { return _slice_range; } set { __isset.slice_range = true; _slice_range = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool column_names { get; set; }
			public bool slice_range { get; set; }
		}

		public SlicePredicate() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.List ) {
							var _list6 = reader.ReadListBegin();
							Column_names = new List<byte[]>( _list6.Count );
							for( var _i7 = 0; _i7 < _list6.Count; ++_i7 ) {
								var _elem8 = reader.ReadBinary();
								Column_names.Add( _elem8 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Struct ) {
							Slice_range = new SliceRange();
							Slice_range.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "SlicePredicate" );
			if( Column_names != null && __isset.column_names ) {
				writer.WriteFieldBegin( "column_names", TypeKind.List, 1 );
				{
					writer.WriteListBegin( TypeKind.String, _column_names.Count );
					foreach( var item in _column_names ) {
						writer.WriteBinary( item );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			if( Slice_range != null && __isset.slice_range ) {
				writer.WriteFieldBegin( "slice_range", TypeKind.Struct, 2 );
				_slice_range.Write( writer );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Column_names: ", Column_names, " Slice_range: ", Slice_range );
		}
	}
}