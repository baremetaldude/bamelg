//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// A TokenRange describes part of the Cassandra ring, it is a mapping from a range to
	/// endpoints responsible for that range.
	/// @param start_token The first token in the range
	/// @param end_token The last token in the range
	/// @param endpoints The endpoints responsible for the range (listed by their configured listen_address)
	/// @param rpc_endpoints The endpoints responsible for the range (listed by their configured rpc_address)
	/// </summary>
	public partial class TokenRange : IFormattable {
		private Utf8String _start_token;
		private Utf8String _end_token;
		private List<Utf8String> _endpoints;
		private List<Utf8String> _rpc_endpoints;
		private List<EndpointDetails> _endpoint_details;

		public Utf8String Start_token { get { return _start_token; } set { __isset.start_token = true; _start_token = value; } }
		public Utf8String End_token { get { return _end_token; } set { __isset.end_token = true; _end_token = value; } }
		public List<Utf8String> Endpoints { get { return _endpoints; } set { __isset.endpoints = true; _endpoints = value; } }
		public List<Utf8String> Rpc_endpoints { get { return _rpc_endpoints; } set { __isset.rpc_endpoints = true; _rpc_endpoints = value; } }
		public List<EndpointDetails> Endpoint_details { get { return _endpoint_details; } set { __isset.endpoint_details = true; _endpoint_details = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool start_token { get; set; }
			public bool end_token { get; set; }
			public bool endpoints { get; set; }
			public bool rpc_endpoints { get; set; }
			public bool endpoint_details { get; set; }
		}

		public TokenRange() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Start_token = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.String ) {
							End_token = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.List ) {
							var localList = reader.ReadListBegin();
							Endpoints = new List<Utf8String>( localList.Count );
							for( var localCounter = 0; localCounter < localList.Count; ++localCounter ) {
								var localElement = reader.ReadString();
								_endpoints.Add( localElement );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 4:
						if( field.Type == TypeKind.List ) {
							var localList1 = reader.ReadListBegin();
							Rpc_endpoints = new List<Utf8String>( localList1.Count );
							for( var localCounter1 = 0; localCounter1 < localList1.Count; ++localCounter1 ) {
								var localElement1 = reader.ReadString();
								_rpc_endpoints.Add( localElement1 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 5:
						if( field.Type == TypeKind.List ) {
							var localList2 = reader.ReadListBegin();
							Endpoint_details = new List<EndpointDetails>( localList2.Count );
							for( var localCounter2 = 0; localCounter2 < localList2.Count; ++localCounter2 ) {
								var localElement2 = new EndpointDetails();
								localElement2.Read( reader );
								_endpoint_details.Add( localElement2 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "TokenRange" );
			if( Start_token != null && __isset.start_token ) {
				writer.WriteFieldBegin( "start_token", TypeKind.String, 1 );
				writer.WriteString( _start_token );
				writer.WriteFieldEnd();
			}
			if( End_token != null && __isset.end_token ) {
				writer.WriteFieldBegin( "end_token", TypeKind.String, 2 );
				writer.WriteString( _end_token );
				writer.WriteFieldEnd();
			}
			if( Endpoints != null && __isset.endpoints ) {
				writer.WriteFieldBegin( "endpoints", TypeKind.List, 3 );
				{
					writer.WriteListBegin( TypeKind.String, _endpoints.Count );
					foreach( var item in _endpoints ) {
						writer.WriteString( item );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			if( Rpc_endpoints != null && __isset.rpc_endpoints ) {
				writer.WriteFieldBegin( "rpc_endpoints", TypeKind.List, 4 );
				{
					writer.WriteListBegin( TypeKind.String, _rpc_endpoints.Count );
					foreach( var item in _rpc_endpoints ) {
						writer.WriteString( item );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			if( Endpoint_details != null && __isset.endpoint_details ) {
				writer.WriteFieldBegin( "endpoint_details", TypeKind.List, 5 );
				{
					writer.WriteListBegin( TypeKind.Struct, _endpoint_details.Count );
					foreach( var item in _endpoint_details ) {
						item.Write( writer );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Start_token: ", Start_token, " End_token: ", End_token, " Endpoints: ", Endpoints, " Rpc_endpoints: ", Rpc_endpoints, " Endpoint_details: ", Endpoint_details );
		}
	}
}