//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// The ColumnPath is the path to a single column in Cassandra. It might make sense to think of ColumnPath and
	/// ColumnParent in terms of a directory structure.
	///
	/// ColumnPath is used to looking up a single column.
	///
	/// @param column_family. The name of the CF of the column being looked up.
	/// @param super_column. The super column name.
	/// @param column. The column name.
	/// </summary>
	public partial class ColumnPath : IFormattable {
		private Utf8String _column_family;
		private byte[] _super_column;
		private byte[] _column;

		public Utf8String Column_family { get { return _column_family; } set { __isset.column_family = true; _column_family = value; } }
		public byte[] Super_column { get { return _super_column; } set { __isset.super_column = true; _super_column = value; } }
		public byte[] Column { get { return _column; } set { __isset.column = true; _column = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool column_family { get; set; }
			public bool super_column { get; set; }
			public bool column { get; set; }
		}

		public ColumnPath() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 3:
						if( field.Type == TypeKind.String ) {
							Column_family = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 4:
						if( field.Type == TypeKind.String ) {
							Super_column = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					case 5:
						if( field.Type == TypeKind.String ) {
							Column = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "ColumnPath" );
			if( Column_family != null && __isset.column_family ) {
				writer.WriteFieldBegin( "column_family", TypeKind.String, 3 );
				writer.WriteString( _column_family );
				writer.WriteFieldEnd();
			}
			if( Super_column != null && __isset.super_column ) {
				writer.WriteFieldBegin( "super_column", TypeKind.String, 4 );
				writer.WriteBinary( _super_column );
				writer.WriteFieldEnd();
			}
			if( Column != null && __isset.column ) {
				writer.WriteFieldBegin( "column", TypeKind.String, 5 );
				writer.WriteBinary( _column );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Column_family: ", Column_family, " Super_column: ", Super_column, " Column: ", Column );
		}
	}
}