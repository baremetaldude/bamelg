//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	public partial class CfDef : IFormattable {
		private Utf8String _keyspace;
		private Utf8String _name;
		private Utf8String _column_type;
		private Utf8String _comparator_type;
		private Utf8String _subcomparator_type;
		private Utf8String _comment;
		private double _read_repair_chance;
		private List<ColumnDef> _column_metadata;
		private int _gc_grace_seconds;
		private Utf8String _default_validation_class;
		private int _id;
		private int _min_compaction_threshold;
		private int _max_compaction_threshold;
		private bool _replicate_on_write;
		private Utf8String _key_validation_class;
		private byte[] _key_alias;
		private Utf8String _compaction_strategy;
		private Dictionary<Utf8String, Utf8String> _compaction_strategy_options;
		private Dictionary<Utf8String, Utf8String> _compression_options;
		private double _bloom_filter_fp_chance;
		private Utf8String _caching;
		private double _dclocal_read_repair_chance;
		private bool _populate_io_cache_on_flush;
		private int _memtable_flush_period_in_ms;
		private int _default_time_to_live;
		private int _index_interval;
		private Utf8String _speculative_retry;
		private List<TriggerDef> _triggers;
		private double _row_cache_size;
		private double _key_cache_size;
		private int _row_cache_save_period_in_seconds;
		private int _key_cache_save_period_in_seconds;
		private int _memtable_flush_after_mins;
		private int _memtable_throughput_in_mb;
		private double _memtable_operations_in_millions;
		private double _merge_shards_chance;
		private Utf8String _row_cache_provider;
		private int _row_cache_keys_to_save;

		public Utf8String Keyspace { get { return _keyspace; } set { __isset.keyspace = true; _keyspace = value; } }
		public Utf8String Name { get { return _name; } set { __isset.name = true; _name = value; } }
		public Utf8String Column_type { get { return _column_type; } set { __isset.column_type = true; _column_type = value; } }
		public Utf8String Comparator_type { get { return _comparator_type; } set { __isset.comparator_type = true; _comparator_type = value; } }
		public Utf8String Subcomparator_type { get { return _subcomparator_type; } set { __isset.subcomparator_type = true; _subcomparator_type = value; } }
		public Utf8String Comment { get { return _comment; } set { __isset.comment = true; _comment = value; } }
		public double Read_repair_chance { get { return _read_repair_chance; } set { __isset.read_repair_chance = true; _read_repair_chance = value; } }
		public List<ColumnDef> Column_metadata { get { return _column_metadata; } set { __isset.column_metadata = true; _column_metadata = value; } }
		public int Gc_grace_seconds { get { return _gc_grace_seconds; } set { __isset.gc_grace_seconds = true; _gc_grace_seconds = value; } }
		public Utf8String Default_validation_class { get { return _default_validation_class; } set { __isset.default_validation_class = true; _default_validation_class = value; } }
		public int Id { get { return _id; } set { __isset.id = true; _id = value; } }
		public int Min_compaction_threshold { get { return _min_compaction_threshold; } set { __isset.min_compaction_threshold = true; _min_compaction_threshold = value; } }
		public int Max_compaction_threshold { get { return _max_compaction_threshold; } set { __isset.max_compaction_threshold = true; _max_compaction_threshold = value; } }
		public bool Replicate_on_write { get { return _replicate_on_write; } set { __isset.replicate_on_write = true; _replicate_on_write = value; } }
		public Utf8String Key_validation_class { get { return _key_validation_class; } set { __isset.key_validation_class = true; _key_validation_class = value; } }
		public byte[] Key_alias { get { return _key_alias; } set { __isset.key_alias = true; _key_alias = value; } }
		public Utf8String Compaction_strategy { get { return _compaction_strategy; } set { __isset.compaction_strategy = true; _compaction_strategy = value; } }
		public Dictionary<Utf8String, Utf8String> Compaction_strategy_options { get { return _compaction_strategy_options; } set { __isset.compaction_strategy_options = true; _compaction_strategy_options = value; } }
		public Dictionary<Utf8String, Utf8String> Compression_options { get { return _compression_options; } set { __isset.compression_options = true; _compression_options = value; } }
		public double Bloom_filter_fp_chance { get { return _bloom_filter_fp_chance; } set { __isset.bloom_filter_fp_chance = true; _bloom_filter_fp_chance = value; } }
		public Utf8String Caching { get { return _caching; } set { __isset.caching = true; _caching = value; } }
		public double Dclocal_read_repair_chance { get { return _dclocal_read_repair_chance; } set { __isset.dclocal_read_repair_chance = true; _dclocal_read_repair_chance = value; } }
		public bool Populate_io_cache_on_flush { get { return _populate_io_cache_on_flush; } set { __isset.populate_io_cache_on_flush = true; _populate_io_cache_on_flush = value; } }
		public int Memtable_flush_period_in_ms { get { return _memtable_flush_period_in_ms; } set { __isset.memtable_flush_period_in_ms = true; _memtable_flush_period_in_ms = value; } }
		public int Default_time_to_live { get { return _default_time_to_live; } set { __isset.default_time_to_live = true; _default_time_to_live = value; } }
		public int Index_interval { get { return _index_interval; } set { __isset.index_interval = true; _index_interval = value; } }
		public Utf8String Speculative_retry { get { return _speculative_retry; } set { __isset.speculative_retry = true; _speculative_retry = value; } }
		public List<TriggerDef> Triggers { get { return _triggers; } set { __isset.triggers = true; _triggers = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public double Row_cache_size { get { return _row_cache_size; } set { __isset.row_cache_size = true; _row_cache_size = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public double Key_cache_size { get { return _key_cache_size; } set { __isset.key_cache_size = true; _key_cache_size = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public int Row_cache_save_period_in_seconds { get { return _row_cache_save_period_in_seconds; } set { __isset.row_cache_save_period_in_seconds = true; _row_cache_save_period_in_seconds = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public int Key_cache_save_period_in_seconds { get { return _key_cache_save_period_in_seconds; } set { __isset.key_cache_save_period_in_seconds = true; _key_cache_save_period_in_seconds = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public int Memtable_flush_after_mins { get { return _memtable_flush_after_mins; } set { __isset.memtable_flush_after_mins = true; _memtable_flush_after_mins = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public int Memtable_throughput_in_mb { get { return _memtable_throughput_in_mb; } set { __isset.memtable_throughput_in_mb = true; _memtable_throughput_in_mb = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public double Memtable_operations_in_millions { get { return _memtable_operations_in_millions; } set { __isset.memtable_operations_in_millions = true; _memtable_operations_in_millions = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public double Merge_shards_chance { get { return _merge_shards_chance; } set { __isset.merge_shards_chance = true; _merge_shards_chance = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public Utf8String Row_cache_provider { get { return _row_cache_provider; } set { __isset.row_cache_provider = true; _row_cache_provider = value; } }
		/// <summary>
		/// @deprecated
		/// </summary>
		public int Row_cache_keys_to_save { get { return _row_cache_keys_to_save; } set { __isset.row_cache_keys_to_save = true; _row_cache_keys_to_save = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool keyspace { get; set; }
			public bool name { get; set; }
			public bool column_type { get; set; }
			public bool comparator_type { get; set; }
			public bool subcomparator_type { get; set; }
			public bool comment { get; set; }
			public bool read_repair_chance { get; set; }
			public bool column_metadata { get; set; }
			public bool gc_grace_seconds { get; set; }
			public bool default_validation_class { get; set; }
			public bool id { get; set; }
			public bool min_compaction_threshold { get; set; }
			public bool max_compaction_threshold { get; set; }
			public bool replicate_on_write { get; set; }
			public bool key_validation_class { get; set; }
			public bool key_alias { get; set; }
			public bool compaction_strategy { get; set; }
			public bool compaction_strategy_options { get; set; }
			public bool compression_options { get; set; }
			public bool bloom_filter_fp_chance { get; set; }
			public bool caching { get; set; }
			public bool dclocal_read_repair_chance { get; set; }
			public bool populate_io_cache_on_flush { get; set; }
			public bool memtable_flush_period_in_ms { get; set; }
			public bool default_time_to_live { get; set; }
			public bool index_interval { get; set; }
			public bool speculative_retry { get; set; }
			public bool triggers { get; set; }
			public bool row_cache_size { get; set; }
			public bool key_cache_size { get; set; }
			public bool row_cache_save_period_in_seconds { get; set; }
			public bool key_cache_save_period_in_seconds { get; set; }
			public bool memtable_flush_after_mins { get; set; }
			public bool memtable_throughput_in_mb { get; set; }
			public bool memtable_operations_in_millions { get; set; }
			public bool merge_shards_chance { get; set; }
			public bool row_cache_provider { get; set; }
			public bool row_cache_keys_to_save { get; set; }
		}

		public CfDef() {
			_column_type = "Standard";
			_comparator_type = "BytesType";
			_caching = "keys_only";
			_dclocal_read_repair_chance = 0;
			_speculative_retry = "NONE";
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Keyspace = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.String ) {
							Name = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.String ) {
							Column_type = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 5:
						if( field.Type == TypeKind.String ) {
							Comparator_type = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 6:
						if( field.Type == TypeKind.String ) {
							Subcomparator_type = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 8:
						if( field.Type == TypeKind.String ) {
							Comment = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 12:
						if( field.Type == TypeKind.Double ) {
							Read_repair_chance = reader.ReadDouble();
						}
						else reader.Skip( field.Type );
						break;

					case 13:
						if( field.Type == TypeKind.List ) {
							var _list42 = reader.ReadListBegin();
							Column_metadata = new List<ColumnDef>( _list42.Count );
							for( var _i43 = 0; _i43 < _list42.Count; ++_i43 ) {
								var _elem44 = new ColumnDef();
								_elem44.Read( reader );
								Column_metadata.Add( _elem44 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 14:
						if( field.Type == TypeKind.Int32 ) {
							Gc_grace_seconds = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 15:
						if( field.Type == TypeKind.String ) {
							Default_validation_class = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 16:
						if( field.Type == TypeKind.Int32 ) {
							Id = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 17:
						if( field.Type == TypeKind.Int32 ) {
							Min_compaction_threshold = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 18:
						if( field.Type == TypeKind.Int32 ) {
							Max_compaction_threshold = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 24:
						if( field.Type == TypeKind.Bool ) {
							Replicate_on_write = reader.ReadBool();
						}
						else reader.Skip( field.Type );
						break;

					case 26:
						if( field.Type == TypeKind.String ) {
							Key_validation_class = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 28:
						if( field.Type == TypeKind.String ) {
							Key_alias = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					case 29:
						if( field.Type == TypeKind.String ) {
							Compaction_strategy = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 30:
						if( field.Type == TypeKind.Map ) {
							var _map45 = reader.ReadMapBegin();
							Compaction_strategy_options = new Dictionary<Utf8String, Utf8String>( _map45.Count );
							for( var _i46 = 0; _i46 < _map45.Count; ++_i46 ) {
								var _key47 = reader.ReadString();
								var _val48 = reader.ReadString();
								Compaction_strategy_options[_key47] = _val48;
							}
							reader.ReadMapEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 32:
						if( field.Type == TypeKind.Map ) {
							var _map49 = reader.ReadMapBegin();
							Compression_options = new Dictionary<Utf8String, Utf8String>( _map49.Count );
							for( var _i50 = 0; _i50 < _map49.Count; ++_i50 ) {
								var _key51 = reader.ReadString();
								var _val52 = reader.ReadString();
								Compression_options[_key51] = _val52;
							}
							reader.ReadMapEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 33:
						if( field.Type == TypeKind.Double ) {
							Bloom_filter_fp_chance = reader.ReadDouble();
						}
						else reader.Skip( field.Type );
						break;

					case 34:
						if( field.Type == TypeKind.String ) {
							Caching = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 37:
						if( field.Type == TypeKind.Double ) {
							Dclocal_read_repair_chance = reader.ReadDouble();
						}
						else reader.Skip( field.Type );
						break;

					case 38:
						if( field.Type == TypeKind.Bool ) {
							Populate_io_cache_on_flush = reader.ReadBool();
						}
						else reader.Skip( field.Type );
						break;

					case 39:
						if( field.Type == TypeKind.Int32 ) {
							Memtable_flush_period_in_ms = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 40:
						if( field.Type == TypeKind.Int32 ) {
							Default_time_to_live = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 41:
						if( field.Type == TypeKind.Int32 ) {
							Index_interval = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 42:
						if( field.Type == TypeKind.String ) {
							Speculative_retry = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 43:
						if( field.Type == TypeKind.List ) {
							var _list53 = reader.ReadListBegin();
							Triggers = new List<TriggerDef>( _list53.Count );
							for( var _i54 = 0; _i54 < _list53.Count; ++_i54 ) {
								var _elem55 = new TriggerDef();
								_elem55.Read( reader );
								Triggers.Add( _elem55 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 9:
						if( field.Type == TypeKind.Double ) {
							Row_cache_size = reader.ReadDouble();
						}
						else reader.Skip( field.Type );
						break;

					case 11:
						if( field.Type == TypeKind.Double ) {
							Key_cache_size = reader.ReadDouble();
						}
						else reader.Skip( field.Type );
						break;

					case 19:
						if( field.Type == TypeKind.Int32 ) {
							Row_cache_save_period_in_seconds = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 20:
						if( field.Type == TypeKind.Int32 ) {
							Key_cache_save_period_in_seconds = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 21:
						if( field.Type == TypeKind.Int32 ) {
							Memtable_flush_after_mins = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 22:
						if( field.Type == TypeKind.Int32 ) {
							Memtable_throughput_in_mb = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 23:
						if( field.Type == TypeKind.Double ) {
							Memtable_operations_in_millions = reader.ReadDouble();
						}
						else reader.Skip( field.Type );
						break;

					case 25:
						if( field.Type == TypeKind.Double ) {
							Merge_shards_chance = reader.ReadDouble();
						}
						else reader.Skip( field.Type );
						break;

					case 27:
						if( field.Type == TypeKind.String ) {
							Row_cache_provider = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 31:
						if( field.Type == TypeKind.Int32 ) {
							Row_cache_keys_to_save = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "CfDef" );
			if( Keyspace != null && __isset.keyspace ) {
				writer.WriteFieldBegin( "keyspace", TypeKind.String, 1 );
				writer.WriteString( _keyspace );
				writer.WriteFieldEnd();
			}
			if( Name != null && __isset.name ) {
				writer.WriteFieldBegin( "name", TypeKind.String, 2 );
				writer.WriteString( _name );
				writer.WriteFieldEnd();
			}
			if( Column_type != null && __isset.column_type ) {
				writer.WriteFieldBegin( "column_type", TypeKind.String, 3 );
				writer.WriteString( _column_type );
				writer.WriteFieldEnd();
			}
			if( Comparator_type != null && __isset.comparator_type ) {
				writer.WriteFieldBegin( "comparator_type", TypeKind.String, 5 );
				writer.WriteString( _comparator_type );
				writer.WriteFieldEnd();
			}
			if( Subcomparator_type != null && __isset.subcomparator_type ) {
				writer.WriteFieldBegin( "subcomparator_type", TypeKind.String, 6 );
				writer.WriteString( _subcomparator_type );
				writer.WriteFieldEnd();
			}
			if( Comment != null && __isset.comment ) {
				writer.WriteFieldBegin( "comment", TypeKind.String, 8 );
				writer.WriteString( _comment );
				writer.WriteFieldEnd();
			}
			if( __isset.row_cache_size ) {
				writer.WriteFieldBegin( "row_cache_size", TypeKind.Double, 9 );
				writer.WriteDouble( _row_cache_size );
				writer.WriteFieldEnd();
			}
			if( __isset.key_cache_size ) {
				writer.WriteFieldBegin( "key_cache_size", TypeKind.Double, 11 );
				writer.WriteDouble( _key_cache_size );
				writer.WriteFieldEnd();
			}
			if( __isset.read_repair_chance ) {
				writer.WriteFieldBegin( "read_repair_chance", TypeKind.Double, 12 );
				writer.WriteDouble( _read_repair_chance );
				writer.WriteFieldEnd();
			}
			if( Column_metadata != null && __isset.column_metadata ) {
				writer.WriteFieldBegin( "column_metadata", TypeKind.List, 13 );
				{
					writer.WriteListBegin( TypeKind.Struct, _column_metadata.Count );
					foreach( var item in _column_metadata ) {
						item.Write( writer );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			if( __isset.gc_grace_seconds ) {
				writer.WriteFieldBegin( "gc_grace_seconds", TypeKind.Int32, 14 );
				writer.WriteInt32( _gc_grace_seconds );
				writer.WriteFieldEnd();
			}
			if( Default_validation_class != null && __isset.default_validation_class ) {
				writer.WriteFieldBegin( "default_validation_class", TypeKind.String, 15 );
				writer.WriteString( _default_validation_class );
				writer.WriteFieldEnd();
			}
			if( __isset.id ) {
				writer.WriteFieldBegin( "id", TypeKind.Int32, 16 );
				writer.WriteInt32( _id );
				writer.WriteFieldEnd();
			}
			if( __isset.min_compaction_threshold ) {
				writer.WriteFieldBegin( "min_compaction_threshold", TypeKind.Int32, 17 );
				writer.WriteInt32( _min_compaction_threshold );
				writer.WriteFieldEnd();
			}
			if( __isset.max_compaction_threshold ) {
				writer.WriteFieldBegin( "max_compaction_threshold", TypeKind.Int32, 18 );
				writer.WriteInt32( _max_compaction_threshold );
				writer.WriteFieldEnd();
			}
			if( __isset.row_cache_save_period_in_seconds ) {
				writer.WriteFieldBegin( "row_cache_save_period_in_seconds", TypeKind.Int32, 19 );
				writer.WriteInt32( _row_cache_save_period_in_seconds );
				writer.WriteFieldEnd();
			}
			if( __isset.key_cache_save_period_in_seconds ) {
				writer.WriteFieldBegin( "key_cache_save_period_in_seconds", TypeKind.Int32, 20 );
				writer.WriteInt32( _key_cache_save_period_in_seconds );
				writer.WriteFieldEnd();
			}
			if( __isset.memtable_flush_after_mins ) {
				writer.WriteFieldBegin( "memtable_flush_after_mins", TypeKind.Int32, 21 );
				writer.WriteInt32( _memtable_flush_after_mins );
				writer.WriteFieldEnd();
			}
			if( __isset.memtable_throughput_in_mb ) {
				writer.WriteFieldBegin( "memtable_throughput_in_mb", TypeKind.Int32, 22 );
				writer.WriteInt32( _memtable_throughput_in_mb );
				writer.WriteFieldEnd();
			}
			if( __isset.memtable_operations_in_millions ) {
				writer.WriteFieldBegin( "memtable_operations_in_millions", TypeKind.Double, 23 );
				writer.WriteDouble( _memtable_operations_in_millions );
				writer.WriteFieldEnd();
			}
			if( __isset.replicate_on_write ) {
				writer.WriteFieldBegin( "replicate_on_write", TypeKind.Bool, 24 );
				writer.WriteBool( _replicate_on_write );
				writer.WriteFieldEnd();
			}
			if( __isset.merge_shards_chance ) {
				writer.WriteFieldBegin( "merge_shards_chance", TypeKind.Double, 25 );
				writer.WriteDouble( _merge_shards_chance );
				writer.WriteFieldEnd();
			}
			if( Key_validation_class != null && __isset.key_validation_class ) {
				writer.WriteFieldBegin( "key_validation_class", TypeKind.String, 26 );
				writer.WriteString( _key_validation_class );
				writer.WriteFieldEnd();
			}
			if( Row_cache_provider != null && __isset.row_cache_provider ) {
				writer.WriteFieldBegin( "row_cache_provider", TypeKind.String, 27 );
				writer.WriteString( _row_cache_provider );
				writer.WriteFieldEnd();
			}
			if( Key_alias != null && __isset.key_alias ) {
				writer.WriteFieldBegin( "key_alias", TypeKind.String, 28 );
				writer.WriteBinary( _key_alias );
				writer.WriteFieldEnd();
			}
			if( Compaction_strategy != null && __isset.compaction_strategy ) {
				writer.WriteFieldBegin( "compaction_strategy", TypeKind.String, 29 );
				writer.WriteString( _compaction_strategy );
				writer.WriteFieldEnd();
			}
			if( Compaction_strategy_options != null && __isset.compaction_strategy_options ) {
				writer.WriteFieldBegin( "compaction_strategy_options", TypeKind.Map, 30 );
				{
					writer.WriteMapBegin( TypeKind.String, TypeKind.String, _compaction_strategy_options.Count );
					foreach( var item in _compaction_strategy_options ) {
						writer.WriteString( item.Key );
						writer.WriteString( item.Value );
					}
					writer.WriteMapEnd();
				}
				writer.WriteFieldEnd();
			}
			if( __isset.row_cache_keys_to_save ) {
				writer.WriteFieldBegin( "row_cache_keys_to_save", TypeKind.Int32, 31 );
				writer.WriteInt32( _row_cache_keys_to_save );
				writer.WriteFieldEnd();
			}
			if( Compression_options != null && __isset.compression_options ) {
				writer.WriteFieldBegin( "compression_options", TypeKind.Map, 32 );
				{
					writer.WriteMapBegin( TypeKind.String, TypeKind.String, _compression_options.Count );
					foreach( var item in _compression_options ) {
						writer.WriteString( item.Key );
						writer.WriteString( item.Value );
					}
					writer.WriteMapEnd();
				}
				writer.WriteFieldEnd();
			}
			if( __isset.bloom_filter_fp_chance ) {
				writer.WriteFieldBegin( "bloom_filter_fp_chance", TypeKind.Double, 33 );
				writer.WriteDouble( _bloom_filter_fp_chance );
				writer.WriteFieldEnd();
			}
			if( Caching != null && __isset.caching ) {
				writer.WriteFieldBegin( "caching", TypeKind.String, 34 );
				writer.WriteString( _caching );
				writer.WriteFieldEnd();
			}
			if( __isset.dclocal_read_repair_chance ) {
				writer.WriteFieldBegin( "dclocal_read_repair_chance", TypeKind.Double, 37 );
				writer.WriteDouble( _dclocal_read_repair_chance );
				writer.WriteFieldEnd();
			}
			if( __isset.populate_io_cache_on_flush ) {
				writer.WriteFieldBegin( "populate_io_cache_on_flush", TypeKind.Bool, 38 );
				writer.WriteBool( _populate_io_cache_on_flush );
				writer.WriteFieldEnd();
			}
			if( __isset.memtable_flush_period_in_ms ) {
				writer.WriteFieldBegin( "memtable_flush_period_in_ms", TypeKind.Int32, 39 );
				writer.WriteInt32( _memtable_flush_period_in_ms );
				writer.WriteFieldEnd();
			}
			if( __isset.default_time_to_live ) {
				writer.WriteFieldBegin( "default_time_to_live", TypeKind.Int32, 40 );
				writer.WriteInt32( _default_time_to_live );
				writer.WriteFieldEnd();
			}
			if( __isset.index_interval ) {
				writer.WriteFieldBegin( "index_interval", TypeKind.Int32, 41 );
				writer.WriteInt32( _index_interval );
				writer.WriteFieldEnd();
			}
			if( Speculative_retry != null && __isset.speculative_retry ) {
				writer.WriteFieldBegin( "speculative_retry", TypeKind.String, 42 );
				writer.WriteString( _speculative_retry );
				writer.WriteFieldEnd();
			}
			if( Triggers != null && __isset.triggers ) {
				writer.WriteFieldBegin( "triggers", TypeKind.List, 43 );
				{
					writer.WriteListBegin( TypeKind.Struct, _triggers.Count );
					foreach( var item in _triggers ) {
						item.Write( writer );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Keyspace: ", Keyspace, " Name: ", Name, " Column_type: ", Column_type, " Comparator_type: ", Comparator_type, " Subcomparator_type: ", Subcomparator_type, " Comment: ", Comment, " Read_repair_chance: ", Read_repair_chance, " Column_metadata: ", Column_metadata, " Gc_grace_seconds: ", Gc_grace_seconds, " Default_validation_class: ", Default_validation_class, " Id: ", Id, " Min_compaction_threshold: ", Min_compaction_threshold, " Max_compaction_threshold: ", Max_compaction_threshold, " Replicate_on_write: ", Replicate_on_write, " Key_validation_class: ", Key_validation_class, " Key_alias: ", Key_alias, " Compaction_strategy: ", Compaction_strategy, " Compaction_strategy_options: ", Compaction_strategy_options, " Compression_options: ", Compression_options, " Bloom_filter_fp_chance: ", Bloom_filter_fp_chance, " Caching: ", Caching, " Dclocal_read_repair_chance: ", Dclocal_read_repair_chance, " Populate_io_cache_on_flush: ", Populate_io_cache_on_flush, " Memtable_flush_period_in_ms: ", Memtable_flush_period_in_ms, " Default_time_to_live: ", Default_time_to_live, " Index_interval: ", Index_interval, " Speculative_retry: ", Speculative_retry, " Triggers: ", Triggers, " Row_cache_size: ", Row_cache_size, " Key_cache_size: ", Key_cache_size, " Row_cache_save_period_in_seconds: ", Row_cache_save_period_in_seconds, " Key_cache_save_period_in_seconds: ", Key_cache_save_period_in_seconds, " Memtable_flush_after_mins: ", Memtable_flush_after_mins, " Memtable_throughput_in_mb: ", Memtable_throughput_in_mb, " Memtable_operations_in_millions: ", Memtable_operations_in_millions, " Merge_shards_chance: ", Merge_shards_chance, " Row_cache_provider: ", Row_cache_provider, " Row_cache_keys_to_save: ", Row_cache_keys_to_save );
		}
	}
}