//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	public partial class CqlMetadata : IFormattable {
		private Dictionary<byte[], Utf8String> _name_types;
		private Dictionary<byte[], Utf8String> _value_types;
		private Utf8String _default_name_type;
		private Utf8String _default_value_type;

		public Dictionary<byte[], Utf8String> Name_types { get { return _name_types; } set { __isset.name_types = true; _name_types = value; } }
		public Dictionary<byte[], Utf8String> Value_types { get { return _value_types; } set { __isset.value_types = true; _value_types = value; } }
		public Utf8String Default_name_type { get { return _default_name_type; } set { __isset.default_name_type = true; _default_name_type = value; } }
		public Utf8String Default_value_type { get { return _default_value_type; } set { __isset.default_value_type = true; _default_value_type = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool name_types { get; set; }
			public bool value_types { get; set; }
			public bool default_name_type { get; set; }
			public bool default_value_type { get; set; }
		}

		public CqlMetadata() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Map ) {
							var localMap = reader.ReadMapBegin();
							Name_types = new Dictionary<byte[], Utf8String>( localMap.Count );
							for( var localCounter = 0; localCounter < localMap.Count; ++localCounter ) {
								var localKey = reader.ReadBinary();
								var localValue = reader.ReadString();
								_name_types[localKey] = localValue;
							}
							reader.ReadMapEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Map ) {
							var localMap1 = reader.ReadMapBegin();
							Value_types = new Dictionary<byte[], Utf8String>( localMap1.Count );
							for( var localCounter1 = 0; localCounter1 < localMap1.Count; ++localCounter1 ) {
								var localKey1 = reader.ReadBinary();
								var localValue1 = reader.ReadString();
								_value_types[localKey1] = localValue1;
							}
							reader.ReadMapEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.String ) {
							Default_name_type = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 4:
						if( field.Type == TypeKind.String ) {
							Default_value_type = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "CqlMetadata" );
			if( Name_types != null && __isset.name_types ) {
				writer.WriteFieldBegin( "name_types", TypeKind.Map, 1 );
				{
					writer.WriteMapBegin( TypeKind.String, TypeKind.String, _name_types.Count );
					foreach( var item in _name_types ) {
						writer.WriteBinary( item.Key );
						writer.WriteString( item.Value );
					}
					writer.WriteMapEnd();
				}
				writer.WriteFieldEnd();
			}
			if( Value_types != null && __isset.value_types ) {
				writer.WriteFieldBegin( "value_types", TypeKind.Map, 2 );
				{
					writer.WriteMapBegin( TypeKind.String, TypeKind.String, _value_types.Count );
					foreach( var item in _value_types ) {
						writer.WriteBinary( item.Key );
						writer.WriteString( item.Value );
					}
					writer.WriteMapEnd();
				}
				writer.WriteFieldEnd();
			}
			if( Default_name_type != null && __isset.default_name_type ) {
				writer.WriteFieldBegin( "default_name_type", TypeKind.String, 3 );
				writer.WriteString( _default_name_type );
				writer.WriteFieldEnd();
			}
			if( Default_value_type != null && __isset.default_value_type ) {
				writer.WriteFieldBegin( "default_value_type", TypeKind.String, 4 );
				writer.WriteString( _default_value_type );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Name_types: ", Name_types, " Value_types: ", Value_types, " Default_name_type: ", Default_name_type, " Default_value_type: ", Default_value_type );
		}
	}
}