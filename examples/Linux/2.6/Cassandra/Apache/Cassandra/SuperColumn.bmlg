//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// A named list of columns.
	/// @param name. see Column.name.
	/// @param columns. A collection of standard Columns.  The columns within a super column are defined in an adhoc manner.
	///                 Columns within a super column do not have to have matching structures (similarly named child columns).
	/// </summary>
	public partial class SuperColumn : IFormattable {
		private byte[] _name;
		private List<Column> _columns;

		public byte[] Name { get { return _name; } set { __isset.name = true; _name = value; } }
		public List<Column> Columns { get { return _columns; } set { __isset.columns = true; _columns = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool name { get; set; }
			public bool columns { get; set; }
		}

		public SuperColumn() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Name = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.List ) {
							var _list0 = reader.ReadListBegin();
							Columns = new List<Column>( _list0.Count );
							for( var _i1 = 0; _i1 < _list0.Count; ++_i1 ) {
								var _elem2 = new Column();
								_elem2.Read( reader );
								Columns.Add( _elem2 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "SuperColumn" );
			if( Name != null && __isset.name ) {
				writer.WriteFieldBegin( "name", TypeKind.String, 1 );
				writer.WriteBinary( _name );
				writer.WriteFieldEnd();
			}
			if( Columns != null && __isset.columns ) {
				writer.WriteFieldBegin( "columns", TypeKind.List, 2 );
				{
					writer.WriteListBegin( TypeKind.Struct, _columns.Count );
					foreach( var item in _columns ) {
						item.Write( writer );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Name: ", Name, " Columns: ", Columns );
		}
	}
}