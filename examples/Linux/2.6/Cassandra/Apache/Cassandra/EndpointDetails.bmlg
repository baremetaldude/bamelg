//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	public partial class EndpointDetails : IFormattable {
		private Utf8String _host;
		private Utf8String _datacenter;
		private Utf8String _rack;

		public Utf8String Host { get { return _host; } set { __isset.host = true; _host = value; } }
		public Utf8String Datacenter { get { return _datacenter; } set { __isset.datacenter = true; _datacenter = value; } }
		public Utf8String Rack { get { return _rack; } set { __isset.rack = true; _rack = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool host { get; set; }
			public bool datacenter { get; set; }
			public bool rack { get; set; }
		}

		public EndpointDetails() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Host = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.String ) {
							Datacenter = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.String ) {
							Rack = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "EndpointDetails" );
			if( Host != null && __isset.host ) {
				writer.WriteFieldBegin( "host", TypeKind.String, 1 );
				writer.WriteString( _host );
				writer.WriteFieldEnd();
			}
			if( Datacenter != null && __isset.datacenter ) {
				writer.WriteFieldBegin( "datacenter", TypeKind.String, 2 );
				writer.WriteString( _datacenter );
				writer.WriteFieldEnd();
			}
			if( Rack != null && __isset.rack ) {
				writer.WriteFieldBegin( "rack", TypeKind.String, 3 );
				writer.WriteString( _rack );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Host: ", Host, " Datacenter: ", Datacenter, " Rack: ", Rack );
		}
	}
}