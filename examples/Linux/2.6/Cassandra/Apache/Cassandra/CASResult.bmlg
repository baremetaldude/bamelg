//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	public partial class CASResult : IFormattable {
		private bool _success;
		private List<Column> _current_values;

		public bool Success { get { return _success; } set { __isset.success = true; _success = value; } }
		public List<Column> Current_values { get { return _current_values; } set { __isset.current_values = true; _current_values = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool success { get; set; }
			public bool current_values { get; set; }
		}

		public CASResult() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Bool ) {
							Success = reader.ReadBool();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.List ) {
							var _list18 = reader.ReadListBegin();
							Current_values = new List<Column>( _list18.Count );
							for( var _i19 = 0; _i19 < _list18.Count; ++_i19 ) {
								var _elem20 = new Column();
								_elem20.Read( reader );
								_current_values.Add( _elem20 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "CASResult" );
			if( __isset.success ) {
				writer.WriteFieldBegin( "success", TypeKind.Bool, 1 );
				writer.WriteBool( _success );
				writer.WriteFieldEnd();
			}
			if( Current_values != null && __isset.current_values ) {
				writer.WriteFieldBegin( "current_values", TypeKind.List, 2 );
				{
					writer.WriteListBegin( TypeKind.Struct, _current_values.Count );
					foreach( var item in _current_values ) {
						item.Write( writer );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Success: ", Success, " Current_values: ", Current_values );
		}
	}
}