//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// A Mutation is either an insert (represented by filling column_or_supercolumn) or a deletion (represented by filling the deletion attribute).
	/// @param column_or_supercolumn. An insert to a column or supercolumn (possibly counter column or supercolumn)
	/// @param deletion. A deletion of a column or supercolumn
	/// </summary>
	public partial class Mutation : IFormattable {
		private ColumnOrSuperColumn _column_or_supercolumn;
		private Deletion _deletion;

		public ColumnOrSuperColumn Column_or_supercolumn { get { return _column_or_supercolumn; } set { __isset.column_or_supercolumn = true; _column_or_supercolumn = value; } }
		public Deletion Deletion { get { return _deletion; } set { __isset.deletion = true; _deletion = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool column_or_supercolumn { get; set; }
			public bool deletion { get; set; }
		}

		public Mutation() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Struct ) {
							Column_or_supercolumn = new ColumnOrSuperColumn();
							Column_or_supercolumn.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Struct ) {
							Deletion = new Deletion();
							Deletion.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "Mutation" );
			if( Column_or_supercolumn != null && __isset.column_or_supercolumn ) {
				writer.WriteFieldBegin( "column_or_supercolumn", TypeKind.Struct, 1 );
				_column_or_supercolumn.Write( writer );
				writer.WriteFieldEnd();
			}
			if( Deletion != null && __isset.deletion ) {
				writer.WriteFieldBegin( "deletion", TypeKind.Struct, 2 );
				_deletion.Write( writer );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Column_or_supercolumn: ", Column_or_supercolumn, " Deletion: ", Deletion );
		}
	}
}