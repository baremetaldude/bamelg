//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// RPC timeout was exceeded.  either a node failed mid-operation, or load was too high, or the requested op was too large.
	/// </summary>
	public partial struct TimedOutException : IFormattable {
		private int _acknowledged_by;
		private bool _acknowledged_by_batchlog;
		private bool _paxos_in_progress;

		/// <summary>
		/// if a write operation was acknowledged by some replicas but not by enough to
		/// satisfy the required ConsistencyLevel, the number of successful
		/// replies will be given here. In case of atomic_batch_mutate method this field
		/// will be set to -1 if the batch was written to the batchlog and to 0 if it wasn't.
		/// </summary>
		public int Acknowledged_by { get { return _acknowledged_by; } set { __isset.acknowledged_by = true; _acknowledged_by = value; } }
		/// <summary>
		/// in case of atomic_batch_mutate method this field tells if the batch
		/// was written to the batchlog.
		/// </summary>
		public bool Acknowledged_by_batchlog { get { return _acknowledged_by_batchlog; } set { __isset.acknowledged_by_batchlog = true; _acknowledged_by_batchlog = value; } }
		/// <summary>
		/// for the CAS method, this field tells if we timed out during the paxos
		/// protocol, as opposed to during the commit of our update
		/// </summary>
		public bool Paxos_in_progress { get { return _paxos_in_progress; } set { __isset.paxos_in_progress = true; _paxos_in_progress = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool acknowledged_by { get; set; }
			public bool acknowledged_by_batchlog { get; set; }
			public bool paxos_in_progress { get; set; }
		}

		public TimedOutException() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Int32 ) {
							Acknowledged_by = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Bool ) {
							Acknowledged_by_batchlog = reader.ReadBool();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.Bool ) {
							Paxos_in_progress = reader.ReadBool();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "TimedOutException" );
			if( __isset.acknowledged_by ) {
				writer.WriteFieldBegin( "acknowledged_by", TypeKind.Int32, 1 );
				writer.WriteInt32( _acknowledged_by );
				writer.WriteFieldEnd();
			}
			if( __isset.acknowledged_by_batchlog ) {
				writer.WriteFieldBegin( "acknowledged_by_batchlog", TypeKind.Bool, 2 );
				writer.WriteBool( _acknowledged_by_batchlog );
				writer.WriteFieldEnd();
			}
			if( __isset.paxos_in_progress ) {
				writer.WriteFieldBegin( "paxos_in_progress", TypeKind.Bool, 3 );
				writer.WriteBool( _paxos_in_progress );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Acknowledged_by: ", Acknowledged_by, " Acknowledged_by_batchlog: ", Acknowledged_by_batchlog, " Paxos_in_progress: ", Paxos_in_progress );
		}
	}
}