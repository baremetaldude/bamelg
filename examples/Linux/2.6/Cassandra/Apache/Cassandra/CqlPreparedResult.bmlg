//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	public partial class CqlPreparedResult : IFormattable {
		private int _itemId;
		private int _count;
		private List<Utf8String> _variable_types;
		private List<Utf8String> _variable_names;

		public int ItemId { get { return _itemId; } set { __isset.itemId = true; _itemId = value; } }
		public int Count { get { return _count; } set { __isset.count = true; _count = value; } }
		public List<Utf8String> Variable_types { get { return _variable_types; } set { __isset.variable_types = true; _variable_types = value; } }
		public List<Utf8String> Variable_names { get { return _variable_names; } set { __isset.variable_names = true; _variable_names = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool itemId { get; set; }
			public bool count { get; set; }
			public bool variable_types { get; set; }
			public bool variable_names { get; set; }
		}

		public CqlPreparedResult() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Int32 ) {
							ItemId = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Int32 ) {
							Count = reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.List ) {
							var _list77 = reader.ReadListBegin();
							Variable_types = new List<Utf8String>( _list77.Count );
							for( var _i78 = 0; _i78 < _list77.Count; ++_i78 ) {
								var _elem79 = reader.ReadString();
								Variable_types.Add( _elem79 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					case 4:
						if( field.Type == TypeKind.List ) {
							var _list80 = reader.ReadListBegin();
							Variable_names = new List<Utf8String>( _list80.Count );
							for( var _i81 = 0; _i81 < _list80.Count; ++_i81 ) {
								var _elem82 = reader.ReadString();
								Variable_names.Add( _elem82 );
							}
							reader.ReadListEnd();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "CqlPreparedResult" );
			if( __isset.itemId ) {
				writer.WriteFieldBegin( "itemId", TypeKind.Int32, 1 );
				writer.WriteInt32( _itemId );
				writer.WriteFieldEnd();
			}
			if( __isset.count ) {
				writer.WriteFieldBegin( "count", TypeKind.Int32, 2 );
				writer.WriteInt32( _count );
				writer.WriteFieldEnd();
			}
			if( Variable_types != null && __isset.variable_types ) {
				writer.WriteFieldBegin( "variable_types", TypeKind.List, 3 );
				{
					writer.WriteListBegin( TypeKind.String, _variable_types.Count );
					foreach( var item in _variable_types ) {
						writer.WriteString( item );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			if( Variable_names != null && __isset.variable_names ) {
				writer.WriteFieldBegin( "variable_names", TypeKind.List, 4 );
				{
					writer.WriteListBegin( TypeKind.String, _variable_names.Count );
					foreach( var item in _variable_names ) {
						writer.WriteString( item );
					}
					writer.WriteListEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "ItemId: ", ItemId, " Count: ", Count, " Variable_types: ", Variable_types, " Variable_names: ", Variable_names );
		}
	}
}