//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	public partial class ColumnDef : IFormattable {
		private byte[] _name;
		private Utf8String _validation_class;
		private IndexType _index_type;
		private Utf8String _index_name;
		private Dictionary<Utf8String, Utf8String> _index_options;

		public byte[] Name { get { return _name; } set { __isset.name = true; _name = value; } }
		public Utf8String Validation_class { get { return _validation_class; } set { __isset.validation_class = true; _validation_class = value; } }
		/// <summary>
		///
		/// <seealso cref="IndexType"/>
		/// </summary>
		public IndexType Index_type { get { return _index_type; } set { __isset.index_type = true; _index_type = value; } }
		public Utf8String Index_name { get { return _index_name; } set { __isset.index_name = true; _index_name = value; } }
		public Dictionary<Utf8String, Utf8String> Index_options { get { return _index_options; } set { __isset.index_options = true; _index_options = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool name { get; set; }
			public bool validation_class { get; set; }
			public bool index_type { get; set; }
			public bool index_name { get; set; }
			public bool index_options { get; set; }
		}

		public ColumnDef() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Name = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.String ) {
							Validation_class = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.Int32 ) {
							Index_type = ( IndexType ) reader.ReadInt32();
						}
						else reader.Skip( field.Type );
						break;

					case 4:
						if( field.Type == TypeKind.String ) {
							Index_name = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 5:
						if( field.Type == TypeKind.Map ) {
							var localMap = reader.ReadMapBegin();
							Index_options = new Dictionary<Utf8String, Utf8String>( localMap.Count );
							for( var localCounter = 0; localCounter < localMap.Count; ++localCounter ) {
								var localKey = reader.ReadString();
								var localValue = reader.ReadString();
								_index_options[localKey] = localValue;
							}
							reader.ReadMapEnd();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "ColumnDef" );
			if( Name != null && __isset.name ) {
				writer.WriteFieldBegin( "name", TypeKind.String, 1 );
				writer.WriteBinary( _name );
				writer.WriteFieldEnd();
			}
			if( Validation_class != null && __isset.validation_class ) {
				writer.WriteFieldBegin( "validation_class", TypeKind.String, 2 );
				writer.WriteString( _validation_class );
				writer.WriteFieldEnd();
			}
			if( __isset.index_type ) {
				writer.WriteFieldBegin( "index_type", TypeKind.Int32, 3 );
				writer.WriteInt32( ( int ) _index_type );
				writer.WriteFieldEnd();
			}
			if( Index_name != null && __isset.index_name ) {
				writer.WriteFieldBegin( "index_name", TypeKind.String, 4 );
				writer.WriteString( _index_name );
				writer.WriteFieldEnd();
			}
			if( Index_options != null && __isset.index_options ) {
				writer.WriteFieldBegin( "index_options", TypeKind.Map, 5 );
				{
					writer.WriteMapBegin( TypeKind.String, TypeKind.String, _index_options.Count );
					foreach( var item in _index_options ) {
						writer.WriteString( item.Key );
						writer.WriteString( item.Value );
					}
					writer.WriteMapEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Name: ", Name, " Validation_class: ", Validation_class, " Index_type: ", Index_type, " Index_name: ", Index_name, " Index_options: ", Index_options );
		}
	}
}