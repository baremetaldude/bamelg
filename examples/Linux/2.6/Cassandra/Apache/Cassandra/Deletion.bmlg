//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// Note that the timestamp is only optional in case of counter deletion.
	/// </summary>
	public partial class Deletion : IFormattable {
		private long _timestamp;
		private byte[] _super_column;
		private SlicePredicate _predicate;

		public long Timestamp { get { return _timestamp; } set { __isset.timestamp = true; _timestamp = value; } }
		public byte[] Super_column { get { return _super_column; } set { __isset.super_column = true; _super_column = value; } }
		public SlicePredicate Predicate { get { return _predicate; } set { __isset.predicate = true; _predicate = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool timestamp { get; set; }
			public bool super_column { get; set; }
			public bool predicate { get; set; }
		}

		public Deletion() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Int64 ) {
							Timestamp = reader.ReadInt64();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.String ) {
							Super_column = reader.ReadBinary();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.Struct ) {
							Predicate = new SlicePredicate();
							Predicate.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "Deletion" );
			if( __isset.timestamp ) {
				writer.WriteFieldBegin( "timestamp", TypeKind.Int64, 1 );
				writer.WriteInt64( _timestamp );
				writer.WriteFieldEnd();
			}
			if( Super_column != null && __isset.super_column ) {
				writer.WriteFieldBegin( "super_column", TypeKind.String, 2 );
				writer.WriteBinary( _super_column );
				writer.WriteFieldEnd();
			}
			if( Predicate != null && __isset.predicate ) {
				writer.WriteFieldBegin( "predicate", TypeKind.Struct, 3 );
				_predicate.Write( writer );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Timestamp: ", Timestamp, " Super_column: ", Super_column, " Predicate: ", Predicate );
		}
	}
}