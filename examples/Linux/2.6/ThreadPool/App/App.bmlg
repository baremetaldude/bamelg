//
// Created by $USER
//

using System;
using System.Threading;

namespace Example {
	public partial class App {
		[EntryPoint]
		private static void Main() {
			var t1 = Thread.Start( () => {
				Console.WriteLine( "Message 1 from new thread [{0}]", Thread.CurrentThread );
			} );

			Thread.Start( () => {
				Console.WriteLine( "Message 2 from new thread [{0}]", Thread.CurrentThread );
			} );

			t1.Join();

			// TP not initialized => every new task creates new thread
			ThreadPool.BeginInvoke( () => {
				Console.WriteLine( "Message 3 from new thread [{0}]", Thread.CurrentThread );
			} );

			ThreadPool.Initialize();

			// TP initialized => every new task go to existing threads
			ThreadPool.BeginInvoke( () => {
				Console.WriteLine( "Message from thread pool worker [{0}]", Thread.CurrentThread );
			} );

			ThreadPool.BeginInvoke( DPC.Create<int>( x => {
				Console.WriteLine( "Message from thread pool worker [{0}] with walue {1}", Thread.CurrentThread, x );
			}, 10 ) );

			Console.WriteLine( "Waiting for detached threads..." );
			Thread.Sleep( 500 ); // wait for detached threads
		}
	}
}