//
// Created by $USER
//

using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Threading;
using System.Web;

using Platform.IO;
using Platform.Kernel;
using Platform.Libc;

namespace Example {
	public partial class App {
		private static bool Trace = false;
		private static bool DisableReaderMapping = false;
		private static bool DisableWriterMapping = false;

		private static AppModeKind AppMode = AppModeKind.Invalid;
		private static Utf8String SourceFile, DestinationFile;

		public enum AppModeKind {
			Invalid,
			Base64,
		}

		[EntryPoint]
		private static void Main() {
			var parameters = Environment.CommandLine;

			if( parameters.Length == 1 ) {
				PrintHelp();
				return;
			}

			for( var i = 1; i < parameters.Length; ++i ) {
				switch( parameters[i] ) {
					case "--help":
						PrintHelp();
						return;

					case "--trace":
						if( Trace ) ErrorSwitchAlreadySpecified( "--trace" );
						Trace = true;
						break;

					case "--disable-reader-mapping":
						if( DisableReaderMapping ) ErrorSwitchAlreadySpecified( "--disable-reader-mapping" );
						DisableReaderMapping = true;
						break;

					case "--disable-writer-mapping":
						if( DisableWriterMapping ) ErrorSwitchAlreadySpecified( "--disable-writer-mapping" );
						DisableWriterMapping = true;
						break;

					case "--base64":
						EnsureAppModeNotSet();
						AppMode = AppModeKind.Base64;
						break;

					default:
						if( !parameters[i].StartsWith( "--" ) ) {
							if( SourceFile == null ) { SourceFile = parameters[i]; continue; }
							if( DestinationFile == null ) { DestinationFile = parameters[i]; continue; }
						}
						Console.WriteLine( "Unknown parameter: {0}", parameters[i] );
						break;
				}
			}

			switch( AppMode ) {
				case AppModeKind.Base64: Base64Convert(); break;
			}
		}

		private static void PrintHelp() {
			Console.WriteLine( "Usage:" );
			Console.WriteLine( "  StreamProcessor --base64                      # stdin to stdout" );
			Console.WriteLine( "  StreamProcessor --base64 InputFile            # file to stdout" );
			Console.WriteLine( "  StreamProcessor --base64 InputFile OutputFile # file to file" );
		}

		private static void ErrorSwitchAlreadySpecified( Utf8String @switch ) {
			Console.WriteLine( "Command line switch already specified: {0}", @switch );
		}

		private static void EnsureAppModeNotSet() {
			if( AppMode != AppModeKind.Invalid ) Console.WriteLine( "Application mode already specified" );
		}

		private static IStream CreateInputStream() {
			Platform.IO.FileStream result;
			if( SourceFile != null ) {
				result = Platform.IO.FileStream.CreateReadStream( SourceFile );
				if( Trace ) Console.WriteLine( "InputFile: {0}", SourceFile );
			}
			else {
				result = new Platform.IO.FileStream( ( FileHandle ) LibcApi.StdIn );
				if( Trace ) Console.WriteLine( "InputFile: {0}", "stdin" );
			}

			if( Trace ) result.ErrorHandler = Platform.PlatformErrorHandlerConsole.Instance;
			return result;
		}

		private static IStream CreateOutputStream() {
			Platform.IO.FileStream result;

			if( DestinationFile != null ) {
				if( DisableWriterMapping ) result = Platform.IO.FileStream.CreateWriteStream( DestinationFile );
				else result = Platform.IO.FileStream.CreateReadWriteStream( DestinationFile );

				if( Trace ) Console.WriteLine( "DestinationFile: {0}", DestinationFile );
			}
			else {
				result = new Platform.IO.FileStream( ( FileHandle ) LibcApi.StdOut );
				if( Trace ) Console.WriteLine( "DestinationFile: {0}", "stdout" );
			}

			if( Trace ) result.ErrorHandler = Platform.PlatformErrorHandlerConsole.Instance;
			return result;
		}

		public static void Base64Convert() {
			using( var reader = CreateInputStream() )
			using( var writer = CreateOutputStream() ) {
				if( DisableReaderMapping ) {
					Base64Convert( writer, reader );
					return;
				}

				var totalLength = reader.Seek( 0, SeekOrigin.End );
				if( Trace ) Console.WriteLine( "InputSize: {0}", totalLength );
				if( totalLength > 0 ) reader.Seek( 0, SeekOrigin.Begin );

				if( totalLength <= 0 || ( sizeof( void* ) == 4 && totalLength >= 128 * 1024 * 1024 ) ) {
					Base64Convert( writer, reader );
					return;
				}

				var readerMapping = reader.CreateReadView( 0, ( int ) totalLength );
				if( readerMapping == null ) {
					Base64Convert( writer, reader );
					return;
				}

				if( DisableWriterMapping ) {
					if( Trace ) System.Console.WriteLine( "Processing: mmap -> convert -> write" );
					System.Text.Base64.Encode( writer, readerMapping.Start, ( int ) readerMapping.DataLength );
					return;
				}

				var outputLength = System.Text.Base64.GetEncodedSize( ( int ) readerMapping.DataLength );
				var writerMapping = writer.CreateWriteView( 0, outputLength );
				if( writerMapping == null ) {
					if( Trace ) System.Console.WriteLine( "Processing: mmap -> convert -> write" );
					System.Text.Base64.Encode( writer, readerMapping.Start, ( int ) readerMapping.DataLength );
					return;
				}

				if( Trace ) System.Console.WriteLine( "Processing: mmap -> convert -> mmap" );
				System.Text.Base64.Encode( ( byte* ) writerMapping.Start, ( int ) writerMapping.DataLength, readerMapping.Start, ( int ) readerMapping.DataLength );
			}
		}

		public static void Base64Convert( IStream writer, IStream reader ) {
			if( Trace ) System.Console.WriteLine( "Processing: read -> convert -> write" );
			System.Text.Base64.Encode( writer, reader, 65536 );
		}
	}
}