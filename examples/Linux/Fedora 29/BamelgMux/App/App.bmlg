//
// Created by Eugeny Grishul
//
// Performs TCP multiplexing C->S where C>>S
// Pretty NetworkStreams, Fibers not used to provide zero-copy, high-throughput, low memory consumption
// Frame: [magic][ClientID][MuxCommand/length]
//

using System;
using System.Collections;
using System.Net;
using System.Random;
using System.Serialization;

using Platform.Kernel;
using Platform.Libc;

namespace Example {
	public partial class App {
		private static int _connectionCounter;
		private static EpollHandle Epoll = new EpollHandle();

		[ReflectionMetadata( Mask = ReflectionMetadata.PublicFields | ReflectionMetadata.NonPublicFields )]
		private struct AppSettings {
			public bool Trace = true;           // trace app execution
			public int ListenBacklog = 128;     // queue length for completely established sockets waiting to be accepted
			public int MaxEvents = 1024;        // max epoll events
			public int ReceiveLowWatermark = 1; // set for client connections

			public int ServerSendBufferSize = 0;
			public int ClientSendBufferSize = 0;

			public int ServerReceiveBufferSize = 0;
			public int ClientReceiveBufferSize = 0;

			public IPv4Endpoint ServerEndpoint = new IPv4Endpoint( 0, 0, 0, 0, 6666 );
			public IPv4Endpoint ClientEndpoint = new IPv4Endpoint( 0, 0, 0, 0, 6667 );

			public AppSettings() {
			}
		}

		private static AppSettings Options = new AppSettings();

		private enum EventSinkType : byte {
			Invalid,

			ServerAccept,
			ClientAccept,

			Server,
			Client,

			Signal,
		}

		public enum MuxCommand : int {
			None = int.MinValue,

			Close,
			ClientConnected,
		}

		private struct EventSink {
			public int ConnectionID;

			public IOHandle Handle;
			public SocketHandle Socket { get { return bitcast<SocketHandle>( Handle ); } }
			public SocketHandleTCP SocketTCP { get { return bitcast<SocketHandleTCP>( Handle ); } }
			public SignalHandle Signal { get { return bitcast<SignalHandle>( Handle ); } }

			public EventSinkType Type;
			public bool Cork;

			public int ServerID;
			public EventSink* Server;

			public void Remove() {
				if( Options.Trace ) Console.WriteLine( "Removed sink {0}", ConnectionID );

				switch( Type ) {
					case EventSinkType.Server:
						_servers.Remove( &this );

						foreach( var sink in _sinks ) {
							if( sink->Server != &this ) continue;

							if( Options.Trace ) Console.WriteLine( "Shutdown sink {0}", sink->ConnectionID );

							LibcApi.shutdown( sink->Handle, SocketShutdownOptions.SHUT_RDWR );
						}

						break;
				}

				Epoll.Remove( Handle );
				_idMapping.Remove( ConnectionID );
				Handle.Close();
				_sinks.Free( &this );

				ConnectionID = -1;
			}
		}

		private struct FrameHeader {
			public const int DefaultMarker = ( int ) 0xDEADFEED;

			public int_littleendian Marker;
			public int_littleendian Source;
			public int_littleendian Length;

			public bool IsMarkerValid { get { return Marker == DefaultMarker; } }
			public void SetMarker() { Marker = DefaultMarker; }
		}

		private static PagedPool<EventSink> _sinks = new PagedPool<EventSink>();
		private static List<EventSink*> _servers = new List<EventSink*>();
		private static List<EventSink*> _stopCork = new List<EventSink*>();
		private static Dictionary<int, EventSink*> _idMapping = new Dictionary<int, EventSink*>();

		private static CRandom _random = new CRandom();

		private static EventSink* CreateAcceptingSocket( EventSinkType type, IPv4Endpoint endpoint ) {
			using( var acceptSocket = new SocketHandleTCP( ProtocolFamily.PF_INET, true ) ) {
				if( !acceptSocket.IsValid ) {
					if( Options.Trace ) Console.WriteLine( "Unable to create socket for {0}", endpoint );
					return null;
				}

				acceptSocket.ReuseAddress = true;
				acceptSocket.DefferedAccept = true;
				acceptSocket.ImmediateDelivery = true;

				if( type == EventSinkType.ServerAccept ) {
					// acceptSocket.ReceiveLowWatermark = sizeof( FrameHeader ); use EPOLLET instead

					if( Options.ServerSendBufferSize > 0 ) acceptSocket.SendBufferSize = Options.ServerSendBufferSize;
					if( Options.ServerReceiveBufferSize > 0 ) acceptSocket.ReceiveBufferSize = Options.ServerReceiveBufferSize;
				}
				else if( type == EventSinkType.ClientAccept ) {
					if( Options.ReceiveLowWatermark > 1 ) acceptSocket.ReceiveLowWatermark = Options.ReceiveLowWatermark;

					if( Options.ClientSendBufferSize > 0 ) acceptSocket.SendBufferSize = Options.ClientSendBufferSize;
					if( Options.ClientReceiveBufferSize > 0 ) acceptSocket.ReceiveBufferSize = Options.ClientReceiveBufferSize;
				}

				if( !acceptSocket.Bind( endpoint ) ) {
					if( Options.Trace ) Console.WriteLine( "Unable to bind {0}", endpoint );
					return null;
				}

				// maximum length of the queue for incomplete sockets can be set using /proc/sys/net/ipv4/tcp_max_syn_backlog
				if( !acceptSocket.Listen( Options.ListenBacklog ) ) {
					if( Options.Trace ) Console.WriteLine( "Unable to listen {0}", endpoint );
					return null;
				}

				var sink = _sinks.Allocate();
				sink->Handle = acceptSocket;
				sink->ConnectionID = _connectionCounter++;
				sink->Type = type;
				sink->Server = null;

				Epoll.Add( acceptSocket, new epoll_event { Events = EPOLL_EVENTS.EPOLLIN, Data = sink } );

				if( Options.Trace ) Console.WriteLine( "Create listening socket {0} {1}", type, acceptSocket );

				acceptSocket = SocketHandleTCP.Invalid;
				return sink;
			}
		}

		private static EventSink* CreateSignalSink( EventSinkType type, sigset_t& signalSet ) {
			var signal = new SignalHandle( signalSet );
			var sink = _sinks.Allocate();
			sink->Handle = signal;
			sink->ConnectionID = 0;
			sink->Type = type;
			sink->Server = null;
			Epoll.Add( signal, new epoll_event { Events = EPOLL_EVENTS.EPOLLIN, Data = sink } );

			if( Options.Trace ) Console.WriteLine( "Create signal handle {0} {1}", type, signal );

			return sink;
		}

		static PipeHandle[2] _pipes;
		static IOHandle _nullDevice;

		static ~App() {
			Epoll.Dispose();
			_pipes[0].Close();
			_pipes[1].Close();
			_nullDevice.Close();
		}

		[EntryPoint]
		private static void Main() {
			LibcApi.pipe( _pipes );
			IOHandle.Open( _nullDevice, "/dev/null", FctlValue.O_RDONLY, 0 );

			if( Environment.CommandLine.Length == 1 ) { // no args
			}
			else if( Environment.CommandLine.Length == 2 ) { // path to config
				var configPath = Environment.CommandLine[1];

				if( System.IO.File.Exists( configPath ) ) {
					using( var stream = System.IO.File.OpenRead( configPath ) )
					using( var reader = new System.IO.StreamReader( stream ) )
						IniSerializer<AppSettings>.Deserialize( Options, reader );
				}
			}
			else {
				Console.WriteLine( "Usage:" );
				Console.WriteLine( "\tBamelgMux" );
				Console.WriteLine( "\tBamelgMux /path/config.ini" );
			}

			if( Options.Trace ) Console.WriteLine( "Setup" );

			var signalledEvents = stackalloc epoll_event[Options.MaxEvents];

			var serverHandler = CreateAcceptingSocket( EventSinkType.ServerAccept, Options.ServerEndpoint );
			if( serverHandler == null ) return;
			if( Options.Trace ) Console.WriteLine( "Accepting backends on: {0}", Options.ServerEndpoint );

			var clientHandler = CreateAcceptingSocket( EventSinkType.ClientAccept, Options.ClientEndpoint );
			if( clientHandler == null ) return;
			if( Options.Trace ) Console.WriteLine( "Accepting clients on: {0}", Options.ClientEndpoint );

			// @{ catch signals
			LibcApi.signal( SignalCode.SIGPIPE, LibcApi.SIG_IGN );
			var signalSet = new sigset_t( SignalCode.SIGINT, SignalCode.SIGQUIT, SignalCode.SIGTERM, SignalCode.SIGHUP, SignalCode.SIGABRT );
			LibcApi.AssertErrno( LibcApi.sigprocmask( ApplySignalCommand.SIG_BLOCK, &signalSet, null ) );
			CreateSignalSink( EventSinkType.Signal, signalSet );
			// @}

			if( Options.Trace ) Console.WriteLine( "Begin dispatching" );

			var exit = false;
			while( !exit ) {
				var polledDescriptors = LibcApi.epoll_wait( Epoll, signalledEvents, Options.MaxEvents, -1 );
				if( Options.Trace ) Console.WriteLine( "Poll: {0} events", polledDescriptors );

				if( polledDescriptors < 0 ) {
					switch( LibcApi.LastError ) {
						case SystemError.EINTR: continue;
						default: LibcApi.AssertErrno( polledDescriptors ); continue;
					}
				}

				for( var i = 0; i < polledDescriptors; ++i ) {
					var& @event = signalledEvents[i];
					var sink = bitcast<EventSink*>( @event.Data );

					switch( sink->Type ) {
						case EventSinkType.ServerAccept: {
								sockaddr_in clientSocketInfo;
								SocketHandleTCP clientSocketHandle;

								while( ( clientSocketHandle = bitcast<SocketHandleTCP>( LibcApi.accept4( sink->Handle, &clientSocketInfo, sizeof( clientSocketInfo ), SocketAcceptFlag.SOCK_CLOEXEC ) ) ).IsValid ) {
									if( Options.Trace ) Console.WriteLine( "Accepted backend {0} {1}", _connectionCounter, clientSocketHandle );

									var serverSink = _sinks.Allocate();
									serverSink->Handle = clientSocketHandle;
									serverSink->ConnectionID = _connectionCounter++;
									serverSink->Type = EventSinkType.Server;
									serverSink->Server = null;

									_servers.Add( serverSink );
									_idMapping.Add( serverSink->ConnectionID, serverSink );

									Epoll.Add( clientSocketHandle, new epoll_event { Events = EPOLL_EVENTS.EPOLLIN | EPOLL_EVENTS.EPOLLET, Data = serverSink } );
								}
							} break;

						case EventSinkType.ClientAccept: {
								sockaddr_in clientSocketInfo;
								SocketHandleTCP clientSocketHandle;

								while( ( clientSocketHandle = bitcast<SocketHandleTCP>( LibcApi.accept4( sink->Handle, &clientSocketInfo, sizeof( clientSocketInfo ), SocketAcceptFlag.SOCK_NONBLOCK | SocketAcceptFlag.SOCK_CLOEXEC ) ) ).IsValid ) {
									if( Options.Trace ) Console.WriteLine( "Accepted client {0} {1}", _connectionCounter, clientSocketHandle );

									if( _servers.Count == 0 ) {
										if( Options.Trace ) Console.WriteLine( "No backends available" );
										clientSocketHandle.Close();
										continue;
									}

									var server = _servers[_random.NextInt( _servers.Count )];

									var clientSink = _sinks.Allocate();
									clientSink->Handle = clientSocketHandle;
									clientSink->ConnectionID = _connectionCounter++;
									clientSink->Type = EventSinkType.Client;
									clientSink->Server = server;
									clientSink->ServerID = server->ConnectionID;
									_idMapping.Add( clientSink->ConnectionID, clientSink );

									if( Options.Trace ) Console.WriteLine( "Client {0} mapped to backend {1}", clientSink->ConnectionID, clientSink->Server->ConnectionID );

									Epoll.Add( clientSocketHandle, new epoll_event { Events = EPOLL_EVENTS.EPOLLIN | EPOLL_EVENTS.EPOLLET, Data = clientSink } );

									var connectedFrame = new FrameHeader { Source = clientSink->ConnectionID, Length = MuxCommand.ClientConnected };
									connectedFrame.SetMarker();
									LibcApi.send( server->Handle, &connectedFrame, sizeof( connectedFrame ), MessageFlags.None ); // notify backend
								}
							} break;

						case EventSinkType.Client: {
								if( Options.Trace ) Console.WriteLine( "{0}: Client write to backend", sink->ConnectionID );

								if( @event.ErrorEvent ) {
									if( Options.Trace ) Console.WriteLine( "{0}: Connection terminated", sink->ConnectionID );

									var emptyFrame = new FrameHeader { Source = sink->ConnectionID, Length = MuxCommand.Close };
									emptyFrame.SetMarker();
									LibcApi.send( sink->Server->Handle, &emptyFrame, sizeof( emptyFrame ), MessageFlags.None ); // notify backend

									goto remove_current_sink;
								}

								if( sink->ServerID != sink->Server->ConnectionID ) {
									if( Options.Trace ) Console.WriteLine( "{0}: Server is dead", sink->ConnectionID );
									goto remove_current_sink;
								}

								var available = sink->Handle.AvailableBytes;
								if( available == 0 ) {
									if( Options.Trace ) Console.WriteLine( "{0}: Client closed connection", sink->ConnectionID );
									goto remove_current_sink;
									// continue;
								}

								if( !sink->Server->Cork ) {
									sink->Server->Cork = sink->Server->SocketTCP.Cork = true;
									_stopCork.Add( sink->Server );
								}

								var frame = new FrameHeader {
									Source = sink->ConnectionID,
									Length = available
								};
								frame.SetMarker();

								if( LibcApi.send( sink->Server->Handle, &frame, sizeof( frame ), MessageFlags.None ) <= 0 ) {
									var lastError = LibcApi.LastError;
									if( Options.Trace ) Console.WriteLine( "{0}: Unable to send {1}", sink->ConnectionID, lastError );
									goto remove_current_sink;
								}

								while( available > 0 ) {
									var readen = LibcApi.splice( sink->Handle, null, _pipes[1], null, ( uint ) available, 0U );
									if( readen <= 0 ) // client closed connection
										goto remove_current_sink;

									var written = LibcApi.splice( _pipes[0], null, sink->Server->Handle, null, ( uint ) readen, 0U );
									if( written != readen )
										goto remove_current_sink;

									available -= readen;
								}
							} break;

						case EventSinkType.Server: {
								if( Options.Trace ) Console.WriteLine( "{0}: Backend write to client", sink->ConnectionID );

								if( @event.ErrorEvent ) // server dead
									goto remove_current_sink;

								FrameHeader frame;
								int readen;

								var available = sink->Handle.AvailableBytes;
								if( available == 0 ) // server closed connection
									goto remove_current_sink;

								if( available < sizeof( frame ) ) // need more data
									continue;

								sink->Socket.RawPeek( &frame, sizeof( frame ), readen );
								if( readen < sizeof( frame ) || !frame.IsMarkerValid )
									goto remove_current_sink;

								var muxCommand = MuxCommand.None;
								if( frame.Length < 0 ) {
									muxCommand = ( MuxCommand ) frame.Length;

									switch( ( MuxCommand ) frame.Length ) {
										default: frame.Length = 0; break;
									}
								}

								if( available < frame.Length + sizeof( frame ) ) continue;

								sink->Socket.RawRead( &frame, sizeof( frame ), readen );
								available -= readen;

								EventSink* clientSink;
								_idMapping.TryGetValue( frame.Source, clientSink );

								switch( muxCommand ) {
									case MuxCommand.None: {
											while( available > 0 ) {
												readen = LibcApi.splice( sink->Handle, null, _pipes[1], null, ( uint ) available, 0U );

												if( readen <= 0 ) // server closed connection
													goto remove_current_sink;

												if( clientSink == null ) {
													var written = LibcApi.splice( _pipes[0], null, _nullDevice, null, ( uint ) readen, 0U ); // drain backend data
												}
												else {
													var written = LibcApi.splice( _pipes[0], null, clientSink->Handle, null, ( uint ) readen, 0U );
													if( written != readen ) {
														clientSink->Remove();
														break;
													}
												}

												available -= readen;
											}

											if( clientSink == null ) {
												var emptyFrame = new FrameHeader { Source = frame.Source, Length = MuxCommand.Close };
												emptyFrame.SetMarker();
												LibcApi.send( sink->Handle, &emptyFrame, sizeof( emptyFrame ), MessageFlags.None ); // notify backend
											}
										} break;

									case MuxCommand.Close: {
											if( clientSink != null )
												LibcApi.shutdown( clientSink->Handle, SocketShutdownOptions.SHUT_RDWR );
										} break;
								}
							} break;

						case EventSinkType.Signal: {
								if( Options.Trace ) Console.WriteLine( "Exit signal received" );

								var signalInfo = sink->Signal.Read();
								exit = true;
								break;
							}
					}

					continue;

				remove_current_sink:
					sink->Remove();
					continue;
				}

				foreach( var sink in _stopCork ) {
					if( sink->Handle.IsValid )
						sink->Cork = sink->SocketTCP.Cork = false;
				}

				_stopCork.Clear();
			}

			foreach( var sink in _sinks ) {
				sink->Handle.Close();
			}
		}
	}
}