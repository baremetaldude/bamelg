//
// Created by $USER
//

using System;
using System.IO;
using System.Net;
using System.Serialization;

using Platform.IO;

namespace Example {
	class Test {
		// By default metadata for fields, properties, methods not generated for classes/structs
		// 'ReflectionMetadataAttribute' used to modify default behaviour and specify which metadata you are interesting in. Serialization code use metadata to detect which fields and properties need to be serialized
		[ReflectionMetadata( Mask = ReflectionMetadata.PublicFields | ReflectionMetadata.NonPublicFields )] // generate metadata for public and non-public fields inside 'SerializedStructure'
		public struct SerializedStructure {
			SerializedStructure() { }

			sbyte SByte;
			byte Byte;

			short Short;
			ushort UShort;

			int Int;
			uint UInt;

			long Long;
			ulong ULong;

			SbcsString SbcsString;
			Utf8String Utf8String;
			Utf8String Utf8StringProperty { get; set; }
			string Utf16String;
			Utf32String Utf32String;

			Utf8String EmptyString;
			Utf8String NullString;
			Utf8String NullStringProperty { get; set; }

			float Float;
			double Double;

			Guid Guid;

			DateTime DateTime;
			TimeSpan TimeSpan;

			IPv4Address IPv4Address;
			IPv4Endpoint IPv4Endpoint;
			IPv4Endpoint IPv4EndpointProperty { get; set; }

			TestEnum EnumField;
			TestEnum EnumProperty { get; set; }

			static void EnsureEquals( SerializedStructure& x, SerializedStructure& y ) {
				Assert.IsTrue( x.SByte == y.SByte );
				Assert.IsTrue( x.Byte == y.Byte );
				Assert.IsTrue( x.Short == y.Short );
				Assert.IsTrue( x.UShort == y.UShort );
				Assert.IsTrue( x.UInt == y.UInt );
				Assert.IsTrue( x.Long == y.Long );
				Assert.IsTrue( x.ULong == y.ULong );
				Assert.IsTrue( x.SbcsString == y.SbcsString );
				Assert.IsTrue( x.Utf8String == y.Utf8String );
				Assert.IsTrue( x.Utf8StringProperty == y.Utf8StringProperty );
				Assert.IsTrue( x.Utf16String == y.Utf16String );
				Assert.IsTrue( x.Utf32String == y.Utf32String );
				Assert.IsTrue( x.NullString == y.NullString );
				Assert.IsTrue( x.NullStringProperty == y.NullStringProperty );
				Assert.IsTrue( x.EmptyString == y.EmptyString );
				Assert.IsTrue( x.Float == y.Float );
				Assert.IsTrue( x.Double == y.Double );
				Assert.IsTrue( x.Guid == y.Guid );
				Assert.IsTrue( x.DateTime == y.DateTime );
				Assert.IsTrue( x.TimeSpan == y.TimeSpan );
				Assert.IsTrue( x.IPv4Address == y.IPv4Address );
				Assert.IsTrue( x.IPv4Endpoint == y.IPv4Endpoint );
				Assert.IsTrue( x.IPv4EndpointProperty == y.IPv4EndpointProperty );
				Assert.IsTrue( x.EnumField == y.EnumField );
				Assert.IsTrue( x.EnumProperty == y.EnumProperty );
			}
		}

		public enum TestEnum {
			Element1,
			Element2,
			Element3,
		}

		[EntryPoint]
		public static void Main() {
			for( var i = 0; i < typeof( TestEnum ).ElementCount; ++i ) {
				var element = enumvalue<TestEnum>( i );
				Console.WriteLine( "Element[{0}]: {1}", element.GetIndex(), element );
			}

			var x = new SerializedStructure() {
				SByte = 1,
				Byte = 2,
				Short = 3,
				UShort = 4,
				Int = 5,
				UInt = 6,
				Long = 7,
				ULong = 8,

				SbcsString = new SbcsString( "XYZ1" ),
				Utf8String = new Utf8String( "XYZ2" ),
				Utf8StringProperty = new Utf8String( "XYZ2p" ),
				Utf16String = new Utf16String( "XYZ3" ),
				Utf32String = new Utf32String( "XYZ4" ),

				NullString = null,
				NullStringProperty = null,
				EmptyString = "",

				Float = 10.5f,
				Double = 11.5,

				Guid = Guid.Parse( "{4C0B33B7-315A-4EF8-9627-10849850E053}" ),

				EnumField = TestEnum.Element2,
				EnumProperty = TestEnum.Element3,

				DateTime = new DateTime( 1986, 1, 5 ),
				TimeSpan = TimeSpan.FromMinutes( 6 ),

				IPv4Address = IPv4Address.Parse( "192.168.1.1" ),
				IPv4Endpoint = IPv4Endpoint.Parse( "192.168.1.2:3456" ),
				IPv4EndpointProperty = IPv4Endpoint.Parse( "192.168.1.3:3457" )
			};

			{
				Console.WriteLine( "== Check binary serializer: FileStream ==" );
				SerializedStructure y;

				using( var stream = System.IO.File.OpenWrite( "SerializedData.bin" ) )
				using( var writer = new BinaryWriter( stream ) )
					BinarySerializer<SerializedStructure>.Serialize( x, writer );

				using( var stream = System.IO.File.OpenRead( "SerializedData.bin" ) )
				using( var reader = new BinaryReader( stream ) )
					BinarySerializer<SerializedStructure>.Deserialize( y, reader );

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check binary serializer + deflate stream: FileStream ==" );
				SerializedStructure y;

				{
					using( var stream = System.IO.File.OpenWrite( "SerializedData.dfl" ) )
					using( var writer = new BinaryWriter( DeflateStream.CreateWrite( stream, 9 ) ) )
						BinarySerializer<SerializedStructure>.Serialize( x, writer );
				}

				using( var stream = System.IO.File.OpenRead( "SerializedData.dfl" ) )
				using( var reader = new BinaryReader( DeflateStream.CreateRead( stream ) ) )
					BinarySerializer<SerializedStructure>.Deserialize( y, reader );

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check binary serializer + deflate stream + small/slow buffers: FileStream ==" );
				SerializedStructure y;

				using( var stream = System.IO.File.OpenWrite( "SerializedData2.dfl" ) )
				using( var writer = new BinaryWriter( new BufferedStream.WriteStream( DeflateStream.CreateWrite( new BufferedStream.WriteStream( stream, 256 ), 9 ), 25 ) ) )
					// explanation: BinaryWriter -> BufferedStream(25) -> DeflateStream(zlib buffer) -> BufferedStream(256) -> FileStream(kernel buffer)
					BinarySerializer<SerializedStructure>.Serialize( x, writer );

				using( var stream = System.IO.File.OpenRead( "SerializedData2.dfl" ) )
				using( var reader = new BinaryReader( new BufferedStream.ReadStream( DeflateStream.CreateRead( new BufferedStream.ReadStream( stream, 30 ) ), 27 ) ) )
					// explanation: FileStream(kernel buffer) -> BufferedStream(30) -> DeflateStream(zlib buffer) -> BufferedStream(27) -> BinaryReader
					BinarySerializer<SerializedStructure>.Deserialize( y, reader );

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check ini serializer: FileStream ==" );
				SerializedStructure y;

				using( var stream = System.IO.File.OpenWrite( "SerializedData.ini" ) )
				using( var writer = new StreamWriter( stream ) )
					IniSerializer<SerializedStructure>.Serialize( x, writer );

				using( var stream = System.IO.File.OpenRead( "SerializedData.ini" ) )
				using( var reader = new StreamReader( stream ) )
					IniSerializer<SerializedStructure>.Deserialize( y, reader );

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check binary serializer: MemoryStream ==" );
				SerializedStructure y;

				using( var stream = new MemoryStream() ) {
					using( var writer = new BinaryWriter( stream ) )
						BinarySerializer<SerializedStructure>.Serialize( x, writer );

					stream.Position = 0;

					using( var reader = new BinaryReader( stream ) )
						BinarySerializer<SerializedStructure>.Deserialize( y, reader );
				}

				SerializedStructure.EnsureEquals( x, y );
			}

			{
				Console.WriteLine( "== Check binary serializer + deflate stream: MemoryStream ==" );
				SerializedStructure y;

				using( var stream = new MemoryStream() ) {
					using( var writer = new BinaryWriter( DeflateStream.CreateWrite( stream, 9 ) ) )
						BinarySerializer<SerializedStructure>.Serialize( x, writer );

					stream.Position = 0;

					using( var reader = new BinaryReader( DeflateStream.CreateRead( stream ) ) )
						BinarySerializer<SerializedStructure>.Deserialize( y, reader );
				}

				SerializedStructure.EnsureEquals( x, y );
			}
		}
	}
}