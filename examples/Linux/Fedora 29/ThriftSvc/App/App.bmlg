//
// Created by $USER
//

using System;
using System.Collections;
using System.IO;
using System.Net;

using Platform.IO;

namespace Example {
	public partial class App {
		static ushort TcpConnectionPort = 7070;
		static string SocketConnectionPath = @"/var/run/ThriftServer.socket";

		[EntryPoint]
		private static void Main() {
			var eventLoop = new EventLoop() { Tracing = true };
			eventLoop.CatchExitSignals(); // convert signals to events

			// @{ setup server

			var serverHandler = new ThriftServerImpl();
			var server = new ThriftServer( new Svc2.RequestHandler( serverHandler ) );
			server.Attach( eventLoop );

			eventLoop.BeginInvoke( () => {
				Fiber.Start( 16, () => {
					var tcpListen = false;
					var tcpListenReported = false;

					var socketListen = false;
					var socketListenReported = false;

					while( true ) {
						if( !tcpListen ) {
							tcpListen = server.Listen( TcpConnectionPort );

							if( tcpListen )
								Console.WriteLine( "Listen TCP port {0}", TcpConnectionPort );
							else if( !tcpListenReported ) {
								Console.WriteLine( "Unable bind TCP port {0}", TcpConnectionPort );
								tcpListenReported = true;
							}
						}

						if( !socketListen ) {
							socketListen = server.Listen( SocketConnectionPath );

							if( socketListen )
								Console.WriteLine( "Listen socket '{0}'", SocketConnectionPath );
							else if( !socketListenReported ) {
								Console.WriteLine( "Unable to bind socket '{0}'", SocketConnectionPath );
								socketListenReported = true;
							}
						}

						var all = true;

						all &= tcpListen;
						all &= socketListen;

						if( !all ) {
							using( Fiber.CancellationRegion() ) {
								Fiber.Sleep( 1000 );
								if( Fiber.IsCancelled ) return;
							}

							continue;
						}

						break;
					}

					PrintConnectionOptions();
				}, "resource allocator" );
			} );

			// @}

			eventLoop.Dispatch();
		}

		static void PrintConnectionOptions() {
			Console.WriteConcatLine( "Dispatching started: use port ", TcpConnectionPort, " or '", SocketConnectionPath, "' to connect with framed binary protocol" );
		}

		public class ThriftServerImpl : Svc2.IApi {
			public ThriftServerImpl() {
			}

			public int add( int left, int right ) {
				return left + right;
			}

			public List<Utf8String> get_strings() {
				var result = new List<Utf8String>();
				result.Add( "yo1" );
				result.Add( "yo2" );
				result.Add( "yo3" );
				return result;
			}

			public Dictionary<Utf8String, Utf8String> echo( Dictionary<Utf8String, Utf8String> value ) {
				if( value == null ) return null;

				value.Add( "google", "maps.google.com" );
				value.Add( "yandex", "maps.yandex.ru" );
				return value;
			}

			public HashSet<Utf8String> get_strings2() {
				var result = new HashSet<Utf8String>();
				result.Add( "bamelg" );
				result.Add( "rocks" );
				return result;
			}

			public KVP echo2( KVP value ) {
				return value;
			}
		}
	}
}