//
// Created by $USER
//

using System;
using System.Diagnostics;
using System.Threading;

using Platform.IO;
using Platform.Libc;

namespace Example {
	class Test {
		[EntryPoint]
		static void Main() {
			using( var eventLoop = new EventLoop() {
				// Tracing = true,
				// TracingAlarmQueue = true
			} ) {
				eventLoop.CatchExitSignals(); // convert signals to events

				// eventLoop.Invoke( () => Console.WriteLine( "'Invoke()' from same thread" ) ); not dispatched yet
				eventLoop.BeginInvoke( () => Console.WriteLine( "deferred 'Invoke()' from same thread" ) );

				eventLoop.BeginInvoke( () => {
					new pthread_t( () => { // captured 'eventLoop' alive while 'eventLoop.Dispatch()' running
						eventLoop.Invoke( () => Console.WriteLine( "'Invoke()' from another thread" ) );
						eventLoop.BeginInvoke( () => Console.WriteLine( "deferred 'Invoke()' from another thread" ) );
					} ).Detach();
				} );

				var unseen = eventLoop.BeginAlarmUnbiased( TimeSpan.FromSeconds( 1 ), TimeSpan.FromSeconds( 1 ), () => {
					Console.WriteLine( "Unseen alarm" );
				} );

				eventLoop.ScheduleUnbiased( TimeSpan.FromMilliseconds( 500 ), () => {
					eventLoop.RemoveAlarm( unseen );
				} );

				using( Console.AttributedRegion( ConsoleColor.White ) )
					Console.WriteLine( "UTC='{0:yyyy.MM.dd HH:mm:ss.fff}' Unbiased='{1:yyyy.MM.dd HH:mm:ss.ffffff}'", DateTime.UtcNow, DateTime.UnbiasedNow );

				var unalignedUnbiasedAlarm = eventLoop.BeginAlarmUnbiased( TimeSpan.FromSeconds( 1 ), TimeSpan.FromSeconds( 1 ), () => {
					using( Console.AttributedRegion( ConsoleColor.Yellow ) )
						Console.WriteLine( "Unaligned       {0} signalled at UTC='{1:yyyy.MM.dd HH:mm:ss.fff}' Unbiased='{2:yyyy.MM.dd HH:mm:ss.ffffff}'", "Unbiased alarm", DateTime.UtcNow, DateTime.UnbiasedNow );
				} );

				var unalignedUtcAlarm = eventLoop.BeginAlarmUtc( TimeSpan.FromSeconds( 3 ), TimeSpan.FromSeconds( 1 ), () => {
					using( Console.AttributedRegion( ConsoleColor.DarkYellow ) )
						Console.WriteLine( "Unaligned       {0} signalled at UTC='{1:yyyy.MM.dd HH:mm:ss.fff}' Unbiased='{2:yyyy.MM.dd HH:mm:ss.ffffff}'", "UTC alarm     ", DateTime.UtcNow, DateTime.UnbiasedNow );
				} );

				var alignedUnbiasedAlarm = eventLoop.BeginAlarmUnbiased( TimeSpan.FromSeconds( 1 ), () => {
					using( Console.AttributedRegion( ConsoleColor.Green ) )
						Console.WriteLine( "UnbiasedAligned {0} signalled at UTC='{1:yyyy.MM.dd HH:mm:ss.fff}' Unbiased='{2:yyyy.MM.dd HH:mm:ss.ffffff}'", "Unbiased alarm", DateTime.UtcNow, DateTime.UnbiasedNow );
				} );

				var alignedToUtcUnbiasedAlarm = eventLoop.BeginAlarmUnbiasedUtcAligned( TimeSpan.FromSeconds( 1 ), () => {
					using( Console.AttributedRegion( ConsoleColor.Magenta ) )
						Console.WriteLine( "UtcAligned      {0} signalled at UTC='{1:yyyy.MM.dd HH:mm:ss.fff}' Unbiased='{2:yyyy.MM.dd HH:mm:ss.ffffff}'", "Unbiased alarm", DateTime.UtcNow, DateTime.UnbiasedNow );
				} );

				var alignedUtcAlarm = eventLoop.BeginAlarmUtc( TimeSpan.FromSeconds( 1 ), () => {
					using( Console.AttributedRegion( ConsoleColor.Blue ) )
						Console.WriteLine( "Aligned         {0} signalled at UTC='{1:yyyy.MM.dd HH:mm:ss.fff}' Unbiased='{2:yyyy.MM.dd HH:mm:ss.ffffff}'", "UTC alarm     ", DateTime.UtcNow, DateTime.UnbiasedNow );
				} );

				eventLoop.ScheduleUnbiased( TimeSpan.FromSeconds( 6 ), () => {
					Console.WriteLine( "Remove alarms" );
					eventLoop.RemoveAlarm( unalignedUtcAlarm );
					eventLoop.RemoveAlarm( unalignedUnbiasedAlarm );
					eventLoop.RemoveAlarm( alignedUtcAlarm );
					eventLoop.RemoveAlarm( alignedToUtcUnbiasedAlarm );
					eventLoop.RemoveAlarm( alignedUnbiasedAlarm );
					eventLoop.RequestExit();
				} );

				eventLoop.ScheduleUnbiased( TimeSpan.FromSeconds( 8 ), () => {
					eventLoop.RequestExit();
				} );

				eventLoop.BeginProcess( new ProcessStartInfo( "/bin/bash", "-c", "-x", "sleep 6" ), DPC.Create( () => {
					Console.WriteLine( "External program exited" );
				} ) );

				eventLoop.BeginProcess( new ProcessStartInfo( "/bin/bash", "-c", "-x", "sleep 60" ), DPC.Create( () => {
					Console.WriteLine( "External program continue work after EventLoop.Dispatch()" );
				} ) );

				eventLoop.BeginFork( () => {
					Console.WriteLine( "BeginFork worker sleep for 3000" );
					System.Threading.Thread.Sleep( 3000 );
				}, DPC.Create( () => {
					Console.WriteLine( "Fork execution completed!" );
				} ) );

				eventLoop.BeginFork( () => {
					Console.WriteLine( "BeginFork worker sleep for 30000" );
					System.Threading.Thread.Sleep( 30000 );
				}, DPC.Create( () => {
					Console.WriteLine( "Fork continue work after EventLoop.Dispatch()" );
				} ) );

				eventLoop.Dispatch(); // wait until RequestExit
				// eventLoop.BeginDispatch(); eventLoop.EndDispatch();
			}
		}
	}
}