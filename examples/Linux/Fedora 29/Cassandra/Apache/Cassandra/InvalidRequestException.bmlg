//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// Invalid request could mean keyspace or column family does not exist, required parameters are missing, or a parameter is malformed.
	/// why contains an associated error message.
	/// </summary>
	public partial struct InvalidRequestException : IFormattable {
		private Utf8String _why;

		public Utf8String Why { get { return _why; } set { __isset.why = true; _why = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool why { get; set; }
		}

		public InvalidRequestException() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Why = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "InvalidRequestException" );
			if( Why != null && __isset.why ) {
				writer.WriteFieldBegin( "why", TypeKind.String, 1 );
				writer.WriteString( _why );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Why: ", Why );
		}
	}
}