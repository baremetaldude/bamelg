//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// Methods for fetching rows/records from Cassandra will return either a single instance of ColumnOrSuperColumn or a list
	/// of ColumnOrSuperColumns (get_slice()). If you're looking up a SuperColumn (or list of SuperColumns) then the resulting
	/// instances of ColumnOrSuperColumn will have the requested SuperColumn in the attribute super_column. For queries resulting
	/// in Columns, those values will be in the attribute column. This change was made between 0.3 and 0.4 to standardize on
	/// single query methods that may return either a SuperColumn or Column.
	///
	/// If the query was on a counter column family, you will either get a counter_column (instead of a column) or a
	/// counter_super_column (instead of a super_column)
	///
	/// @param column. The Column returned by get() or get_slice().
	/// @param super_column. The SuperColumn returned by get() or get_slice().
	/// @param counter_column. The Counterolumn returned by get() or get_slice().
	/// @param counter_super_column. The CounterSuperColumn returned by get() or get_slice().
	/// </summary>
	public partial class ColumnOrSuperColumn : IFormattable {
		private Column _column;
		private SuperColumn _super_column;
		private CounterColumn _counter_column;
		private CounterSuperColumn _counter_super_column;

		public Column Column { get { return _column; } set { __isset.column = true; _column = value; } }
		public SuperColumn Super_column { get { return _super_column; } set { __isset.super_column = true; _super_column = value; } }
		public CounterColumn Counter_column { get { return _counter_column; } set { __isset.counter_column = true; _counter_column = value; } }
		public CounterSuperColumn Counter_super_column { get { return _counter_super_column; } set { __isset.counter_super_column = true; _counter_super_column = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool column { get; set; }
			public bool super_column { get; set; }
			public bool counter_column { get; set; }
			public bool counter_super_column { get; set; }
		}

		public ColumnOrSuperColumn() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Struct ) {
							Column = new Column();
							Column.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.Struct ) {
							Super_column = new SuperColumn();
							Super_column.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.Struct ) {
							Counter_column = new CounterColumn();
							Counter_column.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					case 4:
						if( field.Type == TypeKind.Struct ) {
							Counter_super_column = new CounterSuperColumn();
							Counter_super_column.Read( reader );
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "ColumnOrSuperColumn" );
			if( Column != null && __isset.column ) {
				writer.WriteFieldBegin( "column", TypeKind.Struct, 1 );
				_column.Write( writer );
				writer.WriteFieldEnd();
			}
			if( Super_column != null && __isset.super_column ) {
				writer.WriteFieldBegin( "super_column", TypeKind.Struct, 2 );
				_super_column.Write( writer );
				writer.WriteFieldEnd();
			}
			if( Counter_column != null && __isset.counter_column ) {
				writer.WriteFieldBegin( "counter_column", TypeKind.Struct, 3 );
				_counter_column.Write( writer );
				writer.WriteFieldEnd();
			}
			if( Counter_super_column != null && __isset.counter_super_column ) {
				writer.WriteFieldBegin( "counter_super_column", TypeKind.Struct, 4 );
				_counter_super_column.Write( writer );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Column: ", Column, " Super_column: ", Super_column, " Counter_column: ", Counter_column, " Counter_super_column: ", Counter_super_column );
		}
	}
}