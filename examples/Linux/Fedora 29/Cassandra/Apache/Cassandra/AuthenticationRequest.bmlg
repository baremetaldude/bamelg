//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// Authentication requests can contain any data, dependent on the IAuthenticator used
	/// </summary>
	public partial class AuthenticationRequest : IFormattable {
		private Dictionary<Utf8String, Utf8String> _credentials;

		public Dictionary<Utf8String, Utf8String> Credentials { get { return _credentials; } set { __isset.credentials = true; _credentials = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool credentials { get; set; }
		}

		public AuthenticationRequest() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.Map ) {
							var localMap = reader.ReadMapBegin();
							Credentials = new Dictionary<Utf8String, Utf8String>( localMap.Count );
							for( var localCounter = 0; localCounter < localMap.Count; ++localCounter ) {
								var localKey = reader.ReadString();
								var localValue = reader.ReadString();
								_credentials[localKey] = localValue;
							}
							reader.ReadMapEnd();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "AuthenticationRequest" );
			if( Credentials != null && __isset.credentials ) {
				writer.WriteFieldBegin( "credentials", TypeKind.Map, 1 );
				{
					writer.WriteMapBegin( TypeKind.String, TypeKind.String, _credentials.Count );
					foreach( var item in _credentials ) {
						writer.WriteString( item.Key );
						writer.WriteString( item.Value );
					}
					writer.WriteMapEnd();
				}
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Credentials: ", Credentials );
		}
	}
}