//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Serialization.Thrift;

namespace Apache.Cassandra {
	/// <summary>
	/// Represents input splits used by hadoop ColumnFamilyRecordReaders
	/// </summary>
	public partial class CfSplit : IFormattable {
		private Utf8String _start_token;
		private Utf8String _end_token;
		private long _row_count;

		public Utf8String Start_token { get { return _start_token; } set { __isset.start_token = true; _start_token = value; } }
		public Utf8String End_token { get { return _end_token; } set { __isset.end_token = true; _end_token = value; } }
		public long Row_count { get { return _row_count; } set { __isset.row_count = true; _row_count = value; } }

		public Isset __isset = default( Isset );
		public struct Isset {
			public bool start_token { get; set; }
			public bool end_token { get; set; }
			public bool row_count { get; set; }
		}

		public CfSplit() {
		}

		public void Read( ProtocolCodec reader ) {
			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop ) break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String ) {
							Start_token = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 2:
						if( field.Type == TypeKind.String ) {
							End_token = reader.ReadString();
						}
						else reader.Skip( field.Type );
						break;

					case 3:
						if( field.Type == TypeKind.Int64 ) {
							Row_count = reader.ReadInt64();
						}
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}
				reader.ReadFieldEnd();
			}
			reader.ReadStructEnd();
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "CfSplit" );
			if( Start_token != null && __isset.start_token ) {
				writer.WriteFieldBegin( "start_token", TypeKind.String, 1 );
				writer.WriteString( _start_token );
				writer.WriteFieldEnd();
			}
			if( End_token != null && __isset.end_token ) {
				writer.WriteFieldBegin( "end_token", TypeKind.String, 2 );
				writer.WriteString( _end_token );
				writer.WriteFieldEnd();
			}
			if( __isset.row_count ) {
				writer.WriteFieldBegin( "row_count", TypeKind.Int64, 3 );
				writer.WriteInt64( _row_count );
				writer.WriteFieldEnd();
			}
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Start_token: ", Start_token, " End_token: ", End_token, " Row_count: ", Row_count );
		}
	}
}