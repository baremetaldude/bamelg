//
// Created by $USER
//

using System;
using System.Collections;
using System.IO;
using System.Net;

using Platform.IO;
using Platform.Kernel;
using Platform.Libc;

namespace Example {
	// http://192.168.2.154:8080/
	public partial class App {
		[EntryPoint]
		private static void Main() {
			System.Threading.ThreadPool.Initialize();

			utsname value;
			LibcApi.uname( value );

			Console.WriteLine( "PID={0}", LibcApi.getpid() );
			Console.WriteLine( "sysname == '{0}', nodename == '{1}', release == '{2}', version == '{3}', machine == '{4}', domainname == '{5}'", new CString( &value.sysname[0] ), new CString( &value.nodename[0] ), new CString( &value.release[0] ), new CString( &value.version[0] ), new CString( &value.machine[0] ), new CString( &value.domainname[0] ) );

			Console.WriteLine( "@{ Environment variables:" );
			for( var i = 0; LibcApi.environ[i] != null; ++i ) Console.WriteLine( "\t{0}", LibcApi.environ[i] );
			Console.WriteLine( "@}" );
			Console.WriteLine();

			var eventLoop = new EventLoop() { Tracing = true };
			eventLoop.CatchExitSignals(); // convert signals to events

			eventLoop.BeginInvoke( Worker );

			eventLoop.Dispatch();
		}

		private static void Worker() {
			Fiber.Start( 8, LoadPage );

			FetchStart = DateTime.UnbiasedNow;
		}

		private static DateTime FetchStart;

		private static void LoadPage() {
			var host = "www.gnu.org";
			var path = "/software/libc/manual/html_node/Host-Names.html";

			hostent* hostent;

			using( Fiber.AsyncCompletionRegion() )
				hostent = LibcApi.gethostbyname( ( Utf8String ) host );

			if( hostent == null ) {
				Console.WriteLine( "Unable to resolve name" );
				return;
			}

			if( hostent->h_addrtype != ProtocolFamily.PF_INET ) {
				Console.WriteLine( "Unsupported protocol family" );
				return;
			}

			var addresses = new List<IPv4Address>( 6 );
			for( var i = 0; hostent->h_addr_list[i] != null; ++i ) {
				addresses.Add( new IPv4Address( cast<in_addr*>( hostent->h_addr_list[i] )->Address ) );
			}

			if( addresses.Count == 0 ) return;

			var socket = new SocketHandleTCP();
			if( socket.Connect( new IPv4Endpoint( addresses[0], 80 ) ) != SystemError.None ) {
				Console.WriteLine( "Unable to connect" );
				return;
			}

			socket.ImmediateDelivery = true;

			var client = new HttpClient( new NetworkStream( socket ) );
			var str = client.DownloadStream( host, path );

			if( str == null ) {
				Console.WriteLine( "Unable to get download stream" );
				return;
			}

			var filename = Utf8String.Format( "/tmp/{0:X16}.{1}.htm", DateTime.UnbiasedNow.Ticks, Fiber.Current );

			using( Console.AttributedRegion( ConsoleColor.Yellow ) )
				Console.WriteLine( "Begin write download stream written to '{0}'", filename );

			using( Fiber.CancellationRegion() )
			using( var fs = System.IO.File.OpenWrite( filename ) ) {
				fs.Write( str );
			}

			Fiber.FiberManager.CurrentEventLoop.RequestExit();
		}
	}
}