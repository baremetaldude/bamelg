//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Example {
	public static partial class Svc1 {
		public interface IApi {
			int add( int left, int right );
			List<Utf8String> get_strings();
			Dictionary<Utf8String, Utf8String> echo( Dictionary<Utf8String, Utf8String> value );
		}

		public class Client : IApi {
			protected ProtocolCodec _reader, _writer;
			protected int _seqid;
			private IExceptionHandler _exceptionHandler = ExceptionHandlerConsole.Instance;
			public IExceptionHandler ExceptionHandler {
				get { return _exceptionHandler; }
				set { _exceptionHandler = value; }
			}


			public Client( ProtocolCodec prot )
				: this( prot, prot ) { }

			public Client( ProtocolCodec reader, ProtocolCodec writer ) {
				_reader = reader;
				_writer = writer;
			}

			public int add( int left, int right ) {
				_writer.WriteMessageBegin( "add", MessageInfo.Kind.Call, _seqid );
				var args = new add_args();
				args.Left = left;
				args.Right = right;
				args.Write( _writer );
				_writer.WriteMessageEnd();

				var msg = _reader.ReadMessageBegin();
				if( msg.Type == MessageInfo.Kind.Exception ) {
					var x = ServerException.Read( _reader );
					_reader.ReadMessageEnd();
					_exceptionHandler.OnException( x );
					return default( int );
				}

				var result = new add_result();
				result.Read( _reader );
				_reader.ReadMessageEnd();
				if( result.__isset.success ) return result.Success;
				_exceptionHandler.OnException( new ServerException( ServerException.Kind.MissingResult ) );
				return default( int );
			}

			public List<Utf8String> get_strings() {
				_writer.WriteMessageBegin( "get_strings", MessageInfo.Kind.Call, _seqid );
				var args = new get_strings_args();
				args.Write( _writer );
				_writer.WriteMessageEnd();

				var msg = _reader.ReadMessageBegin();
				if( msg.Type == MessageInfo.Kind.Exception ) {
					var x = ServerException.Read( _reader );
					_reader.ReadMessageEnd();
					_exceptionHandler.OnException( x );
					return default( List<Utf8String> );
				}

				var result = new get_strings_result();
				result.Read( _reader );
				_reader.ReadMessageEnd();
				if( result.__isset.success ) return result.Success;
				_exceptionHandler.OnException( new ServerException( ServerException.Kind.MissingResult ) );
				return default( List<Utf8String> );
			}

			public Dictionary<Utf8String, Utf8String> echo( Dictionary<Utf8String, Utf8String> value ) {
				_writer.WriteMessageBegin( "echo", MessageInfo.Kind.Call, _seqid );
				var args = new echo_args();
				args.Value = value;
				args.Write( _writer );
				_writer.WriteMessageEnd();

				var msg = _reader.ReadMessageBegin();
				if( msg.Type == MessageInfo.Kind.Exception ) {
					var x = ServerException.Read( _reader );
					_reader.ReadMessageEnd();
					_exceptionHandler.OnException( x );
					return default( Dictionary<Utf8String, Utf8String> );
				}

				var result = new echo_result();
				result.Read( _reader );
				_reader.ReadMessageEnd();
				if( result.__isset.success ) return result.Success;
				_exceptionHandler.OnException( new ServerException( ServerException.Kind.MissingResult ) );
				return default( Dictionary<Utf8String, Utf8String> );
			}
		}

		public class RequestHandler : IRequestHandler {
			protected uint _pendingException = 0;
			public void OnException( ServerException exception ) { }
			public void OnException( ProtocolError exception ) { }

			public RequestHandler( IApi @delegate ) {
				_delegate = @delegate;
			}

			private IApi _delegate;

			public bool Process( ProtocolCodec reader, ProtocolCodec writer ) {
				var msg = reader.ReadMessageBegin();
				if( msg.Name == null ) return false;
				switch( msg.Name ) {
					case "add": add_Process( msg.SeqID, reader, writer ); return true;
					case "echo": echo_Process( msg.SeqID, reader, writer ); return true;
					case "get_strings": get_strings_Process( msg.SeqID, reader, writer ); return true;

					default: {
							reader.Skip( TypeKind.Struct );
							reader.ReadMessageEnd();
							var x = new ServerException( ServerException.Kind.UnknownMethod, msg.Name );
							writer.WriteMessageBegin( msg.Name, MessageInfo.Kind.Exception, msg.SeqID );
							x.Write( writer );
							writer.WriteMessageEnd();
							return true;
						}
				}
			}

			protected void add_Process( int seqid, ProtocolCodec reader, ProtocolCodec writer ) {
				var args = new add_args();
				args.Read( reader );
				reader.ReadMessageEnd();

				var result = new add_result();
				result.Success = _delegate.add( args.Left, args.Right );
				writer.WriteMessageBegin( "add", MessageInfo.Kind.Reply, seqid );
				result.Write( writer );
				writer.WriteMessageEnd();
			}

			protected void get_strings_Process( int seqid, ProtocolCodec reader, ProtocolCodec writer ) {
				var args = new get_strings_args();
				args.Read( reader );
				reader.ReadMessageEnd();

				var result = new get_strings_result();
				result.Success = _delegate.get_strings();
				writer.WriteMessageBegin( "get_strings", MessageInfo.Kind.Reply, seqid );
				result.Write( writer );
				writer.WriteMessageEnd();
			}

			protected void echo_Process( int seqid, ProtocolCodec reader, ProtocolCodec writer ) {
				var args = new echo_args();
				args.Read( reader );
				reader.ReadMessageEnd();

				var result = new echo_result();
				result.Success = _delegate.echo( args.Value );
				writer.WriteMessageBegin( "echo", MessageInfo.Kind.Reply, seqid );
				result.Write( writer );
				writer.WriteMessageEnd();
			}
		}
		public partial struct add_args : IFormattable {
			private int _left;
			private int _right;

			public int Left { get { return _left; } set { __isset.left = true; _left = value; } }
			public int Right { get { return _right; } set { __isset.right = true; _right = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool left { get; set; }
				public bool right { get; set; }
			}

			public add_args() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 1:
							if( field.Type == TypeKind.Int32 ) {
								Left = reader.ReadInt32();
							}
							else reader.Skip( field.Type );
							break;

						case 2:
							if( field.Type == TypeKind.Int32 ) {
								Right = reader.ReadInt32();
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "add_args" );
				if( __isset.left ) {
					writer.WriteFieldBegin( "left", TypeKind.Int32, 1 );
					writer.WriteInt32( _left );
					writer.WriteFieldEnd();
				}
				if( __isset.right ) {
					writer.WriteFieldBegin( "right", TypeKind.Int32, 2 );
					writer.WriteInt32( _right );
					writer.WriteFieldEnd();
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Left: ", Left, " Right: ", Right );
			}
		}
		public partial struct add_result : IFormattable {
			private int _success;

			public int Success { get { return _success; } set { __isset.success = true; _success = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool success { get; set; }
			}

			public add_result() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 0:
							if( field.Type == TypeKind.Int32 ) {
								Success = reader.ReadInt32();
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "add_result" );

				if( __isset.success ) {
					writer.WriteFieldBegin( "Success", TypeKind.Int32, 0 );
					writer.WriteInt32( _success );
					writer.WriteFieldEnd();
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Success: ", Success );
			}
		}
		public partial struct get_strings_args : IFormattable {
			public get_strings_args() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "get_strings_args" );
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
			}
		}
		public partial struct get_strings_result : IFormattable {
			private List<Utf8String> _success;

			public List<Utf8String> Success { get { return _success; } set { __isset.success = true; _success = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool success { get; set; }
			}

			public get_strings_result() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 0:
							if( field.Type == TypeKind.List ) {
								var localList = reader.ReadListBegin();
								Success = new List<Utf8String>( ( uint ) localList.Count );
								for( var localCounter = 0; localCounter < localList.Count; ++localCounter ) {
									var localElement = reader.ReadString();
									_success.Add( localElement );
								}
								reader.ReadListEnd();
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "get_strings_result" );

				if( __isset.success ) {
					if( Success != null ) {
						writer.WriteFieldBegin( "Success", TypeKind.List, 0 );
						{
							writer.WriteListBegin( TypeKind.String, ( int ) _success.Count );
							foreach( var item in _success ) {
								writer.WriteString( item );
							}
							writer.WriteListEnd();
						}
						writer.WriteFieldEnd();
					}
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Success: ", Success );
			}
		}
		public partial struct echo_args : IFormattable {
			private Dictionary<Utf8String, Utf8String> _value;

			public Dictionary<Utf8String, Utf8String> Value { get { return _value; } set { __isset.value = true; _value = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool value { get; set; }
			}

			public echo_args() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 1:
							if( field.Type == TypeKind.Map ) {
								var localMap = reader.ReadMapBegin();
								Value = new Dictionary<Utf8String, Utf8String>( ( uint ) localMap.Count );
								for( var localCounter = 0; localCounter < localMap.Count; ++localCounter ) {
									var localKey = reader.ReadString();
									var localValue = reader.ReadString();
									_value[localKey] = localValue;
								}
								reader.ReadMapEnd();
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "echo_args" );
				if( Value != null && __isset.value ) {
					writer.WriteFieldBegin( "value", TypeKind.Map, 1 );
					{
						writer.WriteMapBegin( TypeKind.String, TypeKind.String, ( int ) _value.Count );
						foreach( var item in _value ) {
							writer.WriteString( item.Key );
							writer.WriteString( item.Value );
						}
						writer.WriteMapEnd();
					}
					writer.WriteFieldEnd();
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Value: ", Value );
			}
		}
		public partial struct echo_result : IFormattable {
			private Dictionary<Utf8String, Utf8String> _success;

			public Dictionary<Utf8String, Utf8String> Success { get { return _success; } set { __isset.success = true; _success = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool success { get; set; }
			}

			public echo_result() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 0:
							if( field.Type == TypeKind.Map ) {
								var localMap = reader.ReadMapBegin();
								Success = new Dictionary<Utf8String, Utf8String>( ( uint ) localMap.Count );
								for( var localCounter = 0; localCounter < localMap.Count; ++localCounter ) {
									var localKey = reader.ReadString();
									var localValue = reader.ReadString();
									_success[localKey] = localValue;
								}
								reader.ReadMapEnd();
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "echo_result" );

				if( __isset.success ) {
					if( Success != null ) {
						writer.WriteFieldBegin( "Success", TypeKind.Map, 0 );
						{
							writer.WriteMapBegin( TypeKind.String, TypeKind.String, ( int ) _success.Count );
							foreach( var item in _success ) {
								writer.WriteString( item.Key );
								writer.WriteString( item.Value );
							}
							writer.WriteMapEnd();
						}
						writer.WriteFieldEnd();
					}
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Success: ", Success );
			}
		}
	}
}