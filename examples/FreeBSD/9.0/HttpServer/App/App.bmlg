//
// Created by $USER
//

using System;
using System.IO;
using System.Net;

using Platform.IO;
using Platform.Libc;

namespace Example {
	public partial class App {
		public class CustomHttpServer : HttpServer {
			public CustomHttpServer() {
			}

			protected override RequestHandler CreateHandler( SessionHandler session ) {
				switch( session.Resource ) {
					case "/stat.json": return new HttpStatisticPageHandler( session );
					case "/stat.txt": return new HttpStatisticTextPageHandler( session );

					case "/":
					case "/index.html":
					case "/Default.aspx":
						return new TestPageHandler( session );

					case "/favicon.ico":
						return new EmbeddedResourceHandler( session, "image/x-icon", new MemorySegment( &EmbeddedResources.favicon_ico[0], ( uint ) EmbeddedResources.favicon_ico.Length ) );
				}

				return null;
			}

			public class TestPageHandler : PageHandler {
				public TestPageHandler( SessionHandler session )
					: base( session ) {
				}

				public override void OnRender() {
					var server = ( CustomHttpServer ) Session.Server;
					var time = Fiber.Now;

					Response.Append( "<html>" );
					{
						Response.Append( "<head>" );
						{
							Response.Append( @"<title>Bamelg server</title>" );
						}
						Response.Append( "</head>" );

						Response.Append( "<body>" );
						{
							Response.AppendFormat( "<p>Bamelg server {0}! ValidRequestCount={1,10}</p>", time, server.ValidRequestCount );
							Response.Concat( "<p>TotalAcceptedClientCount: ", server.TotalAcceptedClientCount, "; InvalidRequestCount=", server.InvalidRequestCount, "; ActiveSessionCount=", server.ActiveSessionCount, "</p>" );
							Response.Append( "<p>Some unicode symbols: тут немножко Юникода</p>" );
						}
						Response.Append( "</body>" );
					}
					Response.Append( "</html>" );
				}
			}
		}

		public const int TcpConnectionPort = 8080;
		public const Utf8String UnixConnectionPath = "/var/run/HttpServer.socket";

		[EntryPoint]
		private static void Main() {
			// Memory.MultithreadedEnvironment = false; // do not use atomic ops

			utsname value;
			LibcApi.uname( value );

			Console.WriteLine( "PID={0}", LibcApi.getpid() );
			Console.WriteLine( "sysname == '{0}', nodename == '{1}', release == '{2}', version == '{3}', machine == '{4}'", new CString( &value.sysname[0] ), new CString( &value.nodename[0] ), new CString( &value.release[0] ), new CString( &value.version[0] ), new CString( &value.machine[0] ) );

			Console.WriteLine( "@{ Environment variables:" );
			for( var i = 0; LibcApi.environ[i] != null; ++i ) Console.WriteLine( "\t{0}", LibcApi.environ[i] );
			Console.WriteLine( "@}" );
			Console.WriteLine();

			var eventLoop = new EventLoop(){ Tracing = true };
			eventLoop.CatchExitSignals(); // convert signals to events

			var server = new CustomHttpServer();

			Fiber.Start( 16, () => {
				var tcpListen = false;
				var tcpListenReported = false;

				var unixListen = false;
				var unixListenReported = false;

				while( true ) {
					if( !tcpListen ) {
						tcpListen = server.Listen( TcpConnectionPort );

						if( tcpListen )
							Console.WriteLine( "Listen port {0}", TcpConnectionPort );
						else if( !tcpListenReported ) {
							Console.WriteLine( "Unable bind port {0}", TcpConnectionPort );
							tcpListenReported = true;
						}
					}

					if( !unixListen ) {
						unixListen = server.Listen( UnixConnectionPath );

						if( unixListen )
							Console.WriteLine( "Listen socket '{0}'", UnixConnectionPath );
						else if( !unixListenReported ) {
							Console.WriteLine( "Unable to bind socket '{0}'", UnixConnectionPath );
							unixListenReported = true;
						}
					}

					var all = true;

					all &= tcpListen;
					all &= unixListen;

					if( !all ) {
						using( new Fiber.CancellationRegion() ) {
							Fiber.Sleep( 1000 );
							if( Fiber.IsCancelled ) return;
						}

						continue;
					}

					break;
				}

				PrintConnectionOptions();
			}, "resource allocator" );

			eventLoop.Dispatch();
		}

		static void PrintConnectionOptions() {
			Console.WriteLine( "@{ Possible connection URLs:" );
			foreach( var @interface in LibcApi.GetNetworkInterfaces() ) {
				if( @interface->ifa_addr == null ) continue;

				if( @interface->ifa_addr->sa_family == ProtocolFamily.PF_INET ) {
					var& address = *( sockaddr_in* ) @interface->ifa_addr;
					Console.WriteLine( "    interface={0,-10} http://{1}:{2}", @interface->ifa_name, cast<IPv4Endpoint>( address ).Address, TcpConnectionPort );
				} else if( @interface->ifa_addr->sa_family == ProtocolFamily.PF_INET6 ) {
					var& address = *( sockaddr_in6* ) @interface->ifa_addr;
					Console.WriteLine( "    interface={0,-10} http://[{1}]:{2}", @interface->ifa_name, cast<IPv6Endpoint>( address ).Address, TcpConnectionPort );
				}
			}

			Console.WriteLine( "    http://{0}:{1}", LibcApi.GetHostName(), TcpConnectionPort );

			Console.WriteLine( "@}" );
		}
	}
}