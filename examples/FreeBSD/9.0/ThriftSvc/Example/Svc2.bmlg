//
// Autogenerated by Thrift Compiler ( 0.9.0-dev ). Do not edit
//

using System;
using System.Collections;
using System.Serialization.Thrift;

namespace Example {
	public static partial class Svc2 {
		public interface IApi : Svc1.IApi {
			HashSet<Utf8String> get_strings2();
			KVP echo2( KVP value );
		}

		public class Client : Svc1.Client, IApi {
			private IExceptionHandler _exceptionHandler;
			public new IExceptionHandler ExceptionHandler {
				get { return _exceptionHandler; }
				set { _exceptionHandler = value; base.ExceptionHandler = value; }
			}

			public Client( ProtocolCodec prot )
				: this( prot, prot ) { }

			public Client( ProtocolCodec reader, ProtocolCodec writer )
				: base( reader, writer ) {
			}

			public HashSet<Utf8String> get_strings2() {
				_writer.WriteMessageBegin( "get_strings2", MessageInfo.Kind.Call, _seqid );
				var args = new get_strings2_args();
				args.Write( _writer );
				_writer.WriteMessageEnd();

				var msg = _reader.ReadMessageBegin();
				if( msg.Type == MessageInfo.Kind.Exception ) {
					var x = ServerException.Read( _reader );
					_reader.ReadMessageEnd();
					_exceptionHandler.OnException( x );
					return default( HashSet<Utf8String> );
				}

				var result = new get_strings2_result();
				result.Read( _reader );
				_reader.ReadMessageEnd();
				if( result.__isset.success ) return result.Success;
				_exceptionHandler.OnException( new ServerException( ServerException.Kind.MissingResult ) );
				return default( HashSet<Utf8String> );
			}

			public KVP echo2( KVP value ) {
				_writer.WriteMessageBegin( "echo2", MessageInfo.Kind.Call, _seqid );
				var args = new echo2_args();
				args.Value = value;
				args.Write( _writer );
				_writer.WriteMessageEnd();

				var msg = _reader.ReadMessageBegin();
				if( msg.Type == MessageInfo.Kind.Exception ) {
					var x = ServerException.Read( _reader );
					_reader.ReadMessageEnd();
					_exceptionHandler.OnException( x );
					return default( KVP );
				}

				var result = new echo2_result();
				result.Read( _reader );
				_reader.ReadMessageEnd();
				if( result.__isset.success ) return result.Success;
				_exceptionHandler.OnException( new ServerException( ServerException.Kind.MissingResult ) );
				return default( KVP );
			}
		}

		public class RequestHandler : Svc1.RequestHandler, IRequestHandler {
			public RequestHandler( IApi @delegate )
				: base( @delegate ) {
				_delegate = @delegate;
			}

			private IApi _delegate;

			public new bool Process( ProtocolCodec reader, ProtocolCodec writer ) {
				var msg = reader.ReadMessageBegin();
				switch( msg.Name ) {
					case "add": add_Process( msg.SeqID, reader, writer ); return true;
					case "echo": echo_Process( msg.SeqID, reader, writer ); return true;
					case "echo2": echo2_Process( msg.SeqID, reader, writer ); return true;
					case "get_strings": get_strings_Process( msg.SeqID, reader, writer ); return true;
					case "get_strings2": get_strings2_Process( msg.SeqID, reader, writer ); return true;

					default: {
							reader.Skip( TypeKind.Struct );
							reader.ReadMessageEnd();
							var x = new ServerException( ServerException.Kind.UnknownMethod, msg.Name );
							writer.WriteMessageBegin( msg.Name, MessageInfo.Kind.Exception, msg.SeqID );
							x.Write( writer );
							writer.WriteMessageEnd();
							return true;
						}
				}
			}

			protected void get_strings2_Process( int seqid, ProtocolCodec reader, ProtocolCodec writer ) {
				var args = new get_strings2_args();
				args.Read( reader );
				reader.ReadMessageEnd();

				var result = new get_strings2_result();
				result.Success = _delegate.get_strings2();
				writer.WriteMessageBegin( "get_strings2", MessageInfo.Kind.Reply, seqid );
				result.Write( writer );
				writer.WriteMessageEnd();
			}

			protected void echo2_Process( int seqid, ProtocolCodec reader, ProtocolCodec writer ) {
				var args = new echo2_args();
				args.Read( reader );
				reader.ReadMessageEnd();

				var result = new echo2_result();
				result.Success = _delegate.echo2( args.Value );
				writer.WriteMessageBegin( "echo2", MessageInfo.Kind.Reply, seqid );
				result.Write( writer );
				writer.WriteMessageEnd();
			}
		}
		public partial struct get_strings2_args : IFormattable {
			public get_strings2_args() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "get_strings2_args" );
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
			}
		}
		public partial struct get_strings2_result : IFormattable {
			private HashSet<Utf8String> _success;

			public HashSet<Utf8String> Success { get { return _success; } set { __isset.success = true; _success = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool success { get; set; }
			}

			public get_strings2_result() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 0:
							if( field.Type == TypeKind.Set ) {
								var _set7 = reader.ReadSetBegin();
								Success = new HashSet<Utf8String>( _set7.Count );
								for( var _i8 = 0; _i8 < _set7.Count; ++_i8 ) {
									var _elem9 = reader.ReadString();
									Success.Add( _elem9 );
								}
								reader.ReadSetEnd();
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "get_strings2_result" );

				if( __isset.success ) {
					if( Success != null ) {
						writer.WriteFieldBegin( "Success", TypeKind.Set, 0 );
						{
							writer.WriteSetBegin( TypeKind.String, _success.Count );
							foreach( var item in _success ) {
								writer.WriteString( item );
							}
							writer.WriteSetEnd();
						}
						writer.WriteFieldEnd();
					}
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Success: ", Success );
			}
		}
		public partial struct echo2_args : IFormattable {
			private KVP _value;

			public KVP Value { get { return _value; } set { __isset.value = true; _value = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool value { get; set; }
			}

			public echo2_args() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 1:
							if( field.Type == TypeKind.Struct ) {
								Value = new KVP();
								Value.Read( reader );
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "echo2_args" );
				if( Value != null && __isset.value ) {
					writer.WriteFieldBegin( "value", TypeKind.Struct, 1 );
					_value.Write( writer );
					writer.WriteFieldEnd();
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Value: ", Value );
			}
		}
		public partial struct echo2_result : IFormattable {
			private KVP _success;

			public KVP Success { get { return _success; } set { __isset.success = true; _success = value; } }

			public Isset __isset = default( Isset );
			public struct Isset {
				public bool success { get; set; }
			}

			public echo2_result() {
			}

			public void Read( ProtocolCodec reader ) {
				reader.ReadStructBegin();
				while( true ) {
					var field = reader.ReadFieldBegin();
					if( field.Type == TypeKind.Stop ) break;

					switch( field.ID ) {
						case 0:
							if( field.Type == TypeKind.Struct ) {
								Success = new KVP();
								Success.Read( reader );
							}
							else reader.Skip( field.Type );
							break;

						default:
							reader.Skip( field.Type );
							break;
					}
					reader.ReadFieldEnd();
				}
				reader.ReadStructEnd();
			}

			public void Write( ProtocolCodec writer ) {
				writer.WriteStructBegin( "echo2_result" );

				if( __isset.success ) {
					if( Success != null ) {
						writer.WriteFieldBegin( "Success", TypeKind.Struct, 0 );
						_success.Write( writer );
						writer.WriteFieldEnd();
					}
				}
				writer.WriteFieldStop();
				writer.WriteStructEnd();
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Success: ", Success );
			}
		}
	}
}