//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

using Platform.Zlib;

namespace Platform.IO {
	public static class DeflateStream {
		public static IStream CreateRead( IStream stream ) { return new ReadStream( stream, false ); }
		public static IStream CreateWrite( IStream stream, int level ) { return new WriteStream( stream, level, false ); }

		public static IStream CreateGZRead( IStream stream ) { return new ReadStream( stream, true ); }
		public static IStream CreateGZWrite( IStream stream, int level ) { return new WriteStream( stream, level, true ); }

		public interface IEventHandler {
			void OnError( ZlibError error );
		}

		public struct EventHandlerConsole : IEventHandler {
			public static readonly thistype Instance;

			public void OnError( ZlibError error ) {
				Console.WriteLine( "zlib error: {0}", error );
			}
		}

		public struct EventHandlerNull : IEventHandler {
			public static readonly thistype Instance;

			public void OnError( ZlibError error ) {
				Console.WriteLine( "zlib error: {0}", error );
			}
		}

		private class ZlibStream {
			protected ZlibStream() { }

			public IEventHandler EventHandler = EventHandlerConsole.Instance;

			protected z_stream _zState = default( z_stream );

			protected IStream _stream;
			public IStream BaseStream { get { return _stream; } }

			public StreamingBufferInfo* BufferInfo { get { return null; } }
			protected StreamingBufferInfo* _bufferInfo;

			protected bool CheckStatus( ZlibError statusCode ) {
				if( statusCode != ZlibError.Z_OK && statusCode != ZlibError.Z_STREAM_END ) {
					EventHandler.OnError( statusCode );
					return false;
				}

				return true;
			}
		}

		private sealed class ReadStream : ZlibStream, IStream {
			public StreamCapabilities Capabilities { get { return StreamCapabilities.Read; } }

			public ReadStream( IStream stream, bool useGZipWrapper ) {
				_stream = stream.GetBufferedReadStream( _bufferInfo );

				if( !CheckStatus( ZlibApi.inflateInit( &_zState ) ) )
					_stream = null;
			}

			~ReadStream() { Cleanup(); }
			public override void Dispose() { Cleanup(); base.Dispose(); }

			private void Cleanup() {
				if( _stream == null ) return;

				CheckStatus( ZlibApi.inflateEnd( &_zState ) );
			}

			int IStream.Read( vararg MemorySegment segments ) { var result = 0; foreach( var segment in segments ) result += Read( segment.Start, ( int ) segment.Count ); return result; }

			public void Flush( FlushKind flushKind = FlushKind.Read ) { _stream.Flush( flushKind ); }

			public int Read( void* data, int length ) {
				if( _stream == null || length == 0 || data == null ) return 0;

				var result = 0;

				do {
					if( _bufferInfo->AvailableToRead == 0 ) {
						_stream.Flush( FlushKind.Read );
						if( _bufferInfo->AvailableToRead == 0 ) break;
					}

					_zState.next_in = ( byte* ) _bufferInfo->ReadBufferStart;
					_zState.avail_in = ( uint ) _bufferInfo->AvailableToRead;

					_zState.next_out = ( byte* ) data;
					_zState.avail_out = ( uint ) length;

					if( !CheckStatus( ZlibApi.inflate( &_zState, FlushOptions.Z_NO_FLUSH ) ) )
						return result;

					var decompressedBytes = length - _zState.avail_out;
					var readCompressed = _bufferInfo->AvailableToRead - _zState.avail_in;

					result += ( int ) decompressedBytes;
					length -= ( int ) decompressedBytes;
					data = cast<byte*>( data ) + decompressedBytes;

					_bufferInfo->OnReadPerformed( ( int ) readCompressed );
				} while( length > 0 );

				return result;
			}

			void IStream.Write( void* buffer, int length ) { Assert.Unreachable(); }
			void IStream.Write( vararg MemorySegment segments ) { Assert.Unreachable(); }

			TimeSpan IStream.ReadTimeout { get { return TimeSpan.Zero; } set { } }
			TimeSpan IStream.WriteTimeout { get { return TimeSpan.Zero; } set { } }

			long IStream.Position { get { return 0; } }
			long IStream.Seek( long offset, SeekOrigin origin ) { return 0; }
		
			MemoryMappedView IStream.CreateReadView( intptr offset, intptr length ) { return null; }
			MemoryMappedView IStream.CreateWriteView( intptr offset, intptr length ) { return null; }
		}

		private sealed class WriteStream : ZlibStream, IStream {
			public StreamCapabilities Capabilities { get { return StreamCapabilities.Write; } }

			private bool _canFlush = true;

			public WriteStream( IStream stream, int level, bool useGZipWrapper ) {
				_stream = stream.GetBufferedWriteStream( _bufferInfo );

				if( !CheckStatus( useGZipWrapper ? ZlibApi.deflateGZInit( &_zState, level ) : ZlibApi.deflateInit( &_zState, level ) ) )
					_stream = null;
			}

			~WriteStream() { Cleanup(); }
			public override void Dispose() { Cleanup(); base.Dispose(); }

			private void Cleanup() {
				if( _stream == null ) return;

				Compress( &_zState, 0, FlushOptions.Z_FINISH );
				CheckStatus( ZlibApi.deflateEnd( &_zState ) );
				_stream = null;
			}

			private void Compress( void* data, int length, FlushOptions options ) {
				_zState.next_in = ( byte* ) data;
				_zState.avail_in = ( uint ) length;

				do {
					if( _bufferInfo->AvailableToWrite == 0 ) _stream.Flush( FlushKind.Write );

					var readenBytes = _zState.avail_in;
					var bufferLength = ( uint ) _bufferInfo->AvailableToWrite;

					_zState.avail_out = bufferLength;
					_zState.next_out = _bufferInfo->WriteBufferStart;

					if( !CheckStatus( ZlibApi.deflate( &_zState, options ) ) )
						break;

					var compressedBytes = bufferLength - _zState.avail_out;
					readenBytes = readenBytes - _zState.avail_in;

					_bufferInfo->OnWritePerformed( ( int ) compressedBytes );
					_canFlush = true;
				} while( _zState.avail_in > 0 | _zState.avail_out == 0 );
			}

			public void Write( void* buffer, int length ) {
				if( _stream == null || length == 0 || buffer == null ) return;

				Compress( buffer, length, FlushOptions.Z_NO_FLUSH );
			}

			void IStream.Write( vararg MemorySegment segments ) { foreach( var segment in segments ) Write( segment.Start, ( int ) segment.Count ); }

			int IStream.Read( void* buffer, int length ) { Assert.Unreachable(); return 0; }
			int IStream.Read( vararg MemorySegment segments ) { Assert.Unreachable(); return 0; }

			TimeSpan IStream.ReadTimeout { get { return TimeSpan.Zero; } set { } }
			TimeSpan IStream.WriteTimeout { get { return TimeSpan.Zero; } set { } }

			long IStream.Position { get { return 0; } }
			long IStream.Seek( long offset, SeekOrigin origin ) { return 0; }
			
			MemoryMappedView IStream.CreateReadView( intptr offset, intptr length ) { return null; }
			MemoryMappedView IStream.CreateWriteView( intptr offset, intptr length ) { return null; }

			public void Flush( FlushKind flushKind = FlushKind.SynchronizeWrite ) {
				if( _stream == null ) return;

				switch( flushKind ) {
					case FlushKind.SynchronizeWrite:
						if( _canFlush ) {
							Compress( &_zState, 0, FlushOptions.Z_SYNC_FLUSH );
							_canFlush = false;
						}

						_stream.Flush( flushKind );
						break;
				}
			}
		}
	}
}