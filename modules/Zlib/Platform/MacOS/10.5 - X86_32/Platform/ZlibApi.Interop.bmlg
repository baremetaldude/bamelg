//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

namespace Platform.Zlib {
	[ExternLibrary( Image = "/usr/lib/libz.so" )]
	public static partial struct ZlibApi {
		public const SbcsString Version = "1.2.3";

		public extern static uintptr adler32( uintptr adler, byte* buf, uint len );
		public extern static int compress( byte* dest, uintptr* destLen, byte* source, uintptr sourceLen );
		public extern static int compress2( byte* dest, uintptr* destLen, byte* source, uintptr sourceLen, int level );
		public extern static uintptr crc32( uintptr crc, byte* buf, uint len );
		public extern static ZlibError deflate( z_stream* stream, FlushOptions options );
		public extern static int deflateCopy( z_stream* dest, z_stream* source );
		public extern static ZlibError deflateEnd( z_stream* stream );
		public extern static ZlibError deflateInit_( z_stream* stream, int level, CString version, int streamSize );
		public extern static ZlibError deflateInit2_( z_stream* stream, int level, CompressionMethod method, int maxWindowBits, int memoryLevel, DeflateStrategy strategy, CString version, int streamSize );
		public extern static int deflateParams( z_stream* strm, int level, int strategy );
		public extern static int deflateReset( z_stream* strm );
		public extern static int deflateSetDictionary( z_stream* strm, byte* dictionary, uint dictLength );
		public extern static uintptr* get_crc_table();
		public extern static int gzclose( void* file );
		public extern static void* gzdopen( int fd, sbyte* mode );
		public extern static int gzeof( void* file );
		public extern static sbyte* gzerror( void* file, int* errnum );
		public extern static int gzflush( void* file, int flush );
		public extern static int gzgetc( void* file );
		public extern static sbyte* gzgets( void* file, sbyte* buf, int len );
		public extern static void* gzopen( sbyte* path, sbyte* mode );
		public extern static int gzputc( void* file, int c );
		public extern static int gzputs( void* file, sbyte* s );
		public extern static int gzread( void* file, void* buf, uint len );
		public extern static int gzrewind( void* file );
		public extern static intptr gzseek( void* file, intptr offset, int whence );
		public extern static int gzsetparams( void* file, int level, int strategy );
		public extern static intptr gztell( void* file );
		public extern static int gzwrite( void* file, void* buf, uint len );
		public extern static ZlibError inflate( z_stream* stream, FlushOptions options );
		public extern static ZlibError inflateEnd( z_stream* stream );
		public extern static ZlibError inflateInit_( z_stream* stream, CString version, int streamSize );
		public extern static int inflateInit2_( z_stream* strm, int windowBits, CUtf8String version, int streamSize );
		public extern static int inflateReset( z_stream* strm );
		public extern static int inflateSetDictionary( z_stream* strm, byte* dictionary, uint dictLength );
		public extern static int inflateSync( z_stream* strm );
		public extern static int inflateSyncPoint( z_stream* z );
		public extern static int uncompress( byte* dest, uintptr* destLen, byte* source, uintptr sourceLen );
		public extern static CString zError( int code );
		public extern static CString zlibVersion();
	}
	public enum CompressionMethod : uint {
		Z_DEFLATED = 8,
	}
	public enum DeflateStrategy : uint {
		Z_DEFAULT_STRATEGY = 0,
		Z_FILTERED =         1,
		Z_HUFFMAN_ONLY =     2,
	}
	[Flags]
	public enum FlushOptions : uint {
		Z_NO_FLUSH =   0,
		Z_SYNC_FLUSH = 2,
		Z_FINISH =     4,
		Z_FULL_FLUSH = 3,
	}
	public enum ZlibError : int {
		Z_VERSION_ERROR = -6,
		Z_BUF_ERROR =     -5,
		Z_MEM_ERROR =     -4,
		Z_DATA_ERROR =    -3,
		Z_STREAM_ERROR =  -2,
		Z_ERRNO =         -1,
		[ErrorCodeSuccess]
		Z_OK =             0,
		Z_STREAM_END =     1,
		Z_NEED_DICT =      2,
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct internal_state {
		[ExplicitOffset( Offset = 0 )]
		public int dummy;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 4 )]
	public partial struct z_stream {
		[ExplicitOffset( Offset = 0 )]
		public byte* next_in;
		[ExplicitOffset( Offset = 4 )]
		public uint avail_in;
		[ExplicitOffset( Offset = 8 )]
		public uintptr total_in;
		[ExplicitOffset( Offset = 12 )]
		public byte* next_out;
		[ExplicitOffset( Offset = 16 )]
		public uint avail_out;
		[ExplicitOffset( Offset = 20 )]
		public uintptr total_out;
		[ExplicitOffset( Offset = 24 )]
		public sbyte* msg;
		[ExplicitOffset( Offset = 28 )]
		public internal_state* state;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<void*, uint, uint, void*> zalloc;
		[ExplicitOffset( Offset = 36 )]
		public Functors.Action<void*, void*> zfree;
		[ExplicitOffset( Offset = 40 )]
		public void* opaque;
		[ExplicitOffset( Offset = 44 )]
		public int data_type;
		[ExplicitOffset( Offset = 48 )]
		public uintptr adler;
		[ExplicitOffset( Offset = 52 )]
		public uintptr reserved;
	}
}