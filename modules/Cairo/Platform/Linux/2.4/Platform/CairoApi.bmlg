//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Numerics;
using System.Runtime;

using Platform.Gdk;
using Platform.JpegLib;
using Platform.Libc;

namespace Platform.Cairo {
	public partial struct cairo_pattern_t {
		public void Destroy() { CairoApi.cairo_pattern_destroy( &this ); }

		public static cairo_pattern_t* CreateLinear( double x0, double y0, double x1, double y1 ) { return CairoApi.cairo_pattern_create_linear( x0, y0, x1, y1 ); }
		public static cairo_pattern_t* CreateRadial( double cx0, double cy0, double radius0, double cx1, double cy1, double radius1 ) { return CairoApi.cairo_pattern_create_radial( cx0, cy0, radius0, cx1, cy1, radius1 ); }

		public void AddColorStop( double offset, RgbFloatingColor color ) { CairoApi.cairo_pattern_add_color_stop_rgb( &this, offset, color.R, color.G, color.B ); }
		public void AddColorStop( double offset, RgbaFloatingColor color ) { CairoApi.cairo_pattern_add_color_stop_rgba( &this, offset, color.R, color.G, color.B, color.A ); }

		public void AddColorStop( double offset, RgbColor color ) { AddColorStop( offset, ( RgbFloatingColor ) color ); }
		public void AddColorStop( double offset, RgbaColor color ) { AddColorStop( offset, ( RgbaFloatingColor ) color ); }

		public cairo_matrix_t Matrix {
			get {
				cairo_matrix_t result;
				CairoApi.cairo_pattern_get_matrix( &this, result );
				return result;
			}
			set { CairoApi.cairo_pattern_set_matrix( &this, value ); }
		}
	}

	public partial struct cairo_t : IDisposable {
		public uint ReferenceCount { get { return CairoApi.cairo_get_reference_count( &this ); } }

		public static cairo_t* FromSurface( cairo_surface_t* source ) { return CairoApi.cairo_create( source ); }
		public static cairo_t* FromDrawable( GdkDrawable* source ) { return GdkApi.gdk_cairo_create( source ); }

		public static cairo_t* FromExposeContext( GdkEventExpose* @event ) {
			var result = FromDrawable( @event->window );
			GdkApi.gdk_cairo_region( result, @event->region );
			result->Clip();
			return result;
		}

		public void DrawCircle( double x, double y, double radius ) {
			MoveTo( x + radius, y );
			CairoApi.cairo_arc( &this, x, y, radius, 0, Math.Pi * 2 );
		}

		public void SetSource( cairo_pattern_t* value ) { CairoApi.cairo_set_source( &this, value ); }

		public void SetSource( RgbColor color ) { SetSource( ( RgbFloatingColor ) color ); }
		public void SetSource( RgbFloatingColor color ) { CairoApi.cairo_set_source_rgb( &this, color.R, color.G, color.B ); }

		public void SetSource( RgbaColor color ) { SetSource( ( RgbaFloatingColor ) color ); }
		public void SetSource( RgbaFloatingColor color ) { CairoApi.cairo_set_source_rgba( &this, color.R, color.G, color.B, color.A ); }

		public void SetSource( cairo_surface_t* source, double x, double y ) { CairoApi.cairo_set_source_surface( &this, source, x, y ); }

		public void SelectFont( CUtf8String family, cairo_font_slant_t slant, cairo_font_weight_t weight ) { CairoApi.cairo_select_font_face( &this, family, slant, weight ); }

		public void DrawText( CUtf8String text ) { CairoApi.cairo_show_text( &this, text ); }

		public void DrawText( double x, double y, CUtf8String text ) {
			DrawText( x, y, 0, 0, text );
		}

		public void DrawText( double x, double y, double alignmentX, double alignmentY, CUtf8String text ) {
			if( text.IsNullOrEmpty ) return;

			var extents = GetExtents( text );

			// alignment == -1 : extent * -1
			// alignment == 0  : extent * -0.5
			// alignment == 1  : extent * 0
			var alignedX = x + extents.width * ( alignmentX - 1 ) / 2 - extents.x_bearing;
			var alignedY = y + extents.height * ( alignmentY - 1 ) / 2 - extents.y_bearing;

			MoveTo( alignedX, alignedY );

			CairoApi.cairo_show_text( &this, text );
		}

		public double FontSize { set { CairoApi.cairo_set_font_size( &this, value ); } }

		public cairo_text_extents_t GetExtents( CUtf8String text ) {
			cairo_text_extents_t result;
			CairoApi.cairo_text_extents( &this, text, result );
			return result;
		}

		public void Stroke() { CairoApi.cairo_stroke( &this ); }
		public void Fill() { CairoApi.cairo_fill( &this ); }
		public void Clip() { CairoApi.cairo_clip( &this ); }

		public void Paint() { CairoApi.cairo_paint( &this ); }
		public void Paint( double alpha ) { CairoApi.cairo_paint_with_alpha( &this, alpha ); }

		// Code from moonlight project
		public void RoundedRectangle( double x, double y, double width, double height, double radiusx, double radiusy ) {
			double arcToBezier = 0.55228475;

			if( radiusx > width - radiusx )
				radiusx = width / 2;
			if( radiusy > height - radiusy )
				radiusy = height / 2;

			// approximate (quite close) the arc using a bezier curve
			var c1 = arcToBezier * radiusx;
			var c2 = arcToBezier * radiusy;

			MoveTo( x + radiusx, y );
			RelativeLineTo( width - 2 * radiusx, 0.0 );
			RelativeCurveTo( c1, 0.0, radiusx, c2, radiusx, radiusy );
			RelativeLineTo( 0, height - 2 * radiusy );
			RelativeCurveTo( 0.0, c2, c1 - radiusx, radiusy, -radiusx, radiusy );
			RelativeLineTo( -width + 2 * radiusx, 0 );
			RelativeCurveTo( -c1, 0, -radiusx, -c2, -radiusx, -radiusy );
			RelativeLineTo( 0, -height + 2 * radiusy );
			RelativeCurveTo( 0.0, -c2, radiusx - c1, -radiusy, radiusx, -radiusy );
		}

		public void Clear() {
			Operator = cairo_operator_t.CAIRO_OPERATOR_CLEAR;
			Paint();
		}

		public void Clear( RgbColor color ) {
			Operator = cairo_operator_t.CAIRO_OPERATOR_SOURCE;
			SetSource( color );
			Paint();
		}

		public void Clear( RgbaColor color ) {
			Operator = cairo_operator_t.CAIRO_OPERATOR_SOURCE;
			SetSource( color );
			Paint();
		}

		public void AddReference() { CairoApi.cairo_reference( &this ); }
		public void ReleaseReference() { CairoApi.cairo_destroy( &this ); }
		public void Dispose() { ReleaseReference(); }

		public void MoveTo( double x, double y ) { CairoApi.cairo_move_to( &this, x, y ); }
		public void MoveTo( Vector2d& vector ) { CairoApi.cairo_move_to( &this, vector.X, vector.Y ); }
		public void LineTo( double x, double y ) { CairoApi.cairo_line_to( &this, x, y ); }
		public void LineTo( Vector2d& vector ) { CairoApi.cairo_line_to( &this, vector.X, vector.Y ); }
		public void Line( double x1, double y1, double x2, double y2 ) { MoveTo( x1, y1 ); LineTo( x2, y2 ); }
		public void Line( Vector2d& from, Vector2d& to ) { MoveTo( from ); LineTo( to ); }

		public void RelativeMoveTo( double x, double y ) { CairoApi.cairo_rel_move_to( &this, x, y ); }
		public void RelativeMoveTo( Vector2d& vector ) { CairoApi.cairo_rel_move_to( &this, vector.X, vector.Y ); }
		public void RelativeLineTo( double x, double y ) { CairoApi.cairo_rel_line_to( &this, x, y ); }
		public void RelativeLineTo( Vector2d& vector ) { CairoApi.cairo_rel_line_to( &this, vector.X, vector.Y ); }
		public void RelativeCurveTo( double dx1, double dy1, double dx2, double dy2, double dx3, double dy3 ) { CairoApi.cairo_rel_curve_to( &this, dx1, dy1, dx2, dy2, dx3, dy3 ); }

		public void Rectangle( double x, double y, double width, double height ) { CairoApi.cairo_rectangle( &this, x, y, width, height ); }

		public void SetDash( double* dashes, int count, double offset ) { CairoApi.cairo_set_dash( &this, dashes, count, offset ); }

		public double LineWidth { set { CairoApi.cairo_set_line_width( &this, value ); } }

		public void Arc( double xc, double yc, double radius, double angle1, double angle2 ) { CairoApi.cairo_arc( &this, xc, yc, radius, angle1, angle2 ); }
		public void ArcNegative( double xc, double yc, double radius, double angle1, double angle2 ) { CairoApi.cairo_arc_negative( &this, xc, yc, radius, angle1, angle2 ); }

		public cairo_operator_t Operator { set { CairoApi.cairo_set_operator( &this, value ); } }
		public double Tolerance { set { CairoApi.cairo_set_tolerance( &this, value ); } }
		public cairo_matrix_t Matrix { set { CairoApi.cairo_set_matrix( &this, value ); } }

		public void Rotate( double angle ) { CairoApi.cairo_rotate( &this, angle ); }
		public void Translate( double x, double y ) { CairoApi.cairo_translate( &this, x, y ); }
		public void Scale( double x, double y ) { CairoApi.cairo_scale( &this, x, y ); }
	}

	public partial struct cairo_surface_t {
		public int Width { get { return CairoApi.cairo_image_surface_get_width( &this ); } }
		public int Height { get { return CairoApi.cairo_image_surface_get_height( &this ); } }
		public int Stride { get { return CairoApi.cairo_image_surface_get_stride( &this ); } }
		public uint ReferenceCount { get { return CairoApi.cairo_surface_get_reference_count( &this ); } }

		public void AddReference() { CairoApi.cairo_surface_reference( &this ); }
		public void ReleaseReference() { CairoApi.cairo_surface_destroy( &this ); }
		public void Dispose() { ReleaseReference(); }

		public void Finish() { CairoApi.cairo_surface_finish( &this ); }

		public void Save( CUtf8String filename ) { CairoApi.cairo_surface_write_to_png( &this, filename ); }

		public static cairo_surface_t* FromPng( CUtf8String filename ) { return CairoApi.cairo_image_surface_create_from_png( filename ); }

		public static cairo_surface_t* FromPng( byte[] contents ) {
			return FromPng( &contents[0], ( uint ) contents.Length );
		}

		public static cairo_surface_t* FromPng( byte* contents, uint length ) {
			var adapter = new ReadAdapter( contents, length );
			return CairoApi.cairo_image_surface_create_from_png_stream( ReadAdapter.Trampoline, &adapter );
		}

		public static cairo_surface_t* FromJpeg( byte[] contents ) {
			return FromJpeg( &contents[0], ( uint ) contents.Length );
		}

		public static cairo_surface_t* FromJpeg( byte* contents, uint length ) {
			cairo_surface_t* result = null;
			var file = LibcApi.fmemopen( contents, length, "r" );
			{
				jpeg_error_mgr errorManager;

				var state = new jpeg_decompress_struct {
					err = JpegLibApi.jpeg_std_error( &errorManager )
				};

				JpegLibApi.jpeg_create_decompress( state );
				{
					JpegLibApi.jpeg_stdio_src( state, file );
					JpegLibApi.jpeg_read_header( state, true );
					JpegLibApi.jpeg_start_decompress( state );

					var width = state.output_width;
					var height = state.output_height;
					// Console.WriteLine( "width: {0} height:{1} components:{2} stride:{3}", width, height, state.output_components, CairoApi.cairo_format_stride_for_width( cairo_format_t.CAIRO_FORMAT_RGB24, width ) );

					var cairoStride = width * 4;
					if( ( cairoStride & 0b1111 ) != 0 ) cairoStride = ( cairoStride | 0b1111 ) + 1;

					if( width < 1 | height < 1 | width > 8192 | height > 8192 )
						goto done;

					if( state.output_components != 3 ) {
						Assert.NotImplemented();
						goto done;
					}

					var cairoBuffer = new[cairoStride * height] byte;
					var jpegLine = new[width * state.output_components] byte;
					var jpegPtr = cast<Tuple<byte, byte, byte>*>( &jpegLine[0] );

					cast<RuntimeObjectBase>( cairoBuffer ).AddReference();

					// var rows = new[height] byte*;
					// for( var i = 0; i < height; ++i )
					//	rows[i] = &cairoBuffer[stride * i];

					uint rowsRead = 0;
					while( state.output_scanline < state.output_height ) {
						var rows = &jpegLine[0];
						var readen = JpegLibApi.jpeg_read_scanlines( state, &rows, 1 );
						// var readen = JpeglibApi.jpeg_read_scanlines( state, &rows[rowsRead], state.output_height - rowsRead );
						// Console.WriteLine( "rr: {0}", readen );

						var cairoPtr = cast<Tuple<byte, byte, byte, byte>*>( &cairoBuffer[cairoStride * rowsRead] );

						for( var i = 0U; i < width; ++i ) {
							cairoPtr[i].Item3 = jpegPtr[i].Item1;
							cairoPtr[i].Item2 = jpegPtr[i].Item2;
							cairoPtr[i].Item1 = jpegPtr[i].Item3;
						}

						rowsRead += readen;
					}

					result = CairoApi.cairo_image_surface_create_for_data( &cairoBuffer[0], cairo_format_t.CAIRO_FORMAT_RGB24, ( int ) width, ( int ) height, ( int ) cairoStride );

					cairo_user_data_key_t key;
					CairoApi.cairo_surface_set_user_data( result, key, bitcast<void*>( cairoBuffer ), x => ( *( RuntimeObjectBase* ) &x ).ReleaseReference() );
				}
			done:
				JpegLibApi.jpeg_destroy_decompress( state );
			}

			LibcApi.fclose( file );
			return result;
		}

		public static cairo_surface_t* CreateSVG( CUtf8String filename, double width, double height ) {
			return CairoApi.cairo_svg_surface_create( filename, width, height );
		}

		private struct ReadAdapter {
			private readonly byte* _buffer;
			private readonly uint _length;
			private uint _position;

			public ReadAdapter( byte* buffer, uint length ) {
				_position = 0;
				_buffer = buffer;
				_length = length;
			}

			public static cairo_status_t Trampoline( void* object, byte* destination, uint length ) {
				return bitcast<ReadAdapter*>( object )->Read( destination, length );
			}

			private cairo_status_t Read( byte* destination, uint length ) {
				if( _position >= _length ) return cairo_status_t.CAIRO_STATUS_READ_ERROR;
				var available = _length - _position;

				Memory.Copy( destination, _buffer + _position, Math.Min( available, length ) );
				_position += length;
				return cairo_status_t.CAIRO_STATUS_SUCCESS;
			}
		}
	}

	public partial struct cairo_matrix_t {
		public cairo_matrix_t() { CairoApi.cairo_matrix_init_identity( &this ); }

		public static cairo_matrix_t FromTranslation( double x, double y ) { cairo_matrix_t result; CairoApi.cairo_matrix_init_translate( &result, x, y ); return result; }
		public static cairo_matrix_t FromScaling( double x, double y ) { cairo_matrix_t result; CairoApi.cairo_matrix_init_scale( &result, x, y ); return result; }
		public static cairo_matrix_t FromRotation( double angle ) { cairo_matrix_t result; CairoApi.cairo_matrix_init_rotate( &result, angle ); return result; }

		public static cairo_matrix_t operator *( cairo_matrix_t& left, cairo_matrix_t& right ) {
			cairo_matrix_t result;
			CairoApi.cairo_matrix_multiply( &result, left, right );
			return result;
		}

		public void Invert() { CairoApi.cairo_matrix_invert( &this ); }
	}
}