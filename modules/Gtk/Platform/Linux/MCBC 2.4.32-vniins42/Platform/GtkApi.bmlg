//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

using Platform.Gdk;
using Platform.Glib;
using Platform.Pango;

namespace Platform.Gtk {
	public static partial struct GtkApi {
		public static T* gtk_type_class<T>() { return ( T* ) gtk_type_class( T.TypeID ); }

		public extern static uint gtk_major_version;
		public extern static uint gtk_minor_version;
		public extern static uint gtk_micro_version;

		public extern static GtkMessageDialog* gtk_message_dialog_new( GtkWindow* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, CUtf8String message_format );
		public extern static void gtk_cell_layout_set_attributes( GtkCellLayout* layout, GtkCellRenderer* cell, CUtf8String property, void* value, int end );
		public extern static void gtk_list_store_set( GtkListStore* list, GtkTreeIter& iter, int index, void* value, int end );
	}

	public partial struct GtkObject {
		public partial struct Class {
			public static GType TypeID { get { return GtkApi.gtk_object_get_type(); } }
		}

		public void Destroy() { GtkApi.gtk_object_destroy( &this ); }

		public void* UserData {
			get { return GtkApi.gtk_object_get_user_data( &this ); }
			set { GtkApi.gtk_object_set_user_data( &this, value ); }
		}
	}

	public partial struct GtkWidget {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_widget_get_type(); } }
		}

		public void Realize() { GtkApi.gtk_widget_realize( &this ); }
		public void Unrealize() { GtkApi.gtk_widget_unrealize( &this ); }
		public new void Destroy() { GtkApi.gtk_widget_destroy( &this ); }

		public GdkWMFunction WindowFunctions {
			set {
				if( _window == null ) Realize();
				GdkApi.gdk_window_set_functions( _window, value );
			}
		}

		public GdkWMDecoration WindowDecorations {
			set {
				if( _window == null ) Realize();
				GdkApi.gdk_window_set_decorations( _window, value );
			}
		}

		public RgbColor BackgroundColor { set { GtkApi.gtk_widget_modify_bg( &this, GtkStateType.GTK_STATE_NORMAL, ( GdkColor ) value ); } }
		public RgbColor ForegroundColor { set { GtkApi.gtk_widget_modify_fg( &this, GtkStateType.GTK_STATE_NORMAL, ( GdkColor ) value ); } }
		public RgbColor TextColor { set { GtkApi.gtk_widget_modify_text( &this, GtkStateType.GTK_STATE_NORMAL, ( GdkColor ) value ); } }
		public RgbColor BaseColor { set { GtkApi.gtk_widget_modify_base( &this, GtkStateType.GTK_STATE_NORMAL, ( GdkColor ) value ); } }

		public Utf8String ToolTip {
			get { return ( Utf8String )( GtkApi.gtk_widget_get_tooltip_text( &this ) ); }
			set { GtkApi.gtk_widget_set_tooltip_text( &this, value ); }
		}

		public Size MinSize { set { GtkApi.gtk_widget_set_usize( &this, value.Width, value.Height ); } }
		public bool IsEnabled {
			get { return GtkApi.gtk_widget_get_sensitive( &this ); }
			set { GtkApi.gtk_widget_set_sensitive( &this, value ); }
		}

		public GdkScreen* Screen { get { return GtkApi.gtk_widget_get_screen( &this ); } }

		public void Invalidate() { GtkApi.gtk_widget_queue_draw( &this ); }

		public void InvalidateAll() { GtkApi.gtk_widget_queue_draw_area( &this, _allocation.x, _allocation.y, _allocation.width, _allocation.height ); }

		public GdkColormap* Colormap { get { return GtkApi.gtk_widget_get_colormap( &this ); } set { GtkApi.gtk_widget_set_colormap( &this, value ); } }

		public bool IsAppPaintable { set { GtkApi.gtk_widget_set_app_paintable( &this, value ); } }

		public bool IsVisible {
			get { return ( _flags & GtkWidgetFlags.GTK_VISIBLE ) != 0; }
			set {
				if( value ) GtkApi.gtk_widget_show( &this );
				else GtkApi.gtk_widget_hide( &this );
			}
		}

		public void BeginInvalidate() {
			AddReference();
			GdkApi.gdk_threads_add_timeout( 0, QueueInvalidate, &this );
		}

		public void BeginInvalidate( uint timeoutMilliseconds ) {
			AddReference();
			GdkApi.gdk_threads_add_timeout( timeoutMilliseconds, QueueInvalidate, &this );
		}

		private static Boolean32 QueueInvalidate( void* data ) {
			var widget = ( GtkWidget* ) data;
			widget->Invalidate();
			widget->ReleaseReference();

			return false; // delete
		}

		public GdkEventMask GdkEvents {
			get { return GtkApi.gtk_widget_get_events( &this ); }
			set { GtkApi.gtk_widget_set_events( &this, value ); }
		}

		public void AddEvents( GdkEventMask events ) { GtkApi.gtk_widget_add_events( &this, events ); }

		public bool HasFocus {
			get { return GtkApi.gtk_widget_is_focus( &this ); }
			set { if( value ) GtkApi.gtk_widget_grab_focus( &this ); }
		}

		public Utf8String FontDescription {
			set {
				var font = PangoApi.pango_font_description_from_string( value );
				GtkApi.gtk_widget_modify_font( &this, font );
				PangoApi.pango_font_description_free( font );
			}
		}

		public Size RequestSize {
			set { GtkApi.gtk_widget_set_size_request( &this, value.Width, value.Height ); }
		}

		public GtkSettings* Settings { get { return GtkApi.gtk_widget_get_settings( &this ); } }

		public void Focus() { GtkApi.gtk_widget_grab_focus( &this ); }

		public GdkDrawable* ParentWindow { get { return GtkApi.gtk_widget_get_parent_window( &this ); } }
	}

	public partial struct GtkWindow {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_window_get_type(); } }
		}

		public static thistype* Create() {
			return GtkApi.gtk_window_new( GtkWindowType.GTK_WINDOW_TOPLEVEL );
		}

		public static thistype* Create( GtkWindowType type ) {
			return GtkApi.gtk_window_new( type );
		}

		public Utf8String Title {
			set { GtkApi.gtk_window_set_title( &this, value ); }
		}

		public bool IsFullscreen {
			set {
				if( value ) GtkApi.gtk_window_fullscreen( &this );
				else GtkApi.gtk_window_unfullscreen( &this );
			}
		}

		public bool IsMaximized {
			set {
				if( value ) GtkApi.gtk_window_maximize( &this );
				else GtkApi.gtk_window_unmaximize( &this );
			}
		}

		public bool IsDecorated {
			get { return GtkApi.gtk_window_get_decorated( &this ); }
			set { GtkApi.gtk_window_set_decorated( &this, value ); }
		}

		public bool IsModal {
			get { return GtkApi.gtk_window_get_modal( &this ); }
			set { GtkApi.gtk_window_set_modal( &this, value ); }
		}

		public bool IsResizable {
			get { return GtkApi.gtk_window_get_resizable( &this ); }
			set { GtkApi.gtk_window_set_resizable( &this, value ); }
		}

		public bool IsHiddenFromTaskbar {
			get { return GtkApi.gtk_window_get_skip_taskbar_hint( &this ); }
			set { GtkApi.gtk_window_set_skip_taskbar_hint( &this, value ); }
		}

		public bool IsActive {
			get { return GtkApi.gtk_window_is_active( &this ); }
		}

		public GdkPixbuf* Icon {
			set { GtkApi.gtk_window_set_icon( &this, value ); }
		}

		public GtkWindow* Parent {
			get { return GtkApi.gtk_window_get_transient_for( &this ); }
			set { GtkApi.gtk_window_set_transient_for( &this, value ); }
		}

		public GtkWindowPosition InitialPosition {
			set { GtkApi.gtk_window_set_position( &this, value ); }
		}

		public Size DefaultSize {
			set { GtkApi.gtk_window_set_default_size( &this, value.Width, value.Height ); }
		}

		public GdkWindowTypeHint TypeHint {
			get { return GtkApi.gtk_window_get_type_hint( &this ); }
			set { GtkApi.gtk_window_set_type_hint( &this, value ); }
		}

		public bool HasTopLevelFocus {
			get { return GtkApi.gtk_window_has_toplevel_focus( &this ); }
		}

		public GtkWidget* FocusedWidget {
			get { return GtkApi.gtk_window_get_focus( &this ); }
		}

		public bool IsDestroyWithParent {
			get { return GtkApi.gtk_window_get_destroy_with_parent( &this ); }
			set { GtkApi.gtk_window_set_destroy_with_parent( &this, value ); }
		}

		public void Close() { Destroy(); }

		public void Move( Point position ) { GtkApi.gtk_window_move( &this, position.X, position.Y ); }

		public void Present() { GtkApi.gtk_window_present( &this ); }
	}

	public partial struct GtkAccelGroup {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_accel_group_get_type(); } }
		}

		public void Lock() { GtkApi.gtk_accel_group_lock( &this ); }
		public void Unlock() { GtkApi.gtk_accel_group_unlock( &this ); }

		public static GtkAccelGroup* Create() { return GtkApi.gtk_accel_group_new(); }
	}

	public partial struct GtkStyle { }

	public partial struct GtkAdjustment { }

	public partial struct GtkBuilder : GObject {
		public static thistype* Create() { return GtkApi.gtk_builder_new(); }

		public static thistype* Create( CUtf8String file ) {
			var result = Create();
			result->Load( file );
			return result;
		}

		public bool Load( CUtf8String value ) {
			var error = ( GError* ) null;
			GtkApi.gtk_builder_add_from_file( &this, value, error );
			return Assert.Check( error );
		}

		private T* GetControl<T>( CUtf8String name ) {
			var result = ( T* ) GtkApi.gtk_builder_get_object( &this, name );
			if( result == null ) Console.WriteLine( ( string )( "Cannot find " + typeof( T ).Name + " named '{0}'" ), name );
			return result;
		}

		public GtkLabel* GetLabel( CUtf8String name ) { return GetControl<GtkLabel>( name ); }
		public GtkLayout* GetLayout( CUtf8String name ) { return GetControl<GtkLayout>( name ); }
		public GtkEventBox* GetEventBox( CUtf8String name ) { return GetControl<GtkEventBox>( name ); }
		public GtkButton* GetButton( CUtf8String name ) { return GetControl<GtkButton>( name ); }
		public GtkWindow* GetWindow( CUtf8String name ) { return GetControl<GtkWindow>( name ); }
		public GtkDrawingArea* GetDrawingArea( CUtf8String name ) { return GetControl<GtkDrawingArea>( name ); }
	}

	public partial struct GtkContainer {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_container_get_type(); } }
		}

		public void Add( GtkWidget* widget ) { GtkApi.gtk_container_add( &this, widget ); }
		public void Remove( GtkWidget* widget ) { GtkApi.gtk_container_remove( &this, widget ); }

		public uint BorderWidth {
			set { GtkApi.gtk_container_set_border_width( &this, value ); }
		}
	}

	public partial struct GtkLabel {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_label_get_type(); } }
		}

		public Utf8String Text {
			get { return ( Utf8String ) RawText; }
			set { RawText = value; }
		}

		public Utf16String TextUtf16 {
			get { return ( Utf16String ) RawText; }
			set { RawText = ( Utf8String ) value; }
		}

		public PangoWrapMode WrapMode {
			get { return GtkApi.gtk_label_get_line_wrap_mode( &this ); }
			set { GtkApi.gtk_label_set_line_wrap_mode( &this, value ); }
		}

		public CUtf8String Markup {
			set { GtkApi.gtk_label_set_markup( &this, value != CUtf8String.Null ? value : ( CUtf8String ) "" ); }
		}

		public CUtf8String RawText {
			get { return GtkApi.gtk_label_get_label( &this ); }
			set { GtkApi.gtk_label_set_label( &this, value != CUtf8String.Null ? value : ( CUtf8String ) "" ); }
		}

		public GtkJustification MultilineJustification { set { GtkApi.gtk_label_set_justify( &this, value ); } }

		public bool LineWrap {
			get { return GtkApi.gtk_label_get_line_wrap( &this ); }
			set { GtkApi.gtk_label_set_line_wrap( &this, value ); }
		}

		public double Angle {
			get { return GtkApi.gtk_label_get_angle( &this ); }
			set { GtkApi.gtk_label_set_angle( &this, value ); }
		}

		public static new thistype* Create() { return Create( "" ); }

		public static thistype* Create( Utf8String text ) {
			var result = GtkApi.gtk_label_new( text );
			result->IsVisible = true;
			return result;
		}

		public static thistype* CreateWithMarkup( Utf8String text ) {
			var result = GtkApi.gtk_label_new( "" );
			result->Markup = text;
			result->IsVisible = true;
			return result;
		}

		public static thistype* Create( Utf8String text, Utf8String tooltip ) {
			var result = GtkApi.gtk_label_new( text );
			result->ToolTip = tooltip;
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkButton {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_button_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_button_new();
			result->IsVisible = true;
			return result;
		}

		public static thistype* Create( Utf8String text ) {
			var result = GtkApi.gtk_button_new_with_label( text );
			result->IsVisible = true;
			return result;
		}

		public CUtf8String Label {
			get { return GtkApi.gtk_button_get_label( &this ); }
			set { GtkApi.gtk_button_set_label( &this, value ); }
		}
	}

	public partial struct GtkToggleButton {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_toggle_button_get_type(); } }
		}

		public bool IsPressed {
			get { return GtkApi.gtk_toggle_button_get_active( &this ); }
			set { GtkApi.gtk_toggle_button_set_active( &this, value ); }
		}

		public bool IsInconsistent {
			get { return GtkApi.gtk_toggle_button_get_inconsistent( &this ); }
			set { GtkApi.gtk_toggle_button_set_inconsistent( &this, value ); }
		}

		public static new thistype* Create() {
			var result = GtkApi.gtk_toggle_button_new();
			result->IsVisible = true;
			return result;
		}

		public static new thistype* Create( Utf8String text ) {
			var result = GtkApi.gtk_toggle_button_new_with_label( text );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkCheckButton {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_check_button_get_type(); } }
		}

		public bool Checked {
			get { return GtkApi.gtk_toggle_button_get_active( &this ); }
			set { GtkApi.gtk_toggle_button_set_active( &this, value ); }
		}

		public static new thistype* Create() {
			var result = GtkApi.gtk_check_button_new();
			result->IsVisible = true;
			return result;
		}

		public static new thistype* Create( Utf8String text ) {
			var result = text.IsNullOrEmpty ? GtkApi.gtk_check_button_new() : GtkApi.gtk_check_button_new_with_label( text );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkRadioButton {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_radio_button_get_type(); } }
		}

		public static new thistype* Create() {
			var result = GtkApi.gtk_radio_button_new( null );
			result->IsVisible = true;
			return result;
		}

		public static new thistype* Create( CUtf8String text ) {
			var result = GtkApi.gtk_radio_button_new_with_label( null, text );
			result->IsVisible = true;
			return result;
		}

		public GSList* Group {
			get { return GtkApi.gtk_radio_button_get_group( &this ); }
			set { GtkApi.gtk_radio_button_set_group( &this, value ); }
		}
	}

	public partial struct GtkMisc {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_misc_get_type(); } }
		}

		public Size Padding { set { GtkApi.gtk_misc_set_padding( &this, value.Width, value.Height ); } }
		public SizeF Justification {
			get {
				float x, y;
				GtkApi.gtk_misc_get_alignment( &this, &x, &y );
				return new SizeF( x, y );
			}
			set { GtkApi.gtk_misc_set_alignment( &this, value.Width, value.Height ); }
		}
	}

	public partial struct GtkImage {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_image_get_type(); } }
		}

		public static thistype* Create( Utf8String file ) {
			var result = GtkApi.gtk_image_new_from_file( file );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkComboBox {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_combo_box_get_type(); } }
		}

		public void AddItem( Utf8String text ) { GtkApi.gtk_combo_box_append_text( &this, text ); }

		public void InsertItem( int position, Utf8String text ) { GtkApi.gtk_combo_box_insert_text( &this, position, text ); }
		public void RemoveItem( int position ) { GtkApi.gtk_combo_box_remove_text( &this, position ); }

		public void Clear() { Model = ( GtkTreeModel* ) GtkApi.gtk_list_store_newv( 1, new GType[1] { GType.G_TYPE_STRING } ); }

		public int SelectedIndex {
			get { return GtkApi.gtk_combo_box_get_active( &this ); }
			set { GtkApi.gtk_combo_box_set_active( &this, value ); }
		}

		public GtkTreeIter SelectedIter {
			get { GtkTreeIter value; GtkApi.gtk_combo_box_get_active_iter( &this, value ); return value; }
			set { GtkApi.gtk_combo_box_get_active_iter( &this, value ); }
		}

		public GtkTreeModel* Model {
			get { return GtkApi.gtk_combo_box_get_model( &this ); }
			set { GtkApi.gtk_combo_box_set_model( &this, value ); }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_combo_box_new_text();
			result->IsVisible = true;
			return result;
		}

		public static new thistype* CreateWithoutModel() {
			var result = GtkApi.gtk_combo_box_new();
			result->IsVisible = true;
			return result;
		}

		public int WrapWidth {
			get { return GtkApi.gtk_combo_box_get_wrap_width( &this ); }
			set { GtkApi.gtk_combo_box_set_wrap_width( &this, value ); }
		}

		public CUtf8String ActiveText {
			get { return GtkApi.gtk_combo_box_get_active_text( &this ); }
		}
	}

	public partial struct GtkTreeModel {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_tree_model_get_type(); } }
		}

		public GValue Value[GtkTreeIter& iter, int column] {
			get {
				var result = new GValue();
				GtkApi.gtk_tree_model_get_value( &this, iter, column, result );
				return result;
			}
		}
	}

	public partial struct GtkEntryCompletion {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_entry_completion_get_type(); } }
		}
	}

	public partial struct GtkListStore {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_list_store_get_type(); } }
		}
	}

	public partial struct GtkComboBoxEntry {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_combo_box_entry_get_type(); } }
		}

		public static new thistype* Create() {
			var result = GtkApi.gtk_combo_box_entry_new_text();
			result->IsVisible = true;
			return result;
		}

		public static new thistype* CreateWithoutModel() {
			var result = GtkApi.gtk_combo_box_entry_new();
			result->IsVisible = true;
			return result;
		}

		public new GtkEntry* Child { get { return ( GtkEntry* ) base.Child; } }

		public void SelectAll() { ( ( GtkEntry* ) Child )->SelectAll(); }

		public void SelectRegion( int start, int length ) { ( ( GtkEntry* ) Child )->SelectRegion( start, length ); }
	}

	public partial struct GtkBin {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_bin_get_type(); } }
		}

		// public GtkWidget* Child { get { return GtkApi.gtk_bin_get_child( &this ); } }
		public GtkWidget* Child { get { return _child; } }
	}

	public partial struct GtkScrolledWindow {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_scrolled_window_get_type(); } }
		}

		public static thistype* Create( GtkWidget* child ) {
			var result = GObjectApi.g_object_new<thistype>();
			result->Add( child );
			result->IsVisible = true;
			return result;
		}

		public static thistype* Create() {
			var result = GObjectApi.g_object_new<thistype>();
			result->IsVisible = true;
			return result;
		}

		public void AddContent( GtkWidget* child ) { GtkApi.gtk_scrolled_window_add_with_viewport( &this, child ); }

		public void GetPolicy( GtkPolicyType& hscrollbar, GtkPolicyType& vscrollbar ) { GtkApi.gtk_scrolled_window_set_policy( &this, hscrollbar, vscrollbar ); }
		public void SetPolicy( GtkPolicyType hscrollbar, GtkPolicyType vscrollbar ) { GtkApi.gtk_scrolled_window_set_policy( &this, hscrollbar, vscrollbar ); }

		public GtkShadowType ShadowType {
			set { GtkApi.gtk_scrolled_window_set_shadow_type( &this, value ); }
		}
	}

	public partial struct GtkFrame {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_frame_get_type(); } }
		}

		public static thistype* Create( CUtf8String label ) {
			var result = GtkApi.gtk_frame_new( label );
			result->IsVisible = true;
			return result;
		}

		public Utf8String Label {
			set { GtkApi.gtk_frame_set_label( &this, value ); }
		}

		public GtkWidget* LabelWidget {
			get { return GtkApi.gtk_frame_get_label_widget( &this ); }
			set { GtkApi.gtk_frame_set_label_widget( &this, value ); }
		}

		public GtkShadowType ShadowType {
			set { GtkApi.gtk_frame_set_shadow_type( &this, value ); }
		}
	}

	public partial struct GtkEventBox {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_event_box_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_event_box_new();
			result->IsVisible = true;
			return result;
		}

		public static thistype* Create( GtkWidget* child ) {
			var result = GtkApi.gtk_event_box_new();
			result->IsVisible = true;
			result->Add( child );
			return result;
		}
	}

	public partial struct GtkDrawingArea {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_drawing_area_get_type(); } }
		}
	}

	public partial struct GtkNotebook {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_notebook_get_type(); } }
		}

		public int AddPage( GtkWidget* title, GtkWidget* content ) { return GtkApi.gtk_notebook_append_page( &this, content, title ); }
		public int AddPage( Utf8String title, GtkWidget* content ) { return GtkApi.gtk_notebook_append_page( &this, content, GtkLabel.Create( title ) ); }

		public GtkWidget* Page[int index] { get { return GtkApi.gtk_notebook_get_nth_page( &this, index ); } }
		public GtkWidget* GetPageLabel( GtkWidget* page ) { return GtkApi.gtk_notebook_get_tab_label( &this, page ); }

		public GtkWidget* ActivePage {
			get { return GtkApi.gtk_notebook_get_nth_page( &this, ActivePageIndex ); }
			set { GtkApi.gtk_notebook_set_current_page( &this, GtkApi.gtk_notebook_page_num( &this, value ) ); }
		}

		public GtkWidget* ActivePageLabel {
			get { return GtkApi.gtk_notebook_get_tab_label( &this, ActivePage ); }
		}

		public int ActivePageIndex {
			get { return GtkApi.gtk_notebook_get_current_page( &this ); }
			set { GtkApi.gtk_notebook_set_current_page( &this, value ); }
		}

		public bool ShowBorder {
			get { return GtkApi.gtk_notebook_get_show_border( &this ); }
			set { GtkApi.gtk_notebook_set_show_border( &this, value ); }
		}

		public bool ShowTabs {
			get { return GtkApi.gtk_notebook_get_show_tabs( &this ); }
			set { GtkApi.gtk_notebook_set_show_tabs( &this, value ); }
		}

		public bool IsScrollable {
			get { return GtkApi.gtk_notebook_get_scrollable( &this ); }
			set { GtkApi.gtk_notebook_set_scrollable( &this, value ); }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_notebook_new();
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkEditable {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_editable_get_type(); } }
		}

		public bool IsEditable {
			get { return GtkApi.gtk_editable_get_editable( &this ); }
			set { GtkApi.gtk_editable_set_editable( &this, value ); }
		}
	}

	public partial struct GtkEntry {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_entry_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_entry_new();
			result->IsVisible = true;
			return result;
		}

		public char PasswordChar {
			get { return ( char ) GtkApi.gtk_entry_get_invisible_char( &this ); }
			set { GtkApi.gtk_entry_set_invisible_char( &this, value ); }
		}

		public Utf8String Text {
			get { return ( Utf8String ) RawText; }
			set { RawText = value ?? ""; }
		}

		public Utf16String TextUtf16 {
			get { return ( Utf16String ) RawText; }
			set { RawText = value != null ? ( Utf8String ) value : Utf8String.Empty; }
		}

		public CUtf8String RawText {
			get { return GtkApi.gtk_entry_get_text( &this ); }
			set { GtkApi.gtk_entry_set_text( &this, value ); }
		}

		public bool PasswordMode {
			get { return !GtkApi.gtk_entry_get_visibility( &this ); }
			set { GtkApi.gtk_entry_set_visibility( &this, !value ); }
		}

		public float HorizontalAlignment {
			get { return GtkApi.gtk_entry_get_alignment( &this ); }
			set { GtkApi.gtk_entry_set_alignment( &this, value ); }
		}

		public bool IsReadOnly {
			get {
				var editable = ( GtkEditable* ) GObjectApi.g_type_check_instance_cast( &this, ( GType ) GtkEditable.Class.TypeID );
				return !editable->IsEditable;
			}
			set { GtkApi.gtk_entry_set_editable( &this, !value ); }
		}

		public int MaxTextLength {
			get { return GtkApi.gtk_entry_get_max_length( &this ); }
			set { GtkApi.gtk_entry_set_max_length( &this, value ); }
		}

		public bool HasFrame {
			get { return GtkApi.gtk_entry_get_has_frame( &this ); }
			set { GtkApi.gtk_entry_set_has_frame( &this, value ); }
		}

		public void SelectAll() { GtkApi.gtk_entry_select_region( &this, 0, ( int ) Text.Length ); }

		public void SelectRegion( int start, int end ) { GtkApi.gtk_entry_select_region( &this, start, end ); }
	}

	public partial struct GtkAlignment {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_alignment_get_type(); } }
		}

		public void SetAlignment( float xalign, float yalign, float xscale, float yscale ) { GtkApi.gtk_alignment_set( &this, xalign, yalign, xscale, yscale ); }
		public void SetPadding( uint padding_top, uint padding_bottom, uint padding_left, uint padding_right ) { GtkApi.gtk_alignment_set_padding( &this, padding_top, padding_bottom, padding_left, padding_right ); }

		public static thistype* Create( GtkWidget* widget, float xalign, float yalign ) {
			if( widget == null ) return null;

			var result = Create( xalign, yalign, 0, 0 );
			result->SetPadding( 0, 0, 0, 0 );
			result->Add( widget );
			return result;
		}

		public static thistype* Create( float xalign, float yalign, float xscale, float yscale ) {
			var result = GtkApi.gtk_alignment_new( xalign, yalign, xscale, yscale );
			result->IsVisible = true;
			return result;
		}

		public static thistype* Create( GtkWidget* widget, float xalign, float yalign, float xscale, float yscale, uint padding_top, uint padding_bottom, uint padding_left, uint padding_right ) {
			if( widget == null ) return null;

			var result = Create( xalign, yalign, xscale, yscale );
			result->SetPadding( padding_top, padding_bottom, padding_left, padding_right );
			result->Add( widget );
			return result;
		}

		public static thistype* Create( GtkWidget* widget, uint padding_top, uint padding_bottom, uint padding_left, uint padding_right ) {
			if( widget == null ) return null;

			var result = Create( 0.5f, 0.5f, 1, 1 );
			result->SetPadding( padding_top, padding_bottom, padding_left, padding_right );
			result->Add( widget );
			return result;
		}
	}

	public partial struct GtkTextView {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_text_view_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_text_view_new();
			result->IsVisible = true;
			return result;
		}

		public GtkWrapMode WrapMode {
			get { return GtkApi.gtk_text_view_get_wrap_mode( &this ); }
			set { GtkApi.gtk_text_view_set_wrap_mode( &this, value ); }
		}

		public GtkTextBuffer* Buffer { get { return GtkApi.gtk_text_view_get_buffer( &this ); } }
	}

	public partial struct GtkTreeView {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_tree_view_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_tree_view_new();
			result->IsVisible = true;
			return result;
		}

		public GtkTreeSelection* Selection { get { return GtkApi.gtk_tree_view_get_selection( &this ); } }

		public bool HasSelectedItems {
			get { GtkTreeIter iter; return GtkApi.gtk_tree_selection_get_selected( Selection, nullref, iter ); }
		}

		public bool Reorderable {
			get { return GtkApi.gtk_tree_view_get_reorderable( &this ); }
			set { GtkApi.gtk_tree_view_set_reorderable( &this, value ); }
		}
	}

	public partial struct GtkTreeSelection {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_tree_selection_get_type(); } }
		}

		public int Count { get { return GtkApi.gtk_tree_selection_count_selected_rows( &this ); } }

		public GtkTreeIter SelectedIter {
			get {
				GtkTreeIter iter;
				GtkApi.gtk_tree_selection_get_selected( &this, nullref, iter );
				return iter;
			}
		}
	}

	public partial struct GtkTreeViewColumn {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_tree_view_column_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_tree_view_column_new();
			return result;
		}

		public Utf8String Title {
			get { return ( Utf8String ) RawTitle; }
			set { RawTitle = value ?? ""; }
		}

		public CUtf8String RawTitle {
			get { return GtkApi.gtk_tree_view_column_get_title( &this ); }
			set { GtkApi.gtk_tree_view_column_set_title( &this, value ); }
		}

		public GtkTreeViewColumnSizing Sizing {
			get { return GtkApi.gtk_tree_view_column_get_sizing( &this ); }
			set { GtkApi.gtk_tree_view_column_set_sizing( &this, value ); }
		}

		public int FixedWidth {
			get { return GtkApi.gtk_tree_view_column_get_fixed_width( &this ); }
			set { GtkApi.gtk_tree_view_column_set_fixed_width( &this, value ); }
		}

		public int MinWidth {
			get { return GtkApi.gtk_tree_view_column_get_min_width( &this ); }
			set { GtkApi.gtk_tree_view_column_set_min_width( &this, value ); }
		}

		public int MaxWidth {
			get { return GtkApi.gtk_tree_view_column_get_max_width( &this ); }
			set { GtkApi.gtk_tree_view_column_set_max_width( &this, value ); }
		}

		public bool Expand {
			get { return GtkApi.gtk_tree_view_column_get_expand( &this ); }
			set { GtkApi.gtk_tree_view_column_set_expand( &this, value ); }
		}

		public float Alignment {
			get { return GtkApi.gtk_tree_view_column_get_alignment( &this ); }
			set { GtkApi.gtk_tree_view_column_set_alignment( &this, value ); }
		}
	}

	public partial struct GtkCellRenderer {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_cell_renderer_get_type(); } }
		}
	}

	public partial struct GtkCellRendererText {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_cell_renderer_text_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_cell_renderer_text_new();
			return result;
		}
	}

	public partial struct GtkCellRendererToggle {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_cell_renderer_toggle_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_cell_renderer_toggle_new();
			return result;
		}

		public bool IsRadio {
			get { return GtkApi.gtk_cell_renderer_toggle_get_radio( &this ); }
			set { GtkApi.gtk_cell_renderer_toggle_set_radio( &this, value ); }
		}

		public bool IsActive {
			get { return GtkApi.gtk_cell_renderer_toggle_get_active( &this ); }
			set { GtkApi.gtk_cell_renderer_toggle_set_active( &this, value ); }
		}
	}

	public partial struct GtkCellLayout {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_cell_layout_get_type(); } }
		}
	}

	public partial struct GtkLayout {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_layout_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_layout_new( null, null );
			result->IsVisible = true;
			return result;
		}

		public void Put( GtkWidget* widget, int x, int y ) { GtkApi.gtk_layout_put( &this, widget, x, y ); }
		public void Move( GtkWidget* widget, int x, int y ) { GtkApi.gtk_layout_move( &this, widget, x, y ); }
	}

	public partial struct GtkFixed {
		public partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_fixed_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_fixed_new();
			result->IsVisible = true;
			return result;
		}

		public void Put( GtkWidget* widget, int x, int y ) { GtkApi.gtk_fixed_put( &this, widget, x, y ); }
		public void Move( GtkWidget* widget, int x, int y ) { GtkApi.gtk_fixed_move( &this, widget, x, y ); }
	}

	public partial struct GtkTable {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_table_get_type(); } }
		}

		public void Put( GtkWidget* widget, int row, int column ) { GtkApi.gtk_table_attach_defaults( &this, widget, ( uint ) column, ( uint ) column + 1, ( uint ) row, ( uint ) row + 1 ); }

		public void Put( GtkWidget* widget, int row, int column, GtkAttachOptions allAttachs ) { GtkApi.gtk_table_attach( &this, widget, ( uint ) column, ( uint )( column + 1 ), ( uint ) row, ( uint )( row + 1 ), allAttachs, allAttachs, 0, 0 ); }

		public void Put( GtkWidget* widget, int row, int column, int rowSpan, int columnSpan ) { GtkApi.gtk_table_attach_defaults( &this, widget, ( uint ) column, ( uint )( column + columnSpan ), ( uint ) row, ( uint )( row + rowSpan ) ); }

		public void Put( GtkWidget* widget, int row, int column, int rowSpan, int columnSpan, GtkAttachOptions allAttachs ) { GtkApi.gtk_table_attach( &this, widget, ( uint ) column, ( uint )( column + columnSpan ), ( uint ) row, ( uint )( row + rowSpan ), allAttachs, allAttachs, 0, 0 ); }

		public void Put( GtkWidget* widget, int row, int column, GtkAttachOptions all_options, int all_padding ) { GtkApi.gtk_table_attach( &this, widget, ( uint ) column, ( uint )( column + 1 ), ( uint ) row, ( uint )( row + 1 ), all_options, all_options, ( uint ) all_padding, ( uint ) all_padding ); }

		public void Put( GtkWidget* widget, int row, int column, GtkAttachOptions xoptions, GtkAttachOptions yoptions, int xpadding, int ypadding ) { GtkApi.gtk_table_attach( &this, widget, ( uint ) column, ( uint )( column + 1 ), ( uint ) row, ( uint )( row + 1 ), xoptions, yoptions, ( uint ) xpadding, ( uint ) ypadding ); }

		public void Put( GtkWidget* widget, int row, int column, int rowSpan, int columnSpan, GtkAttachOptions xoptions, GtkAttachOptions yoptions, int xpadding, int ypadding ) { GtkApi.gtk_table_attach( &this, widget, ( uint ) column, ( uint )( column + columnSpan ), ( uint ) row, ( uint )( row + rowSpan ), xoptions, yoptions, ( uint ) xpadding, ( uint ) ypadding ); }

		public void Resize( int rows, int columns ) { GtkApi.gtk_table_resize( &this, ( uint ) rows, ( uint ) columns ); }

		public static thistype* Create( int rows, int columns ) {
			var result = GtkApi.gtk_table_new( ( uint ) rows, ( uint ) columns, false );
			result->IsVisible = true;
			return result;
		}

		public static thistype* Create( int rows, int columns, bool isHomogeneous ) {
			var result = GtkApi.gtk_table_new( ( uint ) rows, ( uint ) columns, isHomogeneous );
			result->IsVisible = true;
			return result;
		}

		public uint RowSpacings { set { GtkApi.gtk_table_set_row_spacings( &this, value ); } }
		public uint ColumnSpacings { set { GtkApi.gtk_table_set_col_spacings( &this, value ); } }

		public void SetRowSpacing( uint row, uint value ) { GtkApi.gtk_table_set_row_spacing( &this, row, value ); }
		public void SetColumnSpacing( uint column, uint value ) { GtkApi.gtk_table_set_col_spacing( &this, column, value ); }

		public bool IsHomogeneous {
			get { return GtkApi.gtk_table_get_homogeneous( &this ); }
			set { GtkApi.gtk_table_set_homogeneous( &this, value ); }
		}
	}

	public partial struct GtkMenuShell {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_menu_shell_get_type(); } }
		}

		public void Append( GtkItem* item ) {
			GtkApi.gtk_menu_shell_append( &this, item );
		}

		public void Prepend( GtkItem* item ) {
			GtkApi.gtk_menu_shell_prepend( &this, item );
		}
	}

	public partial struct GtkMenu {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_menu_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_menu_new();
			result->IsVisible = true;
			return result;
		}

		public void Popup() { GtkApi.gtk_menu_popup( &this, null, null, null, null, 0, 0 ); }
		public void Popdown() { GtkApi.gtk_menu_popdown( &this ); }
	}

	public partial struct GtkItem {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_item_get_type(); } }
		}
	}

	public partial struct GtkMenuItem {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_menu_item_get_type(); } }
		}

		public static thistype* Create( Utf8String label ) {
			var result = GtkApi.gtk_menu_item_new_with_label( label );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkSeparatorMenuItem {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_separator_menu_item_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_separator_menu_item_new();
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkTearoffMenuItem {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_tearoff_menu_item_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_tearoff_menu_item_new();
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkCheckMenuItem {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_check_menu_item_get_type(); } }
		}

		public static new thistype* Create( Utf8String label ) {
			var result = GtkApi.gtk_check_menu_item_new_with_label( label );
			result->IsVisible = true;
			return result;
		}

		public static new thistype* CreateRadio( Utf8String label ) {
			var result = GtkApi.gtk_check_menu_item_new_with_label( label );
			result->IsRadioButton = true;
			result->IsVisible = true;
			return result;
		}

		public bool Checked {
			get { return GtkApi.gtk_check_menu_item_get_active( &this ); }
			set { GtkApi.gtk_check_menu_item_set_active( &this, value ); }
		}

		public bool IsRadioButton {
			get { return GtkApi.gtk_check_menu_item_get_draw_as_radio( &this ); }
			set { GtkApi.gtk_check_menu_item_set_draw_as_radio( &this, value ); }
		}

		public bool IsInconsistent {
			get { return GtkApi.gtk_check_menu_item_get_inconsistent( &this ); }
			set { GtkApi.gtk_check_menu_item_set_inconsistent( &this, value ); }
		}
	}

	public partial struct GtkBox {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_box_get_type(); } }
		}

		public new void Add( GtkWidget* widget ) {
			GtkApi.gtk_box_pack_start( &this, widget, false, false, 0 );
		}

		public void PackStart( GtkWidget* widget, bool expand = false, bool fill = false, uint padding = 0 ) {
			GtkApi.gtk_box_pack_start( &this, widget, expand, fill, padding );
		}

		public void PackEnd( GtkWidget* widget, bool expand = false, bool fill = false, uint padding = 0 ) {
			GtkApi.gtk_box_pack_end( &this, widget, expand, fill, padding );
		}

		public bool IsHomogeneous {
			get { return GtkApi.gtk_box_get_homogeneous( &this ); }
			set { GtkApi.gtk_box_set_homogeneous( &this, value ); }
		}
	}

	public partial struct GtkPaned {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_paned_get_type(); } }
		}

		public GtkWidget* Child1 { get { return GtkApi.gtk_paned_get_child1( &this ); } set { GtkApi.gtk_paned_add1( &this, value ); } }
		public GtkWidget* Child2 { get { return GtkApi.gtk_paned_get_child2( &this ); } set { GtkApi.gtk_paned_add2( &this, value ); } }

		public int Position { get { return GtkApi.gtk_paned_get_position( &this ); } set { GtkApi.gtk_paned_set_position( &this, value ); } }
	}

	public partial struct GtkHPaned {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_hpaned_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_hpaned_new();
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkVPaned {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_vpaned_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_vpaned_new();
			result->IsVisible = true;
			return result;
		}
	}


	public partial struct GtkRange {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_range_get_type(); } }
		}

		public void SetRange( double min, double max ) {
			if( min >= max ) IsVisible = false;
			else {
				GtkApi.gtk_range_set_range( &this, min, max );
				IsVisible = true;
			}
		}

		public double Value {
			get { return GtkApi.gtk_range_get_value( &this ); }
			set { if( Value != value ) GtkApi.gtk_range_set_value( &this, value ); }
		}

		public bool Invert {
			set { GtkApi.gtk_range_set_inverted( &this, value ); }
		}
	}

	public partial struct GtkScale {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_scale_get_type(); } }
		}

		public bool ShowLabel {
			set { GtkApi.gtk_scale_set_draw_value( &this, value ); }
		}
	}

	public partial struct GtkHScale {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_hscale_get_type(); } }
		}

		public static thistype* Create( double min, double max, double step ) {
			var result = ( GtkHScale* ) GtkApi.gtk_hscale_new_with_range( min, max, step );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkVScale {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_vscale_get_type(); } }
		}

		public static thistype* Create( double min, double max, double step ) {
			var result = ( GtkVScale* ) GtkApi.gtk_vscale_new_with_range( min, max, step );
			result->IsVisible = true;
			return result;
		}
	}


	public partial struct GtkHBox {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_hbox_get_type(); } }
		}

		public static thistype* Create( bool homogenous, int spacing ) {
			var result = GtkApi.gtk_hbox_new( homogenous, spacing );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkVBox {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_vbox_get_type(); } }
		}

		public static thistype* Create( bool homogenous, int spacing ) {
			var result = GtkApi.gtk_vbox_new( homogenous, spacing );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkScrollbar {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_scrollbar_get_type(); } }
		}
	}

	public partial struct GtkHScrollbar {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_scrollbar_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_hscrollbar_new( null );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkVScrollbar {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_scrollbar_get_type(); } }
		}

		public static thistype* Create() {
			var result = GtkApi.gtk_vscrollbar_new( null );
			result->IsVisible = true;
			return result;
		}
	}

	public partial struct GtkDialog {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_dialog_get_type(); } }
		}
	}

	public partial struct GtkTextBuffer {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_text_buffer_get_type(); } }
		}

		public Utf8String Text {
			get {
				GtkTextIter startIter, endIter;
				GtkApi.gtk_text_buffer_get_start_iter( &this, &startIter );
				GtkApi.gtk_text_buffer_get_end_iter( &this, &endIter );
				var text = GtkApi.gtk_text_buffer_get_text( &this, &startIter, &endIter, true );
				var result = ( Utf8String ) new CUtf8String( text );
				GlibApi.g_free( text );
				return result;
			}
			set {
				if( value.IsNullOrEmpty )
					GtkApi.gtk_text_buffer_set_text( &this, Utf8String.Empty, 0 );
				else
					GtkApi.gtk_text_buffer_set_text( &this, ( CUtf8String ) value, ( int ) value.ByteLength );
			}
		}

		public string TextUtf16 {
			get {
				GtkTextIter startIter, endIter;
				GtkApi.gtk_text_buffer_get_start_iter( &this, &startIter );
				GtkApi.gtk_text_buffer_get_end_iter( &this, &endIter );
				var text = GtkApi.gtk_text_buffer_get_text( &this, &startIter, &endIter, true );
				var result = ( Utf16String ) new CUtf8String( text );
				GlibApi.g_free( text );
				return result;
			}
			set {
				if( value.IsNullOrEmpty )
					GtkApi.gtk_text_buffer_set_text( &this, Utf8String.Empty, 0 );
				else {
					var valueUtf8 = ( Utf8String ) value;
					GtkApi.gtk_text_buffer_set_text( &this, valueUtf8, ( int ) valueUtf8.ByteLength );
				}
			}
		}
	}

	public partial struct GtkTreePath : IFormattable {
		public void ToString( StringBuilder builder, string format ) {
			var str = GtkApi.gtk_tree_path_to_string( &this );
			builder.Append( str );
			GlibApi.g_free( str.GetChars() );
		}

		public int* Indices {
			get { return GtkApi.gtk_tree_path_get_indices( &this ); }
		}
	}

	public partial struct GtkMessageDialog {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_message_dialog_get_type(); } }
		}

		private static GtkResponseType ShowModalDialog( GtkWindow* window, Utf8String caption, Utf8String message, GtkMessageType type, GtkButtonsType buttons ) {
			var escapedMessage = message.Replace( "%", "%%" );

			var dialog = GtkApi.gtk_message_dialog_new( window, GtkDialogFlags.GTK_DIALOG_MODAL, type, buttons, escapedMessage );
			dialog->Title = caption;
			var result = GtkApi.gtk_dialog_run( dialog );
			GtkApi.gtk_widget_destroy( dialog );

			return ( GtkResponseType ) result;
		}

		public static void ShowInformation( GtkWindow* window, Utf8String caption, Utf8String message ) {
			ShowModalDialog( window, caption, message, GtkMessageType.GTK_MESSAGE_INFO, GtkButtonsType.GTK_BUTTONS_OK );
		}

		public static void ShowError( GtkWindow* window, Utf8String caption, Utf8String message ) {
			ShowModalDialog( window, caption, message, GtkMessageType.GTK_MESSAGE_ERROR, GtkButtonsType.GTK_BUTTONS_OK );
		}

		public static void ShowWarning( GtkWindow* window, Utf8String caption, Utf8String message ) {
			ShowModalDialog( window, caption, message, GtkMessageType.GTK_MESSAGE_WARNING, GtkButtonsType.GTK_BUTTONS_OK );
		}

		public static GtkResponseType ShowInformationYesNo( GtkWindow* window, Utf8String caption, Utf8String message ) {
			return ShowModalDialog( window, caption, message, GtkMessageType.GTK_MESSAGE_INFO, GtkButtonsType.GTK_BUTTONS_YES_NO );
		}

		public static GtkResponseType ShowWarningYesNo( GtkWindow* window, Utf8String caption, Utf8String message ) {
			return ShowModalDialog( window, caption, message, GtkMessageType.GTK_MESSAGE_WARNING, GtkButtonsType.GTK_BUTTONS_YES_NO );
		}
	}

	public partial struct GtkSettings {
		public new partial struct Class {
			public static new GType TypeID { get { return GtkApi.gtk_message_dialog_get_type(); } }
		}
	}
}