//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

using Platform.Libc;

namespace Platform.Sctp {
	[ExternLibrary( Image = "/usr/lib/libsctp.so" )]
	public static partial struct SctpApi {
		public extern static int sctp_bindx( int sd, sockaddr* addrs, int addrcnt, int flags );
		public extern static int sctp_connectx( int sd, sockaddr* addrs, int addrcnt, int* id );
		public extern static int sctp_freeladdrs( sockaddr* addrs );
		public extern static int sctp_freepaddrs( sockaddr* addrs );
		public extern static int sctp_getaddrlen( ushort family );
		public extern static int sctp_getladdrs( int sd, int id, sockaddr** addrs );
		public extern static int sctp_getpaddrs( int sd, int id, sockaddr** addrs );
		public extern static int sctp_opt_info( int sd, int id, int opt, void* arg, uint* size );
		public extern static int sctp_peeloff( int sd, int assocId );
		public extern static int sctp_recvmsg( int s, void* msg, uint len, sockaddr* from, uint* fromlen, sctp_sndrcvinfo* sinfo, int* msgFlags );
		public extern static int sctp_send( int s, void* msg, uint len, sctp_sndrcvinfo* sinfo, int flags );
		public extern static int sctp_sendmsg( int s, void* msg, uint len, sockaddr* to, uint tolen, uint ppid, uint flags, ushort streamNo, uint timetolive, uint context );
	}
	public enum sctp_cmsg_type : uint {
		SCTP_INIT =   0,
		SCTP_SNDRCV = 1,
	}
	[Flags]
	public enum sctp_msg_flags : uint {
		None =                 0,
		MSG_NOTIFICATION = 32768,
	}
	public enum sctp_optname : uint {
		SCTP_RTOINFO =                 0,
		SCTP_ASSOCINFO =               1,
		SCTP_INITMSG =                 2,
		SCTP_NODELAY =                 3,
		SCTP_AUTOCLOSE =               4,
		SCTP_SET_PEER_PRIMARY_ADDR =   5,
		SCTP_PRIMARY_ADDR =            6,
		SCTP_ADAPTATION_LAYER =        7,
		SCTP_DISABLE_FRAGMENTS =       8,
		SCTP_PEER_ADDR_PARAMS =        9,
		SCTP_DEFAULT_SEND_PARAM =     10,
		SCTP_EVENTS =                 11,
		SCTP_I_WANT_MAPPED_V4_ADDR =  12,
		SCTP_MAXSEG =                 13,
		SCTP_STATUS =                 14,
		SCTP_GET_PEER_ADDR_INFO =     15,
		SCTP_DELAYED_ACK =            16,
		SCTP_DELAYED_ACK_TIME =       16,
		SCTP_DELAYED_SACK =           16,
		SCTP_CONTEXT =                17,
		SCTP_FRAGMENT_INTERLEAVE =    18,
		SCTP_PARTIAL_DELIVERY_POINT = 19,
		SCTP_MAX_BURST =              20,
		SCTP_AUTH_CHUNK =             21,
		SCTP_HMAC_IDENT =             22,
		SCTP_AUTH_KEY =               23,
		SCTP_AUTH_ACTIVE_KEY =        24,
		SCTP_AUTH_DELETE_KEY =        25,
		SCTP_PEER_AUTH_CHUNKS =       26,
		SCTP_LOCAL_AUTH_CHUNKS =      27,
		SCTP_GET_ASSOC_NUMBER =       28,
		SCTP_SOCKOPT_BINDX_ADD =     100,
		SCTP_SOCKOPT_BINDX_REM =     101,
		SCTP_SOCKOPT_PEELOFF =       102,
		SCTP_SOCKOPT_CONNECTX_OLD =  107,
		SCTP_GET_PEER_ADDRS =        108,
		SCTP_GET_LOCAL_ADDRS =       109,
		SCTP_SOCKOPT_CONNECTX =      110,
		SCTP_SOCKOPT_CONNECTX3 =     111,
		SCTP_GET_ASSOC_STATS =       112,
	}
	public enum sctp_sac_state : uint {
		SCTP_COMM_UP =        0,
		SCTP_COMM_LOST =      1,
		SCTP_RESTART =        2,
		SCTP_SHUTDOWN_COMP =  3,
		SCTP_CANT_STR_ASSOC = 4,
	}
	[Flags]
	public enum sctp_sinfo_flags : uint {
		None =                  0,
		SCTP_UNORDERED =        1,
		SCTP_ADDR_OVER =        2,
		SCTP_ABORT =            4,
		SCTP_SACK_IMMEDIATELY = 8,
		SCTP_EOF =            512,
	}
	public enum sctp_sn_error : uint {
		SCTP_FAILED_THRESHOLD =       0,
		SCTP_RECEIVED_SACK =          1,
		SCTP_HEARTBEAT_SUCCESS =      2,
		SCTP_RESPONSE_TO_USER_REQ =   3,
		SCTP_INTERNAL_ERROR =         4,
		SCTP_SHUTDOWN_GUARD_EXPIRES = 5,
		SCTP_PEER_FAULTY =            6,
	}
	public enum sctp_sn_type : uint {
		SCTP_SN_TYPE_BASE =              32768,
		SCTP_ASSOC_CHANGE =              32769,
		SCTP_PEER_ADDR_CHANGE =          32770,
		SCTP_SEND_FAILED =               32771,
		SCTP_REMOTE_ERROR =              32772,
		SCTP_SHUTDOWN_EVENT =            32773,
		SCTP_PARTIAL_DELIVERY_EVENT =    32774,
		SCTP_ADAPTATION_INDICATION =     32775,
		SCTP_AUTHENTICATION_INDICATION = 32776,
		SCTP_SENDER_DRY_EVENT =          32777,
	}
	public enum sctp_spc_state : uint {
		SCTP_ADDR_AVAILABLE =   0,
		SCTP_ADDR_UNREACHABLE = 1,
		SCTP_ADDR_REMOVED =     2,
		SCTP_ADDR_ADDED =       3,
		SCTP_ADDR_MADE_PRIM =   4,
		SCTP_ADDR_CONFIRMED =   5,
	}
	public enum sctp_spinfo_state : uint {
		SCTP_INACTIVE =    0,
		SCTP_PF =          1,
		SCTP_ACTIVE =      2,
		SCTP_UNCONFIRMED = 3,
		SCTP_UNKNOWN = 65535,
	}
	[Flags]
	public enum sctp_spp_flags : uint {
		None =                   0,
		SPP_HB_ENABLE =          1,
		SPP_HB_DISABLE =         2,
		SPP_HB =                 3,
		SPP_HB_DEMAND =          4,
		SPP_PMTUD_ENABLE =       8,
		SPP_PMTUD_DISABLE =     16,
		SPP_PMTUD =             24,
		SPP_SACKDELAY_ENABLE =  32,
		SPP_SACKDELAY_DISABLE = 64,
		SPP_SACKDELAY =         96,
		SPP_HB_TIME_IS_ZERO =  128,
	}
	[Flags]
	public enum sctp_ssf_flags : uint {
		SCTP_DATA_UNSENT = 0,
		SCTP_DATA_SENT =   1,
	}
	public enum sctp_sstat_state : uint {
		SCTP_EMPTY =             0,
		SCTP_CLOSED =            1,
		SCTP_COOKIE_WAIT =       2,
		SCTP_COOKIE_ECHOED =     3,
		SCTP_ESTABLISHED =       4,
		SCTP_SHUTDOWN_PENDING =  5,
		SCTP_SHUTDOWN_SENT =     6,
		SCTP_SHUTDOWN_RECEIVED = 7,
		SCTP_SHUTDOWN_ACK_SENT = 8,
	}
	public enum UnnamedEnum_AE77C29A : uint {
		SCTP_PARTIAL_DELIVERY_ABORTED = 0,
	}
	public enum UnnamedEnum_AE77C449 : uint {
		SCTP_AUTH_NEWKEY = 0,
	}
	public enum UnnamedEnum_AE78280F : uint {
		SCTP_AUTH_HMAC_ID_SHA1 =   1,
		SCTP_AUTH_HMAC_ID_SHA256 = 3,
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_adaptation_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort sai_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sai_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sai_length;
		[ExplicitOffset( Offset = 8 )]
		public uint sai_adaptation_ind;
		[ExplicitOffset( Offset = 12 )]
		public int sai_assoc_id;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assoc_change {
		[ExplicitOffset( Offset = 0 )]
		public ushort sac_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sac_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sac_length;
		[ExplicitOffset( Offset = 8 )]
		public ushort sac_state;
		[ExplicitOffset( Offset = 10 )]
		public ushort sac_error;
		[ExplicitOffset( Offset = 12 )]
		public ushort sac_outbound_streams;
		[ExplicitOffset( Offset = 14 )]
		public ushort sac_inbound_streams;
		[ExplicitOffset( Offset = 16 )]
		public int sac_assoc_id;
		[ExplicitOffset( Offset = 20 )]
		public byte[0] sac_info;
	}
	[ExplicitSize( Size = 252 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assoc_stats {
		[ExplicitOffset( Offset = 0 )]
		public int sas_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage sas_obs_rto_ipaddr;
		[ExplicitOffset( Offset = 132 )]
		public ulong sas_maxrto;
		[ExplicitOffset( Offset = 140 )]
		public ulong sas_isacks;
		[ExplicitOffset( Offset = 148 )]
		public ulong sas_osacks;
		[ExplicitOffset( Offset = 156 )]
		public ulong sas_opackets;
		[ExplicitOffset( Offset = 164 )]
		public ulong sas_ipackets;
		[ExplicitOffset( Offset = 172 )]
		public ulong sas_rtxchunks;
		[ExplicitOffset( Offset = 180 )]
		public ulong sas_outofseqtsns;
		[ExplicitOffset( Offset = 188 )]
		public ulong sas_idupchunks;
		[ExplicitOffset( Offset = 196 )]
		public ulong sas_gapcnt;
		[ExplicitOffset( Offset = 204 )]
		public ulong sas_ouodchunks;
		[ExplicitOffset( Offset = 212 )]
		public ulong sas_iuodchunks;
		[ExplicitOffset( Offset = 220 )]
		public ulong sas_oodchunks;
		[ExplicitOffset( Offset = 228 )]
		public ulong sas_iodchunks;
		[ExplicitOffset( Offset = 236 )]
		public ulong sas_octrlchunks;
		[ExplicitOffset( Offset = 244 )]
		public ulong sas_ictrlchunks;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assoc_value {
		[ExplicitOffset( Offset = 0 )]
		public int assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint assoc_value;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assocparams {
		[ExplicitOffset( Offset = 0 )]
		public int sasoc_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort sasoc_asocmaxrxt;
		[ExplicitOffset( Offset = 6 )]
		public ushort sasoc_number_peer_destinations;
		[ExplicitOffset( Offset = 8 )]
		public uint sasoc_peer_rwnd;
		[ExplicitOffset( Offset = 12 )]
		public uint sasoc_local_rwnd;
		[ExplicitOffset( Offset = 16 )]
		public uint sasoc_cookie_life;
	}
	[ExplicitSize( Size = 1 )]
	public partial struct sctp_authchunk {
		[ExplicitOffset( Offset = 0 )]
		public byte sauth_chunk;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authchunks {
		[ExplicitOffset( Offset = 0 )]
		public int gauth_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint gauth_number_of_chunks;
		public byte* gauth_chunks { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authkey {
		[ExplicitOffset( Offset = 0 )]
		public int sca_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort sca_keynumber;
		[ExplicitOffset( Offset = 6 )]
		public ushort sca_keylength;
		public byte* sca_key { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authkey_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort auth_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort auth_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint auth_length;
		[ExplicitOffset( Offset = 8 )]
		public ushort auth_keynumber;
		[ExplicitOffset( Offset = 10 )]
		public ushort auth_altkeynumber;
		[ExplicitOffset( Offset = 12 )]
		public uint auth_indication;
		[ExplicitOffset( Offset = 16 )]
		public int auth_assoc_id;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authkeyid {
		[ExplicitOffset( Offset = 0 )]
		public int scact_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort scact_keynumber;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_cmsg_data_t {
		[Overlapped( Offset = 0 )]
		public byte raw;
		[Overlapped( Offset = 0 )]
		public sctp_initmsg init;
		[Overlapped( Offset = 0 )]
		public sctp_sndrcvinfo sndrcv;
	}
	[ExplicitSize( Size = 10 )]
	public partial struct sctp_event_subscribe {
		[ExplicitOffset( Offset = 0 )]
		public byte sctp_data_io_event;
		[ExplicitOffset( Offset = 1 )]
		public byte sctp_association_event;
		[ExplicitOffset( Offset = 2 )]
		public byte sctp_address_event;
		[ExplicitOffset( Offset = 3 )]
		public byte sctp_send_failure_event;
		[ExplicitOffset( Offset = 4 )]
		public byte sctp_peer_error_event;
		[ExplicitOffset( Offset = 5 )]
		public byte sctp_shutdown_event;
		[ExplicitOffset( Offset = 6 )]
		public byte sctp_partial_delivery_event;
		[ExplicitOffset( Offset = 7 )]
		public byte sctp_adaptation_layer_event;
		[ExplicitOffset( Offset = 8 )]
		public byte sctp_authentication_event;
		[ExplicitOffset( Offset = 9 )]
		public byte sctp_sender_dry_event;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_getaddrs {
		[ExplicitOffset( Offset = 0 )]
		public int assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint addr_num;
		[ExplicitOffset( Offset = 8 )]
		public byte[0] addrs;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_getaddrs_old {
		[ExplicitOffset( Offset = 0 )]
		public int assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public int addr_num;
		[ExplicitOffset( Offset = 8 )]
		public sockaddr* addrs;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_hmacalgo {
		[ExplicitOffset( Offset = 0 )]
		public uint shmac_number_of_idents;
		public ushort* shmac_idents { get { return cast<ushort*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 2 )]
	public partial struct sctp_initmsg {
		[ExplicitOffset( Offset = 0 )]
		public ushort sinit_num_ostreams;
		[ExplicitOffset( Offset = 2 )]
		public ushort sinit_max_instreams;
		[ExplicitOffset( Offset = 4 )]
		public ushort sinit_max_attempts;
		[ExplicitOffset( Offset = 6 )]
		public ushort sinit_max_init_timeo;
	}
	[ExplicitSize( Size = 148 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_notification {
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_AE77AEE0 sn_header;
		[Overlapped( Offset = 0 )]
		public sctp_assoc_change sn_assoc_change;
		[Overlapped( Offset = 0 )]
		public sctp_paddr_change sn_paddr_change;
		[Overlapped( Offset = 0 )]
		public sctp_remote_error sn_remote_error;
		[Overlapped( Offset = 0 )]
		public sctp_send_failed sn_send_failed;
		[Overlapped( Offset = 0 )]
		public sctp_shutdown_event sn_shutdown_event;
		[Overlapped( Offset = 0 )]
		public sctp_adaptation_event sn_adaptation_event;
		[Overlapped( Offset = 0 )]
		public sctp_pdapi_event sn_pdapi_event;
		[Overlapped( Offset = 0 )]
		public sctp_authkey_event sn_authkey_event;
		[Overlapped( Offset = 0 )]
		public sctp_sender_dry_event sn_sender_dry_event;
	}
	[ExplicitSize( Size = 148 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_paddr_change {
		[ExplicitOffset( Offset = 0 )]
		public ushort spc_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort spc_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint spc_length;
		[ExplicitOffset( Offset = 8 )]
		public sockaddr_storage spc_aaddr;
		[ExplicitOffset( Offset = 136 )]
		public int spc_state;
		[ExplicitOffset( Offset = 140 )]
		public int spc_error;
		[ExplicitOffset( Offset = 144 )]
		public int spc_assoc_id;
	}
	[ExplicitSize( Size = 152 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_paddrinfo {
		[ExplicitOffset( Offset = 0 )]
		public int spinfo_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage spinfo_address;
		[ExplicitOffset( Offset = 132 )]
		public int spinfo_state;
		[ExplicitOffset( Offset = 136 )]
		public uint spinfo_cwnd;
		[ExplicitOffset( Offset = 140 )]
		public uint spinfo_srtt;
		[ExplicitOffset( Offset = 144 )]
		public uint spinfo_rto;
		[ExplicitOffset( Offset = 148 )]
		public uint spinfo_mtu;
	}
	[ExplicitSize( Size = 152 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_paddrparams {
		[ExplicitOffset( Offset = 0 )]
		public int spp_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage spp_address;
		[ExplicitOffset( Offset = 132 )]
		public uint spp_hbinterval;
		[ExplicitOffset( Offset = 136 )]
		public ushort spp_pathmaxrxt;
		[ExplicitOffset( Offset = 138 )]
		public uint spp_pathmtu;
		[ExplicitOffset( Offset = 142 )]
		public uint spp_sackdelay;
		[ExplicitOffset( Offset = 146 )]
		public uint spp_flags;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_pdapi_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort pdapi_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort pdapi_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint pdapi_length;
		[ExplicitOffset( Offset = 8 )]
		public uint pdapi_indication;
		[ExplicitOffset( Offset = 12 )]
		public int pdapi_assoc_id;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_peeloff_arg_t {
		[ExplicitOffset( Offset = 0 )]
		public int associd;
		[ExplicitOffset( Offset = 4 )]
		public int sd;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_remote_error {
		[ExplicitOffset( Offset = 0 )]
		public ushort sre_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sre_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sre_length;
		[ExplicitOffset( Offset = 8 )]
		public ushort sre_error;
		[ExplicitOffset( Offset = 12 )]
		public int sre_assoc_id;
		[ExplicitOffset( Offset = 16 )]
		public byte[0] sre_data;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_rtoinfo {
		[ExplicitOffset( Offset = 0 )]
		public int srto_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint srto_initial;
		[ExplicitOffset( Offset = 8 )]
		public uint srto_max;
		[ExplicitOffset( Offset = 12 )]
		public uint srto_min;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sack_info {
		[ExplicitOffset( Offset = 0 )]
		public int sack_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint sack_delay;
		[ExplicitOffset( Offset = 8 )]
		public uint sack_freq;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_send_failed {
		[ExplicitOffset( Offset = 0 )]
		public ushort ssf_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort ssf_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint ssf_length;
		[ExplicitOffset( Offset = 8 )]
		public uint ssf_error;
		[ExplicitOffset( Offset = 12 )]
		public sctp_sndrcvinfo ssf_info;
		[ExplicitOffset( Offset = 44 )]
		public int ssf_assoc_id;
		[ExplicitOffset( Offset = 48 )]
		public byte[0] ssf_data;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sender_dry_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort sender_dry_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sender_dry_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sender_dry_length;
		[ExplicitOffset( Offset = 8 )]
		public int sender_dry_assoc_id;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_setadaptation {
		[ExplicitOffset( Offset = 0 )]
		public uint ssb_adaptation_ind;
	}
	[ExplicitSize( Size = 132 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_setpeerprim {
		[ExplicitOffset( Offset = 0 )]
		public int sspp_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage sspp_addr;
	}
	[ExplicitSize( Size = 132 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_setprim {
		[ExplicitOffset( Offset = 0 )]
		public int ssp_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage ssp_addr;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_shutdown_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort sse_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sse_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sse_length;
		[ExplicitOffset( Offset = 8 )]
		public int sse_assoc_id;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sndrcvinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort sinfo_stream;
		[ExplicitOffset( Offset = 2 )]
		public ushort sinfo_ssn;
		[ExplicitOffset( Offset = 4 )]
		public ushort sinfo_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint sinfo_ppid;
		[ExplicitOffset( Offset = 12 )]
		public uint sinfo_context;
		[ExplicitOffset( Offset = 16 )]
		public uint sinfo_timetolive;
		[ExplicitOffset( Offset = 20 )]
		public uint sinfo_tsn;
		[ExplicitOffset( Offset = 24 )]
		public uint sinfo_cumtsn;
		[ExplicitOffset( Offset = 28 )]
		public int sinfo_assoc_id;
	}
	[ExplicitSize( Size = 176 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_status {
		[ExplicitOffset( Offset = 0 )]
		public int sstat_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public int sstat_state;
		[ExplicitOffset( Offset = 8 )]
		public uint sstat_rwnd;
		[ExplicitOffset( Offset = 12 )]
		public ushort sstat_unackdata;
		[ExplicitOffset( Offset = 14 )]
		public ushort sstat_penddata;
		[ExplicitOffset( Offset = 16 )]
		public ushort sstat_instrms;
		[ExplicitOffset( Offset = 18 )]
		public ushort sstat_outstrms;
		[ExplicitOffset( Offset = 20 )]
		public uint sstat_fragmentation_point;
		[ExplicitOffset( Offset = 24 )]
		public sctp_paddrinfo sstat_primary;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_AE77AEE0 {
		[ExplicitOffset( Offset = 0 )]
		public ushort sn_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sn_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sn_length;
	}
}