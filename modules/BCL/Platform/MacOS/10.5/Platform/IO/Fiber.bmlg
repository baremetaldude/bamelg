//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

using Platform.Auxlib;
using Platform.Syscalls;

namespace Platform.IO {
	// Fibers used for IO-intensive applications, do not use them for computation-intensive tasks
	public partial struct Fiber {
		private const uint ValidityCheckPattern = 0xDEADBEEF;
		public const bool Trace = false;

		private void* _stack;
		private uint _stackSize;

		private IOHandle _waitHandle;
		private KEventFilter _waitFilter;
		private KEventAction _waitFlags;

		private intptr ValgrindStackID;

		private Fiber* ScheduledNext;

		private bool _isReady;

		internal void OnFinalize() {
			// don't deregister main stack
			if( ValgrindStackID != 0 )
				Valgrind.StackDeregister( ValgrindStackID );
			Memory.Deallocate( _stack );
			TraceFinalize( &this );
		}

		public int ID { get { return FiberManager.GetFiberId( &this ); } }

		public void Ready() { FiberManager.Ready( &this ); }
		public static void Yield() { FiberManager.Yield(); }

		// Waits until 'Ready' get called. Used for waiting IO operations
		public static void Wait() { FiberManager.Wait(); }

		public static void Dispatch() { FiberManager.Dispatch(); }

		public static bool WaitForConnect( IOHandle handle, bool waitForReceive ) { return FiberManager.WaitForConnect( handle, waitForReceive ); }
		public static void WaitForRead( IOHandle handle ) { FiberManager.WaitForRead( handle ); }
		public static void WaitForWrite( IOHandle handle ) { FiberManager.WaitForWrite( handle ); }

		public static Fiber* Create( uint stackSize, Functors.Action<void*> function, void* parameter ) { return FiberManager.CreateFiber( stackSize, function, parameter ); }
		public static Fiber* Start( uint stackSize, Functors.Action<void*> function, void* parameter ) { var result = Create( stackSize, function, parameter ); result->Ready(); return result; }

		public static Fiber* Create( uint stackSize, Delegates.Action start ) {
			cast<RuntimeObjectBase>( start ).AddReference();

			return FiberManager.CreateFiber( stackSize, parameter => {
				var @delegate = bitcast<System.Delegates.Action>( parameter );
				cast<RuntimeObjectBase>( @delegate ).ReleaseReference();

				@delegate();
			}, bitcast<void*>( start ) );
		}
		public static Fiber* Start( uint stackSize, Delegates.Action start ) { var result = Create( stackSize, start ); result->Ready(); return result; }

		[ThreadStatic]
		public static Manager FiberManager;
		public static Fiber* Current { get { return FiberManager.CurrentFiber; } }

		public static bool Enabled { get { return FiberManager != null; } }
		// public static bool Enabled { get { return false; } }

		public static FiberScope EnableFibers( int maxFibers ) {
			Assert.IsTrue( FiberManager == null );
			FiberManager = new Fiber.Manager( maxFibers + 1 );
			return new FiberScope();
		}

		public static bool GetIOBuffer( byte* buffer, uint& bufferLength ) {
			if( Enabled ) {
				bufferLength = ( uint ) FiberManager.SharedBuffer.Length;
				buffer = &FiberManager.SharedBuffer[0];
				return true;
			}

			return false;
		}

		// Dont use directly
		public struct FiberScope {
			internal FiberScope() { }

			public void Dispose() {
				Assert.IsTrue( FiberManager != null );
				FiberManager = null;
			}
		}

		public class Manager {
			internal Fiber* CurrentFiber;

			private bool _isFiberReady = false;
			public KQueueHandle KQueue = new KQueueHandle();
			public KQueueHandle NotifyQueue = KQueueHandle.Invalid;

			public bool ExitWhenAllFinished = false;

			private PagedPool<Fiber> _fibers;
			private Queue<Fiber*> _readyList;
			private Queue<Fiber*> _finishedList;
			private List<kevent> _pendingEvents;

			internal byte[] SharedBuffer = new[16384] byte;

			public Manager( int maxFibers ) {
				Assert.IsTrue( FiberManager == null );
				FiberManager = this;

				_fibers = new PagedPool<Fiber>();
				_fibers.OnFinalize = Fiber.OnFinalize;

				_readyList = new Queue<Fiber*>( maxFibers );
				_finishedList = new Queue<Fiber*>( maxFibers );
				_pendingEvents = new List<kevent>( maxFibers );

				CurrentFiber = _fibers.Allocate();
				CurrentFiber->_stack = null;
				CurrentFiber->_stackSize = 0;
				CurrentFiber->ValgrindStackID = 0;
			}

			~Manager() {
				_fibers = null;

				KQueue.Close();
			}

			[Conditional( ConditionString = "DEBUG" )]
			private void CheckOverwrites( Fiber* fiber ) {
				// Console.WriteLine( "Check {0}: sp={1} sz={2}", fiber->ID, fiber->_stack, fiber->_stackSize );
				if( fiber->_stack != null ) Assert.IsTrue( *( uint* )( ( byte* ) fiber->_stack ) == ValidityCheckPattern );
			}

			public int GetFiberId( Fiber* fiber ) {
				return _fibers.IndexOf( fiber );
			}

			public int FiberCount { get { return _fibers.Count; } }

			public void Ready() {
				Ready( CurrentFiber );
			}

			public void Ready( Fiber* fiber ) {
				if( fiber->_isReady ) return;

				CheckOverwrites( fiber );
				TraceReady( fiber );

				// notify parent
				if( !_isFiberReady ) {
					// Console.WriteLine( "========NOTIFY=======" );
					var @event = new kevent( 0, KEventFilter.EVFILT_USER, KEventAction.EV_ONESHOT, KEventUserFilterFlags.NOTE_FFNOP | KEventUserFilterFlags.NOTE_TRIGGER, bitcast<int>( this ), memberinfo( Dispatch ).Address );
					NotifyQueue.Modify( &@event, 1 );
				}

				_readyList.Enqueue( fiber );
				fiber->_isReady = true;
			}

			public void Yield() {
				Ready( CurrentFiber );
				SwitchTo( CurrentFiber->ScheduledNext );
			}

			// Waits until someone called 'Ready' for this Fiber
			public void Wait() {
				SwitchTo( CurrentFiber->ScheduledNext );
			}

			private void SwitchTo( Fiber* fiber ) {
				Assert.IsTrue( fiber->ID >= 0 );

				CheckOverwrites( fiber );
				TraceSwitch( CurrentFiber, fiber );

				var currentFiber = CurrentFiber;
				CurrentFiber = fiber;
				fiber->_isReady = false;

				SwitchCurrentContext( &currentFiber->Context, &fiber->Context );
			}

			internal void RemoveAndSwitchTo( Fiber* fiber ) {
				CheckOverwrites( fiber );
				TraceSwitch( CurrentFiber, fiber );

				var currentFiber = CurrentFiber;
				CurrentFiber = fiber;
				fiber->_isReady = false;

				_finishedList.Enqueue( currentFiber );
				SwitchCurrentContext( &currentFiber->Context, &fiber->Context );
			}

			public Fiber* CreateFiber( uint stackSize, Functors.Action<void*> function, void* parameter ) {
				var result = _fibers.Allocate();
				result->_isReady = false;

				result->_stack = Memory.Allocate( stackSize );
				result->_stackSize = stackSize;

				*( uint* )( ( byte* ) result->_stack ) = ValidityCheckPattern;
				PrepareContext( result->Context, result->_stack, result->_stackSize, function, parameter );
				CheckOverwrites( result );

				result->ValgrindStackID = Valgrind.StackRegister( result->_stack, cast<byte*>( result->_stack ) + result->_stackSize );

				TraceCreate( result );
				return result;
			}

			internal void ShowActiveFibers() {
				Console.WriteLine( "Active fibers: {0}", _fibers.Count );
				// foreach( var fiber in _fibers ) {
				//	Console.Write( " {0}", fiber->ID );
				// }

				Console.WriteLine();
			}

			public void Dispatch() {
				// if( _isFiberReady ) {
				_isFiberReady = false;
				var @event = new kevent( 0, KEventFilter.EVFILT_USER, KEventAction.EV_CLEAR, KEventUserFilterFlags.NOTE_FFNOP, 0, null );
				NotifyQueue.Modify( &@event, 1 );
				// }

				Fiber* scheduleTo = null;
				if( Trace ) Console.WriteLine( "Fiber: Ready to dispatch: {0}", _readyList.Count );

				if( _readyList.Count > 0 ) {
					scheduleTo = _readyList[0];

					for( var i = 0; i < _readyList.Count; ++i )
						_readyList[i]->ScheduledNext = i + 1 < _readyList.Count ? _readyList[i + 1] : CurrentFiber;

					_readyList.Clear();
				}

				if( scheduleTo != null )
					SwitchTo( scheduleTo );

				if( _pendingEvents.Count > 0 ) {
					Assert.Syscall( SystemApi.kevent( KQueue, _pendingEvents.GetBuffer(), _pendingEvents.Count, null, 0, nullref ) );
					_pendingEvents.Clear();
				}

				while( _finishedList.Count > 0 ) {
					var current = _finishedList.Dequeue();
					_fibers.Free( current );
				}
			}

			public void OnEvent() {
				var waitBufferLength = _fibers.Count;
				var waitBuffer = stackalloc kevent[waitBufferLength];

				while( true ) {
					var polledHandles = SystemApi.kevent( KQueue, null, 0, &waitBuffer[0], waitBufferLength, nullref );
					if( polledHandles == 0 ) return;

					if( Trace ) Console.WriteLine( "Fiber OnEvent: IO events count = {0}", polledHandles );
					if( polledHandles < 0 ) {
						switch( SystemApi.LastError ) {
							case SystemError.EINTR: continue;
							default: Assert.Syscall( polledHandles ); continue;
						}
					}

					for( var i = 0; i < polledHandles; ++i ) {
						var& currentEvent = waitBuffer[i];
						var fiber = ( Fiber* ) currentEvent.udata;

						if( Trace ) Console.WriteLine( "Fiber filter: {0} action: {1} data: {2} udata: {3} fiber: {4}", currentEvent.filter, currentEvent.flags, currentEvent.data, currentEvent.udata, fiber->ID );

						fiber->_waitFilter = currentEvent.filter;
						fiber->_waitFlags = currentEvent.flags;
						Ready( fiber );
					}

					Dispatch();
					break; // we need to dispatch from outer loop
				}
			}

			public bool WaitForConnect( Platform.Syscalls.IOHandle handle, bool waitForReceive ) {
				if( Trace ) Console.WriteLine( "{0}.{0:ffffff} Fiber: [{1:D2}] {2}", DateTime.UtcNow, CurrentFiber->ID, thismethod );

				CurrentFiber->_waitHandle = handle;
				_pendingEvents.Add( new kevent( handle, waitForReceive ? KEventFilter.EVFILT_READ : KEventFilter.EVFILT_WRITE, KEventAction.EV_ADD | KEventAction.EV_ONESHOT, CurrentFiber ) );
				Wait();

				// return ( CurrentFiber->_waitEvents & ~( EpollEvents.EPOLLIN | EpollEvents.EPOLLOUT ).Value() ) == 0;
				return true;
			}

			public void WaitForRead( Platform.Syscalls.IOHandle handle ) {
				if( Trace ) Console.WriteLine( "{0}.{0:ffffff} Fiber: [{1:D2}] {2}", DateTime.UtcNow, CurrentFiber->ID, thismethod );

				CurrentFiber->_waitHandle = handle;
				_pendingEvents.Add( new kevent( handle, KEventFilter.EVFILT_READ, KEventAction.EV_ADD | KEventAction.EV_ONESHOT, CurrentFiber ) );
				Wait();
			}

			public void WaitForWrite( Platform.Syscalls.IOHandle handle ) {
				if( Trace ) Console.WriteLine( "{0}.{0:ffffff} Fiber: [{1:D2}] {2}", DateTime.UtcNow, CurrentFiber->ID, thismethod );

				CurrentFiber->_waitHandle = handle;
				_pendingEvents.Add( new kevent( handle, KEventFilter.EVFILT_WRITE, KEventAction.EV_ADD | KEventAction.EV_ONESHOT, CurrentFiber ) );
				Wait();
			}
		}

		#region Tracing support

		internal const string FiberTraceDefine = Trace ? "TRACE" : "FIBER_TRACE";

		[Conditional( ConditionString = FiberTraceDefine )]
		private static void TraceCreate( Fiber* fiber ) {
			Console.WriteLine( "Fiber: Created [{0}] ( total: {1} ) ValgrindStackID: {2}", fiber->ID, FiberManager.FiberCount, fiber->ValgrindStackID );
		}

		[Conditional( ConditionString = FiberTraceDefine )]
		private static void TraceFinalize( Fiber* fiber ) {
			Console.Write( ( Utf8String ) "\x001B[31;1m" );

			Console.WriteLine( "Fiber: Finalized [{0}] ( total: {1} )", fiber->ID, FiberManager.FiberCount - 1 );

			Console.Write( ( Utf8String ) "\x001B[0m" );
		}

		[Conditional( ConditionString = FiberTraceDefine )]
		private static void TraceSwitch( Fiber* current, Fiber* next ) {
			Console.Write( ( Utf8String ) "\x001B[32;1m" );

			Console.WriteLine( "{0}.{0:ffffff} Fiber: Switch [{1}] --> [{2}]", DateTime.UtcNow, current->ID, next->ID );

			Console.Write( ( Utf8String ) "\x001B[0m" );
		}

		[Conditional( ConditionString = FiberTraceDefine )]
		private static void TraceReady( Fiber* current ) {
			Console.WriteLine( "Fiber: Ready [{0}]", current->ID );
		}

		#endregion

		private struct ProcessorContext {
		}

		[Alignment( Boundary = 4 )]
		private struct ProcessorContextX86 {
			public uint EIP;

			// public uint EAX; // volatile register
			public uint EBX;
			// public uint ECX; // volatile register
			// public uint EDX; // volatile register
			public uint EBP;
			public uint EDI;
			public uint ESI;

			public uint ESP;

			// public ushort FS;
			// public ushort GS;
		}

		private struct ProcessorContextX86_64 {
			// public ulong RAX; // volatile register
			public ulong RBX;
			// public ulong RCX; // volatile register
			// public ulong RDX; // volatile register
			public ulong RBP;
			public ulong RDI; // volatile register, but need to pass parameters
			// public ulong R8; // volatile register
			// public ulong R9; // volatile register
			// public ulong R10; // volatile register
			// public ulong R11; // volatile register
			public ulong R12;
			public ulong R13;
			public ulong R14;
			public ulong R15;

			public ulong RIP;
			public ulong RSP;
			public ulong RSI; // volatile register, but need to pass parameters

			// public ushort FS;
			// public ushort GS;
		}

		private static void FiberFunction( Functors.Action<void*> function, void* parameter ) {
			function( parameter );
			FiberManager.RemoveAndSwitchTo( FiberManager.CurrentFiber->ScheduledNext );
		}

		private static void FiberIncorrectExitHandler() {
			Assert.Fail( "Fiber exited incorrectly!" );
			FiberManager.RemoveAndSwitchTo( FiberManager.CurrentFiber->ScheduledNext );
		}

		private static void PrepareContext( ucontext_t& context, void* stack, uint stackSize, Functors.Action<void*> function, void* parameter ) {
			AuxlibApi.getcontext( context );
			context.uc_link = ( ucontext_t* ) &FiberManager.CurrentFiber->Context;
			context.uc_stack.ss_sp = stack;
			context.uc_stack.ss_size = stackSize;
			AuxlibApi.makecontext( context, FiberFunction, 2, function, parameter );
		}

		private static void PrepareContext( ProcessorContextX86& context, void* stack, uint stackSize, Functors.Action<void*> function, void* parameter ) {
			context.ESP = cast<uint>( cast<byte*>( stack ) + stackSize - 12 ) & ~15U;
			context.EIP = ( uint ) bitcast<uintptr>( memberinfo( FiberFunction ).Address );

			*( uint* )( context.ESP + 0 ) = ( uint ) bitcast<uintptr>( memberinfo( FiberIncorrectExitHandler ).Address );
			*( uint* )( context.ESP + 4 ) = ( uint ) bitcast<uintptr>( function );
			*( uint* )( context.ESP + 8 ) = ( uint ) bitcast<uintptr>( parameter );
		}

		private static void PrepareContext( ProcessorContextX86_64& context, void* stack, uint stackSize, Functors.Action<void*> function, void* parameter ) {
			// context.RSP = cast<ulong>( cast<byte*>( stack ) + stackSize - sizeof( context.RIP ) ) & ~15U;
			// context.RSP = cast<ulong>( cast<byte*>( stack ) + ( stackSize & ~15U ) - sizeof( context.RIP ) );
			context.RSP = cast<ulong>( cast<byte*>( stack ) + stackSize - sizeof( context.RIP ) );

			context.RIP = cast<uintptr>( memberinfo( FiberFunction ).Address );

			*cast<void**>( context.RSP + 0 ) = memberinfo( FiberIncorrectExitHandler ).Address;
			context.RDI = bitcast<uintptr>( function );
			context.RSI = bitcast<uintptr>( parameter );
		}

		private static void SwitchCurrentContext( ucontext_t* context, ucontext_t* newContext ) {
			AuxlibApi.swapcontext( *context, *newContext );
		}

		private static void SwitchCurrentContext( void* context, void* newContext ) asm {
			X86_32 {
				mov ecx, [esp]     // return address
				mov eax, [esp + 4] // context
				lea edx, [esp + 4] // edx = esp + 4

				mov [eax + const( memberinfo( ProcessorContextX86.EIP ).ByteOffset )], ecx
				mov [eax + const( memberinfo( ProcessorContextX86.EBX ).ByteOffset )], ebx
				mov [eax + const( memberinfo( ProcessorContextX86.EBP ).ByteOffset )], ebp
				mov [eax + const( memberinfo( ProcessorContextX86.EDI ).ByteOffset )], edi
				mov [eax + const( memberinfo( ProcessorContextX86.ESI ).ByteOffset )], esi
				mov [eax + const( memberinfo( ProcessorContextX86.ESP ).ByteOffset )], edx

				mov eax, [esp + 8] // newContext

				mov ecx, [eax + const( memberinfo( ProcessorContextX86.EIP ).ByteOffset )]
				mov ebx, [eax + const( memberinfo( ProcessorContextX86.EBX ).ByteOffset )]
				mov ebp, [eax + const( memberinfo( ProcessorContextX86.EBP ).ByteOffset )]
				mov edi, [eax + const( memberinfo( ProcessorContextX86.EDI ).ByteOffset )]
				mov esi, [eax + const( memberinfo( ProcessorContextX86.ESI ).ByteOffset )]
				mov esp, [eax + const( memberinfo( ProcessorContextX86.ESP ).ByteOffset )]

				jmp ecx
			}
			X86_64 {
				mov rcx, [rsp]     // return address
				lea rdx, [rsp + 8] // do not include return address

				// rdi - context
				mov [rdi + const( memberinfo( ProcessorContextX86_64.RBX ).ByteOffset )], rbx
				mov [rdi + const( memberinfo( ProcessorContextX86_64.RBP ).ByteOffset )], rbp
				mov [rdi + const( memberinfo( ProcessorContextX86_64.RDI ).ByteOffset )], rdi
				mov [rdi + const( memberinfo( ProcessorContextX86_64.R12 ).ByteOffset )], r12
				mov [rdi + const( memberinfo( ProcessorContextX86_64.R13 ).ByteOffset )], r13
				mov [rdi + const( memberinfo( ProcessorContextX86_64.R14 ).ByteOffset )], r14
				mov [rdi + const( memberinfo( ProcessorContextX86_64.R15 ).ByteOffset )], r15
				mov [rdi + const( memberinfo( ProcessorContextX86_64.RIP ).ByteOffset )], rcx
				mov [rdi + const( memberinfo( ProcessorContextX86_64.RSP ).ByteOffset )], rdx
				mov [rdi + const( memberinfo( ProcessorContextX86_64.RSI ).ByteOffset )], rsi

				// rsi - newContext
				mov rbx, [rsi + const( memberinfo( ProcessorContextX86_64.RBX ).ByteOffset )]
				mov rbp, [rsi + const( memberinfo( ProcessorContextX86_64.RBP ).ByteOffset )]
				mov rdi, [rsi + const( memberinfo( ProcessorContextX86_64.RDI ).ByteOffset )]
				mov r12, [rsi + const( memberinfo( ProcessorContextX86_64.R12 ).ByteOffset )]
				mov r13, [rsi + const( memberinfo( ProcessorContextX86_64.R13 ).ByteOffset )]
				mov r14, [rsi + const( memberinfo( ProcessorContextX86_64.R14 ).ByteOffset )]
				mov r15, [rsi + const( memberinfo( ProcessorContextX86_64.R15 ).ByteOffset )]
				mov rax, [rsi + const( memberinfo( ProcessorContextX86_64.RIP ).ByteOffset )]
				mov rsp, [rsi + const( memberinfo( ProcessorContextX86_64.RSP ).ByteOffset )]
				mov rsi, [rsi + const( memberinfo( ProcessorContextX86_64.RSI ).ByteOffset )]

				jmp rax
			}
			default {
				Assert.NotImplemented();
			}
		}
	}
}

// Testing 10000 fibers with 1000 yields on Q9450 (10 000 000 userspace context switches):
// SwitchCurrentContext: 00:00:06.057995        sizeof(Fiber) == 54
// swapcontext:          00:00:12.550795        sizeof(Fiber) == 373
// :)