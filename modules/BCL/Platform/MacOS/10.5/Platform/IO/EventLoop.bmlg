//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

using Platform.Syscalls;
using Platform.Threading;

namespace Platform.IO {
	// A simple example of how main loop can be organized
	public class EventLoop {
		protected bool _quitRequest;

		#region Events
		public KQueueHandle KQueue = new KQueueHandle();

		private kevent[256] _signalledEvents;
		internal List<kevent> _eventChangeList = new List<kevent>();

		public void AddEvent( kevent& @event ) {
			_eventChangeList.Add( @event );
		}
		#endregion

		private NotificationEmitter _notificationEmitter = new NotificationEmitter( this );

		public DateTime NotificationStartTime; // when first notification wake up blocking thread

		public EventLoop() {
			_notificationEmitter.Register();
		}

		public override void Dispose() {
			KQueue.Close();
			foreach( var eventSource in _eventSources ) eventSource.Dispose();
		}

		internal HashSet<EventSource> _eventSources = new HashSet<EventSource>();

		public int EventSourceCount { get { return _eventSources.Count; } }

		#region Dispatching
		private enum DispatchingState {
			None,
			Async,
			Sync,
		}

		private DispatchingState _dispatchingState;
		private Platform.Threading.Thread _dispatchThread;

		// Dispatch events in current thread
		public void DispatchSync() {
			if( !Assert.IsTrue( _dispatchingState == DispatchingState.None ) ) return;
			_dispatchingState = DispatchingState.Sync;

			_dispatchThread = Platform.Threading.Thread.CurrentThread;
			Dispatch();
		}

		// Dispatch events in new thread
		public void DispatchAsync() {
			if( !Assert.IsTrue( _dispatchingState == DispatchingState.None ) ) return;
			_dispatchingState = DispatchingState.Async;

			AddReference();
			_dispatchThread = new Platform.Threading.Thread( sender => {
				var @this = bitcast<thistype>( sender );
				@this.ReleaseReference();
				@this.Dispatch();
				return null;
			}, bitcast<void*>( this ) );
		}

		// Request for terminate event loop thread
		public void BeginQuit() {
			RequestExit();
		}

		// Wait until event loop thread terminates
		public void EndQuit() {
			if( !Assert.IsTrue( _dispatchingState == DispatchingState.Async ) ) return;
			_dispatchThread.Join();
		}

		// Request termination & Wait
		public void Quit() {
			BeginQuit();
			EndQuit();
		}

		public void Dispatch() {
			Trace( new ConsoleAttributes() { BackgroundColor = ConsoleAttributes.Color.Blue, Bold = true }, "EventLoop dispatch started: {0}", DateTime.UtcNow );

			while( !_quitRequest ) {
				if( _eventChangeList.Count > 0 ) {
					Trace( new ConsoleAttributes() { BackgroundColor = ConsoleAttributes.Color.Blue, Bold = true }, "Apply kevent modifications: Count={0}", _eventChangeList.Count );

					foreach( var ev in _eventChangeList )
						Trace( new ConsoleAttributes() { Thin = true }, " {0}", ev );
				}

				var polledDescriptors = SystemApi.kevent( KQueue, _eventChangeList.GetBuffer(), _eventChangeList.Count, &_signalledEvents[0], ( int ) _signalledEvents.Length, nullref );
				_eventChangeList.Clear();

				if( polledDescriptors <= 0 ) {
					switch( SystemApi.LastError ) {
						case SystemError.EINTR: continue;
						default: Assert.Syscall( polledDescriptors ); continue;
					}
				}

				NotificationStartTime = DateTime.UtcNow;
				Trace( new ConsoleAttributes() { BackgroundColor = ConsoleAttributes.Color.Blue, Bold = true }, "EventLoop: kevent() count={0} at {1}", polledDescriptors, NotificationStartTime );

				for( var i = 0; i < polledDescriptors; ++i ) {
					var& @event = _signalledEvents[i];
					var& eventSource = *bitcast<EventSource*>( &@event.udata ); // dont touch refcount

					eventSource.EnsureEventSourceRegistered( this );
					Trace( new ConsoleAttributes() { BackgroundColor = ConsoleAttributes.Color.Blue }, " notify '{0}' with event='{1}'", @event.udata != null ? eventSource.GetType() : typeof( void ), @event );

					eventSource.OnEvent( @event );
				}
			}

			Trace( new ConsoleAttributes() { BackgroundColor = ConsoleAttributes.Color.Blue, Bold = true }, "EventLoop dispatch finished: {0}", DateTime.UtcNow );
			Dispose();
		}

		#endregion

		// It can be implemented as interface, but class provides faster access to fields
		public abstract class EventSource {
			public abstract EventLoop Parent { get; } ///< Event loop holding/polling this EventSource
			// public abstract IOHandle EventHandle { get; } ///< Handle passed to 'poll'

			public abstract void OnEvent( kevent& @event );

			public EventSource() { }

			public sealed override uint GetHashCode() { return base.GetHashCode(); }

			#region Can be overrided for faster access to Parent/EventHandle or to intercept these events
			public virtual bool Register() { return Register( Parent ); }
			// public virtual void NotifyEventModification() { NotifyEventModification( Parent, EventHandle ); }
			public virtual bool Unregister() { return Unregister( Parent ); }
			#endregion

			// MT-unsafe
			public bool Register( EventLoop parent ) {
				if( parent._eventSources.Add( this ) ) {
					Trace( new ConsoleAttributes() { BackgroundColor = ConsoleAttributes.Color.Blue, Bold = true }, "EventSource '{0}' registered {1}", GetType(), bitcast<void*>( this ) );

					return true;
				}
				else {
					Assert.Fail( "EventSource '{0}' {1} already registered!", GetType(), bitcast<void*>( this ) );
					return false;
				}
			}

			// MT-unsafe
			protected bool Unregister( EventLoop parent ) {
				var retainer = this;
				if( parent._eventSources.Remove( this ) ) {
					Trace( new ConsoleAttributes() { BackgroundColor = ConsoleAttributes.Color.Blue, Bold = true }, "EventSource '{0}' unregistered {1}", GetType(), bitcast<void*>( this ) );

					return true;
				}
				else {
					Assert.Fail( "EventSource '{0}' {1} not registered!", GetType(), bitcast<void*>( this ) );
					return false;
				}
			}

			[Conditional( ConditionString = "DEBUG" )]
			internal void EnsureEventSourceRegistered( EventLoop parent ) {
				if( !parent._eventSources.Contains( this ) )
					Assert.Fail( "EventSource not registered!" );
			}
		}

		public class SignalEventSource : EventSource {
			public override EventLoop Parent { get { return _parent; } }
			private EventLoop _parent;

			private sigset_t _signals;

			public SignalEventSource( EventLoop parent, sigset_t& signals ) {
				_parent = parent;

				_signals = signals;
			}

			public override void Dispose() {
				_parent = null;

				base.Dispose();
			}

			public sealed override void OnEvent( kevent& @event ) {
				OnRaised();
			}

			public virtual void OnRaised() {
				Parent.RequestExit();
			}

			public override bool Register() {
				if( !base.Register() ) return false;

				foreach( var signal in _signals )
					Parent._eventChangeList.Add( new kevent( signal, KEventAction.EV_ADD, bitcast<void*>( this ) ) );

				return true;
			}

			public override bool Unregister() {
				foreach( var signal in _signals )
					Parent._eventChangeList.Add( new kevent( signal, KEventAction.EV_DELETE, bitcast<void*>( this ) ) );

				return base.Unregister();
			}
		}

		public class TimerEventSource : EventSource {
			public override EventLoop Parent { get { return _parent; } }
			private EventLoop _parent;

			protected TimeSpan _timeSpan;

			public TimerEventSource( EventLoop parent, TimeSpan timeSpan ) {
				_parent = parent;
				_timeSpan = timeSpan;
			}

			public override void Dispose() {
				_parent = null;

				base.Dispose();
			}

			public sealed override void OnEvent( kevent& @event ) {
				OnRaised();
			}

			public virtual void OnRaised() {
				Parent.RequestExit();
			}

			public override bool Register() {
				if( !base.Register() ) return false;

				Parent._eventChangeList.Add( new kevent( bitcast<uintptr>( this ), _timeSpan, KEventAction.EV_ADD, bitcast<void*>( this ) ) );

				return true;
			}

			public override bool Unregister() {
				Parent._eventChangeList.Add( new kevent( bitcast<uintptr>( this ), _timeSpan, KEventAction.EV_DELETE, bitcast<void*>( this ) ) );

				return base.Unregister();
			}
		}

		public void CatchExitSignals( sigset_t& signals ) {
			var eventSource = new SignalEventSource( this, signals );
			eventSource.Register();
		}

		// used for internal purposes
		private class NotificationEmitter : EventSource {
			public override EventLoop Parent { get { return _parent; } }
			private EventLoop _parent;

			private enum NotificationCommand : int {
				Update,
				Exit, // exit from event loop
			}

			private bool _exitRequestPending, _updateRequestPending;

			public NotificationEmitter( EventLoop parent ) {
				_parent = parent;
			}

			public override void Dispose() {
				_parent = null;

				base.Dispose();
			}

			public override void OnEvent( kevent& @event ) {
				switch( ( NotificationCommand ) @event.data ) {
					case NotificationCommand.Update:
						break;

					case NotificationCommand.Exit:
						Parent._quitRequest = true;
						break;
				}
			}

			public void RequestUpdate() {
				if( _updateRequestPending ) return;

				var @event = new kevent( 0, KEventFilter.EVFILT_USER, ( KEventAction ) 0, KEventUserFilterFlags.NOTE_TRIGGER, NotificationCommand.Update, bitcast<void*>( this ) );
				Parent.KQueue.Modify( @event );

				_updateRequestPending = true;
			}

			public void RequestExit() {
				if( _exitRequestPending ) { Parent._quitRequest = true; return; }

				var @event = new kevent( 0, KEventFilter.EVFILT_USER, ( KEventAction ) 0, KEventUserFilterFlags.NOTE_TRIGGER, NotificationCommand.Exit, bitcast<void*>( this ) );
				Parent.KQueue.Modify( @event );

				_exitRequestPending = true;
			}

			public override bool Register() {
				if( !base.Register() ) return false;

				Parent._eventChangeList.Add( new kevent( 0, KEventFilter.EVFILT_USER, KEventAction.EV_ADD | KEventAction.EV_CLEAR, 0, 0, bitcast<void*>( this ) ) );
				return true;
			}

			public override bool Unregister() {
				Parent._eventChangeList.Add( new kevent( 0, KEventFilter.EVFILT_USER, KEventAction.EV_DELETE, 0, 0, bitcast<void*>( this ) ) );

				return base.Unregister();
			}
		}

		public void RequestExit() {
			if( _dispatchThread != Platform.Threading.Thread.CurrentThread ) _notificationEmitter.RequestExit(); else _quitRequest = true;
		}

		public void RequestUpdate() {
			if( _dispatchThread != Platform.Threading.Thread.CurrentThread ) _notificationEmitter.RequestUpdate();
		}

		#region Tracing
		// private const string TraceConditionString = "TRACE_EVENT_LOOP";
		private const string TraceConditionString = "DEBUG";

		[Conditional( ConditionString = TraceConditionString )]
		private static void Trace( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			Console.WriteLine( format, vararg( parameters, parameters.Length ) );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void Trace( string format ) {
			Console.WriteLine( format );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void Trace( ConsoleAttributes& attrs, [VerifyFormatString] string format, vararg TypedReference parameters ) {
			Console.Write( attrs );
			Console.Write( format, vararg( parameters, parameters.Length ) );
			Console.WriteLine( new ConsoleAttributes() );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void Trace( ConsoleAttributes& attrs, string format ) {
			Console.Write( attrs );
			Console.WriteLine( format );
			Console.WriteLine( new ConsoleAttributes() );
		}
		#endregion
	}
}