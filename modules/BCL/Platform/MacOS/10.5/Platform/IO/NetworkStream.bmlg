//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

using Platform;
using Platform.Syscalls;

namespace Platform.IO {
	// Must be used with non-blocking sockets in Fibers or with blocking sockets(in ST/MT environment)
	public class NetworkStream : IStream {
		public StreamCapabilities Capabilities { get { return StreamCapabilities.Read | StreamCapabilities.Write | StreamCapabilities.VectoredIO; } }

		public StreamingBufferInfo* BufferInfo { get { return null; } }

		public SocketHandle Handle;

		public NetworkStream( SocketHandle handle ) {
			Handle = handle;
		}

		// Read будет возвращать меньше байт чем ожидается только в случае закрытия соединения
		public int Read( void* buffer, int count ) {
			var data = ( byte* ) buffer;

			var transmitted = 0;
			for( ; count > 0; ) {
				var error = Handle.Receive( data, count, transmitted );
				if( error != SystemError.None ) break;

				data += transmitted;
				if( transmitted < count ) break;

				count -= transmitted;
			}

			return ( int )( data - ( byte* ) buffer );
		}

		public void Write( void* buffer, int count ) {
			Assert.ErrorCode( Handle.Send( buffer, count ) );
		}

		int IStream.Read( vararg MemorySegment segments ) {
			Assert.IsTrue( AdaptationLayer.IsMemorySegmentLayoutEqualsToIovec );
			int totalReaden;
			return Handle.Receive( totalReaden, vararg( ( iovec* ) segments, segments.Length ) );
		}

		void IStream.Write( vararg MemorySegment segments ) {
			Assert.IsTrue( AdaptationLayer.IsMemorySegmentLayoutEqualsToIovec );
			Handle.Send( vararg( ( iovec* ) segments, segments.Length ) );
		}

		public void Flush( FlushKind flushKind = FlushKind.DeepWrite ) {
		}
	}
}