//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime;

using Platform.Syscalls;

namespace Platform.IO {
	public class Directory {
		private const int BufferLength = 4096;

		public struct Entry {
			public IOHandle ParentHandle;
			public CUtf8String Name;
			public DirectoryEntryType Type;

			public bool GetStat( stat& result ) { return SystemApi.fstatat( ParentHandle, Name, result, SymlinkFollowOption.None ) == 0; }
			public bool GetSymlinkStat( stat& result ) { return SystemApi.fstatat( ParentHandle, Name, result, SymlinkFollowOption.AT_SYMLINK_NOFOLLOW ) == 0; }

			public bool IsFile { get { return Type == DirectoryEntryType.DT_REG; } }
			public bool IsDirectory { get { return Type == DirectoryEntryType.DT_DIR; } }
			public bool IsSymlink { get { return Type == DirectoryEntryType.DT_LNK; } }
			public bool IsFIFO { get { return Type == DirectoryEntryType.DT_FIFO; } }
			public bool IsSocket { get { return Type == DirectoryEntryType.DT_SOCK; } }
		}

		public static bool Exists( Utf8String path ) {
			stat stat;

			if( SystemApi.stat( path, stat ) < 0 ) return false;

			return stat.IsDirectory;
		}

		public static void Create( Utf8String path ) {
			Create( path, ( Permission ) 0b111111101 );
		}

		public static void Create( Utf8String path, Permission permission ) {
			SystemApi.mkdir( path, permission );
			SystemApi.chmod( path, permission ); // override umask
		}

		public static void Create( Utf8String path, Permission permission, int owner, int group ) {
			SystemApi.mkdir( path, permission );
			SystemApi.chmod( path, permission ); // override umask
			SystemApi.chown( path, owner, group );
		}

		public IOHandle Handle = IOHandle.Invalid;

		public Directory( Entry& directory ) {
			Handle = SystemApi.openat( directory.ParentHandle, directory.Name, FctlFlags.O_RDONLY | FctlFlags.O_DIRECTORY, 0 );
		}

		public Directory( CUtf8String path ) {
			Handle = SystemApi.open( path, FctlFlags.O_RDONLY | FctlFlags.O_DIRECTORY, 0 );
		}

		~Directory() {
			SystemApi.close( Handle ); Handle = IOHandle.Invalid;
		}

		public static yield<Entry> GetContents( CUtf8String path ) {
			byte[BufferLength] buffer;

			using( var handle = SystemApi.open( path, FctlFlags.O_RDONLY | FctlFlags.O_DIRECTORY, 0 ) ) {
				var entry = new Entry { ParentHandle = handle };

				for( var readen = SystemApi.getdents( handle, ( dirent* ) &buffer[0], buffer.Length ); readen > 0; readen = SystemApi.getdents( handle, ( dirent* ) &buffer[0], buffer.Length ) ) {
					var dptrstart = &buffer[0];

					for( var dptr = bitcast<dirent*>( dptrstart ); bitcast<byte*>( dptr ) < dptrstart + readen; dptr = bitcast<dirent*>( bitcast<byte*>( dptr ) + dptr->Length ) ) {
						if( dptr->INode == 0 ) continue;

						entry.Name = new CUtf8String( &dptr->Name[0] );
						entry.Type = dptr->Type;

						switch( entry.Name ) {
							case ".":
							case "..":
								continue;
						}

						yield return entry;
					}
				}
			}
		}

		public static yield<Entry> GetContents( Entry& directory ) {
			byte[BufferLength] buffer;

			using( var handle = SystemApi.openat( directory.ParentHandle, directory.Name, FctlFlags.O_RDONLY | FctlFlags.O_DIRECTORY, 0 ) ) {
				var entry = new Entry { ParentHandle = handle };

				for( var readen = SystemApi.getdents( handle, ( dirent* ) &buffer[0], buffer.Length ); readen > 0; readen = SystemApi.getdents( handle, ( dirent* ) &buffer[0], buffer.Length ) ) {
					var dptrstart = &buffer[0];

					for( var dptr = bitcast<dirent*>( dptrstart ); bitcast<byte*>( dptr ) < dptrstart + readen; dptr = bitcast<dirent*>( bitcast<byte*>( dptr ) + dptr->Length ) ) {
						if( dptr->INode == 0 ) continue;

						entry.Name = new CUtf8String( &dptr->Name[0] );
						entry.Type = dptr->Type;

						switch( entry.Name ) {
							case ".":
							case "..":
								continue;
						}

						yield return entry;
					}
				}
			}
		}
	}
}