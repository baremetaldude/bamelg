//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

using Platform.Syscalls;

namespace Platform.IO {
	public abstract class FileStream {
		public bool CloseHandle = true;
		public IOHandle Handle = IOHandle.Invalid;

		public StreamingBufferInfo* BufferInfo { get { return null; } }

		private FileStream() { }
		private FileStream( IOHandle handle ) { Handle = handle; }

		public sealed class ReadStream : FileStream, ISeekableStream {
			public StreamCapabilities Capabilities { get { return StreamCapabilities.Read | StreamCapabilities.VectoredIO; } }

			public ReadStream( IOHandle handle )
				: base( handle ) {
			}

			~ReadStream() { Cleanup(); }

			public override void Dispose() {
				Cleanup();
				base.Dispose();
			}

			private void Cleanup() {
				if( !Handle.IsValid ) return;

				if( CloseHandle ) Handle.Close();
				Handle = IOHandle.Invalid;
			}

			public void Flush( FlushKind flushKind = FlushKind.Read ) { }

			public int Read( void* buffer, int length ) {
				if( !Handle.IsValid || length == 0 || buffer == null ) return 0;

				int readen;
				Assert.Syscall( readen = SystemApi.read( Handle, buffer, length ) );
				return Math.Max( 0, readen );
			}

			public int Read( vararg MemorySegment segments ) {
				Assert.IsTrue( AdaptationLayer.IsMemorySegmentLayoutEqualsToIovec );

				int readen;
				Assert.Syscall( readen = SystemApi.readv( Handle, ( iovec* ) segments, segments.Length ) );
				return readen;
			}

			void IStream.Write( void* buffer, int count ) { Assert.Unreachable(); }
			void IStream.Write( vararg MemorySegment segments ) { Assert.Unreachable(); }

			public long Seek( long value ) { return Seek( value, System.IO.SeekOrigin.Begin ); }
			public long Seek( long value, SeekOrigin seekOrigin ) { return SystemApi.lseek64( Handle, value, AdaptationLayer.MapSeekOrigin( seekOrigin ) ); }
		}

		public sealed class WriteStream : FileStream, ISeekableStream {
			public StreamCapabilities Capabilities { get { return StreamCapabilities.Write | StreamCapabilities.VectoredIO; } }

			public WriteStream( IOHandle handle )
				: base( handle ) {
			}

			~WriteStream() { Cleanup(); }

			private void Cleanup() {
				if( !Handle.IsValid ) return;

				if( CloseHandle ) Handle.Close();
				Handle = IOHandle.Invalid;
			}

			public override void Dispose() {
				Cleanup();
			}

			int IStream.Read( void* buffer, int count ) { Assert.Unreachable(); return 0; }
			int IStream.Read( vararg MemorySegment segments ) { Assert.Unreachable(); return 0; }

			public void Write( void* buffer, int length ) {
				if( !Handle.IsValid || length == 0 || buffer == null ) return;

				Assert.Syscall( SystemApi.write( Handle, buffer, length ) );
				return;
			}

			public void Write( vararg MemorySegment segments ) {
				Assert.IsTrue( AdaptationLayer.IsMemorySegmentLayoutEqualsToIovec );

				Assert.Syscall( SystemApi.writev( Handle, ( iovec* ) &segments[0], segments.Length ) );
			}

			public void Flush( FlushKind flushKind = FlushKind.DeepWrite ) {
				switch( flushKind ) {
					case FlushKind.SynchronizeWrite:
						SystemApi.fdatasync( Handle );
						break;
				}
			}

			public long Seek( long value ) { return Seek( value, System.IO.SeekOrigin.Begin ); }
			public long Seek( long value, SeekOrigin seekOrigin ) { Flush(); return SystemApi.lseek64( Handle, value, AdaptationLayer.MapSeekOrigin( seekOrigin ) ); }
		}

		public static ReadStream OpenRead( CUtf8String name ) {
			IOHandle handle;
			if( !Assert.Syscall( handle = SystemApi.open( name, FileOpenFlags.O_RDONLY, 0 ), "Unable to open '{0}'", name ) ) return null;

			return new ReadStream( handle );
		}

		public static WriteStream OpenWrite( CUtf8String name, Permission permission = ( Permission ) 0b110110110 ) {
			var exists = File.Exists( name );

			IOHandle handle;
			if( !Assert.Syscall( handle = SystemApi.open( name, FileOpenFlags.O_CREAT | FileOpenFlags.O_WRONLY | FileOpenFlags.O_TRUNC, permission ), "Unable to open '{0}'", name ) ) return null;

			if( !exists ) SystemApi.fchmod( handle, permission ); // override umask

			return new WriteStream( handle );
		}

		public static WriteStream OpenAppend( CUtf8String name, Permission permission = ( Permission ) 0b110110110 ) {
			var exists = File.Exists( name );

			var handle = SystemApi.open( name, FileOpenFlags.O_CREAT | FileOpenFlags.O_WRONLY | FileOpenFlags.O_APPEND, permission );
			if( !Assert.Syscall( handle, "Unable to open '{0}'", name ) ) return null;
			Assert.Syscall( SystemApi.lseek( handle, 0, FileSeekOrigin.SEEK_END ) );

			if( !exists ) SystemApi.fchmod( handle, permission ); // override umask

			return new WriteStream( handle );
		}

		public long Position { get { return SystemApi.lseek( Handle, 0, FileSeekOrigin.SEEK_CUR ); } }
	}
}