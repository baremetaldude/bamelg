//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Platform.Syscalls {
	[ExplicitSize( Size = 8 )]
	public partial struct timeval {
		[ExplicitOffset( Offset = 0 )]
		public int Seconds;
		[ExplicitOffset( Offset = 4 )]
		public int Microseconds;
	}
	[ExplicitSize( Size = 8 )]
	public partial struct timespec {
		[ExplicitOffset( Offset = 0 )]
		public int Seconds;
		[ExplicitOffset( Offset = 4 )]
		public int Nanoseconds;
	}
	[ExplicitSize( Size = 16 )]
	public partial struct tms {
		[ExplicitOffset( Offset = 0 )]
		public uintptr tms_utime;
		[ExplicitOffset( Offset = 4 )]
		public uintptr tms_stime;
		[ExplicitOffset( Offset = 8 )]
		public uintptr tms_cutime;
		[ExplicitOffset( Offset = 12 )]
		public uintptr tms_cstime;
	}
	[ExplicitSize( Size = 1280 )]
	public partial struct utsname {
		[ExplicitOffset( Offset = 0 )]
		public byte[256] sysname;
		[ExplicitOffset( Offset = 256 )]
		public byte[256] nodename;
		[ExplicitOffset( Offset = 512 )]
		public byte[256] release;
		[ExplicitOffset( Offset = 768 )]
		public byte[256] version;
		[ExplicitOffset( Offset = 1024 )]
		public byte[256] machine;
	}
	[ExplicitSize( Size = 8 )]
	public partial struct iovec {
		[ExplicitOffset( Offset = 0 )]
		public void* Address;
		[ExplicitOffset( Offset = 4 )]
		public uint Length;
	}
	[ExplicitSize( Size = 264 )]
	public partial struct dirent {
	}
	public enum DirectoryEntryType : byte {
		DT_UNKNOWN = 0,
		DT_FIFO =    1,
		DT_CHR =     2,
		DT_DIR =     4,
		DT_BLK =     6,
		DT_REG =     8,
		DT_LNK =    10,
		DT_SOCK =   12,
		DT_WHT =    14,
	}
	[ExplicitSize( Size = 4 )]
	public partial struct sigset_t {
	}
	[ExplicitSize( Size = 96 )]
	public partial struct stat {
		[ExplicitOffset( Offset = 0 )]
		public int st_dev;
		[ExplicitOffset( Offset = 4 )]
		public uint st_ino;
		[ExplicitOffset( Offset = 8 )]
		public StatFlags st_mode;
		[ExplicitOffset( Offset = 10 )]
		public ushort st_nlink;
		[ExplicitOffset( Offset = 12 )]
		public uint st_uid;
		[ExplicitOffset( Offset = 16 )]
		public uint st_gid;
		[ExplicitOffset( Offset = 20 )]
		public int st_rdev;
		[ExplicitOffset( Offset = 48 )]
		public long st_size;
		[ExplicitOffset( Offset = 56 )]
		public long st_blocks;
		[ExplicitOffset( Offset = 64 )]
		public int st_blksize;
	}
	[Flags]
	public enum SignalFlags : uint {
		None =          0,
		SA_NOCLDSTOP =  8,
		SA_NOCLDWAIT = 32,
		SA_SIGINFO =   64,
		SA_ONSTACK =    1,
		SA_RESTART =    2,
		SA_NODEFER =   16,
		SA_RESETHAND =  4,
	}
	public enum SeekOrigin : uint {
		SEEK_SET = 0,
		SEEK_CUR = 1,
		SEEK_END = 2,
	}
	public enum FileDescriptorCommand : uint {
		F_DUPFD =  0,
		F_GETFD =  1,
		F_SETFD =  2,
		F_GETFL =  3,
		F_SETFL =  4,
		F_GETLK =  7,
		F_SETLK =  8,
		F_SETLKW = 9,
		F_SETOWN = 6,
		F_GETOWN = 5,
	}
	public enum FileOpenFlags : int {
		O_ACCMODE =         3,
		O_RDONLY =          0,
		O_WRONLY =          1,
		O_RDWR =            2,
		O_CREAT =         512,
		O_EXCL =         2048,
		O_NOCTTY =     131072,
		O_TRUNC =        1024,
		O_APPEND =          8,
		O_NONBLOCK =        4,
		O_NDELAY =          4,
		O_SYNC =          128,
		FASYNC =           64,
		O_DIRECTORY = 1048576,
		O_NOFOLLOW =      256,
		FD_CLOEXEC =        1,
	}
	public enum Ioctls : uint {
		TIOCEXCL =    536900621,
		TIOCNXCL =    536900622,
		TIOCSCTTY =   536900705,
		TIOCGPGRP =  1074033783,
		TIOCSPGRP =  2147775606,
		TIOCOUTQ =   1074033779,
		TIOCSTI =    2147578994,
		TIOCGWINSZ = 1074295912,
		TIOCSWINSZ = 2148037735,
		TIOCMGET =   1074033770,
		TIOCMBIS =   2147775596,
		TIOCMBIC =   2147775595,
		TIOCMSET =   2147775597,
		FIONREAD =   1074030207,
		TIOCCONS =   2147775586,
		TIOCPKT =    2147775600,
		FIONBIO =    2147772030,
		TIOCNOTTY =   536900721,
		TIOCSETD =   2147775515,
		TIOCGETD =   1074033690,
		TIOCSBRK =    536900731,
		TIOCCBRK =    536900730,
		FIONCLEX =    536897026,
		FIOCLEX =     536897025,
		FIOASYNC =   2147772029,
		TIOCPKT_DATA =        0,
		TIOCPKT_FLUSHREAD =   1,
		TIOCPKT_FLUSHWRITE =  2,
		TIOCPKT_STOP =        4,
		TIOCPKT_START =       8,
		TIOCPKT_NOSTOP =     16,
		TIOCPKT_DOSTOP =     32,
	}
	public enum SyslogFacility : uint {
		LOG_KERN =      0, // kernel messages
		LOG_USER =      8, // random user-level messages
		LOG_MAIL =     16, // mail system
		LOG_DAEMON =   24, // system daemons
		LOG_AUTH =     32, // security/authorization messages
		LOG_SYSLOG =   40, // messages generated internally by syslogd
		LOG_LPR =      48, // line printer subsystem
		LOG_NEWS =     56, // network news subsystem
		LOG_UUCP =     64, // UUCP subsystem
		LOG_CRON =     72, // clock daemon
		LOG_AUTHPRIV = 80, // security/authorization messages (private)
		LOG_FTP =      88, // ftp daemon
		LOG_LOCAL0 =  128, // reserved for local use
		LOG_LOCAL1 =  136, // reserved for local use
		LOG_LOCAL2 =  144, // reserved for local use
		LOG_LOCAL3 =  152, // reserved for local use
		LOG_LOCAL4 =  160, // reserved for local use
		LOG_LOCAL5 =  168, // reserved for local use
		LOG_LOCAL6 =  176, // reserved for local use
		LOG_LOCAL7 =  184, // reserved for local use
	}
	[Flags]
	public enum SyslogOptions : uint {
		None =        0,
		LOG_PID =     1, // log the pid with each message
		LOG_CONS =    2, // log on the console if errors in sending
		LOG_ODELAY =  4, // delay open until first syslog() (default)
		LOG_NDELAY =  8, // don't delay open
		LOG_NOWAIT = 16, // don't wait for console forks: DEPRECATED
		LOG_PERROR = 32, // log to stderr as well
	}
	public enum SyslogPriority : uint {
		LOG_EMERG =   0, // system is unusable
		LOG_ALERT =   1, // action must be taken immediately
		LOG_CRIT =    2, // critical conditions
		LOG_ERR =     3, // error conditions
		LOG_WARNING = 4, // warning conditions
		LOG_NOTICE =  5, // normal but significant condition
		LOG_INFO =    6, // informational
		LOG_DEBUG =   7, // debug-level messages
	}
	public enum Signal : uint {
		SIGHUP =     1,
		SIGINT =     2,
		SIGQUIT =    3,
		SIGILL =     4,
		SIGTRAP =    5,
		SIGABRT =    6,
		SIGIOT =     6,
		SIGBUS =    10,
		SIGFPE =     8,
		SIGKILL =    9,
		SIGUSR1 =   30,
		SIGSEGV =   11,
		SIGUSR2 =   31,
		SIGPIPE =   13,
		SIGALRM =   14,
		SIGTERM =   15,
		SIGCHLD =   20,
		SIGCONT =   19,
		SIGSTOP =   17,
		SIGTSTP =   18,
		SIGTTIN =   21,
		SIGTTOU =   22,
		SIGURG =    16,
		SIGXCPU =   24,
		SIGXFSZ =   25,
		SIGVTALRM = 26,
		SIGPROF =   27,
		SIGWINCH =  28,
		SIGIO =     23,
		SIGSYS =    12,
	}
	[Flags]
	public enum AccessTest : uint {
		Exists =  0, // F_OK, Test for existence
		Execute = 1, // X_OK, Test for execute permission
		Write =   2, // W_OK, Test for write permission
		Read =    4, // R_OK, Test for read permission
	}
	public enum StatFlags : ushort {
		S_IFSOCK = 49152,
		S_IFLNK =  40960,
		S_IFREG =  32768,
		S_IFBLK =  24576,
		S_IFDIR =  16384,
		S_IFCHR =   8192,
		S_IFIFO =   4096,
		S_ISUID =   2048,
		S_ISGID =   1024,
		S_ISVTX =    512,
	}
	[ExplicitSize( Size = 16 )]
	public partial struct rlimit {
		[ExplicitOffset( Offset = 0 )]
		public ulong rlim_cur;
		[ExplicitOffset( Offset = 8 )]
		public ulong rlim_max;
	}
	public enum ResourceLimit : uint {
		RLIMIT_AS =      5,
		RLIMIT_CORE =    4,
		RLIMIT_CPU =     0,
		RLIMIT_DATA =    2,
		RLIMIT_FSIZE =   1,
		RLIMIT_MEMLOCK = 6,
		RLIMIT_NOFILE =  8,
		RLIMIT_NPROC =   7,
		RLIMIT_RSS =     5,
		RLIMIT_STACK =   3,
	}
	public enum ResourceUsageKind : int {
		RUSAGE_SELF =      0,
		RUSAGE_CHILDREN = -1,
	}
	[ExplicitSize( Size = 72 )]
	public partial struct rusage {
		[ExplicitOffset( Offset = 0 )]
		public timeval UserTime;
		[ExplicitOffset( Offset = 8 )]
		public timeval KernelTime;
		[ExplicitOffset( Offset = 16 )]
		public int MaxResidentSetSize;
		[ExplicitOffset( Offset = 20 )]
		public int SharedMemorySize;
		[ExplicitOffset( Offset = 24 )]
		public int PrivateMemorySize;
		[ExplicitOffset( Offset = 28 )]
		public int PrivateStackSize;
		[ExplicitOffset( Offset = 32 )]
		public int PageReclaims;
		[ExplicitOffset( Offset = 36 )]
		public int PageFaults;
		[ExplicitOffset( Offset = 40 )]
		public int Swap;
		[ExplicitOffset( Offset = 44 )]
		public int InputOperations;
		[ExplicitOffset( Offset = 48 )]
		public int OutputOperations;
		[ExplicitOffset( Offset = 52 )]
		public int MessagesSent;
		[ExplicitOffset( Offset = 56 )]
		public int MessagesReceived;
		[ExplicitOffset( Offset = 60 )]
		public int SignalsReceived;
		[ExplicitOffset( Offset = 64 )]
		public int VoluntaryContextSwitches;
		[ExplicitOffset( Offset = 68 )]
		public int InvoluntaryContextSwitches;
	}
	[ExplicitSize( Size = 12 )]
	public partial struct sigaction {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<int, siginfo_t&, void*> sa_sigaction;
		public Functors.Action<int>& sa_handler { get { return *( Functors.Action<int>* ) &sa_sigaction; } }
		[ExplicitOffset( Offset = 4 )]
		public sigset_t sa_mask;
		[ExplicitOffset( Offset = 8 )]
		public SignalFlags sa_flags;
	}
	public enum SignalNotify : uint {
		SIGEV_NONE =   0,
		SIGEV_SIGNAL = 1,
		SIGEV_THREAD = 3,
	}
	[ExplicitSize( Size = 20 )]
	public partial struct sigevent {
		[ExplicitOffset( Offset = 0 )]
		public SignalNotify sigev_notify;
		[ExplicitOffset( Offset = 4 )]
		public Signal sigev_signo;
		[ExplicitOffset( Offset = 8 )]
		public void* sigev_value;
		[ExplicitOffset( Offset = 12 )]
		public Functors.Func<void*> sigev_notify_function;
		[ExplicitOffset( Offset = 16 )]
		public void* sigev_notify_attributes;
	}
	[ExplicitSize( Size = 64 )]
	public partial struct siginfo_t {
		[ExplicitOffset( Offset = 0 )]
		public Signal si_signo;
		[ExplicitOffset( Offset = 4 )]
		public int si_errno;
		[ExplicitOffset( Offset = 8 )]
		public int si_code;
		[ExplicitOffset( Offset = 12 )]
		public int si_pid;
		[ExplicitOffset( Offset = 16 )]
		public int si_uid;
		[ExplicitOffset( Offset = 20 )]
		public int si_status;
		[ExplicitOffset( Offset = 24 )]
		public void* si_addr;
		[ExplicitOffset( Offset = 28 )]
		public void* si_value;
		[ExplicitOffset( Offset = 32 )]
		public int si_band;
	}
	public enum SignalCodeOrigin : int {
		SI_USER =    65537, // generated by calling 'kill' or 'raise'
		SI_QUEUE =   65538, // generated by calling 'sigqueue'
		SI_TIMER =   65539, // generated after POSIX timer expired
		SI_MESGQ =   65541, // generated after POSIX message queue state changed
		SI_ASYNCIO = 65540, // generated after AIO completed
	}
	public enum SignalCodeILL : uint {
		ILL_ILLOPC = 1,
		ILL_ILLOPN = 4,
		ILL_ILLADR = 5,
		ILL_ILLTRP = 2,
		ILL_PRVOPC = 3,
		ILL_PRVREG = 6,
		ILL_COPROC = 7,
		ILL_BADSTK = 8,
	}
	public enum SignalCodeFPE : uint {
		FPE_INTDIV = 7,
		FPE_INTOVF = 8,
		FPE_FLTDIV = 1,
		FPE_FLTOVF = 2,
		FPE_FLTUND = 3,
		FPE_FLTRES = 4,
		FPE_FLTINV = 5,
		FPE_FLTSUB = 6,
	}
	public enum SignalCodeSEGV : uint {
		SEGV_MAPERR = 1,
		SEGV_ACCERR = 2,
	}
	public enum SignalCodeBUS : uint {
		BUS_ADRALN = 1,
		BUS_ADRERR = 2,
		BUS_OBJERR = 3,
	}
	public enum SignalCodeTRAP : uint {
		TRAP_BRKPT = 1,
		TRAP_TRACE = 2,
	}
	public enum SignalCodeCHLD : uint {
		CLD_EXITED =    1,
		CLD_KILLED =    2,
		CLD_DUMPED =    3,
		CLD_TRAPPED =   4,
		CLD_STOPPED =   5,
		CLD_CONTINUED = 6,
	}
	public enum SignalCodePOLL : uint {
		POLL_IN =  1,
		POLL_OUT = 2,
		POLL_MSG = 3,
		POLL_ERR = 4,
		POLL_PRI = 5,
		POLL_HUP = 6,
	}
	public enum ApplySignalCommand : uint {
		SIG_BLOCK =   1,
		SIG_UNBLOCK = 2,
		SIG_SETMASK = 3,
	}
	public enum ProcessWaitOptions : uint {
		WNOHANG =   1,
		WUNTRACED = 2,
	}
	[ExplicitSize( Size = 16 )]
	public partial struct itimerval {
		[ExplicitOffset( Offset = 0 )]
		public timeval Interval;
		[ExplicitOffset( Offset = 8 )]
		public timeval InitialExpiration;
	}
	[ExplicitSize( Size = 16 )]
	public partial struct sockaddr_in {
		[ExplicitOffset( Offset = 2 )]
		public ushort_bigendian Port;
		[ExplicitOffset( Offset = 4 )]
		public uint_bigendian Address;
	}
	[ExplicitSize( Size = 106 )]
	public partial struct sockaddr_un {
		[ExplicitOffset( Offset = 2 )]
		public byte[104] Path;
	}
	[ExplicitSize( Size = 28 )]
	public partial struct msghdr {
		[ExplicitOffset( Offset = 0 )]
		public void* Name;
		[ExplicitOffset( Offset = 4 )]
		public int NameLength;
		[ExplicitOffset( Offset = 8 )]
		public iovec* DataBlock;
		[ExplicitOffset( Offset = 12 )]
		public int DataBlockLength;
		[ExplicitOffset( Offset = 16 )]
		public Auxlib.cmsghdr* AncillaryData;
		[ExplicitOffset( Offset = 20 )]
		public int AncillaryDataLength;
		[ExplicitOffset( Offset = 24 )]
		public int Flags;
	}
	[ExplicitSize( Size = 8 )]
	public partial struct pollfd {
		[ExplicitOffset( Offset = 0 )]
		public IOHandle Handle;
		[ExplicitOffset( Offset = 4 )]
		public PollEvents ListenedEvents;
		[ExplicitOffset( Offset = 6 )]
		public PollEvents RaisedEvents;
	}
	public enum IPProtocol : uint {
		IPPROTO_IP =    0,
		IPPROTO_ICMP =  1,
		IPPROTO_IGMP =  2,
		IPPROTO_IPIP =  4,
		IPPROTO_TCP =   6,
		IPPROTO_EGP =   8,
		IPPROTO_PUP =  12,
		IPPROTO_UDP =  17,
		IPPROTO_IDP =  22,
		IPPROTO_RSVP = 46,
		IPPROTO_GRE =  47,
		IPPROTO_IPV6 = 41,
		IPPROTO_ESP =  50,
		IPPROTO_AH =   51,
		IPPROTO_PIM = 103,
		IPPROTO_RAW = 255,
	}
	[Flags]
	public enum PollEvents : ushort {
		None =      0,
		POLLIN =    1,
		POLLPRI =   2,
		POLLOUT =   4,
		POLLERR =   8,
		POLLHUP =  16,
		POLLNVAL = 32,
	}
	public enum TcpProperty : int {
		TCP_NODELAY = 1,
		TCP_MAXSEG =  2,
	}
	public enum SocketProperty : int {
		SO_DEBUG =        1,
		SO_REUSEADDR =    4,
		SO_TYPE =      4104,
		SO_ERROR =     4103,
		SO_DONTROUTE =   16,
		SO_BROADCAST =   32,
		SO_SNDBUF =    4097,
		SO_RCVBUF =    4098,
		SO_KEEPALIVE =    8,
		SO_OOBINLINE =  256,
		SO_LINGER =     128,
		SO_RCVLOWAT =  4100,
		SO_SNDLOWAT =  4099,
		SO_RCVTIMEO =  4102,
		SO_SNDTIMEO =  4101,
		SO_TIMESTAMP = 1024,
		SO_ACCEPTCONN =   2,
	}
	public enum SocketType : int {
		SOCK_STREAM =    1,
		SOCK_DGRAM =     2,
		SOCK_RAW =       3,
		SOCK_SEQPACKET = 5,
		SOCK_RDM =       4,
	}
	public enum SocketPropertyGroup : int {
		SOL_SOCKET = 65535,
		SOL_TCP =        6,
		SOL_UDP =       17,
	}
	public enum SocketShutdownOptions : uint {
		SHUT_RD =   0,
		SHUT_WR =   1,
		SHUT_RDWR = 2,
	}
	public enum ProtocolFamily : byte {
		PF_UNSPEC =     0,
		PF_LOCAL =      1,
		PF_UNIX =       1,
		PF_INET =       2,
		PF_IPX =       23,
		PF_APPLETALK = 16,
		PF_INET6 =     30,
		PF_DECnet =    12,
		PF_KEY =       29,
		PF_ROUTE =     17,
		PF_SNA =       11,
		PF_ISDN =      28,
		PF_MAX =       37,
	}
	[Flags]
	public enum TransmissionFlags : uint {
		None =           0,
		MSG_OOB =        1,
		MSG_PEEK =       2,
		MSG_DONTROUTE =  4,
		MSG_CTRUNC =    32,
		MSG_TRUNC =     16,
		MSG_DONTWAIT = 128,
		MSG_EOR =        8,
		MSG_WAITALL =   64,
	}
	public enum SystemCall : uint {
		syscall =                     0,
		exit =                        1,
		fork =                        2,
		read =                        3,
		write =                       4,
		open =                        5,
		close =                       6,
		wait4 =                       7,
		link =                        9,
		unlink =                     10,
		chdir =                      12,
		fchdir =                     13,
		mknod =                      14,
		chmod =                      15,
		chown =                      16,
		obreak =                     17,
		ogetfsstat =                 18,
		getfsstat =                  18,
		getpid =                     20,
		setuid =                     23,
		getuid =                     24,
		geteuid =                    25,
		ptrace =                     26,
		recvmsg =                    27,
		sendmsg =                    28,
		recvfrom =                   29,
		accept =                     30,
		getpeername =                31,
		getsockname =                32,
		access =                     33,
		chflags =                    34,
		fchflags =                   35,
		sync =                       36,
		kill =                       37,
		getppid =                    39,
		dup =                        41,
		pipe =                       42,
		getegid =                    43,
		profil =                     44,
		sigaction =                  46,
		getgid =                     47,
		sigprocmask =                48,
		getlogin =                   49,
		setlogin =                   50,
		acct =                       51,
		sigpending =                 52,
		sigaltstack =                53,
		ioctl =                      54,
		reboot =                     55,
		revoke =                     56,
		symlink =                    57,
		readlink =                   58,
		execve =                     59,
		umask =                      60,
		chroot =                     61,
		msync =                      65,
		vfork =                      66,
		sbrk =                       69,
		sstk =                       70,
		ovadvise =                   72,
		munmap =                     73,
		mprotect =                   74,
		madvise =                    75,
		mincore =                    78,
		getgroups =                  79,
		setgroups =                  80,
		getpgrp =                    81,
		setpgid =                    82,
		setitimer =                  83,
		swapon =                     85,
		getitimer =                  86,
		getdtablesize =              89,
		dup2 =                       90,
		fcntl =                      92,
		select =                     93,
		fsync =                      95,
		setpriority =                96,
		socket =                     97,
		connect =                    98,
		getpriority =               100,
		bind =                      104,
		setsockopt =                105,
		listen =                    106,
		sigsuspend =                111,
		gettimeofday =              116,
		getrusage =                 117,
		getsockopt =                118,
		readv =                     120,
		writev =                    121,
		settimeofday =              122,
		fchown =                    123,
		fchmod =                    124,
		setreuid =                  126,
		setregid =                  127,
		rename =                    128,
		flock =                     131,
		mkfifo =                    132,
		sendto =                    133,
		shutdown =                  134,
		socketpair =                135,
		mkdir =                     136,
		rmdir =                     137,
		utimes =                    138,
		futimes =                   139,
		adjtime =                   140,
		gethostuuid =               142,
		setsid =                    147,
		getpgid =                   151,
		setprivexec =               152,
		pread =                     153,
		pwrite =                    154,
		nfssvc =                    155,
		statfs =                    157,
		fstatfs =                   158,
		unmount =                   159,
		getfh =                     161,
		quotactl =                  165,
		mount =                     167,
		csops =                     169,
		table =                     170,
		waitid =                    173,
		add_profil =                176,
		kdebug_trace =              180,
		setgid =                    181,
		setegid =                   182,
		seteuid =                   183,
		sigreturn =                 184,
		chud =                      185,
		stat =                      188,
		fstat =                     189,
		lstat =                     190,
		pathconf =                  191,
		fpathconf =                 192,
		getrlimit =                 194,
		setrlimit =                 195,
		getdirentries =             196,
		mmap =                      197,
		lseek =                     199,
		truncate =                  200,
		ftruncate =                 201,
		__sysctl =                  202,
		mlock =                     203,
		munlock =                   204,
		undelete =                  205,
		ATsocket =                  206,
		ATgetmsg =                  207,
		ATputmsg =                  208,
		ATPsndreq =                 209,
		ATPsndrsp =                 210,
		ATPgetreq =                 211,
		ATPgetrsp =                 212,
		kqueue_from_portset_np =    214,
		kqueue_portset_np =         215,
		mkcomplex =                 216,
		statv =                     217,
		lstatv =                    218,
		fstatv =                    219,
		getattrlist =               220,
		setattrlist =               221,
		getdirentriesattr =         222,
		exchangedata =              223,
		searchfs =                  225,
		delete =                    226,
		copyfile =                  227,
		poll =                      230,
		watchevent =                231,
		waitevent =                 232,
		modwatch =                  233,
		getxattr =                  234,
		fgetxattr =                 235,
		setxattr =                  236,
		fsetxattr =                 237,
		removexattr =               238,
		fremovexattr =              239,
		listxattr =                 240,
		flistxattr =                241,
		fsctl =                     242,
		initgroups =                243,
		posix_spawn =               244,
		nfsclnt =                   247,
		fhopen =                    248,
		minherit =                  250,
		semsys =                    251,
		msgsys =                    252,
		shmsys =                    253,
		semctl =                    254,
		semget =                    255,
		semop =                     256,
		msgctl =                    258,
		msgget =                    259,
		msgsnd =                    260,
		msgrcv =                    261,
		shmat =                     262,
		shmctl =                    263,
		shmdt =                     264,
		shmget =                    265,
		shm_open =                  266,
		shm_unlink =                267,
		sem_open =                  268,
		sem_close =                 269,
		sem_unlink =                270,
		sem_wait =                  271,
		sem_trywait =               272,
		sem_post =                  273,
		sem_getvalue =              274,
		sem_init =                  275,
		sem_destroy =               276,
		open_extended =             277,
		umask_extended =            278,
		stat_extended =             279,
		lstat_extended =            280,
		fstat_extended =            281,
		chmod_extended =            282,
		fchmod_extended =           283,
		access_extended =           284,
		settid =                    285,
		gettid =                    286,
		setsgroups =                287,
		getsgroups =                288,
		setwgroups =                289,
		getwgroups =                290,
		mkfifo_extended =           291,
		mkdir_extended =            292,
		identitysvc =               293,
		shared_region_check_np =    294,
		shared_region_map_np =      295,
		__pthread_mutex_destroy =   301,
		__pthread_mutex_init =      302,
		__pthread_mutex_lock =      303,
		__pthread_mutex_trylock =   304,
		__pthread_mutex_unlock =    305,
		__pthread_cond_init =       306,
		__pthread_cond_destroy =    307,
		__pthread_cond_broadcast =  308,
		__pthread_cond_signal =     309,
		getsid =                    310,
		settid_with_pid =           311,
		__pthread_cond_timedwait =  312,
		aio_fsync =                 313,
		aio_return =                314,
		aio_suspend =               315,
		aio_cancel =                316,
		aio_error =                 317,
		aio_read =                  318,
		aio_write =                 319,
		lio_listio =                320,
		__pthread_cond_wait =       321,
		iopolicysys =               322,
		mlockall =                  324,
		munlockall =                325,
		issetugid =                 327,
		__pthread_kill =            328,
		__pthread_sigmask =         329,
		__sigwait =                 330,
		__disable_threadsignal =    331,
		__pthread_markcancel =      332,
		__pthread_canceled =        333,
		__semwait_signal =          334,
		proc_info =                 336,
		sendfile =                  337,
		stat64 =                    338,
		fstat64 =                   339,
		lstat64 =                   340,
		stat64_extended =           341,
		lstat64_extended =          342,
		fstat64_extended =          343,
		getdirentries64 =           344,
		statfs64 =                  345,
		fstatfs64 =                 346,
		getfsstat64 =               347,
		__pthread_chdir =           348,
		__pthread_fchdir =          349,
		audit =                     350,
		auditon =                   351,
		getauid =                   353,
		setauid =                   354,
		getaudit =                  355,
		setaudit =                  356,
		getaudit_addr =             357,
		setaudit_addr =             358,
		auditctl =                  359,
		bsdthread_create =          360,
		bsdthread_terminate =       361,
		kqueue =                    362,
		kevent =                    363,
		lchown =                    364,
		stack_snapshot =            365,
		bsdthread_register =        366,
		workq_open =                367,
		workq_ops =                 368,
		__mac_execve =              380,
		__mac_syscall =             381,
		__mac_get_file =            382,
		__mac_set_file =            383,
		__mac_get_link =            384,
		__mac_set_link =            385,
		__mac_get_proc =            386,
		__mac_set_proc =            387,
		__mac_get_fd =              388,
		__mac_set_fd =              389,
		__mac_get_pid =             390,
		__mac_get_lcid =            391,
		__mac_get_lctx =            392,
		__mac_set_lctx =            393,
		setlcid =                   394,
		getlcid =                   395,
		read_nocancel =             396,
		write_nocancel =            397,
		open_nocancel =             398,
		close_nocancel =            399,
		wait4_nocancel =            400,
		recvmsg_nocancel =          401,
		sendmsg_nocancel =          402,
		recvfrom_nocancel =         403,
		accept_nocancel =           404,
		msync_nocancel =            405,
		fcntl_nocancel =            406,
		select_nocancel =           407,
		fsync_nocancel =            408,
		connect_nocancel =          409,
		sigsuspend_nocancel =       410,
		readv_nocancel =            411,
		writev_nocancel =           412,
		sendto_nocancel =           413,
		pread_nocancel =            414,
		pwrite_nocancel =           415,
		waitid_nocancel =           416,
		poll_nocancel =             417,
		msgsnd_nocancel =           418,
		msgrcv_nocancel =           419,
		sem_wait_nocancel =         420,
		aio_suspend_nocancel =      421,
		__sigwait_nocancel =        422,
		__semwait_signal_nocancel = 423,
		__mac_mount =               424,
		__mac_get_mount =           425,
		__mac_getfsstat =           426,
	}
	public enum SystemError : int {
		None =             0,
		EPERM =            1, // Operation not permitted
		ENOENT =           2, // No such file or directory
		ESRCH =            3, // No such process
		EINTR =            4, // Interrupted system call
		EIO =              5, // I/O error
		ENXIO =            6, // No such device or address
		E2BIG =            7, // Argument list too long
		ENOEXEC =          8, // Exec format error
		EBADF =            9, // Bad file number
		ECHILD =          10, // No child processes
		EAGAIN =          35, // Try again / operation would block
		ENOMEM =          12, // Out of memory
		EACCES =          13, // Permission denied
		EFAULT =          14, // Bad address
		ENOTBLK =         15, // Block device required
		EBUSY =           16, // Device or resource busy
		EEXIST =          17, // File exists
		EXDEV =           18, // Cross-device link
		ENODEV =          19, // No such device
		ENOTDIR =         20, // Not a directory
		EISDIR =          21, // Is a directory
		EINVAL =          22, // Invalid argument
		ENFILE =          23, // File table overflow
		EMFILE =          24, // Too many open files
		ENOTTY =          25, // Not a typewriter
		ETXTBSY =         26, // Text file busy
		EFBIG =           27, // File too large
		ENOSPC =          28, // No space left on device
		ESPIPE =          29, // Illegal seek
		EROFS =           30, // Read-only file system
		EMLINK =          31, // Too many links
		EPIPE =           32, // Broken pipe
		EDOM =            33, // Math argument out of domain of func
		ERANGE =          34, // Math result not representable
		EDEADLK =         11, // Resource deadlock would occur
		ENAMETOOLONG =    63, // File name too long
		ENOLCK =          77, // No record locks available
		ENOSYS =          78, // Function not implemented
		ENOTEMPTY =       66, // Directory not empty
		ELOOP =           62, // Too many symbolic links encountered
		ENOMSG =          91, // No message of desired type
		EIDRM =           90, // Identifier removed
		EPROTO =         100, // Protocol error
		EMULTIHOP =       95, // Multihop attempted
		EBADMSG =         94, // Not a data message
		EOVERFLOW =       84, // Value too large for defined data type
		EILSEQ =          92, // Illegal byte sequence
		EUSERS =          68, // Too many users
		ENOTSOCK =        38, // Socket operation on non-socket
		EDESTADDRREQ =    39, // Destination address required
		EMSGSIZE =        40, // Message too long
		EPROTOTYPE =      41, // Protocol wrong type for socket
		ENOPROTOOPT =     42, // Protocol not available
		EPROTONOSUPPORT = 43, // Protocol not supported
		ESOCKTNOSUPPORT = 44, // Socket type not supported
		EOPNOTSUPP =     102, // Operation not supported on transport endpoint
		EPFNOSUPPORT =    46, // Protocol family not supported
		EAFNOSUPPORT =    47, // Address family not supported by protocol
		EADDRINUSE =      48, // Address already in use
		EADDRNOTAVAIL =   49, // Cannot assign requested address
		ENETDOWN =        50, // Network is down
		ENETUNREACH =     51, // Network is unreachable
		ENETRESET =       52, // Network dropped connection because of reset
		ECONNABORTED =    53, // Software caused connection abort
		ECONNRESET =      54, // Connection reset by peer
		ENOBUFS =         55, // No buffer space available
		EISCONN =         56, // Transport endpoint is already connected
		ENOTCONN =        57, // Transport endpoint is not connected
		ESHUTDOWN =       58, // Cannot send after transport endpoint shutdown
		ETOOMANYREFS =    59, // Too many references: cannot splice
		ETIMEDOUT =       60, // Connection timed out
		ECONNREFUSED =    61, // Connection refused
		EHOSTDOWN =       64, // Host is down
		EHOSTUNREACH =    65, // No route to host
		EALREADY =        37, // Operation already in progress
		EINPROGRESS =     36, // Operation now in progress
		ESTALE =          70, // Stale NFS file handle
		EDQUOT =          69, // Quota exceeded
	}
	[ExplicitSize( Size = 20 )]
	public partial struct kevent {
		[ExplicitOffset( Offset = 0 )]
		public uintptr ident;
		[ExplicitOffset( Offset = 4 )]
		public KEventFilter filter;
		[ExplicitOffset( Offset = 6 )]
		public KEventAction flags;
		[ExplicitOffset( Offset = 8 )]
		public uint fflags;
		[ExplicitOffset( Offset = 12 )]
		public intptr data;
		[ExplicitOffset( Offset = 16 )]
		public void* udata;
	}
	public enum KEventFilter : short {
		EVFILT_READ =    -1,
		EVFILT_WRITE =   -2,
		EVFILT_AIO =     -3,
		EVFILT_VNODE =   -4,
		EVFILT_PROC =    -5,
		EVFILT_SIGNAL =  -6,
		EVFILT_TIMER =   -7,
		EVFILT_FS =      -9,
		EVFILT_SYSCOUNT = 9,
	}
	public enum KEventAction : ushort {
		EV_ADD =          1,
		EV_DELETE =       2,
		EV_ENABLE =       4,
		EV_DISABLE =      8,
		EV_ONESHOT =     16,
		EV_CLEAR =       32,
		EV_RECEIPT =     64,
		EV_SYSFLAGS = 61440,
		EV_FLAG1 =     8192,
		EV_EOF =      32768,
		EV_ERROR =    16384,
	}
}