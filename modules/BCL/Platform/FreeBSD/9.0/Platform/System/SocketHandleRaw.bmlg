//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;

namespace Platform.Libc {
	public struct SocketHandleRaw : SocketHandle, IFormattable {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public SocketHandleRaw() {
			LibcApi.Assert( this = bitcast<SocketHandleRaw>( LibcApi.socket( ProtocolFamily.PF_INET, SocketType.SOCK_RAW, IPProtocol.IPPROTO_ICMP ) ) );
		}

		public int Send( sockaddr_in& address, void* buffer, int count ) {
			intptr result = 0;
			LibcApi.Assert( result = LibcApi.sendto( this, buffer, ( uint ) count, MessageFlags.None, &address, sizeof( address ) ) );
			return ( int ) result;
		}

		public int Receive( sockaddr_in& address, void* buffer, int count ) {
			intptr result = 0;
			LibcApi.Assert( result = LibcApi.recvfrom( this, buffer, ( uint ) count, MessageFlags.None, &address, sizeof( address ) ) );
			return ( int ) result;
		}

		protected new void DumpRelevantData( StringBuilder builder ) {
			base.DumpRelevantData( builder );
		}

		public new void ToString( StringBuilder builder, string format ) {
			builder.Append( "{" );
			DumpRelevantData( builder );
			builder.Append( " }" );
		}
	}
}