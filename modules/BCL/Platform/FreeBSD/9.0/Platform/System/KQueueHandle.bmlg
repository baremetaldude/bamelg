//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;
using System.Runtime;

using Platform.IO;

namespace Platform.Libc {
	public struct KQueueHandle : IOHandle {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public KQueueHandle() {
			this = LibcApi.kqueue();
		}

		/// @{ For debugging purposes only. You must aggreagte changes before wait in 'kevent()'
		public void Modify( kevent* newEvents, int length ) {
			LibcApi.AssertErrno( LibcApi.kevent( this, newEvents, length, null, 0, nullref ) );
		}

		public void Modify( vararg kevent newEvents ) {
			Modify( newEvents, ( int ) newEvents.Length );
		}

		/// @}
	}

	public partial struct kevent : IFormattable {
		public kevent() { }

		public kevent( IOHandle ident, KEventFilter filter, KEventAction flags )
			: this( ident.ID, filter, flags, 0, 0, null ) {
		}

		public kevent( IOHandle ident, KEventFilter filter, KEventAction flags, void* udata )
			: this( ident.ID, filter, flags, 0, 0, udata ) {
		}

		public kevent( SignalCode signal, KEventAction flags, void* udata )
			: this( signal.Value(), KEventFilter.EVFILT_SIGNAL, flags, 0, 0, udata ) {
		}

		public kevent( uintptr ident, TimeSpan interval, KEventAction flags, void* udata )
			: this( ident, KEventFilter.EVFILT_TIMER, flags, 0, ( int ) interval.TotalMilliseconds, udata ) {
		}

		public kevent( uintptr ident, KEventFilter filter, KEventAction flags, uint fflags, intptr data, void* udata ) {
			this.ident = ident;
			this.filter = filter;
			this.flags = flags;
			this.fflags = fflags;
			this.data = data;
			this.udata = udata;
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "{{" );
			builder.Concat( " filter=", ( KEventFilter ) filter );

			if( filter == KEventFilter.EVFILT_SIGNAL ) builder.Concat( " ident=", ( SignalCode ) ident );
			else builder.Concat( " ident=", ident );

			builder.Concat( " flags=", ( KEventAction ) flags, " fflags=", fflags, " data=", data, " udata=", udata, " }}" );
		}
	}
}