//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform.Kernel;
using Platform.Libc;

namespace System {
	public partial struct DateTime {
		public static DateTime Now { get { return new DateTime( timespec.Now.DateTimeTicks, DateTimeKind.Local ); } }
		public static DateTime UtcNow { get { return new DateTime( timespec.UtcNow.DateTimeTicks, DateTimeKind.Utc ); } }
		public static DateTime UnbiasedNow { get { return new DateTime( timespec.MonotonicTime.TimeSpanTicks, DateTimeKind.Unbiased ); } }

		public static TimeSpan UtcUnbiasedOffset {
			get {
				var span1 = DateTime.UtcNow.Ticks - DateTime.UnbiasedNow.Ticks; // HACK: there is no way to get both timers atomically ( writing a new kernel syscall is not an option :) )
				var span2 = DateTime.UtcNow.Ticks - DateTime.UnbiasedNow.Ticks;

				// if context switch occured between 'DateTime.UtcNow' and 'DateTime.Unbiased'
				// then 'DateTime.Unbiased' will be greater than it can be,
				// so 'DateTime.UtcNow - DateTime.Unbiased' will be less than it can be
				return new TimeSpan( span1 > span2 ? span1 : span2 );
			}
		}

		public DateTime ToLocalTime() {
			[CheckAllEnumValues]
			switch( Kind ) {
				case DateTimeKind.Unspecified: {
						var result = this;
						result.Kind = DateTimeKind.Local;
						return result;
					}

				case DateTimeKind.Local:
					return this;

				case DateTimeKind.Utc: {
						var result = this + GetLocalFromUtcOffset( this );
						result.Kind = DateTimeKind.Local;
						return result;
					}

				case DateTimeKind.Unbiased: {
						var result = this + UtcUnbiasedOffset;
						result += GetLocalFromUtcOffset( result );
						result.Kind = DateTimeKind.Local;

						return result;
					}
			}

			return this;
		}

		public DateTime ToUniversalTime() {
			[CheckAllEnumValues]
			switch( Kind ) {
				case DateTimeKind.Unspecified: {
						var result = this;
						result.Kind = DateTimeKind.Utc;
						return result;
					}

				case DateTimeKind.Utc:
					return this;

				case DateTimeKind.Local: {
						var result = this - GetUtcFromLocalOffset( this );
						result.Kind = DateTimeKind.Utc;
						return result;
					}

				case DateTimeKind.Unbiased: {
						var result = this + UtcUnbiasedOffset;
						result.Kind = DateTimeKind.Utc;

						return result;
					}
			}

			return this;
		}

		public static TimeSpan GetLocalFromUtcOffset( DateTime time ) {
			if( TimeZone.CurrentTimeZone != null ) return TimeZone.CurrentTimeZone.GetLocalTimeOffset( time );
			return TimeSpan.FromSeconds( timeval.GetCurrentTimezoneSecondsOffset( ( intptr ) time.ToUnixSeconds() ) );
		}

		public static TimeSpan GetUtcFromLocalOffset( DateTime time ) {
			if( TimeZone.CurrentTimeZone != null ) return TimeZone.CurrentTimeZone.GetUtcTimeOffset( time );
			return TimeSpan.FromSeconds( timeval.GetCurrentTimezoneSecondsOffset( ( intptr ) time.ToUnixSeconds() ) );
		}

		public static explicit operator DateTime( timeval& value ) { return new DateTime( value.DateTimeTicks, DateTimeKind.Utc ); }
		public static explicit operator DateTime( timespec& value ) { return new DateTime( value.DateTimeTicks, DateTimeKind.Utc ); }
	}
}