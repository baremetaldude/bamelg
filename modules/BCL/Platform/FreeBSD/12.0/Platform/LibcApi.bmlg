//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;
using System.Net;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Platform.Libc {
	// Syscall API + kernel modules API
	public static partial struct LibcApi {
		public static IOHandle StdIn { get { return new IOHandle( 0 ); } }
		public static IOHandle StdOut { get { return new IOHandle( 1 ); } }
		public static IOHandle StdErr { get { return new IOHandle( 2 ); } }

		public static SystemError ReturnCodeToError( int returnCode ) {
			if( bitcast<uint>( returnCode ) > uint.MaxValue - LibcApi.RawErrorsMax )
				return ( SystemError ) - returnCode;

			return SystemError.None;
		}

		public static Functors.Action<int> SIG_IGN = bitcast<Functors.Action<int>>( ( intptr ) 1 );

		public static SystemError LastError { get { return *__error(); } set { *__error() = value; } }

		public extern static CUtf8String* environ;

		/// http://www.freebsd.org/cgi/man.cgi?sektion=2&query=open
		public extern static IOHandle open( CUtf8String name, FctlValue flags, int permissions );
		public extern static IOHandle openat( IOHandle directory, CUtf8String name, FctlValue flags, SymlinkFollowOption option );

		/// http://www.freebsd.org/cgi/man.cgi?sektion=2&query=ioctl
		public extern static int ioctl( IOHandle handle, IoctlCommand option, void* result );
		/// http://www.freebsd.org/cgi/man.cgi?sektion=2&query=fcntl
		// public extern static int fcntl( IOHandle handle, FctlCommand option );
		public extern static int fcntl( IOHandle handle, FctlCommand option, FctlValue value );

		/// http://linux.die.net/man/3/makecontext
		public extern static void makecontext( ucontext_t* ucp, Functors.Action<Functors.Action<void*>, void*> nonTerminatingMethod, int argc, Functors.Action<void*> method, void* parameter );

		internal static int uname( utsname& value ) {
			return __xuname( value.sysname.Length, &value );
		}

		internal const uint RawErrorsMax = 125;

		internal static int raw_syscall( SystemCall code ) asm {
			X86_32 {
				mov eax, [esp + 4] // code
				push eax

				int 0x80
				add esp, 4

				ret
			}
			X86_64 {
				mov rax, rdi // 'code' comes in 'rdi'

				syscall

				ret
			}
		}

		internal static int raw_syscall( SystemCall code, int p1 ) asm {
			X86_32 {
				mov eax, [esp + 4]       // code

				push dword ptr [esp + 8] // p1
				push eax

				int 0x80
				add esp, 8

				ret
			}
			X86_64 {
				mov rax, rdi // 'code' comes in 'rdi'
				mov rdi, rsi // 'p1' comes in 'rsi'

				syscall

				ret
			}
		}

		internal static int raw_syscall( SystemCall code, int p1, int p2 ) asm {
			X86_32 {
				mov eax, [esp + 4]        // code

				push dword ptr [esp + 12] // p2
				push dword ptr [esp + 12] // p1
				push eax

				int 0x80
				add esp, 12

				ret
			}
			X86_64 {
				mov rax, rdi // 'code' comes in 'rdi'
				mov rdi, rsi // 'p1' comes in 'rsi'
				mov rsi, rdx // 'p2' comes in 'rdx'

				syscall

				ret
			}
		}

		internal static int raw_syscall( SystemCall code, int p1, int p2, int p3 ) asm {
			X86_32 {
				mov eax, [esp + 4]        // code

				push dword ptr [esp + 16] // p3
				push dword ptr [esp + 16] // p2
				push dword ptr [esp + 16] // p1
				push eax

				int 0x80
				add esp, 16

				ret
			}
			X86_64 {
				mov rax, rdi // 'code' comes in 'rdi'
				mov rdi, rsi // 'p1' comes in 'rsi'
				mov rsi, rdx // 'p2' comes in 'rdx'
				mov rdx, rcx // 'p3' comes in 'rcx'

				syscall

				ret
			}
		}

		internal static int raw_syscall( SystemCall code, int p1, int p2, int p3, int p4 ) asm {
			X86_32 {
				mov eax, [esp + 4]        // code

				push dword ptr [esp + 20] // p4
				push dword ptr [esp + 20] // p3
				push dword ptr [esp + 20] // p2
				push dword ptr [esp + 20] // p1

				int 0x80
				add esp, 20

				ret
			}
			X86_64 {
				mov rax, rdi // 'code' comes in 'rdi'
				mov rdi, rsi // 'p1' comes in 'rsi'
				mov rsi, rdx // 'p2' comes in 'rdx'
				mov rdx, rcx // 'p3' comes in 'rcx'
				mov r10, r8  // 'p4' comes in 'r8'

				syscall

				ret
			}
		}

		internal static int raw_syscall( SystemCall code, int p1, int p2, int p3, int p4, int p5 ) asm {
			X86_32 {
				mov eax, [esp + 4]        // code

				push dword ptr [esp + 24] // p5
				push dword ptr [esp + 24] // p4
				push dword ptr [esp + 24] // p3
				push dword ptr [esp + 24] // p2
				push dword ptr [esp + 24] // p1

				int 0x80
				add esp, 24

				ret
			}
			X86_64 {
				mov rax, rdi // 'code' comes in 'rdi'
				mov rdi, rsi // 'p1' comes in 'rsi'
				mov rsi, rdx // 'p2' comes in 'rdx'
				mov rdx, rcx // 'p3' comes in 'rcx'
				mov r10, r8  // 'p4' comes in 'r8'
				mov r8, r9   // 'p5' comes in 'r9'

				syscall

				ret
			}
		}

		internal static int raw_syscall( SystemCall code, int p1, int p2, int p3, int p4, int p5, int p6 ) asm {
			X86_32 {
				mov eax, [esp + 4]        // code

				push dword ptr [esp + 28] // p6
				push dword ptr [esp + 28] // p5
				push dword ptr [esp + 28] // p4
				push dword ptr [esp + 28] // p3
				push dword ptr [esp + 28] // p2
				push dword ptr [esp + 28] // p1

				int 0x80
				add esp, 28

				ret
			}
			X86_64 {
				mov rax, rdi      // 'code' comes in 'rdi'
				mov rdi, rsi      // 'p1' comes in 'rsi'
				mov rsi, rdx      // 'p2' comes in 'rdx'
				mov rdx, rcx      // 'p3' comes in 'rcx'
				mov r10, r8       // 'p4' comes in 'r8'
				mov r8, r9        // 'p5' comes in 'r9'
				mov r9, [rsp + 8] // 'p6' comes in stack

				syscall

				ret
			}
		}

		public static SystemError getdents( int& readen, DirectoryHandle p0, dirent* p1, int p2 ) {
			readen = getdents( p0, ( sbyte* ) p1, p2 );
			if( readen < 0 ) {
				readen = 0;
				return LastError;
			}

			return SystemError.None;
		}

		public static bool Assert( intptr code, [In] CallerContext& callercontext = nullref ) {
			if( code != 0 ) {
				Console.WriteConcat( "Error code ", ( SystemError ) - code, " assertion ", callercontext.Expression, " at line ", callercontext.Row );

				Assert.PrintContextInfo( callercontext );
				return false;
			}

			return true;
		}

		public static bool AssertErrno( intptr code, [In] CallerContext& callercontext = nullref ) {
			if( code < 0 ) {
				var lastError = LibcApi.LastError;

				Console.WriteConcat( "Error code ", lastError, " assertion '", callercontext.Expression, "' at line ", callercontext.Row );

				Assert.PrintContextInfo( callercontext );
				return false;
			}

			return true;
		}

		public static bool Assert( IOHandle code, [In] CallerContext& callercontext = nullref ) {
			if( !code.IsValid ) {
				var lastError = LibcApi.LastError;

				Console.Write( "Error code ", lastError, " assertion '", callercontext.Expression, "' at line ", callercontext.Row );

				Assert.PrintContextInfo( callercontext );
				return false;
			}

			return true;
		}

		public static yield<ifaddrs*> GetNetworkInterfaces() {
			ifaddrs* interfaces = null;
			LibcApi.getifaddrs( &interfaces ); finally { LibcApi.freeifaddrs( interfaces ); }

			for( var @interface = interfaces; @interface != null; @interface = @interface->ifa_next )
				yield return @interface;
		}

		public static string GetHostName() {
			string hostName;
			using( var page = Memory.CachedPages.PopScoped() ) {
				var buffer = ( byte* ) page.Value;
				var bufferLength = ( uint ) Memory.DefaultPageSize;

				LibcApi.AssertErrno( LibcApi.gethostname( ( sbyte* ) buffer, bufferLength ) );
				hostName = string.FromSBCS( Environment.DefaultCodePage, buffer );
			}

			return hostName;
		}

		public static CString GetErrorDescription( SystemError code ) {
			// using( var page = Memory.CachedPages.PopScoped() ) {
			// 	var buffer = ( sbyte* ) page.Value;
			// 	var bufferLength = ( uint ) Memory.DefaultPageSize;
			//
			// 	LibcApi.strerror_r( code, buffer, bufferLength );

			// 	return string.FromSBCS( new CString( buffer ) );
			// }

			return LibcApi.strerror( code );
		}
	}

	public partial struct in_addr {
		public in_addr( IPv4Address& address ) {
			Address = address.UIntData;
		}

		public uint_bigendian& Address { get { return *( uint_bigendian* ) &s_addr; } set { *( uint_bigendian* ) &s_addr = value; } }
	}

	public partial struct sigset_t {
		public sigset_t() { LibcApi.sigemptyset( &this ); }
		public sigset_t( vararg SignalCode signals )
			: this() {
			Add( vararg( signals, signals.Length ) );
		}

		public void Empty() { LibcApi.sigemptyset( &this ); }
		public void Fill() { LibcApi.sigfillset( &this ); }

		public void Add( vararg SignalCode signals ) { foreach( var signal in signals ) Add( signal ); }
		public void Remove( vararg SignalCode signals ) { foreach( var signal in signals ) Remove( signal ); }

		public void Add( SignalCode signal ) { LibcApi.sigaddset( &this, signal ); }
		public void Remove( SignalCode signal ) { LibcApi.sigdelset( &this, signal ); }

		public bool Contains( SignalCode signal ) { return LibcApi.sigismember( &this, signal ) == 0; }

		private const int MaxSignals = sizeof( thistype ) * 8;

		public yield<SignalCode> GetEnumerator() {
			var accessor = new BitArrayAccessor( ( uint* ) &this, MaxSignals );
			for( var i = 0; i < MaxSignals; ++i ) {
				if( accessor[i] )
					yield return ( SignalCode )( i + 1 );
			}
		}
	}

	public partial struct sockaddr_in : IFormattable {
		public sockaddr_in( IPv4Address& address, ushort port ) {
			sin_len = sizeof( thistype );

			ProtocolFamily = ProtocolFamily.PF_INET;
			Address = address.UIntData;
			Port = port;
		}

		public static explicit operator thistype( IPv4Endpoint& endpoint ) {
			return new thistype( endpoint.Address, endpoint.Port );
		}

		public static explicit operator IPv4Endpoint( thistype& @this ) {
			return new IPv4Endpoint( new IPv4Address( @this.Address ), @this.Port );
		}

		public Platform.Libc.ProtocolFamily ProtocolFamily { get { return ( Platform.Libc.ProtocolFamily ) sin_family; } set { sin_family = value.Value(); } }
		public uint_bigendian& Address { get { return *( uint_bigendian* ) &sin_addr.s_addr; } set { *( uint_bigendian* ) &sin_addr.s_addr = value; } }
		public ushort_bigendian& Port { get { return *( ushort_bigendian* ) &sin_port; } set { *( ushort_bigendian* ) &sin_port = value; } }

		public void ToString( StringBuilder builder, string format ) {
			cast<IPv4Endpoint>( this ).ToString( builder, format );
		}
	}

	public partial struct sockaddr_in6 : IFormattable {
		public sockaddr_in6( IPv6Address address, ushort port ) {
			sin6_len = sizeof( thistype );

			ProtocolFamily = Platform.Libc.ProtocolFamily.PF_INET6;
			Address = address.Data;
			Port = port;

			sin6_flowinfo = 0;
			sin6_scope_id = 0;
		}

		public static explicit operator sockaddr_in6( IPv6Endpoint& endpoint ) {
			return new sockaddr_in6( endpoint.Address, endpoint.Port );
		}

		public static explicit operator IPv6Endpoint( sockaddr_in6& @this ) {
			return new IPv6Endpoint( new IPv6Address( @this.Address ), @this.Port );
		}

		public Platform.Libc.ProtocolFamily ProtocolFamily { get { return ( Platform.Libc.ProtocolFamily ) sin6_family; } set { sin6_family = value.Value(); } }
		public byte[16]& Address { get { return *( byte[16]* ) &sin6_addr; } set { *( byte[16]* ) &sin6_addr = value; } }
		public ushort_bigendian& Port { get { return *( ushort_bigendian* ) &sin6_port; } set { *( ushort_bigendian* ) &sin6_port = value; } }

		public void ToString( StringBuilder builder, string format ) {
			cast<IPv6Endpoint>( this ).ToString( builder, format );
		}
	}

	public partial struct sockaddr_un : IFormattable {
		public sockaddr_un() {
			this = default( thistype );
			sun_len = sizeof( thistype );
			ProtocolFamily = ProtocolFamily.PF_UNIX;
		}

		public sockaddr_un( Utf8String path ) {
			if( !Assert.IsTrue( path.ByteLength < sun_path.Length ) ) return;

			this = default( thistype );
			sun_len = sizeof( thistype );
			ProtocolFamily = ProtocolFamily.PF_UNIX;

			Memory.Copy( &sun_path[0], path.GetChars(), path.ByteLength + 1 );
		}

		public bool IsAbstract { get { return sun_path[0] == 0; } }

		public Platform.Libc.ProtocolFamily ProtocolFamily { get { return ( Platform.Libc.ProtocolFamily ) sun_family; } set { sun_family = value.Value(); } }

		public new void ToString( StringBuilder builder, string format ) {
			builder.AppendFormat( "{{ Path='{0}' }}", new CUtf8String( &sun_path[0] ) );
		}
	}

	[Flags]
	public enum Permission : ushort {
		None,

		OthersExecute,
		OthersWrite,
		OthersRead,

		GroupExecute,
		GroupWrite,
		GroupRead,

		OwnerExecute,
		OwnerWrite,
		OwnerRead,
	}

	public partial struct stat {
		public bool IsFile { get { return !IsDirectory; } }
		public bool IsDirectory { get { return ( st_mode & StatFlags.S_IFDIR ) == StatFlags.S_IFDIR; } }
		public bool IsSymlink { get { return ( st_mode & StatFlags.S_IFLNK ) == StatFlags.S_IFLNK; } }
		public bool IsCharacterSpecial { get { return ( st_mode & StatFlags.S_IFCHR ) == StatFlags.S_IFCHR; } }
		public bool IsSocket { get { return ( st_mode & StatFlags.S_IFSOCK ) == StatFlags.S_IFSOCK; } }

		// public DateTime CreationTime { get { return ( DateTime ) st_ctim; } }
		// public DateTime LastAccessTime { get { return ( DateTime ) st_atim; } }
		// public DateTime LastModificationTime { get { return ( DateTime ) st_mtim; } }
	}

	public partial struct iovec {
		public iovec( void* address, uint length ) { iov_base = address; iov_len = length; }

		public static implicit operator iovec( MemorySegment& value ) { return new iovec( value.Start, ( uint ) value.Count ); }
	}

	public static partial struct AdaptationLayer {
		public static FileSeekOrigin MapSeekOrigin( System.IO.SeekOrigin value ) {
			[CheckAllEnumValues]
			switch( value ) {
				case System.IO.SeekOrigin.Begin: return FileSeekOrigin.SEEK_SET;
				case System.IO.SeekOrigin.Current: return FileSeekOrigin.SEEK_CUR;
				case System.IO.SeekOrigin.End: return FileSeekOrigin.SEEK_END;
			}

			Assert.InvalidParameter( nameof( value ) );
			return FileSeekOrigin.SEEK_SET;
		}

		public static System.IO.SeekOrigin MapSeekOrigin( FileSeekOrigin value ) {
			[CheckAllEnumValues]
			switch( value ) {
				case FileSeekOrigin.SEEK_SET: return System.IO.SeekOrigin.Begin;
				case FileSeekOrigin.SEEK_CUR: return System.IO.SeekOrigin.Current;
				case FileSeekOrigin.SEEK_END: return System.IO.SeekOrigin.End;

				case FileSeekOrigin.SEEK_DATA:
				case FileSeekOrigin.SEEK_HOLE:
					break;
			}

			Assert.InvalidParameter( nameof( value ) );
			return System.IO.SeekOrigin.Begin;
		}

		// public const bool IsMemorySegmentLayoutEqualsToIovec = memberinfo( MemorySegment.Start ).ByteOffset == memberinfo( iovec.Address ).ByteOffset && sizeof( MemorySegment ) == sizeof( iovec );
		public const bool IsMemorySegmentLayoutEqualsToIovec = sizeof( MemorySegment ) == sizeof( iovec );
	}

	public partial struct timeval : IFormattable {
		public timeval() { tv_sec = 0; tv_usec = 0; }
		public timeval( intptr seconds ) { tv_sec = seconds; tv_usec = 0; }
		public timeval( intptr seconds, intptr microseconds ) { tv_sec = seconds; tv_usec = microseconds; }

		public timeval( TimeSpan& span ) {
			tv_sec = ( int ) span.TotalSeconds;
			tv_usec = ( int )( ( span.Ticks / 10 ) % 1000000 );
		}

		public int TotalMilliseconds {
			get {
				return ( int )( tv_sec * 1000 + tv_usec / 1000 );
			}
		}

		public static timeval UtcNow {
			get {
				timeval result;
				LibcApi.gettimeofday( &result, null );
				return result;
			}
		}

		public static timeval Now {
			get {
				var result = UtcNow;
				result.tv_sec += GetCurrentTimezoneSecondsOffset( result.tv_sec );
				return result;
			}
		}

		// int unixSeconds = LibcApi.time( null );
		public static int GetCurrentTimezoneSecondsOffset( intptr unixSeconds ) {
			var local = LibcApi.localtime( &unixSeconds );
			if( local == null ) {
				Assert.Fail( "cannot get localtime" );
				LibcApi.exit( 1 );
			}

			return ( int ) local->tm_gmtoff;
		}

		internal const long AdjustEpochSeconds = 62135596800;
		internal const long AdjustEpochTicks = 621355968000000000;

		public long TimeSpanTicks {
			get { return tv_sec * 1000000L * 10 + tv_usec * 10; }
		}

		public long DateTimeTicks {
			get { return TimeSpanTicks + AdjustEpochTicks; }
		}

		public void ToString( StringBuilder builder, string format ) {
			var time = ( DateTime ) this;
			builder.Append( time, format );
		}
	}

	public partial struct timespec : IFormattable {
		public timespec() { }
		public timespec( intptr seconds, intptr nanoseconds ) { tv_sec = seconds; tv_nsec = nanoseconds; }

		public timespec( TimeSpan& span ) {
			tv_sec = ( int ) span.TotalSeconds;
			tv_nsec = ( int )( ( span.Ticks * 100 ) % 1000000000L );
		}

		public timespec( DateTime& time )
			: this( new TimeSpan( time.Ticks - timeval.AdjustEpochTicks ) ) { } // dont convert to Universal Time

		public static timespec operator +( timespec& left, timespec& right ) {
			var result = new timespec( left.tv_sec + right.tv_sec, left.tv_nsec + right.tv_nsec );

			if( result.tv_nsec >= 1000000000 ) {
				++result.tv_sec;
				result.tv_nsec -= 1000000000;
			}

			return result;
		}

		public static timespec FromDays( double value ) { return ( timespec ) TimeSpan.FromDays( value ); }
		public static timespec FromHours( double value ) { return ( timespec ) TimeSpan.FromHours( value ); }
		public static timespec FromMinutes( double value ) { return ( timespec ) TimeSpan.FromMinutes( value ); }
		public static timespec FromSeconds( double value ) { return ( timespec ) TimeSpan.FromSeconds( value ); }
		public static timespec FromMilliseconds( double value ) { return ( timespec ) TimeSpan.FromMilliseconds( value ); }

		public static timespec RealTime { get { timespec result; LibcApi.AssertErrno( LibcApi.clock_gettime( ClockType.CLOCK_REALTIME, &result ) ); return result; } }
		public static timespec MonotonicTime { get { timespec result; LibcApi.AssertErrno( LibcApi.clock_gettime( ClockType.CLOCK_MONOTONIC, &result ) ); return result; } }
		public static timespec ThreadTime { get { timespec result; LibcApi.AssertErrno( LibcApi.clock_gettime( ClockType.CLOCK_THREAD_CPUTIME_ID, &result ) ); return result; } }

		public static timespec RealTimeResolution { get { timespec result; LibcApi.AssertErrno( LibcApi.clock_getres( ClockType.CLOCK_REALTIME, &result ) ); return result; } }
		public static timespec MonotonicTimeResolution { get { timespec result; LibcApi.AssertErrno( LibcApi.clock_getres( ClockType.CLOCK_MONOTONIC, &result ) ); return result; } }
		public static timespec ThreadTimeResolution { get { timespec result; LibcApi.AssertErrno( LibcApi.clock_getres( ClockType.CLOCK_THREAD_CPUTIME_ID, &result ) ); return result; } }

		public static timespec UtcNow { get { return RealTime; } }

		public static timespec Now {
			get {
				var result = UtcNow;
				result.tv_sec += timeval.GetCurrentTimezoneSecondsOffset( result.tv_sec );
				return result;
			}
		}

		public long TimeSpanTicks {
			get { return tv_sec * ( 10L * 1000000 ) + tv_nsec / 100; }
		}

		public long DateTimeTicks {
			get { return TimeSpanTicks + timeval.AdjustEpochTicks; }
		}

		public static explicit operator timespec( TimeSpan& value ) { return new timespec( value ); }
		public static explicit operator timespec( DateTime& value ) { return new timespec( value ); }

		public void ToString( StringBuilder builder, string format ) {
			var time = ( DateTime ) this;
			builder.Append( time, format );
		}
	}

	public partial struct pollfd : IFormattable {
		public IOHandle Handle { get { return *( IOHandle* ) &fd; } set { *( IOHandle* ) &fd = value; } }
		public PollEvents ListenedEvents { get { return *( PollEvents* ) &events; } set { *( PollEvents* ) &events = value; } }
		public PollEvents RaisedEvents { get { return *( PollEvents* ) &revents; } set { *( PollEvents* ) &revents = value; } }

		public bool InputEvent { get { return ( RaisedEvents & PollEvents.POLLIN ) != 0; } }
		public bool OutputEvent { get { return ( RaisedEvents & PollEvents.POLLOUT ) != 0; } }
		public bool ErrorEvent { get { return ( RaisedEvents & ( PollEvents.POLLERR | PollEvents.POLLHUP | PollEvents.POLLNVAL ) ) != 0; } }

		public void ToString( StringBuilder builder, string format ) {
			builder.AppendFormat( "{{ Handle={0} ListenedEvents={1} RaisedEvents={2} }}", Handle.ID, ListenedEvents, RaisedEvents );
		}
	}
	public struct AlarmRegion : IDisposable {
		private TimeSpan _timeout;

		public AlarmRegion( TimeSpan timeout ) {
			_timeout = timeout;
			if( timeout <= TimeSpan.Zero ) return;

			// LibcApi.signal( SignalCode.SIGALRM, AlarmSignalHandler );
			var sa = default( sigaction );
			var& handler = sa.__sigaction_u.__sa_handler; *&handler = AlarmSignalHandler;
			LibcApi.sigaction( SignalCode.SIGALRM, &sa, null );

			var @new = new itimerval { it_interval = default( timeval ), it_value = new timeval( timeout ) };
			LibcApi.setitimer( 0, &@new, null );
		}

		public void Dispose() {
			if( _timeout <= TimeSpan.Zero ) return;
			LibcApi.signal( SignalCode.SIGALRM, LibcApi.SIG_IGN );
		}

		private static void AlarmSignalHandler( int signal ) { }
	}

	/// Using library from ports: pkg install libexecinfo
	[ExternLibrary( Image = "/usr/lib/libexecinfo.so" )]
	public static partial struct LibexecApi {
		/// http://www.gnu.org/software/libc/manual/html_node/Backtraces.html
		public extern static int backtrace( void** buffer, int size );
		public extern static CUtf8String* backtrace_symbols( void** buffer, int size );
	}
}