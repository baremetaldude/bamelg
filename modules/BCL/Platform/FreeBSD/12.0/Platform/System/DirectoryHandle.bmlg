//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

using Platform.IO;

namespace Platform.Libc {
	public struct DirectoryHandle : IOHandle {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public DirectoryHandle( CUtf8String name ) { OpenBlocking( name, FctlFlags.O_RDONLY | FctlFlags.O_DIRECTORY, 0 ); }
		public DirectoryHandle( IOHandle parent, CUtf8String name, SymlinkFollowOption symlinkFollowOption = SymlinkFollowOption.None ) { OpenAtBlocking( parent, name, FctlFlags.O_RDONLY | FctlFlags.O_DIRECTORY, symlinkFollowOption ); }

		internal SystemError getdents( dirent* buffer, int length, int& readen ) {
			var result = SystemError.None;

			if( Fiber.IsFiberExecuting ) {
				Fiber.InvokeAsync( () => {
					result = LibcApi.getdents( readen, this, buffer, length );
				} );
			}
			else {
				result = LibcApi.getdents( readen, this, buffer, length );
			}

			return result;
		}
	}
}