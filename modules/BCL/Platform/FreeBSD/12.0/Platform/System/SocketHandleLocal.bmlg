//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

using Platform.IO;

namespace Platform.Libc {
	// http://www.kernel.org/doc/man-pages/online/pages/man7/unix.7.html
	public struct SocketHandleLocal : SocketHandle {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		// nonblocking for fibers
		public SocketHandleLocal( SocketType socketType )
			: this( socketType, Fiber.IsFiberExecuting ) {
		}

		public SocketHandleLocal( SocketType socketType, bool nonBlocking ) {
			LibcApi.Assert( this = bitcast<SocketHandleLocal>( LibcApi.socket( ProtocolFamily.PF_UNIX, socketType, IPProtocol.IPPROTO_IP ) ) );
			if( nonBlocking ) IsNonBlocking = true;
		}

		public SystemError Connect( Utf8String path ) {
			var endpoint = new sockaddr_un( path );
			return ConnectNonBlocking( TimeSpan.Zero, ( sockaddr* ) &endpoint, sizeof( endpoint ) );
		}

		public SystemError Connect( sockaddr_un& endpoint ) {
			return ConnectNonBlocking( TimeSpan.Zero, ( sockaddr* ) &endpoint, sizeof( endpoint ) );
		}

		public bool Bind( Utf8String path ) {
			var nativeEndpoint = new sockaddr_un( path );
			return LibcApi.bind( this, ( sockaddr* ) &nativeEndpoint, sizeof( nativeEndpoint ) ) == 0;
		}

		public static bool Exists( Utf8String path ) {
			stat stat;
			if( LibcApi.stat( path, &stat ) < 0 ) return false;

			return stat.IsSocket;
		}

		// public bool ReceiveCredentials {
		// 	get {
		// 		int result;
		// 		LibcApi.Assert( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_PASSCRED, &result, sizeof( result ) ) ); // SOL_SOCKET for historical reasons
		// 		return result != 0;
		// 	}
		// 	set {
		// 		var result = ( int ) value;
		// 		LibcApi.Assert( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_PASSCRED, &result, sizeof( result ) ) ); // SOL_SOCKET for historical reasons
		// 	}
		// }

		// public ucred PeerCredentials {
		// 	get {
		// 		ucred result;
		// 		LibcApi.Assert( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_PEERCRED, &result, sizeof( result ) ) ); // SOL_SOCKET for historical reasons
		// 		return result;
		// 	}
		// }

		public static SocketHandleLocal[2] CreatePair( SocketType type = SocketType.SOCK_DGRAM ) {
			SocketHandle[2] result;
			LibcApi.AssertErrno( LibcApi.socketpair( ProtocolFamily.PF_UNIX, type, IPProtocol.IPPROTO_IP, result ) );
			return bitcast<SocketHandleLocal[2]>( result );
		}
	}
}