//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

using Platform.IO;

namespace Platform.Libc {
	// Usage:
	// using( var handle = new FileHandle( "/path/file", FileOpenFlags.O_RDWR ) ) {
	//	...
	// }
	public struct FileHandle : IOHandleBlocking {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public FileHandle( CUtf8String name, FileOpenFlags flags, uint permissions = 0 ) { OpenBlocking( name, flags, permissions ); }
		public FileHandle( IOHandle parent, CUtf8String name, FileOpenFlags flags, SymlinkFollowOption symlinkFollowOption = SymlinkFollowOption.None ) { OpenAtBlocking( parent, name, flags, symlinkFollowOption ); }

		public static bool Delete( CUtf8String path ) {
			return LibcApi.unlink( path ) == 0;
		}

		public static bool DeleteAt( IOHandle directoryHandle, CUtf8String path ) {
			return LibcApi.unlinkat( directoryHandle, path, SymlinkFollowOption.None ) == 0;
		}

		public static bool Exists( CUtf8String path ) {
			stat stat;
			if( LibcApi.stat( path, &stat ) < 0 ) return false;

			return stat.IsFile;
		}

		public static bool ExistsAt( IOHandle directoryHandle, CUtf8String path ) {
			stat stat;
			if( LibcApi.fstatat( directoryHandle, path, &stat, SymlinkFollowOption.None ) < 0 ) return false;

			return stat.IsFile;
		}

		public static void SetPermissions( CUtf8String path, Permission permission ) {
			LibcApi.Assert( LibcApi.chmod( path, permission ) );
		}

		public static FileStream WriteAllBytes( CUtf8String path, Permission permission, void* data, uint count ) {
			var stream = FileStream.CreateWriteStream( path, permission );
			stream.Write( data, count );
			LibcApi.fchmod( stream.Handle, permission );
			return stream;
		}

		public static long GetSize( CUtf8String path ) {
			stat stat;

			if( LibcApi.stat( path, &stat ) < 0 ) return -1;

			return stat.st_size;
		}
	}
}