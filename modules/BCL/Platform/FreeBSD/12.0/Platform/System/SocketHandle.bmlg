//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

using Platform.IO;

namespace Platform.Libc {
	public struct SocketHandle : IOHandleNonBlocking, IFormattable {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public SystemError Listen( uint backlog ) {
			if( LibcApi.listen( this, backlog ) != 0 ) return LibcApi.LastError;
			return SystemError.None;
		}

		public SystemError Bind( void* address, int addressLength ) {
			if( LibcApi.bind( this, ( sockaddr* ) address, addressLength ) != 0 ) return LibcApi.LastError;
			return SystemError.None;
		}

		// public SystemError RawPeek( void* buffer, uint bufferLength, uint& transmitted ) {
		// 	transmitted = 0;
		// 	if( !Assert.IsTrue( buffer != null && bufferLength != 0 ) ) return SystemError.None;
		//
		// 	var readen = LibcApi.recv( this, ( byte* ) buffer + transmitted, bufferLength, MessageFlags.MSG_PEEK );
		// 	if( readen < 0 ) return LibcApi.LastError;
		//
		// 	transmitted += ( uint ) readen;
		// 	return SystemError.None;
		// }

		public SystemError Send( uint& totalTransmitted, vararg iovec data ) {
			return WriteNonBlocking( TimeSpan.Zero, totalTransmitted, vararg( data, data.Length ) );
		}

		// All bytes will be sent or error returned
		public SystemError Send( uint& totalTransmitted, void* buffer, uint count ) {
			return WriteNonBlocking( TimeSpan.Zero, totalTransmitted, buffer, count );
		}

		public SystemError Receive( uint& totalReceived, vararg iovec data ) { return ReadNonBlocking( TimeSpan.Zero, totalReceived, vararg( data, data.Length ) ); }

		// Less than 'count' bytes can be received
		public SystemError Receive( uint& totalReceived, void* buffer, uint count ) { return ReadNonBlocking( TimeSpan.Zero, totalReceived, buffer, count ); }

		public TimeSpan ReadTimeout {
			get {
				var result = default( timeval );
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_RCVTIMEO, &result, sizeof( result ) ) );
				return ( TimeSpan ) result;
			}
			set {
				var timeout = new timeval( value );
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_RCVTIMEO, &timeout, sizeof( timeout ) ) );
			}
		}

		public TimeSpan WriteTimeout {
			get {
				var result = default( timeval );
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_SNDTIMEO, &result, sizeof( result ) ) );
				return ( TimeSpan ) result;
			}
			set {
				var timeout = new timeval( value );
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_SNDTIMEO, &timeout, sizeof( timeout ) ) );
			}
		}

		public bool ReuseAddress {
			get {
				Boolean32 result = false;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_REUSEADDR, &result, sizeof( result ) ) );
				return result;
			}
			set {
				Boolean32 result = value;
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_REUSEADDR, &result, sizeof( result ) ) );
			}
		}

		public bool IsListening {
			get {
				Boolean32 result = false;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_ACCEPTCONN, &result, sizeof( result ) ) );
				return result;
			}
		}

		public bool IsBroadcast {
			get {
				Boolean32 result = false;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_BROADCAST, &result, sizeof( result ) ) );
				return result;
			}
			set {
				Boolean32 result = value;
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_BROADCAST, &result, sizeof( result ) ) );
			}
		}

		public bool IsDebugged {
			get {
				Boolean32 result = false;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_DEBUG, &result, sizeof( result ) ) );
				return result;
			}
			set {
				Boolean32 result = value;
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_DEBUG, &result, sizeof( result ) ) );
			}
		}

		public bool IsRouteDisabled {
			get {
				Boolean32 result = false;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_DONTROUTE, &result, sizeof( result ) ) );
				return result;
			}
			set {
				Boolean32 result = value;
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_DONTROUTE, &result, sizeof( result ) ) );
			}
		}

		public bool IsTimpestampEnabled {
			get {
				Boolean32 result = false;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_TIMESTAMP, &result, sizeof( result ) ) );
				return result;
			}
			set {
				Boolean32 result = value;
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_TIMESTAMP, &result, sizeof( result ) ) );
			}
		}

		public bool ReusePort {
			get {
				Boolean32 result = false;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_REUSEPORT, &result, sizeof( result ) ) );
				return result;
			}
			set {
				Boolean32 result = value;
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_REUSEPORT, &result, sizeof( result ) ) );
			}
		}

		public int SendBufferSize {
			get {
				int result = 0;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_SNDBUF, &result, sizeof( result ) ) );
				return result;
			}
			set {
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_SNDBUF, &value, sizeof( value ) ) );
			}
		}

		public int ReceiveBufferSize {
			get {
				int result = 0;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_RCVBUF, &result, sizeof( result ) ) );
				return result;
			}
			set {
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_RCVBUF, &value, sizeof( value ) ) );
			}
		}

		public bool AttachAcceptFilter( CString name, CString parameter = "" ) {
			var value = default( accept_filter_arg );
			System.Runtime.Memory.CopyToTerminatedBuffer( value.af_name, ( uint ) value.af_name.Length, name );
			System.Runtime.Memory.CopyToTerminatedBuffer( value.af_arg, ( uint ) value.af_arg.Length, parameter );

			if( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_ACCEPTFILTER, &value, sizeof( value ) ) < 0 ) {
				var errno = LibcApi.LastError;
				if( errno == SystemError.ENOENT ) return false;

				return LibcApi.Assert( -1 );
			}

			return true;
		}

		protected new void DumpRelevantData( StringBuilder builder ) {
			base.DumpRelevantData( builder );

			builder.Append( " IsListening=" ); builder.Append( IsListening );
			builder.Append( " SendBufferSize=" ); builder.Append( SendBufferSize );
			builder.Append( " ReceiveBufferSize=" ); builder.Append( ReceiveBufferSize );
			builder.Append( " IsTimpestampEnabled=" ); builder.Append( IsTimpestampEnabled );
			builder.Append( " IsRouteDisabled=" ); builder.Append( IsRouteDisabled );
			builder.Append( " IsDebugged=" ); builder.Append( IsDebugged );
			builder.Append( " IsBroadcast=" ); builder.Append( IsBroadcast );
			builder.Append( " ReuseAddress=" ); builder.Append( ReuseAddress );
			builder.Append( " ReadTimeout=" ); builder.Append( ReadTimeout );
			builder.Append( " WriteTimeout=" ); builder.Append( WriteTimeout );
		}

		protected SystemError ConnectNonBlocking( TimeSpan timeout, sockaddr* address, int addressLength ) {
			if( Fiber.IsFiberExecuting )
				return Fiber.FiberManager.ConnectNonBlocking( timeout, this, address, addressLength );
			else {
				if( LibcApi.connect( this, address, addressLength ) != 0 ) return LibcApi.LastError;
				return SystemError.None;
			}
		}

		public new void ToString( StringBuilder builder, string format ) {
			builder.Append( "{" );
			DumpRelevantData( builder );
			builder.Append( " }" );
		}
	}
}