//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;
using System.Net;

using Platform.Kernel;
using Platform.Libc;

namespace Platform.IO {
	// Must be used with non-blocking sockets inside Fibers or with blocking sockets(in ST/MT environment)
	public class NetworkStream : IStream {
		public TimeSpan ConnectTimeout { get; set; }
		public TimeSpan WriteTimeout { get; set; }
		public TimeSpan ReadTimeout { get; set; }

		public static IPlatformErrorHandler DefaultErrorHandler = PlatformErrorHandlerNull.Instance;
		public IPlatformErrorHandler ErrorHandler = DefaultErrorHandler;

		public StreamCapabilities Capabilities { get { return StreamCapabilities.Read | StreamCapabilities.Write | StreamCapabilities.VectoredIO | StreamCapabilities.Timeout; } }
		public StreamingBufferInfo* BufferInfo { get { return null; } }

		private IOHandleNonBlocking _handle = IOHandleNonBlocking.Invalid;
		public IOHandleNonBlocking Handle {
			get { return _handle; }
			set {
				if( _handle == value ) return;

				Close();
				_handle = value;
			}
		}

		public bool CloseHandle { get; set; } = true;

		private bool _immediateDeliveryTCP { get; set; } = true;

		public bool ImmediateDeliveryTCP {
			get { return _immediateDeliveryTCP; }
			set {
				if( _handle != IOHandleNonBlocking.Invalid ) bitcast<SocketHandleTCP>( _handle ).ImmediateDelivery = value;
				_immediateDeliveryTCP = value;
			}
		}

		public bool KernelBufferingTCP { get; set; }
		private bool _cork { get; set; }

		public string Context;

		public NetworkStream() {
		}

		public NetworkStream( IOHandleNonBlocking handle )
			: this() {
			_handle = handle;
		}

		~NetworkStream() { Close(); }
		public override void Dispose() { Close(); base.Dispose(); }

		private void Close() {
			if( CloseHandle ) _handle.Close();
			else _handle = IOHandleNonBlocking.Invalid;
		}

		protected PlatformErrorAction OnLastError( string operation, IFormattable context, SystemError errorCode ) { return ErrorHandler.OnError( operation, context, errorCode ); }
		protected PlatformErrorAction OnLastError( string operation, SystemError errorCode ) { return ErrorHandler.OnError( operation, Context, errorCode ); }

		public bool Connect( IPv4Endpoint endpoint ) {
			var socket = bitcast<SocketHandleTCP>( _handle != SocketHandle.Invalid ? _handle : _handle = new SocketHandleTCP( ProtocolFamily.PF_INET ) );

		restart_Connect:
			var status = socket.Connect( ConnectTimeout, endpoint );
			if( !status ) {
				if( OnLastError( "Connect", endpoint, status ) == PlatformErrorAction.Restart ) goto restart_Connect;
				return false;
			}

			if( _immediateDeliveryTCP ) socket.ImmediateDelivery = true;
			return true;
		}

		public bool Connect( IPv6Endpoint endpoint ) {
			var socket = bitcast<SocketHandleTCP>( _handle != SocketHandle.Invalid ? _handle : _handle = new SocketHandleTCP( ProtocolFamily.PF_INET6 ) );

		restart_Connect:
			var status = socket.Connect( ConnectTimeout, endpoint );
			if( !status ) {
				if( OnLastError( "Connect", endpoint, status ) == PlatformErrorAction.Restart ) goto restart_Connect;
				return false;
			}

			if( _immediateDeliveryTCP ) socket.ImmediateDelivery = true;
			return true;
		}

		public bool Bind( IPv4Endpoint endpoint ) {
			var socket = bitcast<SocketHandleTCP>( _handle != SocketHandle.Invalid ? _handle : _handle = new SocketHandleTCP( ProtocolFamily.PF_INET ) );
			var nativeEndpoint = ( sockaddr_in ) endpoint;

		restart_Bind:
			var status = socket.Bind( &nativeEndpoint, sizeof( nativeEndpoint ) );

			if( !status ) {
				if( OnLastError( "Bind", endpoint, status ) == PlatformErrorAction.Restart ) goto restart_Bind;
				return false;
			}

			return true;
		}

		public bool Bind( IPv6Endpoint endpoint ) {
			var socket = bitcast<SocketHandleTCP>( _handle != SocketHandle.Invalid ? _handle : _handle = new SocketHandleTCP( ProtocolFamily.PF_INET6 ) );
			var nativeEndpoint = ( sockaddr_in6 ) endpoint;

		restart_Bind:
			var status = socket.Bind( &nativeEndpoint, sizeof( nativeEndpoint ) );

			if( !status ) {
				if( OnLastError( "Bind", endpoint, status ) == PlatformErrorAction.Restart ) goto restart_Bind;
				return false;
			}

			return true;
		}

		public uint Read( void* buffer, uint count ) {
			if( !_handle.IsValid || count == 0 || buffer == null ) return 0;

			var data = ( byte* ) buffer;

			var transmitted = 0U;
		restart_Receive:
			var error = _handle.Read( ReadTimeout, transmitted, data, count );
			if( error != SystemError.None ) {
				if( OnLastError( "Read", error ) == PlatformErrorAction.Restart ) goto restart_Receive;
				return transmitted;
			}

			return transmitted;
		}

		public uint Write( void* buffer, uint count ) {
			if( !_handle.IsValid || count == 0 || buffer == null ) return 0;

			var transmitted = 0U;
		restart_Send:
			var error = _handle.Write( WriteTimeout, transmitted, buffer, count );
			if( error != SystemError.None ) {
				if( OnLastError( "Write", error ) == PlatformErrorAction.Restart ) goto restart_Send;
				return transmitted;
			}

			return transmitted;
		}

		public uint Read( vararg MemorySegment segments ) {
			Assert.IsTrue( AdaptationLayer.IsMemorySegmentLayoutEqualsToIovec );
			uint totalReaden;

		restart_Receive:
			var error = _handle.Read( ReadTimeout, totalReaden, vararg( ( iovec* ) segments, segments.Length ) );
			if( error != SystemError.None ) {
				if( OnLastError( "Read", error ) == PlatformErrorAction.Restart ) goto restart_Receive;
				return totalReaden;
			}

			return totalReaden;
		}

		public uint Write( vararg MemorySegment segments ) {
			Assert.IsTrue( AdaptationLayer.IsMemorySegmentLayoutEqualsToIovec );

			uint totalWritten = 0U;
		restart_Send:
			var error = _handle.Write( WriteTimeout, totalWritten, vararg( ( iovec* ) segments, segments.Length ) );
			if( error != SystemError.None ) {
				if( OnLastError( "Write", error ) == PlatformErrorAction.Restart ) goto restart_Send;
				return totalWritten;
			}

			return totalWritten;
		}

		public void Flush( FlushKind flushKind = FlushKind.DeepWrite ) {
		}

		public bool IsClosed() {
			return bitcast<SocketHandleTCP>( _handle ).IsClosed();
		}

		public void EnableKeepAlive( TimeSpan timeout, TimeSpan interval, uint count ) {
			EnableKeepAlive( ( uint ) timeout.TotalSeconds, ( uint ) interval.TotalSeconds, count );
		}

		public void EnableKeepAlive( uint timeout, uint interval, uint count ) {
			var tcp = bitcast<SocketHandleTCP>( _handle );
			tcp.KeepAliveEnabled = true;

			tcp.KeepAliveProbesMax = count;
			tcp.KeepAliveIdleSeconds = timeout;
			tcp.KeepAliveProbingIntervalSeconds = interval;
		}

		public void DisableKeepAlive() {
			bitcast<SocketHandleTCP>( _handle ).KeepAliveEnabled = false;
		}

		long IStream.Position { get { return 0; } }
		long IStream.Seek( long offset, SeekOrigin origin ) { return 0; }

		MemoryMappedView IStream.CreateReadView( uintptr offset, uintptr length ) { return null; }
		MemoryMappedView IStream.CreateWriteView( uintptr offset, uintptr length ) { return null; }
	}
}