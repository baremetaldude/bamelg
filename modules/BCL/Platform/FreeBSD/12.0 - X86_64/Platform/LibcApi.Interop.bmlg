//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

namespace Platform.Libc {
	[ExternLibrary( Image = "/lib/libc.so.7" )]
	public static partial struct LibcApi {
		public const int PTHREAD_STACK_MIN = 2048;


		public extern static int getpagesizes( uintptr* p0, int p1 );
		public extern static int madvise( void* p0, uintptr p1, int p2 );
		public extern static int mincore( void* p0, uintptr p1, sbyte* p2 );
		public extern static int minherit( void* p0, uintptr p1, int p2 );
		public extern static int mlock( void* p0, uintptr p1 );
		public extern static int mlockall( int p0 );
		public extern static void* mmap( void* addr, uintptr len, int prot, int flags, IOHandle fd, intptr p5 );
		public extern static int mprotect( void* p0, uintptr p1, int p2 );
		public extern static int msync( void* p0, uintptr p1, int p2 );
		public extern static int munlock( void* p0, uintptr p1 );
		public extern static int munlockall();
		public extern static int munmap( void* p0, uintptr p1 );
		public extern static int posix_madvise( void* p0, uintptr p1, int p2 );
		public extern static int shm_open( sbyte* p0, int p1, ushort p2 );
		public extern static int shm_unlink( sbyte* p0 );

		public extern static SystemError* __error();

		public extern static int getpriority( int p0, int p1 );
		public extern static int getrlimit( int p0, rlimit* p1 );
		public extern static int getrusage( int p0, rusage* p1 );
		public extern static int setpriority( int p0, int p1, int p2 );
		public extern static int setrlimit( int p0, rlimit* p1 );

		public extern static int pselect( int p0, fd_set* p1, fd_set* p2, fd_set* p3, timespec* p4, sigset_t* p5 );
		public extern static int select( int p0, fd_set* p1, fd_set* p2, fd_set* p3, timeval* p4 );

		public extern static int ftruncate( IOHandle p0, intptr p1 );
		public extern static intptr lseek( IOHandle p0, intptr p1, FileSeekOrigin p2 );
		public extern static int truncate( CUtf8String p0, intptr p1 );

		public extern static Functors.Action<int> signal( SignalCode p0, Functors.Action<int> p1 );

		public extern static int audit( void* p0, int p1 );
		public extern static int auditctl( sbyte* p0 );
		public extern static int auditon( int p0, void* p1, int p2 );
		public extern static int getaudit( auditinfo* p0 );
		public extern static int getaudit_addr( auditinfo_addr* p0, int p1 );
		public extern static int getauid( uint* p0 );
		public extern static int setaudit( auditinfo* p0 );
		public extern static int setaudit_addr( auditinfo_addr* p0, int p1 );
		public extern static int setauid( uint* p0 );

		public extern static void closelog();
		public extern static void openlog( sbyte* p0, int p1, int p2 );
		public extern static int setlogmask( int p0 );
		public extern static void vsyslog( int p0, sbyte* p1, void* p2 );

		public extern static int creat( sbyte* p0, ushort p1 );
		public extern static int flock( int p0, int p1 );
		public extern static int posix_fadvise( int p0, intptr p1, intptr p2, int p3 );
		public extern static int posix_fallocate( int p0, intptr p1, intptr p2 );

		public extern static int poll( pollfd* pfd, uint nfds, int timeout );
		public extern static int ppoll( pollfd* pfd, uint nfds, timespec* timeout, sigset_t* newsigmask );

		public extern static sbyte* asctime( tm* p0 );
		public extern static sbyte* asctime_r( tm* p0, sbyte* p1 );
		public extern static int clock();
		public extern static int clock_getcpuclockid( int p0, int* p1 );
		public extern static int clock_getres( int p0, timespec* p1 );
		public extern static int clock_gettime( int p0, timespec* p1 );
		public extern static int clock_nanosleep( int p0, int p1, timespec* p2, timespec* p3 );
		public extern static int clock_settime( int p0, timespec* p1 );
		public extern static sbyte* ctime( intptr* p0 );
		public extern static sbyte* ctime_r( intptr* p0, sbyte* p1 );
		public extern static double difftime( intptr p0, intptr p1 );
		public extern static tm* gmtime( intptr* p0 );
		public extern static tm* gmtime_r( intptr* p0, tm* p1 );
		public extern static tm* localtime( intptr* p0 );
		public extern static tm* localtime_r( intptr* p0, tm* p1 );
		public extern static intptr mktime( tm* p0 );
		public extern static int nanosleep( timespec* p0, timespec* p1 );
		public extern static intptr posix2time( intptr t );
		public extern static uintptr strftime( sbyte* p0, uintptr p1, sbyte* p2, tm* p3 );
		public extern static sbyte* strptime( sbyte* p0, sbyte* p1, tm* p2 );
		public extern static intptr time( intptr* p0 );
		public extern static intptr time2posix( intptr t );
		public extern static intptr timegm( tm* p0 );
		public extern static intptr timelocal( tm* p0 );
		public extern static int timespec_get( timespec* ts, int @base );
		public extern static sbyte* timezone( int p0, int p1 );
		public extern static void tzset();
		public extern static void tzsetwall();

		public extern static uintptr strftime_l( sbyte* p0, uintptr p1, sbyte* p2, tm* p3, locale_t* p4 );

		public extern static int adjtime( timeval* p0, timeval* p1 );
		public extern static int clock_getcpuclockid2( intptr p0, int p1, int* p2 );
		public extern static int futimes( int p0, timeval* p1 );
		public extern static int futimesat( int p0, CUtf8String p1, timeval* p2 );
		public extern static int getitimer( int p0, itimerval* p1 );
		public extern static int gettimeofday( timeval* p0, timezone* p1 );
		public extern static int lutimes( CUtf8String p0, timeval* p1 );
		public extern static int setitimer( int p0, itimerval* p1, itimerval* p2 );
		public extern static int settimeofday( timeval* p0, timezone* p1 );
		public extern static int utimes( CUtf8String p0, timeval* p1 );

		public extern static int chflags( CUtf8String p0, uintptr p1 );
		public extern static int chflagsat( int p0, sbyte* p1, uintptr p2, int p3 );
		public extern static int chmod( CUtf8String p0, Permission p1 );
		public extern static int fchflags( IOHandle p0, uintptr p1 );
		public extern static int fchmod( IOHandle p0, Permission p1 );
		public extern static int fchmodat( IOHandle p0, CUtf8String p1, ushort p2, int p3 );
		public extern static int fstat( IOHandle p0, stat* p1 );
		public extern static int fstatat( IOHandle p0, CUtf8String p1, stat* p2, SymlinkFollowOption p3 );
		public extern static int futimens( int fd, timespec* times );
		public extern static int lchflags( CUtf8String p0, int p1 );
		public extern static int lchmod( CUtf8String p0, ushort p1 );
		public extern static int lstat( CUtf8String p0, stat* p1 );
		public extern static int mkdir( CUtf8String p0, Permission p1 );
		public extern static int mkdirat( IOHandle p0, CUtf8String p1, Permission p2 );
		public extern static int mkfifo( CUtf8String p0, Permission p1 );
		public extern static int mkfifoat( IOHandle p0, CUtf8String p1, Permission p2 );
		public extern static int mknod( CUtf8String p0, ushort p1, uint p2 );
		public extern static int mknodat( int p0, CUtf8String p1, ushort p2, uint p3 );
		public extern static int stat( CUtf8String p0, stat* p1 );
		public extern static ushort umask( ushort p0 );
		public extern static int utimensat( int fd, sbyte* path, timespec* times, int flag );

		public extern static int __xuname( int p0, void* p1 );

		public extern static int wait( int* p0 );
		public extern static int wait3( int* p0, int p1, rusage* p2 );
		public extern static int wait4( int p0, int* p1, int p2, rusage* p3 );
		public extern static int wait6( idtype p0, intptr p1, int* p2, int p3, __wrusage* p4, siginfo_t* p5 );
		public extern static int waitid( idtype p0, intptr p1, siginfo_t* p2, int p3 );
		public extern static int waitpid( int p0, int* p1, int p2 );

		public extern static int times( tms* p0 );

		public extern static SocketHandle accept( IOHandle fd, void* addr, int& addrLen );
		public extern static int accept4( int p0, sockaddr* p1, uint* p2, int p3 );
		public extern static int bind( IOHandle fd, void* addr, int addrLen );
		public extern static int bindat( int p0, int p1, sockaddr* p2, uint p3 );
		public extern static int connect( IOHandle fd, void* addr, int addrLen );
		public extern static int connectat( int p0, int p1, sockaddr* p2, uint p3 );
		public extern static int getpeername( IOHandle fd, void* addr, int& addrLen );
		public extern static int getsockname( IOHandle fd, void* addr, int& addrLen );
		public extern static int getsockopt( IOHandle fd, SocketPropertyGroup level, int optname, void* optval, int& optlen );
		public extern static int listen( IOHandle fd, int n );
		public extern static intptr recv( IOHandle fd, void* p1, uintptr p2, int p3 );
		public extern static intptr recvfrom( IOHandle fd, void* p1, uintptr p2, MessageFlags p3, void* address, int& addressLength );
		public extern static intptr recvmmsg( int p0, mmsghdr* p1, uintptr p2, int p3, timespec* p4 );
		public extern static intptr recvmsg( IOHandle fd, msghdr* p1, int p2 );
		public extern static intptr send( IOHandle fd, void* p1, uintptr p2, int p3 );
		public extern static int sendfile( IOHandle fd, int p1, intptr p2, uintptr p3, sf_hdtr* p4, intptr* p5, int p6 );
		public extern static intptr sendmmsg( int p0, mmsghdr* p1, uintptr p2, int p3 );
		public extern static intptr sendmsg( IOHandle fd, msghdr* p1, int p2 );
		public extern static intptr sendto( IOHandle fd, void* p1, uintptr p2, MessageFlags p3, void* address, int addressLength );
		public extern static int setfib( int p0 );
		public extern static int setsockopt( IOHandle fd, SocketPropertyGroup level, int p2, void* p3, int p4 );
		public extern static int shutdown( IOHandle fd, int p1 );
		public extern static int sockatmark( IOHandle fd );
		public extern static int socket( ProtocolFamily domain, SocketType type, IPProtocol protocol );
		public extern static int socketpair( ProtocolFamily domain, SocketType type, IPProtocol protocol, SocketHandle[2]& fds );

		public extern static int _rtld_addr_phdr( void* p0, dl_phdr_info* p1 );
		public extern static int _rtld_get_stack_prot();
		public extern static int _rtld_is_dlopened( void* p0 );
		public extern static int dl_iterate_phdr( Functors.Func<dl_phdr_info*, uintptr, void*, int> p0, void* p1 );

		public extern static int kevent( KQueueHandle kq, kevent* changelist, int nchanges, kevent* eventlist, int nevents, timespec& timeout );
		public extern static KQueueHandle kqueue();

		public extern static intptr preadv( int p0, iovec* p1, int p2, intptr p3 );
		public extern static intptr pwritev( int p0, iovec* p1, int p2, intptr p3 );
		public extern static intptr readv( IOHandle p0, iovec* p1, int count );
		public extern static intptr writev( IOHandle p0, iovec* p1, int count );

		public extern static int getipv4sourcefilter( int p0, in_addr p1, in_addr p2, uint* p3, uint* p4, in_addr* p5 );
		public extern static int getsourcefilter( int p0, uint p1, sockaddr* p2, uint p3, uint* p4, uint* p5, sockaddr_storage* p6 );
		public extern static uint htonl( uint p0 );
		public extern static ushort htons( ushort p0 );
		public extern static uint ntohl( uint p0 );
		public extern static ushort ntohs( ushort p0 );
		public extern static int setipv4sourcefilter( int p0, in_addr p1, in_addr p2, uint p3, uint p4, in_addr* p5 );
		public extern static int setsourcefilter( int p0, uint p1, sockaddr* p2, uint p3, uint p4, uint p5, sockaddr_storage* p6 );

		public extern static int inet6_opt_append( void* p0, uint p1, int p2, byte p3, uint p4, byte p5, void** p6 );
		public extern static int inet6_opt_find( void* p0, uint p1, int p2, byte p3, uint* p4, void** p5 );
		public extern static int inet6_opt_finish( void* p0, uint p1, int p2 );
		public extern static int inet6_opt_get_val( void* p0, int p1, void* p2, uint p3 );
		public extern static int inet6_opt_init( void* p0, uint p1 );
		public extern static int inet6_opt_next( void* p0, uint p1, int p2, byte* p3, uint* p4, void** p5 );
		public extern static int inet6_opt_set_val( void* p0, int p1, void* p2, uint p3 );
		public extern static byte* inet6_option_alloc( cmsghdr* p0, int p1, int p2, int p3 );
		public extern static int inet6_option_append( cmsghdr* p0, byte* p1, int p2, int p3 );
		public extern static int inet6_option_find( cmsghdr* p0, byte** p1, int p2 );
		public extern static int inet6_option_init( void* p0, cmsghdr** p1, int p2 );
		public extern static int inet6_option_next( cmsghdr* p0, byte** p1 );
		public extern static int inet6_option_space( int p0 );
		public extern static int inet6_rth_add( void* p0, in6_addr* p1 );
		public extern static in6_addr* inet6_rth_getaddr( void* p0, int p1 );
		public extern static void* inet6_rth_init( void* p0, uint p1, int p2, int p3 );
		public extern static int inet6_rth_reverse( void* p0, void* p1 );
		public extern static int inet6_rth_segments( void* p0 );
		public extern static uint inet6_rth_space( int p0, int p1 );
		public extern static int inet6_rthdr_add( cmsghdr* p0, in6_addr* p1, uint p2 );
		public extern static in6_addr* inet6_rthdr_getaddr( cmsghdr* p0, int p1 );
		public extern static int inet6_rthdr_getflags( cmsghdr* p0, int p1 );
		public extern static cmsghdr* inet6_rthdr_init( void* p0, int p1 );
		public extern static int inet6_rthdr_lasthop( cmsghdr* p0, uint p1 );
		public extern static int inet6_rthdr_segments( cmsghdr* p0 );
		public extern static uintptr inet6_rthdr_space( int p0, int p1 );

		public extern static int sctp_bindx( int p0, sockaddr* p1, int p2, int p3 );
		public extern static int sctp_connectx( int p0, sockaddr* p1, int p2, uint* p3 );
		public extern static void sctp_freeladdrs( sockaddr* p0 );
		public extern static void sctp_freepaddrs( sockaddr* p0 );
		public extern static int sctp_getaddrlen( byte p0 );
		public extern static uint sctp_getassocid( int p0, sockaddr* p1 );
		public extern static int sctp_getladdrs( int p0, uint p1, sockaddr** p2 );
		public extern static int sctp_getpaddrs( int p0, uint p1, sockaddr** p2 );
		public extern static int sctp_opt_info( int p0, uint p1, int p2, void* p3, uint* p4 );
		public extern static int sctp_peeloff( int p0, uint p1 );
		public extern static intptr sctp_recvmsg( int p0, void* p1, uintptr p2, sockaddr* p3, uint* p4, sctp_sndrcvinfo* p5, int* p6 );
		public extern static intptr sctp_recvv( int p0, iovec* p1, int p2, sockaddr* p3, uint* p4, void* p5, uint* p6, uint* p7, int* p8 );
		public extern static intptr sctp_send( int p0, void* p1, uintptr p2, sctp_sndrcvinfo* p3, int p4 );
		public extern static intptr sctp_sendmsg( int p0, void* p1, uintptr p2, sockaddr* p3, uint p4, uint p5, uint p6, ushort p7, uint p8, uint p9 );
		public extern static intptr sctp_sendmsgx( int sd, void* p1, uintptr p2, sockaddr* p3, int p4, uint p5, uint p6, ushort p7, uint p8, uint p9 );
		public extern static intptr sctp_sendv( int p0, iovec* p1, int p2, sockaddr* p3, int p4, void* p5, uint p6, uint p7, int p8 );
		public extern static intptr sctp_sendx( int p0, void* p1, uintptr p2, sockaddr* p3, int p4, sctp_sndrcvinfo* p5, int p6 );

		public extern static void freeifaddrs( ifaddrs* p0 );
		public extern static void freeifmaddrs( ifmaddrs* p0 );
		public extern static int getifaddrs( ifaddrs** p0 );
		public extern static int getifmaddrs( ifmaddrs** p0 );

		public extern static int dladdr( void* p0, dl_info* p1 );
		public extern static int dlclose( void* p0 );
		public extern static sbyte* dlerror();
		public extern static Functors.Action<__dlfunc_arg> dlfunc( void* p0, sbyte* p1 );
		public extern static int dlinfo( void* p0, int p1, void* p2 );
		public extern static void dllockinit( void* context, Functors.Func<void*, void*> lockCreate, Functors.Action<void*> rlockAcquire, Functors.Action<void*> wlockAcquire, Functors.Action<void*> lockRelease, Functors.Action<void*> lockDestroy, Functors.Action<void*> contextDestroy );
		public extern static void* dlopen( sbyte* p0, int p1 );
		public extern static void* dlsym( void* p0, sbyte* p1 );
		public extern static void* dlvsym( void* p0, sbyte* p1, sbyte* p2 );
		public extern static void* fdlopen( int p0, int p1 );

		public extern static void _longjmp( _jmp_buf* p0, int p1 );
		public extern static int _setjmp( _jmp_buf* p0 );
		public extern static void longjmp( _jmp_buf* p0, int p1 );
		public extern static void longjmperror();
		public extern static int setjmp( _jmp_buf* p0 );
		public extern static void siglongjmp( _sigjmp_buf* p0, int p1 );
		public extern static int sigsetjmp( _sigjmp_buf* p0, int p1 );

		public extern static uint cfgetispeed( termios* p0 );
		public extern static uint cfgetospeed( termios* p0 );
		public extern static void cfmakeraw( termios* p0 );
		public extern static void cfmakesane( termios* p0 );
		public extern static int cfsetispeed( termios* p0, uint p1 );
		public extern static int cfsetospeed( termios* p0, uint p1 );
		public extern static int cfsetspeed( termios* p0, uint p1 );
		public extern static int tcdrain( int p0 );
		public extern static int tcflow( int p0, int p1 );
		public extern static int tcflush( int p0, int p1 );
		public extern static int tcgetattr( int p0, termios* p1 );
		public extern static int tcgetsid( int p0 );
		public extern static int tcsendbreak( int p0, int p1 );
		public extern static int tcsetattr( int p0, int p1, termios* p2 );
		public extern static int tcsetsid( int p0, int p1 );

		public extern static void endpwent();
		public extern static passwd* getpwent();
		public extern static int getpwent_r( passwd* p0, sbyte* p1, uintptr p2, passwd** p3 );
		public extern static passwd* getpwnam( sbyte* p0 );
		public extern static int getpwnam_r( sbyte* p0, passwd* p1, sbyte* p2, uintptr p3, passwd** p4 );
		public extern static passwd* getpwuid( uint p0 );
		public extern static int getpwuid_r( uint p0, passwd* p1, sbyte* p2, uintptr p3, passwd** p4 );
		public extern static int pwcache_userdb( Functors.Func<int, int> p0, Functors.Action p1, Functors.Func<sbyte*, passwd*> p2, Functors.Func<uint, passwd*> p3 );
		public extern static int setpassent( int p0 );
		public extern static void setpwent();
		public extern static int uid_from_user( sbyte* p0, uint* p1 );
		public extern static sbyte* user_from_uid( uint p0, int p1 );

		public extern static void endgrent();
		public extern static group* getgrent();
		public extern static int getgrent_r( group* p0, sbyte* p1, uintptr p2, group** p3 );
		public extern static group* getgrgid( uint p0 );
		public extern static int getgrgid_r( uint p0, group* p1, sbyte* p2, uintptr p3, group** p4 );
		public extern static group* getgrnam( sbyte* p0 );
		public extern static int getgrnam_r( sbyte* p0, group* p1, sbyte* p2, uintptr p3, group** p4 );
		public extern static int gid_from_group( sbyte* p0, uint* p1 );
		public extern static sbyte* group_from_gid( uint p0, int p1 );
		public extern static int pwcache_groupdb( Functors.Func<int, int> p0, Functors.Action p1, Functors.Func<sbyte*, group*> p2, Functors.Func<uint, group*> p3 );
		public extern static int setgrent();
		public extern static int setgroupent( int p0 );

		public extern static int __srget( FILE* p0 );
		public extern static int __swbuf( int p0, FILE* p1 );
		public extern static void clearerr( FILE* p0 );
		public extern static void clearerr_unlocked( FILE* p0 );
		public extern static sbyte* ctermid( sbyte* p0 );
		public extern static sbyte* ctermid_r( sbyte* p0 );
		public extern static int fclose( FILE* p0 );
		public extern static void fcloseall();
		public extern static int fdclose( FILE* p0, int* p1 );
		public extern static FILE* fdopen( int p0, sbyte* p1 );
		public extern static int feof( FILE* p0 );
		public extern static int feof_unlocked( FILE* p0 );
		public extern static int ferror( FILE* p0 );
		public extern static int ferror_unlocked( FILE* p0 );
		public extern static int fflush( FILE* p0 );
		public extern static int fgetc( FILE* p0 );
		public extern static sbyte* fgetln( FILE* p0, uintptr* p1 );
		public extern static int fgetpos( FILE* p0, intptr* p1 );
		public extern static sbyte* fgets( sbyte* p0, int p1, FILE* p2 );
		public extern static int fileno( FILE* p0 );
		public extern static int fileno_unlocked( FILE* p0 );
		public extern static void flockfile( FILE* p0 );
		public extern static FILE* fmemopen( void* p0, uintptr p1, sbyte* p2 );
		public extern static sbyte* fmtcheck( sbyte* p0, sbyte* p1 );
		public extern static FILE* fopen( sbyte* p0, sbyte* p1 );
		public extern static FILE* fopencookie( void* p0, sbyte* p1, cookie_io_functions_t p2 );
		public extern static int fpurge( FILE* p0 );
		public extern static int fputc( int p0, FILE* p1 );
		public extern static int fputs( sbyte* p0, FILE* p1 );
		public extern static uintptr fread( void* p0, uintptr p1, uintptr p2, FILE* p3 );
		public extern static FILE* freopen( sbyte* p0, sbyte* p1, FILE* p2 );
		public extern static int fseek( FILE* p0, intptr p1, int p2 );
		public extern static int fseeko( FILE* p0, intptr p1, int p2 );
		public extern static int fsetpos( FILE* p0, intptr* p1 );
		public extern static intptr ftell( FILE* p0 );
		public extern static intptr ftello( FILE* p0 );
		public extern static int ftrylockfile( FILE* p0 );
		public extern static void funlockfile( FILE* p0 );
		public extern static FILE* funopen( void* p0, Functors.Func<void*, sbyte*, int, int> p1, Functors.Func<void*, sbyte*, int, int> p2, Functors.Func<void*, intptr, int, intptr> p3, Functors.Func<void*, int> p4 );
		public extern static uintptr fwrite( void* p0, uintptr p1, uintptr p2, FILE* p3 );
		public extern static int getc( FILE* p0 );
		public extern static int getc_unlocked( FILE* p0 );
		public extern static int getchar();
		public extern static int getchar_unlocked();
		public extern static intptr getdelim( sbyte** p0, uintptr* p1, int p2, FILE* p3 );
		public extern static intptr getline( sbyte** p0, uintptr* p1, FILE* p2 );
		public extern static sbyte* gets_s( sbyte* p0, uintptr p1 );
		public extern static int getw( FILE* p0 );
		public extern static FILE* open_memstream( sbyte** p0, uintptr* p1 );
		public extern static int pclose( FILE* p0 );
		public extern static void perror( sbyte* p0 );
		public extern static FILE* popen( sbyte* p0, sbyte* p1 );
		public extern static int putc( int p0, FILE* p1 );
		public extern static int putc_unlocked( int p0, FILE* p1 );
		public extern static int putchar( int p0 );
		public extern static int putchar_unlocked( int p0 );
		public extern static int puts( sbyte* p0 );
		public extern static int putw( int p0, FILE* p1 );
		public extern static int remove( sbyte* p0 );
		public extern static int rename( sbyte* p0, sbyte* p1 );
		public extern static int renameat( int p0, sbyte* p1, int p2, sbyte* p3 );
		public extern static void rewind( FILE* p0 );
		public extern static void setbuf( FILE* p0, sbyte* p1 );
		public extern static void setbuffer( FILE* p0, sbyte* p1, int p2 );
		public extern static int setlinebuf( FILE* p0 );
		public extern static int setvbuf( FILE* p0, sbyte* p1, int p2, uintptr p3 );
		public extern static FILE* tmpfile();
		public extern static int ungetc( int p0, FILE* p1 );
		public extern static int vasprintf( sbyte** p0, sbyte* p1, void* p2 );
		public extern static int vdprintf( int p0, sbyte* p1, void* p2 );
		public extern static int vfprintf( FILE* p0, sbyte* p1, void* p2 );
		public extern static int vfscanf( FILE* p0, sbyte* p1, void* p2 );
		public extern static int vprintf( sbyte* p0, void* p1 );
		public extern static int vscanf( sbyte* p0, void* p1 );
		public extern static int vsnprintf( sbyte* p0, uintptr p1, sbyte* p2, void* p3 );
		public extern static int vsprintf( sbyte* p0, sbyte* p1, void* p2 );
		public extern static int vsscanf( sbyte* p0, sbyte* p1, void* p2 );

		public extern static int ___mb_cur_max();
		public extern static void _Exit( int p0 );
		public extern static intptr a64l( sbyte* p0 );
		public extern static void abort();
		public extern static void abort_handler_s( sbyte* p0, void* p1, int p2 );
		public extern static void abort2( sbyte* p0, int p1, void** p2 );
		[BackendHintReadNone]
		public extern static int abs( int p0 );
		public extern static void* aligned_alloc( uintptr p0, uintptr p1 );
		public extern static uint arc4random();
		public extern static void arc4random_buf( void* p0, uintptr p1 );
		public extern static uint arc4random_uniform( uint p0 );
		public extern static int at_quick_exit( Functors.Action p0 );
		public extern static int atexit( Functors.Action p0 );
		public extern static double atof( sbyte* p0 );
		public extern static int atoi( sbyte* p0 );
		public extern static intptr atol( sbyte* p0 );
		public extern static long atoll( sbyte* p0 );
		public extern static void* bsearch( void* p0, void* p1, uintptr p2, uintptr p3, Functors.Func<void*, void*, int> p4 );
		public extern static void* calloc( uintptr p0, uintptr p1 );
		public extern static sbyte* cgetcap( sbyte* p0, sbyte* p1, int p2 );
		public extern static int cgetclose();
		public extern static int cgetent( sbyte** p0, sbyte** p1, sbyte* p2 );
		public extern static int cgetfirst( sbyte** p0, sbyte** p1 );
		public extern static int cgetmatch( sbyte* p0, sbyte* p1 );
		public extern static int cgetnext( sbyte** p0, sbyte** p1 );
		public extern static int cgetnum( sbyte* p0, sbyte* p1, intptr* p2 );
		public extern static int cgetset( sbyte* p0 );
		public extern static int cgetstr( sbyte* p0, sbyte* p1, sbyte** p2 );
		public extern static int cgetustr( sbyte* p0, sbyte* p1, sbyte** p2 );
		public extern static int daemon( int p0, int p1 );
		public extern static int daemonfd( int p0, int p1 );
		public extern static sbyte* devname( uint p0, ushort p1 );
		public extern static sbyte* devname_r( uint p0, ushort p1, sbyte* p2, int p3 );
		[BackendHintReadNone]
		public extern static div_t div( int p0, int p1 );
		public extern static double drand48();
		public extern static double erand48( ushort* p0 );
		public extern static void exit( int p0 );
		public extern static sbyte* fdevname( int p0 );
		public extern static sbyte* fdevname_r( int p0, sbyte* p1, int p2 );
		public extern static void free( void* p0 );
		public extern static sbyte* getbsize( int* p0, intptr* p1 );
		public extern static CUtf8String getenv( CUtf8String p0 );
		public extern static int getloadavg( double* p0, int p1 );
		public extern static sbyte* getprogname();
		public extern static int getsubopt( sbyte** p0, sbyte** p1, sbyte** p2 );
		public extern static int grantpt( int p0 );
		public extern static int heapsort( void* p0, uintptr p1, uintptr p2, Functors.Func<void*, void*, int> p3 );
		public extern static void ignore_handler_s( sbyte* p0, void* p1, int p2 );
		public extern static sbyte* initstate( uintptr p0, sbyte* p1, intptr p2 );
		public extern static intptr jrand48( ushort* p0 );
		public extern static sbyte* l64a( intptr p0 );
		public extern static int l64a_r( intptr p0, sbyte* p1, int p2 );
		[BackendHintReadNone]
		public extern static intptr labs( intptr p0 );
		public extern static void lcong48( ushort* p0 );
		[BackendHintReadNone]
		public extern static ldiv_t ldiv( intptr p0, intptr p1 );
		[BackendHintReadNone]
		public extern static long llabs( long p0 );
		[BackendHintReadNone]
		public extern static lldiv_t lldiv( long p0, long p1 );
		public extern static intptr lrand48();
		public extern static void* malloc( uintptr p0 );
		public extern static int mblen( sbyte* p0, uintptr p1 );
		public extern static uintptr mbstowcs( char* p0, sbyte* p1, uintptr p2 );
		public extern static int mbtowc( char* p0, sbyte* p1, uintptr p2 );
		public extern static int mergesort( void* p0, uintptr p1, uintptr p2, Functors.Func<void*, void*, int> p3 );
		public extern static sbyte* mkdtemp( sbyte* p0 );
		public extern static int mkostemp( sbyte* p0, int p1 );
		public extern static int mkostemps( sbyte* p0, int p1, int p2 );
		public extern static int mkstemp( sbyte* p0 );
		public extern static intptr mrand48();
		public extern static intptr nrand48( ushort* p0 );
		public extern static int posix_memalign( void** p0, uintptr p1, uintptr p2 );
		public extern static int posix_openpt( int p0 );
		public extern static sbyte* ptsname( int p0 );
		public extern static int putenv( sbyte* p0 );
		public extern static void qsort( void* p0, uintptr p1, uintptr p2, Functors.Func<void*, void*, int> p3 );
		public extern static void qsort_r( void* p0, uintptr p1, uintptr p2, void* p3, Functors.Func<void*, void*, void*, int> p4 );
		public extern static void quick_exit( int p0 );
		public extern static int radixsort( byte** p0, int p1, byte* p2, uint p3 );
		public extern static int rand();
		public extern static int rand_r( uint* p0 );
		public extern static intptr random();
		public extern static void* realloc( void* p0, uintptr p1 );
		public extern static void* reallocarray( void* p0, uintptr p1, uintptr p2 );
		public extern static void* reallocf( void* p0, uintptr p1 );
		public extern static sbyte* realpath( sbyte* p0, sbyte* p1 );
		public extern static int rpmatch( sbyte* p0 );
		public extern static ushort* seed48( ushort* p0 );
		public extern static Functors.Action<sbyte*, void*, int> set_constraint_handler_s( Functors.Action<sbyte*, void*, int> handler );
		public extern static int setenv( CUtf8String p0, CUtf8String p1, int p2 );
		public extern static void setprogname( CUtf8String p0 );
		public extern static sbyte* setstate( sbyte* p0 );
		public extern static int sradixsort( byte** p0, int p1, byte* p2, uint p3 );
		public extern static void srand( uint p0 );
		public extern static void srand48( intptr p0 );
		public extern static void sranddev();
		public extern static void srandom( uintptr p0 );
		public extern static void srandomdev();
		public extern static double strtod( sbyte* p0, sbyte** p1 );
		public extern static float strtof( sbyte* p0, sbyte** p1 );
		public extern static intptr strtol( sbyte* p0, sbyte** p1, int p2 );
		public extern static LittleEndianIEEE754_80 strtold( sbyte* p0, sbyte** p1 );
		public extern static long strtoll( sbyte* p0, sbyte** p1, int p2 );
		public extern static long strtonum( sbyte* p0, long p1, long p2, sbyte** p3 );
		public extern static intptr strtoq( sbyte* p0, sbyte** p1, int p2 );
		public extern static uintptr strtoul( sbyte* p0, sbyte** p1, int p2 );
		public extern static ulong strtoull( sbyte* p0, sbyte** p1, int p2 );
		public extern static uintptr strtouq( sbyte* p0, sbyte** p1, int p2 );
		public extern static int system( sbyte* p0 );
		public extern static int unlockpt( int p0 );
		public extern static int unsetenv( sbyte* p0 );
		public extern static uintptr wcstombs( sbyte* p0, char* p1, uintptr p2 );
		public extern static int wctomb( sbyte* p0, char p1 );

		public extern static int sched_get_priority_max( int p0 );
		public extern static int sched_get_priority_min( int p0 );
		public extern static int sched_getparam( int p0, sched_param* p1 );
		public extern static int sched_getscheduler( int p0 );
		public extern static int sched_rr_get_interval( int p0, timespec* p1 );
		public extern static int sched_setparam( int p0, sched_param* p1 );
		public extern static int sched_setscheduler( int p0, int p1, sched_param* p2 );
		public extern static int sched_yield();

		public extern static void __pthread_cleanup_pop_imp( int p0 );
		public extern static void __pthread_cleanup_push_imp( Functors.Action<void*> p0, void* p1, _pthread_cleanup_info* p2 );
		public extern static int pthread_atfork( Functors.Action p0, Functors.Action p1, Functors.Action p2 );
		public extern static int pthread_attr_destroy( pthread_attr_t* p0 );
		public extern static int pthread_attr_getdetachstate( pthread_attr_t* p0, int* p1 );
		public extern static int pthread_attr_getguardsize( pthread_attr_t* p0, uintptr* p1 );
		public extern static int pthread_attr_getinheritsched( pthread_attr_t* p0, int* p1 );
		public extern static int pthread_attr_getschedparam( pthread_attr_t* p0, sched_param* p1 );
		public extern static int pthread_attr_getschedpolicy( pthread_attr_t* p0, int* p1 );
		public extern static int pthread_attr_getscope( pthread_attr_t* p0, int* p1 );
		public extern static int pthread_attr_getstackaddr( pthread_attr_t* p0, void** p1 );
		public extern static int pthread_attr_getstacksize( pthread_attr_t* p0, uintptr* p1 );
		public extern static int pthread_attr_init( pthread_attr_t* p0 );
		public extern static int pthread_attr_setdetachstate( pthread_attr_t* p0, int p1 );
		public extern static int pthread_attr_setguardsize( pthread_attr_t* p0, uintptr p1 );
		public extern static int pthread_attr_setinheritsched( pthread_attr_t* p0, int p1 );
		public extern static int pthread_attr_setschedparam( pthread_attr_t* p0, sched_param* p1 );
		public extern static int pthread_attr_setschedpolicy( pthread_attr_t* p0, int p1 );
		public extern static int pthread_attr_setscope( pthread_attr_t* p0, int p1 );
		public extern static int pthread_attr_setstackaddr( pthread_attr_t* p0, void* p1 );
		public extern static int pthread_attr_setstacksize( pthread_attr_t* p0, uintptr p1 );
		public extern static int pthread_cancel( pthread_t p0 );
		public extern static int pthread_cond_broadcast( pthread_cond_t* p0 );
		public extern static int pthread_cond_destroy( pthread_cond_t* p0 );
		public extern static int pthread_cond_init( pthread_cond_t* p0, pthread_condattr_t* p1 );
		public extern static int pthread_cond_signal( pthread_cond_t* p0 );
		public extern static int pthread_cond_timedwait( pthread_cond_t* p0, pthread_mutex_t* p1, timespec* p2 );
		public extern static int pthread_cond_wait( pthread_cond_t* p0, pthread_mutex_t* p1 );
		public extern static int pthread_detach( pthread_t p0 );
		public extern static int pthread_equal( pthread_t p0, pthread_t p1 );
		public extern static void pthread_exit( void* p0 );
		public extern static void* pthread_getspecific( pthread_key_t p0 );
		public extern static int pthread_join( pthread_t p0, void** p1 );
		public extern static int pthread_key_create( pthread_key_t* p0, Functors.Action<void*> p1 );
		public extern static int pthread_key_delete( pthread_key_t p0 );
		public extern static int pthread_mutex_consistent( pthread_mutex_t* mutex );
		public extern static int pthread_mutex_destroy( pthread_mutex_t* p0 );
		public extern static int pthread_mutex_init( pthread_mutex_t* p0, pthread_mutexattr_t* p1 );
		public extern static int pthread_mutex_lock( pthread_mutex_t* p0 );
		public extern static int pthread_mutex_trylock( pthread_mutex_t* p0 );
		public extern static int pthread_mutex_unlock( pthread_mutex_t* p0 );
		public extern static int pthread_mutexattr_destroy( pthread_mutexattr_t* p0 );
		public extern static int pthread_mutexattr_getrobust( pthread_mutexattr_t* p0, int* p1 );
		public extern static int pthread_mutexattr_init( pthread_mutexattr_t* p0 );
		public extern static int pthread_mutexattr_setrobust( pthread_mutexattr_t* p0, int p1 );
		public extern static int pthread_mutexattr_settype( pthread_mutexattr_t* p0, pthread_mutextype p1 );
		public extern static int pthread_once( pthread_once* p0, Functors.Action p1 );
		public extern static int pthread_rwlock_destroy( pthread_rwlock_t* p0 );
		public extern static int pthread_rwlock_init( pthread_rwlock_t* p0, pthread_rwlockattr_t* p1 );
		public extern static int pthread_rwlock_rdlock( pthread_rwlock_t* p0 );
		public extern static int pthread_rwlock_tryrdlock( pthread_rwlock_t* p0 );
		public extern static int pthread_rwlock_trywrlock( pthread_rwlock_t* p0 );
		public extern static int pthread_rwlock_unlock( pthread_rwlock_t* p0 );
		public extern static int pthread_rwlock_wrlock( pthread_rwlock_t* p0 );
		public extern static pthread_t pthread_self();
		public extern static int pthread_setcancelstate( int p0, int* p1 );
		public extern static int pthread_setcanceltype( int p0, int* p1 );
		public extern static int pthread_setspecific( pthread_key_t p0, void* p1 );
		public extern static void pthread_testcancel();

		public extern static void __FreeBSD_libc_enter_restricted_mode();
		public extern static void _exit( int p0 );
		public extern static int access( CUtf8String p0, int p1 );
		public extern static int acct( sbyte* p0 );
		public extern static uint alarm( uint p0 );
		public extern static int brk( void* p0 );
		public extern static int chdir( CUtf8String p0 );
		public extern static int check_utility_compat( sbyte* p0 );
		public extern static int chown( CUtf8String p0, uint p1, uint p2 );
		public extern static int chroot( sbyte* p0 );
		public extern static int close( IOHandle p0 );
		public extern static void closefrom( int p0 );
		public extern static uintptr confstr( int p0, sbyte* p1, uintptr p2 );
		public extern static int dup( int p0 );
		public extern static int dup2( int p0, int p1 );
		public extern static int dup3( int p0, int p1, int p2 );
		public extern static int eaccess( sbyte* p0, int p1 );
		public extern static void endusershell();
		public extern static int exect( sbyte* p0, sbyte** p1, sbyte** p2 );
		public extern static int execv( sbyte* p0, sbyte** p1 );
		public extern static int execve( sbyte* p0, sbyte** p1, sbyte** p2 );
		public extern static int execvp( sbyte* p0, sbyte** p1 );
		public extern static int execvP( sbyte* p0, sbyte* p1, sbyte** p2 );
		public extern static int faccessat( int p0, sbyte* p1, int p2, int p3 );
		public extern static int fchdir( int p0 );
		public extern static int fchown( int p0, uint p1, uint p2 );
		public extern static int fchownat( int p0, sbyte* p1, uint p2, uint p3, int p4 );
		public extern static int fdatasync( int p0 );
		public extern static int feature_present( sbyte* p0 );
		public extern static int fexecve( int p0, sbyte** p1, sbyte** p2 );
		public extern static sbyte* fflagstostr( uintptr p0 );
		public extern static int fork();
		public extern static intptr fpathconf( int p0, int p1 );
		public extern static int fsync( IOHandle p0 );
		public extern static sbyte* getcwd( sbyte* p0, uintptr p1 );
		public extern static int getdomainname( sbyte* p0, int p1 );
		public extern static int getdtablesize();
		public extern static uint getegid();
		public extern static int getentropy( void* p0, uintptr p1 );
		public extern static uint geteuid();
		public extern static uint getgid();
		public extern static int getgrouplist( sbyte* p0, uint p1, uint* p2, int* p3 );
		public extern static int getgroups( int p0, uint* p1 );
		public extern static intptr gethostid();
		public extern static int gethostname( sbyte* p0, uintptr p1 );
		public extern static sbyte* getlogin();
		public extern static int getlogin_r( sbyte* p0, int p1 );
		public extern static int getloginclass( sbyte* p0, uintptr p1 );
		public extern static ushort getmode( void* p0, ushort p1 );
		public extern static int getopt( int p0, sbyte** p1, sbyte* p2 );
		public extern static int getosreldate();
		[BackendHintReadNone]
		public extern static int getpagesize();
		public extern static sbyte* getpass( sbyte* p0 );
		public extern static int getpeereid( int p0, uint* p1, uint* p2 );
		public extern static int getpgid( int pid );
		public extern static int getpgrp();
		public extern static int getpid();
		public extern static int getppid();
		public extern static int getresgid( uint* p0, uint* p1, uint* p2 );
		public extern static int getresuid( uint* p0, uint* p1, uint* p2 );
		public extern static int getsid( int pid );
		public extern static uint getuid();
		public extern static sbyte* getusershell();
		public extern static sbyte* getwd( sbyte* p0 );
		public extern static int initgroups( sbyte* p0, uint p1 );
		public extern static int iruserok( uintptr p0, int p1, sbyte* p2, sbyte* p3 );
		public extern static int iruserok_sa( void* p0, int p1, int p2, sbyte* p3, sbyte* p4 );
		public extern static int isatty( int p0 );
		public extern static int issetugid();
		public extern static int lchown( CUtf8String p0, uint p1, uint p2 );
		public extern static int link( CUtf8String p0, CUtf8String p1 );
		public extern static int linkat( IOHandle p0, CUtf8String p1, int p2, CUtf8String p3, int p4 );
		public extern static int lockf( int p0, int p1, intptr p2 );
		public extern static intptr lpathconf( CUtf8String p0, int p1 );
		public extern static int mkstemps( sbyte* p0, int p1 );
		public extern static int nfssvc( int p0, void* p1 );
		public extern static int nice( int p0 );
		public extern static int nlm_syscall( int p0, int p1, int p2, sbyte** p3 );
		public extern static intptr pathconf( sbyte* p0, int p1 );
		public extern static int pause();
		public extern static int pipe( PipeHandle[2]& p0 );
		public extern static int pipe2( int* p0, int p1 );
		public extern static intptr pread( int p0, void* p1, uintptr p2, intptr p3 );
		public extern static int profil( sbyte* p0, uintptr p1, uintptr p2, int p3 );
		public extern static intptr pwrite( int p0, void* p1, uintptr p2, intptr p3 );
		public extern static int rcmd( sbyte** p0, int p1, sbyte* p2, sbyte* p3, sbyte* p4, int* p5 );
		public extern static int rcmd_af( sbyte** p0, int p1, sbyte* p2, sbyte* p3, sbyte* p4, int* p5, int p6 );
		public extern static int rcmdsh( sbyte** p0, int p1, sbyte* p2, sbyte* p3, sbyte* p4, sbyte* p5 );
		public extern static intptr read( IOHandle p0, void* p1, intptr p2 );
		public extern static intptr readlink( CUtf8String p0, sbyte* p1, uintptr p2 );
		public extern static intptr readlinkat( IOHandle p0, CUtf8String p1, sbyte* p2, uintptr p3 );
		public extern static int reboot( int p0 );
		public extern static int revoke( sbyte* p0 );
		public extern static int rfork( int p0 );
		public extern static int rfork_thread( int p0, void* p1, Functors.Func<void*, int> p2, void* p3 );
		public extern static int rmdir( sbyte* p0 );
		public extern static int rresvport( int* p0 );
		public extern static int rresvport_af( int* p0, int p1 );
		public extern static int ruserok( sbyte* p0, int p1, sbyte* p2, sbyte* p3 );
		public extern static void* sbrk( intptr p0 );
		public extern static int setdomainname( sbyte* p0, int p1 );
		public extern static int setegid( uint p0 );
		public extern static int seteuid( uint p0 );
		public extern static int setgid( uint p0 );
		public extern static int setgroups( int p0, uint* p1 );
		public extern static void sethostid( intptr p0 );
		public extern static int sethostname( sbyte* p0, int p1 );
		public extern static int setlogin( sbyte* p0 );
		public extern static int setloginclass( sbyte* p0 );
		public extern static void* setmode( sbyte* p0 );
		public extern static int setpgid( int p0, int p1 );
		public extern static int setpgrp( int pid, int pgrp );
		public extern static int setregid( uint p0, uint p1 );
		public extern static int setresgid( uint p0, uint p1, uint p2 );
		public extern static int setresuid( uint p0, uint p1, uint p2 );
		public extern static int setreuid( uint p0, uint p1 );
		public extern static int setrgid( uint p0 );
		public extern static int setruid( uint p0 );
		public extern static int setsid();
		public extern static int setuid( uint p0 );
		public extern static void setusershell();
		public extern static uint sleep( uint p0 );
		public extern static int strtofflags( sbyte** p0, uintptr* p1, uintptr* p2 );
		public extern static void swab( void* p0, void* p1, intptr p2 );
		public extern static int swapoff( CUtf8String p0 );
		public extern static int swapon( CUtf8String p0 );
		public extern static int symlink( CUtf8String p0, CUtf8String p1 );
		public extern static int symlinkat( CUtf8String p0, int p1, sbyte* p2 );
		public extern static void sync();
		public extern static intptr sysconf( SystemConfigurationProperty p0 );
		public extern static int tcgetpgrp( int p0 );
		public extern static int tcsetpgrp( int p0, int p1 );
		public extern static sbyte* ttyname( int p0 );
		public extern static int ttyname_r( int p0, sbyte* p1, uintptr p2 );
		public extern static uint ualarm( uint p0, uint p1 );
		public extern static int undelete( CUtf8String p0 );
		public extern static int unlink( CUtf8String p0 );
		public extern static int unlinkat( IOHandle p0, CUtf8String p1, SymlinkFollowOption p2 );
		public extern static int usleep( uint p0 );
		public extern static void* valloc( uintptr p0 );
		public extern static int vfork();
		public extern static intptr write( IOHandle p0, void* p1, intptr p2 );

		public extern static DIR* __opendir2( CUtf8String p0, int p1 );
		public extern static int alphasort( dirent** p0, dirent** p1 );
		public extern static int closedir( DIR* p0 );
		public extern static int dirfd( DIR* p0 );
		public extern static int fdclosedir( DIR* p0 );
		public extern static DIR* fdopendir( int p0 );
		public extern static int getdents( DirectoryHandle p0, sbyte* p1, int p2 );
		public extern static int getdirentries( DirectoryHandle p0, sbyte* p1, int p2, intptr* p3 );
		public extern static DIR* opendir( CUtf8String p0 );
		public extern static dirent* readdir( DIR* p0 );
		public extern static int readdir_r( DIR* p0, dirent* p1, dirent** p2 );
		public extern static void rewinddir( DIR* p0 );
		public extern static int scandir( CUtf8String p0, dirent*** p1, Functors.Func<dirent*, int> p2, Functors.Func<dirent**, dirent**, int> p3 );
		public extern static void seekdir( DIR* p0, intptr p1 );
		public extern static intptr telldir( DIR* p0 );

		public extern static int sem_clockwait_np( sem_t* p0, int p1, int p2, timespec* p3, timespec* p4 );
		public extern static int sem_close( sem_t* p0 );
		public extern static int sem_destroy( sem_t* p0 );
		public extern static int sem_getvalue( sem_t* p0, int* p1 );
		public extern static int sem_init( sem_t* p0, int p1, uint p2 );
		public extern static int sem_post( sem_t* p0 );
		public extern static int sem_timedwait( sem_t* p0, timespec& p1 );
		public extern static int sem_trywait( sem_t* p0 );
		public extern static int sem_unlink( CUtf8String p0 );
		public extern static int sem_wait( sem_t* p0 );

		public extern static int __fillcontextx( sbyte* ctx );
		public extern static int __fillcontextx2( sbyte* ctx );
		public extern static int __getcontextx_size();
		public extern static int getcontext( ucontext_t* p0 );
		public extern static ucontext_t* getcontextx();
		public extern static int setcontext( ucontext_t* p0 );
		public extern static int signalcontext( ucontext_t* p0, int p1, Functors.Action<int> p2 );
		public extern static int swapcontext( ucontext_t* p0, ucontext_t* p1 );

		public extern static int kill( int p0, int p1 );
		public extern static int killpg( int p0, int p1 );
		public extern static void psignal( uint p0, sbyte* p1 );
		public extern static int pthread_kill( pthread_t p0, SignalCode p1 );
		public extern static int pthread_sigmask( ApplySignalCommand p0, sigset_t* p1, sigset_t* p2 );
		public extern static int raise( int p0 );
		public extern static int sigaction( SignalCode p0, sigaction* p1, sigaction* p2 );
		public extern static int sigaddset( sigset_t* p0, SignalCode p1 );
		public extern static int sigaltstack( sigaltstack* p0, sigaltstack* p1 );
		public extern static int sigblock( int p0 );
		public extern static int sigdelset( sigset_t* p0, SignalCode p1 );
		public extern static int sigemptyset( sigset_t* p0 );
		public extern static int sigfillset( sigset_t* p0 );
		public extern static int sighold( int p0 );
		public extern static int sigignore( int p0 );
		public extern static int siginterrupt( int p0, int p1 );
		public extern static int sigismember( sigset_t* p0, SignalCode p1 );
		public extern static int sigpause( int p0 );
		public extern static int sigpending( sigset_t* p0 );
		public extern static int sigprocmask( ApplySignalCommand p0, sigset_t* p1, sigset_t* p2 );
		public extern static int sigqueue( int p0, int p1, sigval p2 );
		public extern static int sigrelse( int p0 );
		public extern static int sigreturn( ucontext_t* p0 );
		public extern static Functors.Action<int> sigset( int p0, Functors.Action<int> p1 );
		public extern static int sigsetmask( int p0 );
		public extern static int sigsuspend( sigset_t* p0 );
		public extern static int sigtimedwait( sigset_t* p0, siginfo_t* p1, timespec* p2 );
		public extern static int sigvec( int p0, sigvec* p1, sigvec* p2 );
		public extern static int sigwait( sigset_t* p0, int* p1 );
		public extern static int sigwaitinfo( sigset_t* p0, siginfo_t* p1 );
		public extern static int xsi_sigpause( int p0 );

		[BackendHintReadOnly]
		public extern static int bcmp( void* p0, void* p1, uintptr p2 );
		public extern static void bcopy( void* p0, void* p1, uintptr p2 );
		public extern static void bzero( void* p0, uintptr p1 );
		public extern static void explicit_bzero( void* p0, uintptr p1 );
		[BackendHintReadNone]
		public extern static int ffs( int p0 );
		[BackendHintReadNone]
		public extern static int ffsl( intptr p0 );
		[BackendHintReadNone]
		public extern static int ffsll( long p0 );
		[BackendHintReadNone]
		public extern static int fls( int p0 );
		[BackendHintReadNone]
		public extern static int flsl( intptr p0 );
		[BackendHintReadNone]
		public extern static int flsll( long p0 );
		[BackendHintReadOnly]
		public extern static sbyte* index( sbyte* p0, int p1 );
		[BackendHintReadOnly]
		public extern static sbyte* rindex( sbyte* p0, int p1 );
		[BackendHintReadOnly]
		public extern static int strcasecmp( sbyte* p0, sbyte* p1 );
		[BackendHintReadOnly]
		public extern static int strncasecmp( sbyte* p0, sbyte* p1, uintptr p2 );

		public extern static int strcasecmp_l( sbyte* p0, sbyte* p1, locale_t* p2 );
		public extern static int strncasecmp_l( sbyte* p0, sbyte* p1, uintptr p2, locale_t* p3 );

		public extern static void* memccpy( void* p0, void* p1, int p2, uintptr p3 );
		[BackendHintReadOnly]
		public extern static void* memchr( void* p0, int p1, uintptr p2 );
		public extern static void* memcpy( void* p0, void* p1, uintptr p2 );
		[BackendHintReadOnly]
		public extern static void* memmem( void* p0, uintptr p1, void* p2, uintptr p3 );
		public extern static void* memmove( void* p0, void* p1, uintptr p2 );
		[BackendHintReadOnly]
		public extern static void* memrchr( void* p0, int p1, uintptr p2 );
		public extern static void* memset( void* p0, int p1, uintptr p2 );
		public extern static int memset_s( void* p0, uintptr p1, int p2, uintptr p3 );
		public extern static sbyte* stpcpy( sbyte* p0, sbyte* p1 );
		public extern static sbyte* stpncpy( sbyte* p0, sbyte* p1, uintptr p2 );
		[BackendHintReadOnly]
		public extern static sbyte* strcasestr( sbyte* p0, sbyte* p1 );
		public extern static sbyte* strcat( sbyte* p0, sbyte* p1 );
		[BackendHintReadOnly]
		public extern static sbyte* strchr( sbyte* p0, int p1 );
		[BackendHintReadOnly]
		public extern static sbyte* strchrnul( sbyte* p0, int p1 );
		[BackendHintReadOnly]
		public extern static int strcmp( sbyte* p0, sbyte* p1 );
		public extern static int strcoll( sbyte* p0, sbyte* p1 );
		public extern static sbyte* strcpy( sbyte* p0, sbyte* p1 );
		[BackendHintReadOnly]
		public extern static uintptr strcspn( sbyte* p0, sbyte* p1 );
		public extern static sbyte* strdup( sbyte* p0 );
		public extern static CString strerror( SystemError p0 );
		public extern static int strerror_r( int p0, sbyte* p1, uintptr p2 );
		public extern static uintptr strlcat( sbyte* p0, sbyte* p1, uintptr p2 );
		public extern static uintptr strlcpy( sbyte* p0, sbyte* p1, uintptr p2 );
		[BackendHintReadOnly]
		public extern static uintptr strlen( sbyte* p0 );
		public extern static void strmode( int p0, sbyte* p1 );
		public extern static sbyte* strncat( sbyte* p0, sbyte* p1, uintptr p2 );
		[BackendHintReadOnly]
		public extern static int strncmp( sbyte* p0, sbyte* p1, uintptr p2 );
		public extern static sbyte* strncpy( sbyte* p0, sbyte* p1, uintptr p2 );
		public extern static sbyte* strndup( sbyte* p0, uintptr p1 );
		[BackendHintReadOnly]
		public extern static uintptr strnlen( sbyte* p0, uintptr p1 );
		[BackendHintReadOnly]
		public extern static sbyte* strnstr( sbyte* p0, sbyte* p1, uintptr p2 );
		[BackendHintReadOnly]
		public extern static sbyte* strpbrk( sbyte* p0, sbyte* p1 );
		[BackendHintReadOnly]
		public extern static sbyte* strrchr( sbyte* p0, int p1 );
		public extern static sbyte* strsep( sbyte** p0, sbyte* p1 );
		public extern static sbyte* strsignal( int p0 );
		[BackendHintReadOnly]
		public extern static uintptr strspn( sbyte* p0, sbyte* p1 );
		[BackendHintReadOnly]
		public extern static sbyte* strstr( sbyte* p0, sbyte* p1 );
		public extern static sbyte* strtok( sbyte* p0, sbyte* p1 );
		public extern static sbyte* strtok_r( sbyte* p0, sbyte* p1, sbyte** p2 );
		public extern static uintptr strxfrm( sbyte* p0, sbyte* p1, uintptr p2 );
		public extern static int timingsafe_bcmp( void* p0, void* p1, uintptr p2 );
		public extern static int timingsafe_memcmp( void* p0, void* p1, uintptr p2 );

		public extern static int strcoll_l( sbyte* p0, sbyte* p1, locale_t* p2 );
		public extern static uintptr strxfrm_l( sbyte* p0, sbyte* p1, uintptr p2, locale_t* p3 );

		[BackendHintReadNone]
		public extern static int __fpclassifyd( double p0 );
		[BackendHintReadNone]
		public extern static int __fpclassifyf( float p0 );
		[BackendHintReadNone]
		public extern static int __fpclassifyl( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static int __isinf( double p0 );
		[BackendHintReadNone]
		public extern static int __isinff( float p0 );
		[BackendHintReadNone]
		public extern static int __isinfl( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static double fabs( double p0 );
		public extern static double frexp( double p0, int* p1 );
		[BackendHintReadNone]
		public extern static int isnanf( float p0 );
		public extern static double ldexp( double p0, int p1 );
		public extern static double modf( double p0, double* p1 );
	}
	[ExternLibrary( Image = "/usr/lib/libthr.so" )]
	public static partial struct PthreadsApi {
		public extern static int pthread_attr_getstack( pthread_attr_t* p0, void** p1, uintptr* p2 );
		public extern static int pthread_attr_setstack( pthread_attr_t* p0, void* p1, uintptr p2 );
		public extern static int pthread_barrier_destroy( pthread_barrier_t* p0 );
		public extern static int pthread_barrier_init( pthread_barrier_t* p0, pthread_barrierattr_t* p1, uint p2 );
		public extern static int pthread_barrier_wait( pthread_barrier_t* p0 );
		public extern static int pthread_barrierattr_destroy( pthread_barrierattr_t* p0 );
		public extern static int pthread_barrierattr_getpshared( pthread_barrierattr_t* p0, int* p1 );
		public extern static int pthread_barrierattr_init( pthread_barrierattr_t* p0 );
		public extern static int pthread_barrierattr_setpshared( pthread_barrierattr_t* p0, int p1 );
		public extern static int pthread_condattr_destroy( pthread_condattr_t* p0 );
		public extern static int pthread_condattr_getclock( pthread_condattr_t* p0, int* p1 );
		public extern static int pthread_condattr_getpshared( pthread_condattr_t* p0, int* p1 );
		public extern static int pthread_condattr_init( pthread_condattr_t* p0 );
		public extern static int pthread_condattr_setclock( pthread_condattr_t* p0, int p1 );
		public extern static int pthread_condattr_setpshared( pthread_condattr_t* p0, int p1 );
		public extern static int pthread_getconcurrency();
		public extern static int pthread_getcpuclockid( pthread_t p0, int* p1 );
		public extern static int pthread_getprio( pthread_t p0 );
		public extern static int pthread_getschedparam( pthread_t pthread, int* p1, sched_param* p2 );
		public extern static int pthread_mutex_getprioceiling( pthread_mutex_t* p0, int* p1 );
		public extern static int pthread_mutex_setprioceiling( pthread_mutex_t* p0, int p1, int* p2 );
		public extern static int pthread_mutex_timedlock( pthread_mutex_t* p0, timespec* p1 );
		public extern static int pthread_mutexattr_getprioceiling( pthread_mutexattr_t* p0, int* p1 );
		public extern static int pthread_mutexattr_getprotocol( pthread_mutexattr_t* p0, int* p1 );
		public extern static int pthread_mutexattr_getpshared( pthread_mutexattr_t* p0, Boolean32* p1 );
		public extern static int pthread_mutexattr_gettype( pthread_mutexattr_t* p0, pthread_mutextype* p1 );
		public extern static int pthread_mutexattr_setprioceiling( pthread_mutexattr_t* p0, int p1 );
		public extern static int pthread_mutexattr_setprotocol( pthread_mutexattr_t* p0, int p1 );
		public extern static int pthread_mutexattr_setpshared( pthread_mutexattr_t* p0, Boolean32 p1 );
		public extern static int pthread_rwlock_timedrdlock( pthread_rwlock_t* p0, timespec& p1 );
		public extern static int pthread_rwlock_timedwrlock( pthread_rwlock_t* p0, timespec& p1 );
		public extern static int pthread_rwlockattr_destroy( pthread_rwlockattr_t* p0 );
		public extern static int pthread_rwlockattr_getpshared( pthread_rwlockattr_t* p0, int* p1 );
		public extern static int pthread_rwlockattr_init( pthread_rwlockattr_t* p0 );
		public extern static int pthread_rwlockattr_setpshared( pthread_rwlockattr_t* p0, int p1 );
		public extern static int pthread_setconcurrency( int p0 );
		public extern static int pthread_setprio( pthread_t p0, int p1 );
		public extern static int pthread_setschedparam( pthread_t p0, int p1, sched_param* p2 );
		public extern static int pthread_spin_destroy( pthread_spinlock_t* p0 );
		public extern static int pthread_spin_init( pthread_spinlock_t* p0, Boolean32 p1 );
		public extern static int pthread_spin_lock( pthread_spinlock_t* p0 );
		public extern static int pthread_spin_trylock( pthread_spinlock_t* p0 );
		public extern static int pthread_spin_unlock( pthread_spinlock_t* p0 );
		public extern static void pthread_yield();
	}
	[ExternLibrary( Image = "/usr/lib/librt.so" )]
	public static partial struct RealTimeApi {
		public extern static int timer_create( int p0, sigevent* p1, timer_t** p2 );
		public extern static int timer_delete( timer_t* p0 );
		public extern static int timer_getoverrun( timer_t* p0 );
		public extern static int timer_gettime( timer_t* p0, itimerspec* p1 );
		public extern static int timer_oshandle_np( timer_t* timerid );
		public extern static int timer_settime( timer_t* p0, int p1, itimerspec* p2, itimerspec* p3 );
	}
	[ExternLibrary( Image = "/usr/lib/libncurses.so" )]
	public static partial struct NCursesApi {
		public extern static termtype* _nc_fallback( sbyte* p0 );
		public extern static sbyte* _nc_first_name( sbyte* p0 );
		public extern static int _nc_get_tty_mode( termios* buf );
		public extern static void _nc_init_termtype( termtype* p0 );
		public extern static int _nc_name_match( sbyte* p0, sbyte* p1, sbyte* p2 );
		public extern static int _nc_read_entry( sbyte* p0, sbyte* p1, termtype* p2 );
		public extern static int _nc_set_tty_mode( termios* buf );
		public extern static int del_curterm( term* p0 );
		public extern static int putp( sbyte* p0 );
		public extern static int restartterm( sbyte* p0, int p1, int* p2 );
		public extern static term* set_curterm( term* p0 );
		public extern static int setupterm( sbyte* p0, int p1, int* p2 );
		public extern static int tgetent( sbyte* p0, sbyte* p1 );
		public extern static int tgetflag( sbyte* p0 );
		public extern static int tgetnum( sbyte* p0 );
		public extern static sbyte* tgetstr( sbyte* p0, sbyte** p1 );
		public extern static sbyte* tgoto( sbyte* p0, int p1, int p2 );
		public extern static int tigetflag( sbyte* p0 );
		public extern static int tigetnum( sbyte* p0 );
		public extern static sbyte* tigetstr( sbyte* p0 );
		public extern static int tputs( sbyte* p0, int p1, Functors.Func<int, int> p2 );
	}
	[ExternLibrary( Image = "/usr/lib/libcrypt.so" )]
	public static partial struct CryptApi {
		public extern static sbyte* crypt( sbyte* p0, sbyte* p1 );
		public extern static sbyte* crypt_get_format();
		public extern static sbyte* crypt_r( sbyte* p0, sbyte* p1, crypt_data* p2 );
		public extern static int crypt_set_format( sbyte* p0 );
	}
	[ExternLibrary( Image = "/usr/lib/libm.so" )]
	public static partial struct MathApi {
		[BackendHintReadNone]
		public extern static int __isfinite( double p0 );
		[BackendHintReadNone]
		public extern static int __isfinitef( float p0 );
		[BackendHintReadNone]
		public extern static int __isfinitel( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static int __isnormal( double p0 );
		[BackendHintReadNone]
		public extern static int __isnormalf( float p0 );
		[BackendHintReadNone]
		public extern static int __isnormall( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static int __signbit( double p0 );
		[BackendHintReadNone]
		public extern static int __signbitf( float p0 );
		[BackendHintReadNone]
		public extern static int __signbitl( LittleEndianIEEE754_80 p0 );
		public extern static double acos( double p0 );
		public extern static float acosf( float p0 );
		public extern static double acosh( double p0 );
		public extern static float acoshf( float p0 );
		public extern static uint[4] acoshl( uint[4] p0 );
		public extern static LittleEndianIEEE754_80 acosl( LittleEndianIEEE754_80 p0 );
		public extern static double asin( double p0 );
		public extern static float asinf( float p0 );
		public extern static double asinh( double p0 );
		public extern static float asinhf( float p0 );
		public extern static uint[4] asinhl( uint[4] p0 );
		public extern static LittleEndianIEEE754_80 asinl( LittleEndianIEEE754_80 p0 );
		public extern static double atan( double p0 );
		public extern static double atan2( double p0, double p1 );
		public extern static float atan2f( float p0, float p1 );
		public extern static LittleEndianIEEE754_80 atan2l( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		public extern static float atanf( float p0 );
		public extern static double atanh( double p0 );
		public extern static float atanhf( float p0 );
		public extern static uint[4] atanhl( uint[4] p0 );
		public extern static LittleEndianIEEE754_80 atanl( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static double cbrt( double p0 );
		[BackendHintReadNone]
		public extern static float cbrtf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 cbrtl( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static double ceil( double p0 );
		[BackendHintReadNone]
		public extern static float ceilf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 ceill( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static double copysign( double p0, double p1 );
		[BackendHintReadNone]
		public extern static float copysignf( float p0, float p1 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 copysignl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		public extern static double cos( double p0 );
		public extern static float cosf( float p0 );
		public extern static double cosh( double p0 );
		public extern static float coshf( float p0 );
		public extern static uint[4] coshl( uint[4] p0 );
		public extern static LittleEndianIEEE754_80 cosl( LittleEndianIEEE754_80 p0 );
		public extern static double drem( double p0, double p1 );
		public extern static float dremf( float p0, float p1 );
		public extern static double erf( double p0 );
		public extern static double erfc( double p0 );
		public extern static float erfcf( float p0 );
		public extern static uint[4] erfcl( uint[4] p0 );
		public extern static float erff( float p0 );
		public extern static uint[4] erfl( uint[4] p0 );
		public extern static double exp( double p0 );
		public extern static double exp2( double p0 );
		public extern static float exp2f( float p0 );
		public extern static LittleEndianIEEE754_80 exp2l( LittleEndianIEEE754_80 p0 );
		public extern static float expf( float p0 );
		public extern static uint[4] expl( uint[4] p0 );
		public extern static double expm1( double p0 );
		public extern static float expm1f( float p0 );
		public extern static uint[4] expm1l( uint[4] p0 );
		[BackendHintReadNone]
		public extern static float fabsf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fabsl( LittleEndianIEEE754_80 p0 );
		public extern static double fdim( double p0, double p1 );
		public extern static float fdimf( float p0, float p1 );
		public extern static LittleEndianIEEE754_80 fdiml( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		[BackendHintReadNone]
		public extern static int finite( double p0 );
		[BackendHintReadNone]
		public extern static int finitef( float p0 );
		[BackendHintReadNone]
		public extern static double floor( double p0 );
		[BackendHintReadNone]
		public extern static float floorf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 floorl( LittleEndianIEEE754_80 p0 );
		public extern static double fma( double p0, double p1, double p2 );
		public extern static float fmaf( float p0, float p1, float p2 );
		public extern static LittleEndianIEEE754_80 fmal( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1, LittleEndianIEEE754_80 p2 );
		[BackendHintReadNone]
		public extern static double fmax( double p0, double p1 );
		[BackendHintReadNone]
		public extern static float fmaxf( float p0, float p1 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fmaxl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		[BackendHintReadNone]
		public extern static double fmin( double p0, double p1 );
		[BackendHintReadNone]
		public extern static float fminf( float p0, float p1 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fminl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		public extern static double fmod( double p0, double p1 );
		public extern static float fmodf( float p0, float p1 );
		public extern static LittleEndianIEEE754_80 fmodl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		public extern static float frexpf( float p0, int* p1 );
		public extern static LittleEndianIEEE754_80 frexpl( LittleEndianIEEE754_80 value, int* p1 );
		public extern static double gamma( double p0 );
		public extern static double gamma_r( double p0, int* p1 );
		public extern static float gammaf( float p0 );
		public extern static float gammaf_r( float p0, int* p1 );
		public extern static double hypot( double p0, double p1 );
		public extern static float hypotf( float p0, float p1 );
		public extern static LittleEndianIEEE754_80 hypotl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		[BackendHintReadNone]
		public extern static int ilogb( double p0 );
		[BackendHintReadNone]
		public extern static int ilogbf( float p0 );
		[BackendHintReadNone]
		public extern static int ilogbl( LittleEndianIEEE754_80 p0 );
		public extern static double j0( double p0 );
		public extern static float j0f( float p0 );
		public extern static double j1( double p0 );
		public extern static float j1f( float p0 );
		public extern static double jn( int p0, double p1 );
		public extern static float jnf( int p0, float p1 );
		public extern static float ldexpf( float p0, int p1 );
		public extern static LittleEndianIEEE754_80 ldexpl( LittleEndianIEEE754_80 p0, int p1 );
		public extern static double lgamma( double p0 );
		public extern static double lgamma_r( double p0, int* p1 );
		public extern static float lgammaf( float p0 );
		public extern static float lgammaf_r( float p0, int* p1 );
		public extern static uint[4] lgammal( uint[4] p0 );
		public extern static uint[4] lgammal_r( uint[4] p0, int* p1 );
		public extern static long llrint( double p0 );
		public extern static long llrintf( float p0 );
		public extern static long llrintl( LittleEndianIEEE754_80 p0 );
		public extern static long llround( double p0 );
		public extern static long llroundf( float p0 );
		public extern static long llroundl( LittleEndianIEEE754_80 p0 );
		public extern static double log( double p0 );
		public extern static double log10( double p0 );
		public extern static float log10f( float p0 );
		public extern static uint[4] log10l( uint[4] p0 );
		public extern static double log1p( double p0 );
		public extern static float log1pf( float p0 );
		public extern static uint[4] log1pl( uint[4] p0 );
		public extern static double log2( double p0 );
		public extern static float log2f( float p0 );
		public extern static uint[4] log2l( uint[4] p0 );
		public extern static double logb( double p0 );
		public extern static float logbf( float p0 );
		public extern static LittleEndianIEEE754_80 logbl( LittleEndianIEEE754_80 p0 );
		public extern static float logf( float p0 );
		public extern static uint[4] logl( uint[4] p0 );
		public extern static intptr lrint( double p0 );
		public extern static intptr lrintf( float p0 );
		public extern static intptr lrintl( LittleEndianIEEE754_80 p0 );
		public extern static intptr lround( double p0 );
		public extern static intptr lroundf( float p0 );
		public extern static intptr lroundl( LittleEndianIEEE754_80 p0 );
		public extern static float modff( float p0, float* p1 );
		public extern static LittleEndianIEEE754_80 modfl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80* p1 );
		[BackendHintReadNone]
		public extern static double nan( sbyte* p0 );
		[BackendHintReadNone]
		public extern static float nanf( sbyte* p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 nanl( sbyte* p0 );
		[BackendHintReadNone]
		public extern static double nearbyint( double p0 );
		[BackendHintReadNone]
		public extern static float nearbyintf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 nearbyintl( LittleEndianIEEE754_80 p0 );
		public extern static double nextafter( double p0, double p1 );
		public extern static float nextafterf( float p0, float p1 );
		public extern static LittleEndianIEEE754_80 nextafterl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		public extern static double nexttoward( double p0, LittleEndianIEEE754_80 p1 );
		public extern static float nexttowardf( float p0, LittleEndianIEEE754_80 p1 );
		public extern static LittleEndianIEEE754_80 nexttowardl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		public extern static double pow( double p0, double p1 );
		public extern static float powf( float p0, float p1 );
		public extern static uint[4] powl( uint[4] p0, uint[4] p1 );
		public extern static double remainder( double p0, double p1 );
		public extern static float remainderf( float p0, float p1 );
		public extern static LittleEndianIEEE754_80 remainderl( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1 );
		public extern static double remquo( double p0, double p1, int* p2 );
		public extern static float remquof( float p0, float p1, int* p2 );
		public extern static LittleEndianIEEE754_80 remquol( LittleEndianIEEE754_80 p0, LittleEndianIEEE754_80 p1, int* p2 );
		[BackendHintReadNone]
		public extern static double rint( double p0 );
		[BackendHintReadNone]
		public extern static float rintf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 rintl( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static double round( double p0 );
		[BackendHintReadNone]
		public extern static float roundf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 roundl( LittleEndianIEEE754_80 p0 );
		public extern static double scalb( double p0, double p1 );
		public extern static float scalbf( float p0, float p1 );
		public extern static double scalbln( double p0, intptr p1 );
		public extern static float scalblnf( float p0, intptr p1 );
		public extern static LittleEndianIEEE754_80 scalblnl( LittleEndianIEEE754_80 p0, intptr p1 );
		public extern static double scalbn( double p0, int p1 );
		public extern static float scalbnf( float p0, int p1 );
		public extern static LittleEndianIEEE754_80 scalbnl( LittleEndianIEEE754_80 p0, int p1 );
		public extern static double significand( double p0 );
		public extern static float significandf( float p0 );
		public extern static double sin( double p0 );
		public extern static void sincos( double p0, double* p1, double* p2 );
		public extern static void sincosf( float p0, float* p1, float* p2 );
		public extern static void sincosl( uint[4] p0, uint[4]* p1, uint[4]* p2 );
		public extern static float sinf( float p0 );
		public extern static double sinh( double p0 );
		public extern static float sinhf( float p0 );
		public extern static uint[4] sinhl( uint[4] p0 );
		public extern static LittleEndianIEEE754_80 sinl( LittleEndianIEEE754_80 p0 );
		public extern static double sqrt( double p0 );
		public extern static float sqrtf( float p0 );
		public extern static LittleEndianIEEE754_80 sqrtl( LittleEndianIEEE754_80 p0 );
		public extern static double tan( double p0 );
		public extern static float tanf( float p0 );
		public extern static double tanh( double p0 );
		public extern static float tanhf( float p0 );
		public extern static uint[4] tanhl( uint[4] p0 );
		public extern static LittleEndianIEEE754_80 tanl( LittleEndianIEEE754_80 p0 );
		public extern static double tgamma( double p0 );
		public extern static float tgammaf( float p0 );
		public extern static uint[4] tgammal( uint[4] p0 );
		[BackendHintReadNone]
		public extern static double trunc( double p0 );
		[BackendHintReadNone]
		public extern static float truncf( float p0 );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 truncl( LittleEndianIEEE754_80 p0 );
		public extern static double y0( double p0 );
		public extern static float y0f( float p0 );
		public extern static double y1( double p0 );
		public extern static float y1f( float p0 );
		public extern static double yn( int p0, double p1 );
		public extern static float ynf( int p0, float p1 );
	}
	[ExternLibrary( Image = "/usr/lib/libgnuregex.so" )]
	public static partial struct RegexApi {
		public extern static sbyte* re_comp( sbyte* p0 );
		public extern static int re_exec( sbyte* p0 );
	}
	public enum AccessTest : int {
		F_OK = 0,
		X_OK = 1,
		W_OK = 2,
		R_OK = 4,
	}
	public enum ApplySignalCommand : uint {
		SIG_BLOCK =   1,
		SIG_UNBLOCK = 2,
		SIG_SETMASK = 3,
	}
	public enum AuxVectorKind : int {
		AT_FDCWD =           -100,
		AT_NULL =               0,
		AT_IGNORE =             1,
		AT_IPC_MSG =            1,
		AT_EXECFD =             2,
		AT_IPC_SEM =            2,
		AT_IPC_SHM =            3,
		AT_PHDR =               3,
		AT_PHENT =              4,
		AT_PHNUM =              5,
		AT_PAGESZ =             6,
		AT_BASE =               7,
		AT_FLAGS =              8,
		AT_ENTRY =              9,
		AT_NOTELF =            10,
		AT_UID =               11,
		AT_EUID =              12,
		AT_GID =               13,
		AT_EGID =              14,
		AT_EXECPATH =          15,
		AT_CANARY =            16,
		AT_CANARYLEN =         17,
		AT_OSRELDATE =         18,
		AT_NCPUS =             19,
		AT_PAGESIZES =         20,
		AT_PAGESIZESLEN =      21,
		AT_TIMEKEEP =          22,
		AT_STACKPROT =         23,
		AT_EHDRFLAGS =         24,
		AT_HWCAP =             25,
		AT_HWCAP2 =            26,
		AT_COUNT =             27,
		AT_EACCESS =          256,
		AT_SYMLINK_NOFOLLOW = 512,
		AT_SYMLINK_FOLLOW =  1024,
		AT_REMOVEDIR =       2048,
	}
	public enum ClockType : int {
		CLOCK_REALTIME =            0,
		CLOCK_VIRTUAL =             1,
		CLOCK_PROF =                2,
		CLOCK_MONOTONIC =           4,
		CLOCK_UPTIME =              5,
		CLOCK_UPTIME_PRECISE =      7,
		CLOCK_UPTIME_FAST =         8,
		CLOCK_REALTIME_PRECISE =    9,
		CLOCK_REALTIME_FAST =      10,
		CLOCK_MONOTONIC_PRECISE =  11,
		CLOCK_MONOTONIC_FAST =     12,
		CLOCK_SECOND =             13,
		CLOCK_THREAD_CPUTIME_ID =  14,
		CLOCK_PROCESS_CPUTIME_ID = 15,
	}
	public enum ConfigurationProperty : uint {
		_PC_LINK_MAX =            1,
		_PC_MAX_CANON =           2,
		_PC_MAX_INPUT =           3,
		_PC_NAME_MAX =            4,
		_PC_PATH_MAX =            5,
		_PC_PIPE_BUF =            6,
		_PC_CHOWN_RESTRICTED =    7,
		_PC_NO_TRUNC =            8,
		_PC_VDISABLE =            9,
		_PC_ALLOC_SIZE_MIN =     10,
		_PC_FILESIZEBITS =       12,
		_PC_REC_INCR_XFER_SIZE = 14,
		_PC_REC_MAX_XFER_SIZE =  15,
		_PC_REC_MIN_XFER_SIZE =  16,
		_PC_REC_XFER_ALIGN =     17,
		_PC_SYMLINK_MAX =        18,
		_PC_MIN_HOLE_SIZE =      21,
		_PC_ASYNC_IO =           53,
		_PC_PRIO_IO =            54,
		_PC_SYNC_IO =            55,
		_PC_ACL_EXTENDED =       59,
		_PC_ACL_PATH_MAX =       60,
		_PC_CAP_PRESENT =        61,
		_PC_INF_PRESENT =        62,
		_PC_MAC_PRESENT =        63,
		_PC_ACL_NFS4 =           64,
	}
	public enum DirectoryEntryType : uint {
		DT_UNKNOWN = 0,
		DT_FIFO =    1,
		DT_CHR =     2,
		DT_DIR =     4,
		DT_BLK =     6,
		DT_REG =     8,
		DT_LNK =    10,
		DT_SOCK =   12,
		DT_WHT =    14,
	}
	public enum DynamicLibraryLoadFlag : int {
		RTLD_LOCAL =          0,
		RTLD_LAZY =           1,
		RTLD_DI_LINKMAP =     2,
		RTLD_NOW =            2,
		RTLD_MODEMASK =       3,
		RTLD_DI_SERINFO =     4,
		RTLD_DI_SERINFOSIZE = 5,
		RTLD_DI_MAX =         6,
		RTLD_DI_ORIGIN =      6,
		RTLD_GLOBAL =       256,
		RTLD_TRACE =        512,
		RTLD_NODELETE =    4096,
		RTLD_NOLOAD =      8192,
	}
	public enum ElfArchitectureKind : ushort {
		EM_NONE =         0,
		EM_M32 =          1,
		EM_SPARC =        2,
		EM_386 =          3,
		EM_68K =          4,
		EM_88K =          5,
		EM_486 =          6,
		EM_IAMCU =        6,
		EM_860 =          7,
		EM_MIPS =         8,
		EM_S370 =         9,
		EM_MIPS_RS3_LE = 10,
		EM_MIPS_RS4_BE = 10,
		EM_PARISC =      15,
		EM_VPP500 =      17,
		EM_SPARC32PLUS = 18,
		EM_960 =         19,
		EM_PPC =         20,
		EM_PPC64 =       21,
		EM_S390 =        22,
		EM_V800 =        36,
		EM_FR20 =        37,
		EM_RH32 =        38,
		EM_RCE =         39,
		EM_ARM =         40,
		EM_ALPHA_STD =   41,
		EM_SH =          42,
		EM_SPARCV9 =     43,
		EM_TRICORE =     44,
		EM_ARC =         45,
		EM_H8_300 =      46,
		EM_H8_300H =     47,
		EM_H8S =         48,
		EM_H8_500 =      49,
		EM_IA_64 =       50,
		EM_MIPS_X =      51,
		EM_COLDFIRE =    52,
		EM_68HC12 =      53,
		EM_MMA =         54,
		EM_PCP =         55,
		EM_NCPU =        56,
		EM_NDR1 =        57,
		EM_STARCORE =    58,
		EM_ME16 =        59,
		EM_ST100 =       60,
		EM_TINYJ =       61,
		EM_AMD64 =       62,
		EM_X86_64 =      62,
		EM_PDSP =        63,
		EM_FX66 =        66,
		EM_ST9PLUS =     67,
		EM_ST7 =         68,
		EM_68HC16 =      69,
		EM_68HC11 =      70,
		EM_68HC08 =      71,
		EM_68HC05 =      72,
		EM_SVX =         73,
		EM_ST19 =        74,
		EM_VAX =         75,
		EM_CRIS =        76,
		EM_JAVELIN =     77,
		EM_FIREPATH =    78,
		EM_ZSP =         79,
		EM_MMIX =        80,
		EM_HUANY =       81,
		EM_PRISM =       82,
		EM_AVR =         83,
		EM_FR30 =        84,
		EM_D10V =        85,
		EM_D30V =        86,
		EM_V850 =        87,
		EM_M32R =        88,
		EM_MN10300 =     89,
		EM_MN10200 =     90,
		EM_PJ =          91,
		EM_OPENRISC =    92,
		EM_ARC_A5 =      93,
		EM_XTENSA =      94,
		EM_VIDEOCORE =   95,
		EM_TMM_GPP =     96,
		EM_NS32K =       97,
		EM_TPC =         98,
		EM_SNP1K =       99,
		EM_ST200 =      100,
		EM_IP2K =       101,
		EM_MAX =        102,
		EM_CR =         103,
		EM_F2MC16 =     104,
		EM_MSP430 =     105,
		EM_BLACKFIN =   106,
		EM_SE_C33 =     107,
		EM_SEP =        108,
		EM_ARCA =       109,
		EM_UNICORE =    110,
		EM_AARCH64 =    183,
		EM_RISCV =      243,
		EM_ALPHA =    36902,
	}
	public enum ElfFileKind : ushort {
		ET_NONE =       0,
		ET_REL =        1,
		ET_EXEC =       2,
		ET_DYN =        3,
		ET_CORE =       4,
		ET_LOOS =   65024,
		ET_HIOS =   65279,
		ET_LOPROC = 65280,
		ET_HIPROC = 65535,
	}
	public enum ElfProgramHeaderType : uint {
		PT_NULL =                  0,
		PT_LOAD =                  1,
		PT_DYNAMIC =               2,
		PT_INTERP =                3,
		PT_NOTE =                  4,
		PT_SHLIB =                 5,
		PT_PHDR =                  6,
		PT_TLS =                   7,
		PT_LOOS =         1610612736,
		PT_SUNW_UNWIND =  1684333904,
		PT_GNU_EH_FRAME = 1685382480,
		PT_GNU_STACK =    1685382481,
		PT_GNU_RELRO =    1685382482,
		PT_DUMP_DELTA =   1874186240,
		PT_LOSUNW =       1879048186,
		PT_SUNWBSS =      1879048186,
		PT_SUNWSTACK =    1879048187,
		PT_SUNWDTRACE =   1879048188,
		PT_SUNWCAP =      1879048189,
		PT_HIOS =         1879048191,
		PT_HISUNW =       1879048191,
		PT_ARM_ARCHEXT =  1879048192,
		PT_LOPROC =       1879048192,
		PT_ARM_EXIDX =    1879048193,
		PT_HIPROC =       2147483647,
	}
	[Flags]
	public enum ElfSectionFlags : uint {
		None =                   0,
		SHF_WRITE =              1,
		SHF_ALLOC =              2,
		SHF_EXECINSTR =          4,
		SHF_MERGE =             16,
		SHF_STRINGS =           32,
		SHF_INFO_LINK =         64,
		SHF_LINK_ORDER =       128,
		SHF_OS_NONCONFORMING = 256,
		SHF_GROUP =            512,
		SHF_TLS =             1024,
		SHF_COMPRESSED =      2048,
		SHF_MASKPROC =  4026531840,
		SHF_MASKOS =     267386880,
	}
	public enum ElfSectionKind : uint {
		SHT_NULL =                        0,
		SHT_PROGBITS =                    1,
		SHT_SYMTAB =                      2,
		SHT_STRTAB =                      3,
		SHT_RELA =                        4,
		SHT_HASH =                        5,
		SHT_DYNAMIC =                     6,
		SHT_NOTE =                        7,
		SHT_NOBITS =                      8,
		SHT_REL =                         9,
		SHT_SHLIB =                      10,
		SHT_DYNSYM =                     11,
		SHT_INIT_ARRAY =                 14,
		SHT_FINI_ARRAY =                 15,
		SHT_PREINIT_ARRAY =              16,
		SHT_GROUP =                      17,
		SHT_SYMTAB_SHNDX =               18,
		SHT_LOOS =               1610612736,
		SHT_LOSUNW =             1879048180,
		SHT_SUNW_dof =           1879048180,
		SHT_GNU_ATTRIBUTES =     1879048181,
		SHT_SUNW_cap =           1879048181,
		SHT_GNU_HASH =           1879048182,
		SHT_SUNW_SIGNATURE =     1879048182,
		SHT_GNU_LIBLIST =        1879048183,
		SHT_SUNW_ANNOTATE =      1879048183,
		SHT_SUNW_DEBUGSTR =      1879048184,
		SHT_SUNW_DEBUG =         1879048185,
		SHT_SUNW_move =          1879048186,
		SHT_SUNW_COMDAT =        1879048187,
		SHT_SUNW_syminfo =       1879048188,
		SHT_GNU_verdef =         1879048189,
		SHT_SUNW_verdef =        1879048189,
		SHT_GNU_verneed =        1879048190,
		SHT_SUNW_verneed =       1879048190,
		SHT_GNU_versym =         1879048191,
		SHT_HIOS =               1879048191,
		SHT_HISUNW =             1879048191,
		SHT_SUNW_versym =        1879048191,
		SHT_LOPROC =             1879048192,
		SHT_MIPS_LIBLIST =       1879048192,
		SHT_SPARC_GOTDATA =      1879048192,
		SHT_AMD64_UNWIND =       1879048193,
		SHT_ARM_EXIDX =          1879048193,
		SHT_MIPS_MSYM =          1879048193,
		SHT_X86_64_UNWIND =      1879048193,
		SHT_ARM_PREEMPTMAP =     1879048194,
		SHT_MIPS_CONFLICT =      1879048194,
		SHT_ARM_ATTRIBUTES =     1879048195,
		SHT_MIPS_GPTAB =         1879048195,
		SHT_ARM_DEBUGOVERLAY =   1879048196,
		SHT_MIPS_UCODE =         1879048196,
		SHT_ARM_OVERLAYSECTION = 1879048197,
		SHT_MIPS_DEBUG =         1879048197,
		SHT_MIPS_REGINFO =       1879048198,
		SHT_MIPS_PACKAGE =       1879048199,
		SHT_MIPS_PACKSYM =       1879048200,
		SHT_MIPS_RELD =          1879048201,
		SHT_MIPS_IFACE =         1879048203,
		SHT_MIPS_CONTENT =       1879048204,
		SHT_MIPS_OPTIONS =       1879048205,
		SHT_MIPS_DELTASYM =      1879048219,
		SHT_MIPS_DELTAINST =     1879048220,
		SHT_MIPS_DELTACLASS =    1879048221,
		SHT_MIPS_DWARF =         1879048222,
		SHT_MIPS_DELTADECL =     1879048223,
		SHT_MIPS_SYMBOL_LIB =    1879048224,
		SHT_MIPS_EVENTS =        1879048225,
		SHT_MIPS_TRANSLATE =     1879048226,
		SHT_MIPS_PIXIE =         1879048227,
		SHT_MIPS_XLATE =         1879048228,
		SHT_MIPS_XLATE_DEBUG =   1879048229,
		SHT_MIPS_WHIRL =         1879048230,
		SHT_MIPS_EH_REGION =     1879048231,
		SHT_MIPS_XLATE_OLD =     1879048232,
		SHT_MIPS_PDR_EXCEPTION = 1879048233,
		SHT_MIPS_ABIFLAGS =      1879048234,
		SHT_HIPROC =             2147483647,
		SHT_LOUSER =             2147483648,
		SHT_HIUSER =             4294967295,
	}
	public enum ElfSymbolBindKind : byte {
		STB_LOCAL =       0,
		STB_GLOBAL =      1,
		STB_WEAK =        2,
		STB_GNU_UNIQUE = 10,
		STB_LOOS =       10,
		STB_HIOS =       12,
		STB_LOPROC =     13,
		STB_HIPROC =     15,
	}
	public enum ElfSymbolKind : byte {
		STT_NOTYPE =          0,
		STT_OBJECT =          1,
		STT_FUNC =            2,
		STT_SECTION =         3,
		STT_FILE =            4,
		STT_COMMON =          5,
		STT_TLS =             6,
		STT_NUM =             7,
		STT_GNU_IFUNC =      10,
		STT_LOOS =           10,
		STT_HIOS =           12,
		STT_LOPROC =         13,
		STT_SPARC_REGISTER = 13,
		STT_HIPROC =         15,
	}
	public enum FctlCommand : uint {
		F_DUPFD =         0,
		F_GETFD =         1,
		F_SETFD =         2,
		F_GETFL =         3,
		F_SETFL =         4,
		F_GETOWN =        5,
		F_SETOWN =        6,
		F_OGETLK =        7,
		F_OSETLK =        8,
		F_OSETLKW =       9,
		F_DUP2FD =       10,
		F_GETLK =        11,
		F_SETLK =        12,
		F_SETLKW =       13,
		F_SETLK_REMOTE = 14,
		F_READAHEAD =    15,
		F_RDAHEAD =      16,
	}
	[Flags]
	public enum FctlValue : int {
		O_RDONLY =         0,
		O_WRONLY =         1,
		O_RDWR =           2,
		O_NDELAY =         4,
		O_NONBLOCK =       4,
		O_APPEND =         8,
		FASYNC =          64,
		O_SYNC =         128,
		O_NOFOLLOW =     256,
		O_CREAT =        512,
		O_TRUNC =       1024,
		O_EXCL =        2048,
		O_NOCTTY =     32768,
		O_DIRECT =     65536,
		O_DIRECTORY = 131072,
		O_ACCMODE =        3,
	}
	[Flags]
	public enum FileDescriptorFlag : int {
		None =       0,
		FD_CLOEXEC = 1,
	}
	public enum FileSeekOrigin : int {
		SEEK_SET =  0,
		SEEK_CUR =  1,
		SEEK_END =  2,
		SEEK_DATA = 3,
		SEEK_HOLE = 4,
	}
	public enum FPResult : uint {
		FP_FAST_FMAF =         1,
		FP_INFINITE =          1,
		FP_NAN =               2,
		FP_NORMAL =            4,
		FP_SUBNORMAL =         8,
		FP_ZERO =             16,
		FP_ILOGBNAN = 2147483647,
		FP_ILOGB0 =   2147483649,
	}
	public enum idtype : uint {
		P_PID =     0,
		P_PPID =    1,
		P_PGID =    2,
		P_SID =     3,
		P_CID =     4,
		P_UID =     5,
		P_GID =     6,
		P_ALL =     7,
		P_LWPID =   8,
		P_TASKID =  9,
		P_PROJID = 10,
		P_POOLID = 11,
		P_JAILID = 12,
		P_CTID =   13,
		P_CPUID =  14,
		P_PSETID = 15,
	}
	public enum IoctlCommand : uint {
		TIOCPKT_DATA =        0,
		TIOCPKT_FLUSHREAD =   1,
		TIOCPKT_FLUSHWRITE =  2,
		TIOCPKT_STOP =        4,
		TIOCPKT_START =       8,
		TIOCPKT_NOSTOP =     16,
		TIOCPKT_DOSTOP =     32,
		FIOCLEX =     536897025,
		FIONCLEX =    536897026,
		TIOCEXCL =    536900621,
		TIOCNXCL =    536900622,
		TIOCSCTTY =   536900705,
		TIOCNOTTY =   536900721,
		TIOCCBRK =    536900730,
		TIOCSBRK =    536900731,
		FIONREAD =   1074030207,
		TIOCGETD =   1074033690,
		TIOCGSID =   1074033763,
		TIOCMGET =   1074033770,
		TIOCOUTQ =   1074033779,
		TIOCGPGRP =  1074033783,
		TIOCGWINSZ = 1074295912,
		TIOCSTI =    2147578994,
		FIOASYNC =   2147772029,
		FIONBIO =    2147772030,
		TIOCSETD =   2147775515,
		TIOCCONS =   2147775586,
		TIOCMBIC =   2147775595,
		TIOCMBIS =   2147775596,
		TIOCMSET =   2147775597,
		TIOCPKT =    2147775600,
		TIOCSPGRP =  2147775606,
		TIOCSWINSZ = 2148037735,
	}
	public enum IPProtocol : uint {
		IPPROTO_HOPOPTS =        0,
		IPPROTO_IP =             0,
		IPPROTO_ICMP =           1,
		IPPROTO_IGMP =           2,
		IPPROTO_GGP =            3,
		IPPROTO_IPIP =           4,
		IPPROTO_IPV4 =           4,
		IPPROTO_TCP =            6,
		IPPROTO_ST =             7,
		IPPROTO_EGP =            8,
		IPPROTO_PIGP =           9,
		IPPROTO_RCCMON =        10,
		IPPROTO_NVPII =         11,
		IPPROTO_PUP =           12,
		IPPROTO_ARGUS =         13,
		IPPROTO_EMCON =         14,
		IPPROTO_XNET =          15,
		IPPROTO_CHAOS =         16,
		IPPROTO_UDP =           17,
		IPPROTO_MUX =           18,
		IPPROTO_MEAS =          19,
		IPPROTO_HMP =           20,
		IPPROTO_PRM =           21,
		IPPROTO_IDP =           22,
		IPPROTO_TRUNK1 =        23,
		IPPROTO_TRUNK2 =        24,
		IPPROTO_LEAF1 =         25,
		IPPROTO_LEAF2 =         26,
		IPPROTO_RDP =           27,
		IPPROTO_IRTP =          28,
		IPPROTO_TP =            29,
		IPPROTO_BLT =           30,
		IPPROTO_NSP =           31,
		IPPROTO_INP =           32,
		IPPROTO_SEP =           33,
		IPPROTO_3PC =           34,
		IPPROTO_IDPR =          35,
		IPPROTO_XTP =           36,
		IPPROTO_DDP =           37,
		IPPROTO_CMTP =          38,
		IPPROTO_TPXX =          39,
		IPPROTO_IL =            40,
		IPPROTO_IPV6 =          41,
		IPPROTO_SDRP =          42,
		IPPROTO_ROUTING =       43,
		IPPROTO_FRAGMENT =      44,
		IPPROTO_IDRP =          45,
		IPPROTO_RSVP =          46,
		IPPROTO_GRE =           47,
		IPPROTO_MHRP =          48,
		IPPROTO_BHA =           49,
		IPPROTO_ESP =           50,
		IPPROTO_AH =            51,
		IPPROTO_INLSP =         52,
		IPPROTO_SWIPE =         53,
		IPPROTO_NHRP =          54,
		IPPROTO_MOBILE =        55,
		IPPROTO_TLSP =          56,
		IPPROTO_SKIP =          57,
		IPPROTO_ICMPV6 =        58,
		IPPROTO_NONE =          59,
		IPPROTO_DSTOPTS =       60,
		IPPROTO_AHIP =          61,
		IPPROTO_CFTP =          62,
		IPPROTO_HELLO =         63,
		IPPROTO_SATEXPAK =      64,
		IPPROTO_KRYPTOLAN =     65,
		IPPROTO_RVD =           66,
		IPPROTO_IPPC =          67,
		IPPROTO_ADFS =          68,
		IPPROTO_SATMON =        69,
		IPPROTO_VISA =          70,
		IPPROTO_IPCV =          71,
		IPPROTO_CPNX =          72,
		IPPROTO_CPHB =          73,
		IPPROTO_WSN =           74,
		IPPROTO_PVP =           75,
		IPPROTO_BRSATMON =      76,
		IPPROTO_ND =            77,
		IPPROTO_WBMON =         78,
		IPPROTO_WBEXPAK =       79,
		IPPROTO_EON =           80,
		IPPROTO_VMTP =          81,
		IPPROTO_SVMTP =         82,
		IPPROTO_VINES =         83,
		IPPROTO_TTP =           84,
		IPPROTO_IGP =           85,
		IPPROTO_DGP =           86,
		IPPROTO_TCF =           87,
		IPPROTO_IGRP =          88,
		IPPROTO_OSPFIGP =       89,
		IPPROTO_SRPC =          90,
		IPPROTO_LARP =          91,
		IPPROTO_MTP =           92,
		IPPROTO_AX25 =          93,
		IPPROTO_IPEIP =         94,
		IPPROTO_MICP =          95,
		IPPROTO_SCCSP =         96,
		IPPROTO_ETHERIP =       97,
		IPPROTO_ENCAP =         98,
		IPPROTO_APES =          99,
		IPPROTO_GMTP =         100,
		IPPROTO_PIM =          103,
		IPPROTO_IPCOMP =       108,
		IPPROTO_CARP =         112,
		IPPROTO_PGM =          113,
		IPPROTO_SCTP =         132,
		IPPROTO_MH =           135,
		IPPROTO_UDPLITE =      136,
		IPPROTO_MPLS =         137,
		IPPROTO_HIP =          139,
		IPPROTO_SHIM6 =        140,
		IPPROTO_PFSYNC =       240,
		IPPROTO_RESERVED_253 = 253,
		IPPROTO_OLD_DIVERT =   254,
		IPPROTO_RESERVED_254 = 254,
		IPPROTO_RAW =          255,
		IPPROTO_MAX =          256,
		IPPROTO_DONE =         257,
		IPPROTO_DIVERT =       258,
		IPPROTO_SEND =         259,
		IPPROTO_SPACER =     32767,
	}
	[Flags]
	public enum KEventAction : ushort {
		None =              0,
		EV_ADD =            1,
		EV_DELETE =         2,
		EV_ENABLE =         4,
		EV_DISABLE =        8,
		EV_ONESHOT =       16,
		EV_CLEAR =         32,
		EV_RECEIPT =       64,
		EV_DISPATCH =     128,
		EV_FORCEONESHOT = 256,
		EV_DROP =        4096,
		EV_FLAG1 =       8192,
		EV_ERROR =      16384,
		EV_FLAG2 =      16384,
		EV_EOF =        32768,
		EV_SYSFLAGS =   61440,
	}
	public enum KEventFilter : short {
		EVFILT_EMPTY =    -13,
		EVFILT_SENDFILE = -12,
		EVFILT_USER =     -11,
		EVFILT_LIO =      -10,
		EVFILT_FS =        -9,
		EVFILT_PROCDESC =  -8,
		EVFILT_TIMER =     -7,
		EVFILT_SIGNAL =    -6,
		EVFILT_PROC =      -5,
		EVFILT_VNODE =     -4,
		EVFILT_AIO =       -3,
		EVFILT_WRITE =     -2,
		EVFILT_READ =      -1,
		EVFILT_SYSCOUNT =  13,
	}
	[Flags]
	public enum KEventProcFilterFlags : uint {
		None =                    0,
		NOTE_TRACK =              1,
		NOTE_TRACKERR =           2,
		NOTE_CHILD =              4,
		NOTE_EXEC =       536870912,
		NOTE_FORK =      1073741824,
		NOTE_EXIT =      2147483648,
		NOTE_PCTRLMASK = 4026531840,
		NOTE_PDATAMASK =    1048575,
	}
	[Flags]
	public enum KEventUserFilterFlags : uint {
		NOTE_FFNOP =               0,
		NOTE_TRIGGER =      16777216,
		NOTE_FFAND =      1073741824,
		NOTE_FFOR =       2147483648,
		NOTE_FFCOPY =     3221225472,
		NOTE_FFCTRLMASK = 3221225472,
		NOTE_FFLAGSMASK =   16777215,
	}
	[Flags]
	public enum KEventVnodeFilterFlags : uint {
		None =         0,
		NOTE_DELETE =  1,
		NOTE_WRITE =   2,
		NOTE_EXTEND =  4,
		NOTE_ATTRIB =  8,
		NOTE_LINK =   16,
		NOTE_RENAME = 32,
		NOTE_REVOKE = 64,
	}
	public enum MemoryAdvise : int {
		MADV_NORMAL =     0,
		MADV_RANDOM =     1,
		MADV_SEQUENTIAL = 2,
		MADV_WILLNEED =   3,
		MADV_DONTNEED =   4,
		MADV_FREE =       5,
		MADV_NOSYNC =     6,
		MADV_AUTOSYNC =   7,
		MADV_NOCORE =     8,
		MADV_CORE =       9,
		MADV_PROTECT =   10,
	}
	[Flags]
	public enum MemoryMapFlags : int {
		MAP_FILE =                   0,
		MAP_SHARED =                 1,
		MAP_COPY =                   2,
		MAP_PRIVATE =                2,
		MAP_FIXED =                 16,
		MAP_RESERVED0020 =          32,
		MAP_RESERVED0040 =          64,
		MAP_RESERVED0080 =         128,
		MAP_RESERVED0100 =         256,
		MAP_HASSEMAPHORE =         512,
		MAP_STACK =               1024,
		MAP_NOSYNC =              2048,
		MAP_ANON =                4096,
		MAP_ANONYMOUS =           4096,
		MAP_GUARD =               8192,
		MAP_EXCL =               16384,
		MAP_NOCORE =            131072,
		MAP_PREFAULT_READ =     262144,
		MAP_32BIT =             524288,
		MAP_ALIGNED_SUPER =   16777216,
		MAP_ALIGNMENT_SHIFT =       24,
		MAP_ALIGNMENT_MASK = -16777216,
	}
	public enum MemoryMapProtection : int {
		PROT_NONE =  0,
		PROT_READ =  1,
		PROT_WRITE = 2,
		PROT_EXEC =  4,
	}
	[Flags]
	public enum MessageFlags : uint {
		None =    0,
		MSG_OOB = 1,
	}
	[Flags]
	public enum PollEvents : ushort {
		None =         0,
		POLLIN =       1,
		POLLPRI =      2,
		POLLOUT =      4,
		POLLWRNORM =   4,
		POLLERR =      8,
		POLLHUP =     16,
		POLLNVAL =    32,
		POLLRDNORM =  64,
		POLLRDBAND = 128,
		POLLWRBAND = 256,
	}
	public enum ProcessShare : uint {
		PTHREAD_PROCESS_PRIVATE = 0,
		PTHREAD_PROCESS_SHARED =  1,
	}
	public enum ProtocolFamily : byte {
		PF_UNSPEC =     0,
		PF_LOCAL =      1,
		PF_UNIX =       1,
		PF_INET =       2,
		PF_IMPLINK =    3,
		PF_PUP =        4,
		PF_CHAOS =      5,
		PF_NETBIOS =    6,
		PF_ISO =        7,
		PF_OSI =        7,
		PF_ECMA =       8,
		PF_DATAKIT =    9,
		PF_CCITT =     10,
		PF_SNA =       11,
		PF_DECnet =    12,
		PF_DLI =       13,
		PF_LAT =       14,
		PF_HYLINK =    15,
		PF_APPLETALK = 16,
		PF_ROUTE =     17,
		PF_LINK =      18,
		PF_XTP =       19,
		PF_COIP =      20,
		PF_CNT =       21,
		PF_RTIP =      22,
		PF_IPX =       23,
		PF_SIP =       24,
		PF_PIP =       25,
		PF_ISDN =      26,
		PF_KEY =       27,
		PF_INET6 =     28,
		PF_NATM =      29,
		PF_ATM =       30,
		PF_NETGRAPH =  32,
		PF_SLOW =      33,
		PF_SCLUSTER =  34,
		PF_ARP =       35,
		PF_BLUETOOTH = 36,
		PF_IEEE80211 = 37,
		PF_INET_SDP =  40,
		PF_INET6_SDP = 42,
		PF_MAX =       42,
	}
	public enum pthread_mutextype : uint {
		PTHREAD_MUTEX_ERRORCHECK =  1,
		PTHREAD_MUTEX_RECURSIVE =   2,
		PTHREAD_MUTEX_NORMAL =      3,
		PTHREAD_MUTEX_ADAPTIVE_NP = 4,
		PTHREAD_MUTEX_TYPE_MAX =    5,
	}
	public enum ResourceLimit : int {
		RLIMIT_CPU =      0,
		RLIMIT_FSIZE =    1,
		RLIMIT_DATA =     2,
		RLIMIT_STACK =    3,
		RLIMIT_CORE =     4,
		RLIMIT_RSS =      5,
		RLIMIT_MEMLOCK =  6,
		RLIMIT_NPROC =    7,
		RLIMIT_NOFILE =   8,
		RLIMIT_SBSIZE =   9,
		RLIMIT_AS =      10,
		RLIMIT_VMEM =    10,
		RLIMIT_NPTS =    11,
		RLIMIT_SWAP =    12,
		RLIMIT_KQUEUES = 13,
		RLIMIT_UMTXP =   14,
	}
	public enum ResourceUsageKind : int {
		RUSAGE_CHILDREN = -1,
		RUSAGE_SELF =      0,
		RUSAGE_THREAD =    1,
	}
	public enum SctpProperty : int {
		SCTP_ENABLE_RESET_STREAM_REQ =   1,
		SCTP_RTOINFO =                   1,
		SCTP_STREAM_RESET_INCOMING =     1,
		SCTP_ASSOCINFO =                 2,
		SCTP_ENABLE_RESET_ASSOC_REQ =    2,
		SCTP_STREAM_RESET_OUTGOING =     2,
		SCTP_INITMSG =                   3,
		SCTP_ENABLE_CHANGE_ASSOC_REQ =   4,
		SCTP_NODELAY =                   4,
		SCTP_AUTOCLOSE =                 5,
		SCTP_SET_PEER_PRIMARY_ADDR =     6,
		SCTP_ENABLE_VALUE_MASK =         7,
		SCTP_PRIMARY_ADDR =              7,
		SCTP_ADAPTATION_LAYER =          8,
		SCTP_ADAPTION_LAYER =            8,
		SCTP_DISABLE_FRAGMENTS =         9,
		SCTP_PEER_ADDR_PARAMS =         10,
		SCTP_DEFAULT_SEND_PARAM =       11,
		SCTP_EVENTS =                   12,
		SCTP_I_WANT_MAPPED_V4_ADDR =    13,
		SCTP_MAXSEG =                   14,
		SCTP_DELAYED_SACK =             15,
		SCTP_FRAGMENT_INTERLEAVE =      16,
		SCTP_PARTIAL_DELIVERY_POINT =   17,
		SCTP_AUTH_CHUNK =               18,
		SCTP_AUTH_KEY =                 19,
		SCTP_HMAC_IDENT =               20,
		SCTP_AUTH_ACTIVE_KEY =          21,
		SCTP_AUTH_DELETE_KEY =          22,
		SCTP_USE_EXT_RCVINFO =          23,
		SCTP_AUTO_ASCONF =              24,
		SCTP_MAX_BURST =                25,
		SCTP_MAXBURST =                 25,
		SCTP_CONTEXT =                  26,
		SCTP_EXPLICIT_EOR =             27,
		SCTP_REUSE_PORT =               28,
		SCTP_AUTH_DEACTIVATE_KEY =      29,
		SCTP_EVENT =                    30,
		SCTP_RECVRCVINFO =              31,
		SCTP_RECVNXTINFO =              32,
		SCTP_DEFAULT_SNDINFO =          33,
		SCTP_DEFAULT_PRINFO =           34,
		SCTP_PEER_ADDR_THLDS =          35,
		SCTP_REMOTE_UDP_ENCAPS_PORT =   36,
		SCTP_ECN_SUPPORTED =            37,
		SCTP_PR_SUPPORTED =             38,
		SCTP_AUTH_SUPPORTED =           39,
		SCTP_ASCONF_SUPPORTED =         40,
		SCTP_RECONFIG_SUPPORTED =       41,
		SCTP_NRSACK_SUPPORTED =         48,
		SCTP_PKTDROP_SUPPORTED =        49,
		SCTP_MAX_CWND =                 50,
		SCTP_STATUS =                  256,
		SCTP_GET_PEER_ADDR_INFO =      257,
		SCTP_PEER_AUTH_CHUNKS =        258,
		SCTP_LOCAL_AUTH_CHUNKS =       259,
		SCTP_GET_ASSOC_NUMBER =        260,
		SCTP_GET_ASSOC_ID_LIST =       261,
		SCTP_TIMEOUTS =                262,
		SCTP_PR_STREAM_STATUS =        263,
		SCTP_PR_ASSOC_STATUS =         264,
		SCTP_ENABLE_STREAM_RESET =    2304,
		SCTP_RESET_STREAMS =          2305,
		SCTP_RESET_ASSOC =            2306,
		SCTP_ADD_STREAMS =            2307,
		SCTP_SET_DEBUG_LEVEL =        4101,
		SCTP_CLR_STAT_LOG =           4103,
		SCTP_GET_SNDBUF_USE =         4353,
		SCTP_GET_STAT_LOG =           4355,
		SCTP_PCB_STATUS =             4356,
		SCTP_GET_NONCE_VALUES =       4357,
		SCTP_CMT_ON_OFF =             4608,
		SCTP_CMT_USE_DAC =            4609,
		SCTP_PLUGGABLE_CC =           4610,
		SCTP_PLUGGABLE_SS =           4611,
		SCTP_SS_VALUE =               4612,
		SCTP_CC_OPTION =              4613,
		SCTP_INTERLEAVING_SUPPORTED = 4614,
		SCTP_SET_DYNAMIC_PRIMARY =    8193,
		SCTP_VRF_ID =                12289,
		SCTP_ADD_VRF_ID =            12290,
		SCTP_GET_VRF_IDS =           12291,
		SCTP_GET_ASOC_VRF =          12292,
		SCTP_DEL_VRF_ID =            12293,
		SCTP_GET_PACKET_LOG =        16385,
	}
	public enum SignalCode : uint {
		SIGHUP =     1,
		SIGINT =     2,
		SIGQUIT =    3,
		SIGILL =     4,
		SIGTRAP =    5,
		SIGABRT =    6,
		SIGIOT =     6,
		SIGEMT =     7,
		SIGFPE =     8,
		SIGKILL =    9,
		SIGBUS =    10,
		SIGSEGV =   11,
		SIGSYS =    12,
		SIGPIPE =   13,
		SIGALRM =   14,
		SIGTERM =   15,
		SIGURG =    16,
		SIGSTOP =   17,
		SIGTSTP =   18,
		SIGCONT =   19,
		SIGCHLD =   20,
		SIGTTIN =   21,
		SIGTTOU =   22,
		SIGIO =     23,
		SIGXCPU =   24,
		SIGXFSZ =   25,
		SIGVTALRM = 26,
		SIGPROF =   27,
		SIGWINCH =  28,
		SIGINFO =   29,
		SIGUSR1 =   30,
		SIGUSR2 =   31,
		SIGLWP =    32,
		SIGTHR =    32,
		SIGLIBRT =  33,
		SIGRTMIN =  65,
		SIGRTMAX = 126,
	}
	public enum SignalCodeBUS : uint {
		BUS_ADRALN = 1,
		BUS_ADRERR = 2,
		BUS_OBJERR = 3,
	}
	public enum SignalCodeCHLD : uint {
		CLD_EXITED =    1,
		CLD_KILLED =    2,
		CLD_DUMPED =    3,
		CLD_TRAPPED =   4,
		CLD_STOPPED =   5,
		CLD_CONTINUED = 6,
	}
	public enum SignalCodeFPE : uint {
		FPE_INTOVF = 1,
		FPE_INTDIV = 2,
		FPE_FLTDIV = 3,
		FPE_FLTOVF = 4,
		FPE_FLTUND = 5,
		FPE_FLTRES = 6,
		FPE_FLTINV = 7,
		FPE_FLTSUB = 8,
	}
	public enum SignalCodeILL : uint {
		ILL_ILLOPC = 1,
		ILL_ILLOPN = 2,
		ILL_ILLADR = 3,
		ILL_ILLTRP = 4,
		ILL_PRVOPC = 5,
		ILL_PRVREG = 6,
		ILL_COPROC = 7,
		ILL_BADSTK = 8,
	}
	public enum SignalCodeOrigin : uint {
		SI_NOINFO =      0,
		SI_UNDEFINED =   0,
		SI_USER =    65537,
		SI_QUEUE =   65538,
		SI_TIMER =   65539,
		SI_ASYNCIO = 65540,
		SI_MESGQ =   65541,
		SI_KERNEL =  65542,
		SI_LWP =     65543,
	}
	public enum SignalCodePOLL : uint {
		POLL_IN =  1,
		POLL_OUT = 2,
		POLL_MSG = 3,
		POLL_ERR = 4,
		POLL_PRI = 5,
		POLL_HUP = 6,
	}
	public enum SignalCodeSEGV : uint {
		SEGV_MAPERR = 1,
		SEGV_ACCERR = 2,
	}
	public enum SignalCodeTrap : uint {
		TRAP_BRKPT =  1,
		TRAP_TRACE =  2,
		TRAP_DTRACE = 3,
		TRAP_CAP =    4,
	}
	public enum SignalNotify : uint {
		SIGEV_NONE =      0,
		SIGEV_SIGNAL =    1,
		SIGEV_THREAD =    2,
		SIGEV_KEVENT =    3,
		SIGEV_THREAD_ID = 4,
	}
	[Flags]
	public enum SignalStackFlags : uint {
		None =       0,
		SS_ONSTACK = 1,
		SS_DISABLE = 4,
	}
	public enum SocketControlMessage : uint {
		SCM_RIGHTS =    1,
		SCM_TIMESTAMP = 2,
		SCM_CREDS =     3,
		SCM_BINTIME =   4,
		SCM_REALTIME =  5,
		SCM_MONOTONIC = 6,
		SCM_TIME_INFO = 7,
	}
	public enum SocketProperty : int {
		SO_VENDOR =   -2147483648,
		SO_TS_DEFAULT =         0,
		SO_TS_REALTIME_MICRO =  0,
		SO_DEBUG =              1,
		SO_TS_BINTIME =         1,
		SO_ACCEPTCONN =         2,
		SO_TS_REALTIME =        2,
		SO_TS_CLOCK_MAX =       3,
		SO_TS_MONOTONIC =       3,
		SO_REUSEADDR =          4,
		SO_KEEPALIVE =          8,
		SO_DONTROUTE =         16,
		SO_BROADCAST =         32,
		SO_USELOOPBACK =       64,
		SO_LINGER =           128,
		SO_OOBINLINE =        256,
		SO_REUSEPORT =        512,
		SO_TIMESTAMP =       1024,
		SO_NOSIGPIPE =       2048,
		SO_ACCEPTFILTER =    4096,
		SO_SNDBUF =          4097,
		SO_RCVBUF =          4098,
		SO_SNDLOWAT =        4099,
		SO_RCVLOWAT =        4100,
		SO_SNDTIMEO =        4101,
		SO_RCVTIMEO =        4102,
		SO_ERROR =           4103,
		SO_TYPE =            4104,
		SO_LABEL =           4105,
		SO_PEERLABEL =       4112,
		SO_LISTENQLIMIT =    4113,
		SO_LISTENQLEN =      4114,
		SO_LISTENINCQLEN =   4115,
		SO_SETFIB =          4116,
		SO_USER_COOKIE =     4117,
		SO_PROTOCOL =        4118,
		SO_PROTOTYPE =       4118,
		SO_TS_CLOCK =        4119,
		SO_MAX_PACING_RATE = 4120,
		SO_DOMAIN =          4121,
		SO_BINTIME =         8192,
		SO_NO_OFFLOAD =     16384,
		SO_NO_DDP =         32768,
		SO_REUSEPORT_LB =   65536,
	}
	public enum SocketPropertyGroup : uint {
		SOL_SOCKET = 65535,
	}
	public enum SocketPropertyTcp : int {
		TCP_VENDOR =          -2147483648,
		TCP_NODELAY =                   1,
		TCP_MAXSEG =                    2,
		TCP_FASTOPEN_MIN_COOKIE_LEN =   4,
		TCP_MAX_SACK =                  4,
		TCP_MAXBURST =                  4,
		TCP_NOPUSH =                    4,
		TCP_NOOPT =                     8,
		TCP_MAX_WINSHIFT =             14,
		TCP_CA_NAME_MAX =              16,
		TCP_FASTOPEN_MAX_COOKIE_LEN =  16,
		TCP_FASTOPEN_PSK_LEN =         16,
		TCP_MD5SIG =                   16,
		TCP_FUNCTION_NAME_LEN_MAX =    32,
		TCP_INFO =                     32,
		TCP_LOG =                      34,
		TCP_LOGBUF =                   35,
		TCP_LOGID =                    36,
		TCP_LOGDUMP =                  37,
		TCP_LOGDUMPID =                38,
		TCP_MAXOLEN =                  40,
		TCP_MAXHLEN =                  60,
		TCP_CONGESTION =               64,
		TCP_LOG_ID_LEN =               64,
		TCP_CCALGOOPT =                65,
		TCP_DELACK =                   72,
		TCP_KEEPINIT =                128,
		TCP_MINMSS =                  216,
		TCP_KEEPIDLE =                256,
		TCP_KEEPINTVL =               512,
		TCP_MSS =                     536,
		TCP_KEEPCNT =                1024,
		TCP_FASTOPEN =               1025,
		TCP_RACK_PROP =              1051,
		TCP_RACK_TLP_REDUCE =        1052,
		TCP_RACK_PACE_REDUCE =       1053,
		TCP_RACK_PACE_MAX_SEG =      1054,
		TCP_RACK_PACE_ALWAYS =       1055,
		TCP_RACK_PROP_RATE =         1056,
		TCP_RACK_PRR_SENDALOT =      1057,
		TCP_RACK_MIN_TO =            1058,
		TCP_RACK_EARLY_RECOV =       1059,
		TCP_RACK_EARLY_SEG =         1060,
		TCP_RACK_REORD_THRESH =      1061,
		TCP_RACK_REORD_FADE =        1062,
		TCP_RACK_TLP_THRESH =        1063,
		TCP_RACK_PKT_DELAY =         1064,
		TCP_RACK_TLP_INC_VAR =       1065,
		TCP_RACK_SESS_CWV =          1066,
		TCP_BBR_IWINTSO =            1067,
		TCP_BBR_RECFORCE =           1068,
		TCP_BBR_STARTUP_PG =         1069,
		TCP_BBR_DRAIN_PG =           1070,
		TCP_BBR_RWND_IS_APP =        1071,
		TCP_BBR_PROBE_RTT_INT =      1072,
		TCP_BBR_ONE_RETRAN =         1073,
		TCP_BBR_STARTUP_LOSS_EXIT =  1074,
		TCP_BBR_USE_LOWGAIN =        1075,
		TCP_BBR_LOWGAIN_THRESH =     1076,
		TCP_BBR_LOWGAIN_HALF =       1077,
		TCP_BBR_LOWGAIN_FD =         1078,
		TCP_BBR_USEDEL_RATE =        1079,
		TCP_BBR_MIN_RTO =            1080,
		TCP_BBR_MAX_RTO =            1081,
		TCP_BBR_REC_OVER_HPTS =      1082,
		TCP_BBR_UNLIMITED =          1083,
		TCP_BBR_DRAIN_INC_EXTRA =    1084,
		TCP_BBR_STARTUP_EXIT_EPOCH = 1085,
		TCP_BBR_PACE_PER_SEC =       1086,
		TCP_BBR_PACE_DEL_TAR =       1087,
		TCP_BBR_PACE_SEG_MAX =       1088,
		TCP_BBR_PACE_SEG_MIN =       1089,
		TCP_BBR_PACE_CROSS =         1090,
		TCP_RACK_IDLE_REDUCE_HIGH =  1092,
		TCP_RACK_MIN_PACE =          1093,
		TCP_RACK_MIN_PACE_SEG =      1094,
		TCP_RACK_TLP_USE =           1095,
		TCP_BBR_ACK_COMP_ALG =       1096,
		TCP_BBR_EXTRA_GAIN =         1097,
		TCP_BBR_RACK_RTT_USE =       1098,
		TCP_BBR_RETRAN_WTSO =        1099,
		TCP_DATA_AFTER_CLOSE =       1100,
		TCP_BBR_PROBE_RTT_GAIN =     1101,
		TCP_BBR_PROBE_RTT_LEN =      1102,
		TCP_PCAP_OUT =               2048,
		TCP_PCAP_IN =                4096,
		TCP_FUNCTION_BLK =           8192,
		TCP_MAXWIN =                65535,
	}
	[Flags]
	public enum SocketShutdownOptions : uint {
		SHUT_RD =   0,
		SHUT_WR =   1,
		SHUT_RDWR = 2,
	}
	public enum SocketType : uint {
		SOCK_STREAM =           1,
		SOCK_DGRAM =            2,
		SOCK_RAW =              3,
		SOCK_RDM =              4,
		SOCK_SEQPACKET =        5,
		SOCK_MAXADDRLEN =     255,
		SOCK_CLOEXEC =  268435456,
		SOCK_NONBLOCK = 536870912,
	}
	public enum StatFlags : uint {
		S_IXOTH =      1,
		S_IWOTH =      2,
		S_IROTH =      4,
		S_IRWXO =      7,
		S_IXGRP =      8,
		S_IWGRP =     16,
		S_IRGRP =     32,
		S_IRWXG =     56,
		S_IEXEC =     64,
		S_IXUSR =     64,
		S_IWRITE =   128,
		S_IWUSR =    128,
		S_IREAD =    256,
		S_IRUSR =    256,
		S_IRWXU =    448,
		S_ISTXT =    512,
		S_ISVTX =    512,
		S_ISGID =   1024,
		S_ISUID =   2048,
		S_IFIFO =   4096,
		S_IFCHR =   8192,
		S_IFDIR =  16384,
		S_IFBLK =  24576,
		S_IFREG =  32768,
		S_IFLNK =  40960,
		S_IFSOCK = 49152,
		S_IFWHT =  57344,
		S_IFMT =   61440,
	}
	[Flags]
	public enum SymlinkFollowOption : uint {
		None =                  0,
		AT_SYMLINK_NOFOLLOW = 512,
	}
	public enum SyslogFacility : uint {
		LOG_KERN =       0,
		LOG_USER =       8,
		LOG_MAIL =      16,
		LOG_DAEMON =    24,
		LOG_AUTH =      32,
		LOG_SYSLOG =    40,
		LOG_LPR =       48,
		LOG_NEWS =      56,
		LOG_UUCP =      64,
		LOG_CRON =      72,
		LOG_AUTHPRIV =  80,
		LOG_FTP =       88,
		LOG_NTP =       96,
		LOG_SECURITY = 104,
		LOG_CONSOLE =  112,
		LOG_LOCAL0 =   128,
		LOG_LOCAL1 =   136,
		LOG_LOCAL2 =   144,
		LOG_LOCAL3 =   152,
		LOG_LOCAL4 =   160,
		LOG_LOCAL5 =   168,
		LOG_LOCAL6 =   176,
		LOG_LOCAL7 =   184,
	}
	[Flags]
	public enum SyslogOptions : uint {
		None =        0,
		LOG_PID =     1,
		LOG_CONS =    2,
		LOG_ODELAY =  4,
		LOG_NDELAY =  8,
		LOG_NOWAIT = 16,
		LOG_PERROR = 32,
	}
	public enum SyslogPriority : uint {
		LOG_EMERG =   0,
		LOG_ALERT =   1,
		LOG_CRIT =    2,
		LOG_ERR =     3,
		LOG_WARNING = 4,
		LOG_NOTICE =  5,
		LOG_INFO =    6,
		LOG_DEBUG =   7,
	}
	public enum SystemCall : uint {
		syscall =                    0,
		exit =                       1,
		fork =                       2,
		read =                       3,
		write =                      4,
		open =                       5,
		close =                      6,
		wait4 =                      7,
		link =                       9,
		unlink =                    10,
		chdir =                     12,
		fchdir =                    13,
		freebsd11_mknod =           14,
		chmod =                     15,
		chown =                     16,
		@break =                    17,
		getpid =                    20,
		mount =                     21,
		unmount =                   22,
		setuid =                    23,
		getuid =                    24,
		geteuid =                   25,
		ptrace =                    26,
		recvmsg =                   27,
		sendmsg =                   28,
		recvfrom =                  29,
		accept =                    30,
		getpeername =               31,
		getsockname =               32,
		access =                    33,
		chflags =                   34,
		fchflags =                  35,
		sync =                      36,
		kill =                      37,
		getppid =                   39,
		dup =                       41,
		freebsd10_pipe =            42,
		getegid =                   43,
		profil =                    44,
		ktrace =                    45,
		getgid =                    47,
		getlogin =                  49,
		setlogin =                  50,
		acct =                      51,
		sigaltstack =               53,
		ioctl =                     54,
		reboot =                    55,
		revoke =                    56,
		symlink =                   57,
		readlink =                  58,
		execve =                    59,
		umask =                     60,
		chroot =                    61,
		msync =                     65,
		vfork =                     66,
		sbrk =                      69,
		sstk =                      70,
		freebsd11_vadvise =         72,
		munmap =                    73,
		mprotect =                  74,
		madvise =                   75,
		mincore =                   78,
		getgroups =                 79,
		setgroups =                 80,
		getpgrp =                   81,
		setpgid =                   82,
		setitimer =                 83,
		swapon =                    85,
		getitimer =                 86,
		getdtablesize =             89,
		dup2 =                      90,
		fcntl =                     92,
		select =                    93,
		fsync =                     95,
		setpriority =               96,
		socket =                    97,
		connect =                   98,
		getpriority =              100,
		bind =                     104,
		setsockopt =               105,
		listen =                   106,
		gettimeofday =             116,
		getrusage =                117,
		getsockopt =               118,
		readv =                    120,
		writev =                   121,
		settimeofday =             122,
		fchown =                   123,
		fchmod =                   124,
		setreuid =                 126,
		setregid =                 127,
		rename =                   128,
		flock =                    131,
		mkfifo =                   132,
		sendto =                   133,
		shutdown =                 134,
		socketpair =               135,
		mkdir =                    136,
		rmdir =                    137,
		utimes =                   138,
		adjtime =                  140,
		setsid =                   147,
		quotactl =                 148,
		nlm_syscall =              154,
		nfssvc =                   155,
		lgetfh =                   160,
		getfh =                    161,
		sysarch =                  165,
		rtprio =                   166,
		semsys =                   169,
		msgsys =                   170,
		shmsys =                   171,
		setfib =                   175,
		ntp_adjtime =              176,
		setgid =                   181,
		setegid =                  182,
		seteuid =                  183,
		freebsd11_stat =           188,
		freebsd11_fstat =          189,
		freebsd11_lstat =          190,
		pathconf =                 191,
		fpathconf =                192,
		getrlimit =                194,
		setrlimit =                195,
		freebsd11_getdirentries =  196,
		__syscall =                198,
		__sysctl =                 202,
		mlock =                    203,
		munlock =                  204,
		undelete =                 205,
		futimes =                  206,
		getpgid =                  207,
		poll =                     209,
		freebsd7___semctl =        220,
		semget =                   221,
		semop =                    222,
		freebsd7_msgctl =          224,
		msgget =                   225,
		msgsnd =                   226,
		msgrcv =                   227,
		shmat =                    228,
		freebsd7_shmctl =          229,
		shmdt =                    230,
		shmget =                   231,
		clock_gettime =            232,
		clock_settime =            233,
		clock_getres =             234,
		ktimer_create =            235,
		ktimer_delete =            236,
		ktimer_settime =           237,
		ktimer_gettime =           238,
		ktimer_getoverrun =        239,
		nanosleep =                240,
		ffclock_getcounter =       241,
		ffclock_setestimate =      242,
		ffclock_getestimate =      243,
		clock_nanosleep =          244,
		clock_getcpuclockid2 =     247,
		ntp_gettime =              248,
		minherit =                 250,
		rfork =                    251,
		issetugid =                253,
		lchown =                   254,
		aio_read =                 255,
		aio_write =                256,
		lio_listio =               257,
		freebsd11_getdents =       272,
		lchmod =                   274,
		lutimes =                  276,
		freebsd11_nstat =          278,
		freebsd11_nfstat =         279,
		freebsd11_nlstat =         280,
		preadv =                   289,
		pwritev =                  290,
		fhopen =                   298,
		freebsd11_fhstat =         299,
		modnext =                  300,
		modstat =                  301,
		modfnext =                 302,
		modfind =                  303,
		kldload =                  304,
		kldunload =                305,
		kldfind =                  306,
		kldnext =                  307,
		kldstat =                  308,
		kldfirstmod =              309,
		getsid =                   310,
		setresuid =                311,
		setresgid =                312,
		aio_return =               314,
		aio_suspend =              315,
		aio_cancel =               316,
		aio_error =                317,
		@yield =                   321,
		mlockall =                 324,
		munlockall =               325,
		__getcwd =                 326,
		sched_setparam =           327,
		sched_getparam =           328,
		sched_setscheduler =       329,
		sched_getscheduler =       330,
		sched_yield =              331,
		sched_get_priority_max =   332,
		sched_get_priority_min =   333,
		sched_rr_get_interval =    334,
		utrace =                   335,
		kldsym =                   337,
		jail =                     338,
		nnpfs_syscall =            339,
		sigprocmask =              340,
		sigsuspend =               341,
		sigpending =               343,
		sigtimedwait =             345,
		sigwaitinfo =              346,
		__acl_get_file =           347,
		__acl_set_file =           348,
		__acl_get_fd =             349,
		__acl_set_fd =             350,
		__acl_delete_file =        351,
		__acl_delete_fd =          352,
		__acl_aclcheck_file =      353,
		__acl_aclcheck_fd =        354,
		extattrctl =               355,
		extattr_set_file =         356,
		extattr_get_file =         357,
		extattr_delete_file =      358,
		aio_waitcomplete =         359,
		getresuid =                360,
		getresgid =                361,
		kqueue =                   362,
		freebsd11_kevent =         363,
		extattr_set_fd =           371,
		extattr_get_fd =           372,
		extattr_delete_fd =        373,
		__setugid =                374,
		eaccess =                  376,
		afs3_syscall =             377,
		nmount =                   378,
		__mac_get_proc =           384,
		__mac_set_proc =           385,
		__mac_get_fd =             386,
		__mac_get_file =           387,
		__mac_set_fd =             388,
		__mac_set_file =           389,
		kenv =                     390,
		lchflags =                 391,
		uuidgen =                  392,
		sendfile =                 393,
		mac_syscall =              394,
		freebsd11_getfsstat =      395,
		freebsd11_statfs =         396,
		freebsd11_fstatfs =        397,
		freebsd11_fhstatfs =       398,
		ksem_close =               400,
		ksem_post =                401,
		ksem_wait =                402,
		ksem_trywait =             403,
		ksem_init =                404,
		ksem_open =                405,
		ksem_unlink =              406,
		ksem_getvalue =            407,
		ksem_destroy =             408,
		__mac_get_pid =            409,
		__mac_get_link =           410,
		__mac_set_link =           411,
		extattr_set_link =         412,
		extattr_get_link =         413,
		extattr_delete_link =      414,
		__mac_execve =             415,
		sigaction =                416,
		sigreturn =                417,
		getcontext =               421,
		setcontext =               422,
		swapcontext =              423,
		swapoff =                  424,
		__acl_get_link =           425,
		__acl_set_link =           426,
		__acl_delete_link =        427,
		__acl_aclcheck_link =      428,
		sigwait =                  429,
		thr_create =               430,
		thr_exit =                 431,
		thr_self =                 432,
		thr_kill =                 433,
		jail_attach =              436,
		extattr_list_fd =          437,
		extattr_list_file =        438,
		extattr_list_link =        439,
		ksem_timedwait =           441,
		thr_suspend =              442,
		thr_wake =                 443,
		kldunloadf =               444,
		audit =                    445,
		auditon =                  446,
		getauid =                  447,
		setauid =                  448,
		getaudit =                 449,
		setaudit =                 450,
		getaudit_addr =            451,
		setaudit_addr =            452,
		auditctl =                 453,
		_umtx_op =                 454,
		thr_new =                  455,
		sigqueue =                 456,
		kmq_open =                 457,
		kmq_setattr =              458,
		kmq_timedreceive =         459,
		kmq_timedsend =            460,
		kmq_notify =               461,
		kmq_unlink =               462,
		abort2 =                   463,
		thr_set_name =             464,
		aio_fsync =                465,
		rtprio_thread =            466,
		sctp_peeloff =             471,
		sctp_generic_sendmsg =     472,
		sctp_generic_sendmsg_iov = 473,
		sctp_generic_recvmsg =     474,
		pread =                    475,
		pwrite =                   476,
		mmap =                     477,
		lseek =                    478,
		truncate =                 479,
		ftruncate =                480,
		thr_kill2 =                481,
		shm_open =                 482,
		shm_unlink =               483,
		cpuset =                   484,
		cpuset_setid =             485,
		cpuset_getid =             486,
		cpuset_getaffinity =       487,
		cpuset_setaffinity =       488,
		faccessat =                489,
		fchmodat =                 490,
		fchownat =                 491,
		fexecve =                  492,
		freebsd11_fstatat =        493,
		futimesat =                494,
		linkat =                   495,
		mkdirat =                  496,
		mkfifoat =                 497,
		freebsd11_mknodat =        498,
		openat =                   499,
		readlinkat =               500,
		renameat =                 501,
		symlinkat =                502,
		unlinkat =                 503,
		posix_openpt =             504,
		gssd_syscall =             505,
		jail_get =                 506,
		jail_set =                 507,
		jail_remove =              508,
		closefrom =                509,
		__semctl =                 510,
		msgctl =                   511,
		shmctl =                   512,
		lpathconf =                513,
		__cap_rights_get =         515,
		cap_enter =                516,
		cap_getmode =              517,
		pdfork =                   518,
		pdkill =                   519,
		pdgetpid =                 520,
		pselect =                  522,
		getloginclass =            523,
		setloginclass =            524,
		rctl_get_racct =           525,
		rctl_get_rules =           526,
		rctl_get_limits =          527,
		rctl_add_rule =            528,
		rctl_remove_rule =         529,
		posix_fallocate =          530,
		posix_fadvise =            531,
		wait6 =                    532,
		cap_rights_limit =         533,
		cap_ioctls_limit =         534,
		cap_ioctls_get =           535,
		cap_fcntls_limit =         536,
		cap_fcntls_get =           537,
		bindat =                   538,
		connectat =                539,
		chflagsat =                540,
		accept4 =                  541,
		pipe2 =                    542,
		aio_mlock =                543,
		procctl =                  544,
		ppoll =                    545,
		futimens =                 546,
		utimensat =                547,
		fdatasync =                550,
		fstat =                    551,
		fstatat =                  552,
		fhstat =                   553,
		getdirentries =            554,
		statfs =                   555,
		fstatfs =                  556,
		getfsstat =                557,
		fhstatfs =                 558,
		mknodat =                  559,
		kevent =                   560,
		cpuset_getdomain =         561,
		cpuset_setdomain =         562,
		getrandom =                563,
		MAXSYSCALL =               564,
	}
	public enum SystemConfigurationProperty : uint {
		_SC_ARG_MAX =                       1,
		_SC_CHILD_MAX =                     2,
		_SC_CLK_TCK =                       3,
		_SC_NGROUPS_MAX =                   4,
		_SC_OPEN_MAX =                      5,
		_SC_JOB_CONTROL =                   6,
		_SC_SAVED_IDS =                     7,
		_SC_VERSION =                       8,
		_SC_BC_BASE_MAX =                   9,
		_SC_BC_DIM_MAX =                   10,
		_SC_BC_SCALE_MAX =                 11,
		_SC_BC_STRING_MAX =                12,
		_SC_COLL_WEIGHTS_MAX =             13,
		_SC_EXPR_NEST_MAX =                14,
		_SC_LINE_MAX =                     15,
		_SC_RE_DUP_MAX =                   16,
		_SC_2_VERSION =                    17,
		_SC_2_C_BIND =                     18,
		_SC_2_C_DEV =                      19,
		_SC_2_CHAR_TERM =                  20,
		_SC_2_FORT_DEV =                   21,
		_SC_2_FORT_RUN =                   22,
		_SC_2_LOCALEDEF =                  23,
		_SC_2_SW_DEV =                     24,
		_SC_2_UPE =                        25,
		_SC_STREAM_MAX =                   26,
		_SC_TZNAME_MAX =                   27,
		_SC_ASYNCHRONOUS_IO =              28,
		_SC_MAPPED_FILES =                 29,
		_SC_MEMLOCK =                      30,
		_SC_MEMLOCK_RANGE =                31,
		_SC_MEMORY_PROTECTION =            32,
		_SC_MESSAGE_PASSING =              33,
		_SC_PRIORITIZED_IO =               34,
		_SC_PRIORITY_SCHEDULING =          35,
		_SC_REALTIME_SIGNALS =             36,
		_SC_SEMAPHORES =                   37,
		_SC_FSYNC =                        38,
		_SC_SHARED_MEMORY_OBJECTS =        39,
		_SC_SYNCHRONIZED_IO =              40,
		_SC_TIMERS =                       41,
		_SC_AIO_LISTIO_MAX =               42,
		_SC_AIO_MAX =                      43,
		_SC_AIO_PRIO_DELTA_MAX =           44,
		_SC_DELAYTIMER_MAX =               45,
		_SC_MQ_OPEN_MAX =                  46,
		_SC_PAGE_SIZE =                    47,
		_SC_PAGESIZE =                     47,
		_SC_RTSIG_MAX =                    48,
		_SC_SEM_NSEMS_MAX =                49,
		_SC_SEM_VALUE_MAX =                50,
		_SC_SIGQUEUE_MAX =                 51,
		_SC_TIMER_MAX =                    52,
		_SC_IOV_MAX =                      56,
		_SC_NPROCESSORS_CONF =             57,
		_SC_NPROCESSORS_ONLN =             58,
		_SC_2_PBS =                        59,
		_SC_2_PBS_ACCOUNTING =             60,
		_SC_2_PBS_CHECKPOINT =             61,
		_SC_2_PBS_LOCATE =                 62,
		_SC_2_PBS_MESSAGE =                63,
		_SC_2_PBS_TRACK =                  64,
		_SC_ADVISORY_INFO =                65,
		_SC_BARRIERS =                     66,
		_SC_CLOCK_SELECTION =              67,
		_SC_CPUTIME =                      68,
		_SC_FILE_LOCKING =                 69,
		_SC_GETGR_R_SIZE_MAX =             70,
		_SC_GETPW_R_SIZE_MAX =             71,
		_SC_HOST_NAME_MAX =                72,
		_SC_LOGIN_NAME_MAX =               73,
		_SC_MONOTONIC_CLOCK =              74,
		_SC_MQ_PRIO_MAX =                  75,
		_SC_READER_WRITER_LOCKS =          76,
		_SC_REGEXP =                       77,
		_SC_SHELL =                        78,
		_SC_SPAWN =                        79,
		_SC_SPIN_LOCKS =                   80,
		_SC_SPORADIC_SERVER =              81,
		_SC_THREAD_ATTR_STACKADDR =        82,
		_SC_THREAD_ATTR_STACKSIZE =        83,
		_SC_THREAD_CPUTIME =               84,
		_SC_THREAD_DESTRUCTOR_ITERATIONS = 85,
		_SC_THREAD_KEYS_MAX =              86,
		_SC_THREAD_PRIO_INHERIT =          87,
		_SC_THREAD_PRIO_PROTECT =          88,
		_SC_THREAD_PRIORITY_SCHEDULING =   89,
		_SC_THREAD_PROCESS_SHARED =        90,
		_SC_THREAD_SAFE_FUNCTIONS =        91,
		_SC_THREAD_SPORADIC_SERVER =       92,
		_SC_THREAD_STACK_MIN =             93,
		_SC_THREAD_THREADS_MAX =           94,
		_SC_TIMEOUTS =                     95,
		_SC_THREADS =                      96,
		_SC_TRACE =                        97,
		_SC_TRACE_EVENT_FILTER =           98,
		_SC_TRACE_INHERIT =                99,
		_SC_TRACE_LOG =                   100,
		_SC_TTY_NAME_MAX =                101,
		_SC_TYPED_MEMORY_OBJECTS =        102,
		_SC_V6_ILP32_OFF32 =              103,
		_SC_V6_ILP32_OFFBIG =             104,
		_SC_V6_LP64_OFF64 =               105,
		_SC_V6_LPBIG_OFFBIG =             106,
		_SC_ATEXIT_MAX =                  107,
		_SC_XOPEN_CRYPT =                 108,
		_SC_XOPEN_ENH_I18N =              109,
		_SC_XOPEN_LEGACY =                110,
		_SC_XOPEN_REALTIME =              111,
		_SC_XOPEN_REALTIME_THREADS =      112,
		_SC_XOPEN_SHM =                   113,
		_SC_XOPEN_STREAMS =               114,
		_SC_XOPEN_UNIX =                  115,
		_SC_XOPEN_VERSION =               116,
		_SC_XOPEN_XCU_VERSION =           117,
		_SC_IPV6 =                        118,
		_SC_RAW_SOCKETS =                 119,
		_SC_SYMLOOP_MAX =                 120,
		_SC_PHYS_PAGES =                  121,
		_SC_CPUSET_SIZE =                 122,
	}
	public enum SystemError : int {
		[ErrorCodeSuccess]
		None =             0,
		EPERM =            1,
		ENOENT =           2,
		ESRCH =            3,
		EINTR =            4,
		EIO =              5,
		ENXIO =            6,
		E2BIG =            7,
		ENOEXEC =          8,
		EBADF =            9,
		ECHILD =          10,
		EDEADLK =         11,
		ENOMEM =          12,
		EACCES =          13,
		EFAULT =          14,
		ENOTBLK =         15,
		EBUSY =           16,
		EEXIST =          17,
		EXDEV =           18,
		ENODEV =          19,
		ENOTDIR =         20,
		EISDIR =          21,
		EINVAL =          22,
		ENFILE =          23,
		EMFILE =          24,
		ENOTTY =          25,
		ETXTBSY =         26,
		EFBIG =           27,
		ENOSPC =          28,
		ESPIPE =          29,
		EROFS =           30,
		EMLINK =          31,
		EPIPE =           32,
		EDOM =            33,
		ERANGE =          34,
		EAGAIN =          35,
		EWOULDBLOCK =     35,
		EINPROGRESS =     36,
		EALREADY =        37,
		ENOTSOCK =        38,
		EDESTADDRREQ =    39,
		EMSGSIZE =        40,
		EPROTOTYPE =      41,
		ENOPROTOOPT =     42,
		EPROTONOSUPPORT = 43,
		ESOCKTNOSUPPORT = 44,
		ENOTSUP =         45,
		EOPNOTSUPP =      45,
		EPFNOSUPPORT =    46,
		EAFNOSUPPORT =    47,
		EADDRINUSE =      48,
		EADDRNOTAVAIL =   49,
		ENETDOWN =        50,
		ENETUNREACH =     51,
		ENETRESET =       52,
		ECONNABORTED =    53,
		ECONNRESET =      54,
		ENOBUFS =         55,
		EISCONN =         56,
		ENOTCONN =        57,
		ESHUTDOWN =       58,
		ETOOMANYREFS =    59,
		ETIMEDOUT =       60,
		ECONNREFUSED =    61,
		ELOOP =           62,
		ENAMETOOLONG =    63,
		EHOSTDOWN =       64,
		EHOSTUNREACH =    65,
		ENOTEMPTY =       66,
		EPROCLIM =        67,
		EUSERS =          68,
		EDQUOT =          69,
		ESTALE =          70,
		EREMOTE =         71,
		EBADRPC =         72,
		ERPCMISMATCH =    73,
		EPROGUNAVAIL =    74,
		EPROGMISMATCH =   75,
		EPROCUNAVAIL =    76,
		ENOLCK =          77,
		ENOSYS =          78,
		EFTYPE =          79,
		EAUTH =           80,
		ENEEDAUTH =       81,
		EIDRM =           82,
		ENOMSG =          83,
		EOVERFLOW =       84,
		ECANCELED =       85,
		EILSEQ =          86,
		ENOATTR =         87,
		EDOOFUS =         88,
		EBADMSG =         89,
		EMULTIHOP =       90,
		ENOLINK =         91,
		EPROTO =          92,
		ENOTCAPABLE =     93,
		ECAPMODE =        94,
		ENOTRECOVERABLE = 95,
		ELAST =           96,
		EOWNERDEAD =      96,
	}
	[Flags]
	public enum TerminalControlSignal : uint {
		None =        0,
		TIOCM_LE =    1,
		TIOCM_DTR =   2,
		TIOCM_RTS =   4,
		TIOCM_ST =    8,
		TIOCM_SR =   16,
		TIOCM_CTS =  32,
		TIOCM_CAR =  64,
		TIOCM_CD =   64,
		TIOCM_DCD =  64,
		TIOCM_RI =  128,
		TIOCM_RNG = 128,
		TIOCM_DSR = 256,
	}
	public enum ThreadCancellationType : uint {
		PTHREAD_CANCEL_DEFERRED =     0,
		PTHREAD_CANCEL_ENABLE =       0,
		PTHREAD_CANCEL_DISABLE =      1,
		PTHREAD_CANCEL_ASYNCHRONOUS = 2,
	}
	[Flags]
	public enum ThreadCreateFlags : int {
		None =                  0,
		PTHREAD_DETACHED =      1,
		PTHREAD_SCOPE_SYSTEM =  2,
		PTHREAD_INHERIT_SCHED = 4,
		PTHREAD_NOFLOAT =       8,
	}
	public enum uio_rw : uint {
		UIO_READ =  0,
		UIO_WRITE = 1,
	}
	public enum uio_seg : uint {
		UIO_USERSPACE = 0,
		UIO_SYSSPACE =  1,
		UIO_NOCOPY =    2,
	}
	[Flags]
	public enum WaitIdFlags : uint {
		None =       0,
		WSTOPPED =   2,
		WCONTINUED = 4,
		WNOWAIT =    8,
		WEXITED =   16,
	}
	[Flags]
	public enum WaitPidFlags : uint {
		None =      0,
		WNOHANG =   1,
		WUNTRACED = 2,
	}
	public enum UnnamedEnum_C32454D7 : uint {
		RT_CONSISTENT = 0,
		RT_ADD =        1,
		RT_DELETE =     2,
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct __dlfunc_arg {
		[ExplicitOffset( Offset = 0 )]
		public int __dlfunc_dummy;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct __infinity_un {
		[Overlapped( Offset = 0 )]
		public byte[8] __uc;
		[Overlapped( Offset = 0 )]
		public double __ud;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct __mbstate_t {
		[Overlapped( Offset = 0 )]
		public sbyte[128] __mbstate8;
		[Overlapped( Offset = 0 )]
		public intptr _mbstateL;
	}
	[ExplicitSize( Size = 152 )]
	[Alignment( Boundary = 8 )]
	public partial struct __msfilterreq {
		[ExplicitOffset( Offset = 0 )]
		public uint msfr_ifindex;
		[ExplicitOffset( Offset = 4 )]
		public uint msfr_fmode;
		[ExplicitOffset( Offset = 8 )]
		public uint msfr_nsrcs;
		[ExplicitOffset( Offset = 16 )]
		public sockaddr_storage msfr_group;
		[ExplicitOffset( Offset = 144 )]
		public sockaddr_storage* msfr_srcs;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct __nan_un {
		[Overlapped( Offset = 0 )]
		public byte[4] __uc;
		[Overlapped( Offset = 0 )]
		public float __uf;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct __oflock {
		[ExplicitOffset( Offset = 0 )]
		public intptr l_start;
		[ExplicitOffset( Offset = 8 )]
		public intptr l_len;
		[ExplicitOffset( Offset = 16 )]
		public int l_pid;
		[ExplicitOffset( Offset = 20 )]
		public short l_type;
		[ExplicitOffset( Offset = 22 )]
		public short l_whence;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct __sbuf {
		[ExplicitOffset( Offset = 0 )]
		public byte* _base;
		[ExplicitOffset( Offset = 8 )]
		public int _size;
	}
	[ExplicitSize( Size = 288 )]
	[Alignment( Boundary = 8 )]
	public partial struct __wrusage {
		[ExplicitOffset( Offset = 0 )]
		public rusage wru_self;
		[ExplicitOffset( Offset = 144 )]
		public rusage wru_children;
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct _jmp_buf {
		[ExplicitOffset( Offset = 0 )]
		public intptr[12] _jb;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct _pthread_cleanup_info {
		[ExplicitOffset( Offset = 0 )]
		public uintptr[8] pthread_cleanup_pad;
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct _sigjmp_buf {
		[ExplicitOffset( Offset = 0 )]
		public intptr[12] _sjb;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct _umtx_time {
		[ExplicitOffset( Offset = 0 )]
		public timespec _timeout;
		[ExplicitOffset( Offset = 16 )]
		public uint _flags;
		[ExplicitOffset( Offset = 20 )]
		public uint _clockid;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct _usem {
		[ExplicitOffset( Offset = 0 )]
		public uint _has_waiters;
		[ExplicitOffset( Offset = 4 )]
		public uint _count;
		[ExplicitOffset( Offset = 8 )]
		public uint _flags;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct _usem2 {
		[ExplicitOffset( Offset = 0 )]
		public uint _count;
		[ExplicitOffset( Offset = 4 )]
		public uint _flags;
	}
	[ExplicitSize( Size = 256 )]
	public partial struct accept_filter_arg {
		[ExplicitOffset( Offset = 0 )]
		public sbyte[16] af_name;
		[ExplicitOffset( Offset = 16 )]
		public sbyte[240] af_arg;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct au_evclass_map {
		[ExplicitOffset( Offset = 0 )]
		public ushort ec_number;
		[ExplicitOffset( Offset = 4 )]
		public uint ec_class;
	}
	[ExplicitSize( Size = 66 )]
	[Alignment( Boundary = 2 )]
	public partial struct au_evname_map {
		[ExplicitOffset( Offset = 0 )]
		public ushort en_number;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[64] en_name;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct au_mask {
		[ExplicitOffset( Offset = 0 )]
		public uint am_success;
		[ExplicitOffset( Offset = 4 )]
		public uint am_failure;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct au_qctrl {
		[ExplicitOffset( Offset = 0 )]
		public int aq_hiwater;
		[ExplicitOffset( Offset = 4 )]
		public int aq_lowater;
		[ExplicitOffset( Offset = 8 )]
		public int aq_bufsz;
		[ExplicitOffset( Offset = 12 )]
		public int aq_delay;
		[ExplicitOffset( Offset = 16 )]
		public int aq_minfree;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct au_session {
		[ExplicitOffset( Offset = 0 )]
		public auditinfo_addr* as_aia_p;
		[ExplicitOffset( Offset = 8 )]
		public au_mask as_mask;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct au_tid {
		[ExplicitOffset( Offset = 0 )]
		public uint port;
		[ExplicitOffset( Offset = 4 )]
		public uint machine;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct au_tid_addr {
		[ExplicitOffset( Offset = 0 )]
		public uint at_port;
		[ExplicitOffset( Offset = 4 )]
		public uint at_type;
		[ExplicitOffset( Offset = 8 )]
		public uint[4] at_addr;
	}
	public partial struct au_token {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct audit_fstat {
		[ExplicitOffset( Offset = 0 )]
		public uintptr af_filesz;
		[ExplicitOffset( Offset = 8 )]
		public uintptr af_currsz;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 4 )]
	public partial struct audit_stat {
		[ExplicitOffset( Offset = 0 )]
		public uint as_version;
		[ExplicitOffset( Offset = 4 )]
		public uint as_numevent;
		[ExplicitOffset( Offset = 8 )]
		public int as_generated;
		[ExplicitOffset( Offset = 12 )]
		public int as_nonattrib;
		[ExplicitOffset( Offset = 16 )]
		public int as_kernel;
		[ExplicitOffset( Offset = 20 )]
		public int as_audit;
		[ExplicitOffset( Offset = 24 )]
		public int as_auditctl;
		[ExplicitOffset( Offset = 28 )]
		public int as_enqueue;
		[ExplicitOffset( Offset = 32 )]
		public int as_written;
		[ExplicitOffset( Offset = 36 )]
		public int as_wblocked;
		[ExplicitOffset( Offset = 40 )]
		public int as_rblocked;
		[ExplicitOffset( Offset = 44 )]
		public int as_dropped;
		[ExplicitOffset( Offset = 48 )]
		public int as_totalsize;
		[ExplicitOffset( Offset = 52 )]
		public uint as_memused;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct auditinfo {
		[ExplicitOffset( Offset = 0 )]
		public uint ai_auid;
		[ExplicitOffset( Offset = 4 )]
		public au_mask ai_mask;
		[ExplicitOffset( Offset = 12 )]
		public au_tid ai_termid;
		[ExplicitOffset( Offset = 20 )]
		public int ai_asid;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct auditinfo_addr {
		[ExplicitOffset( Offset = 0 )]
		public uint ai_auid;
		[ExplicitOffset( Offset = 4 )]
		public au_mask ai_mask;
		[ExplicitOffset( Offset = 12 )]
		public au_tid_addr ai_termid;
		[ExplicitOffset( Offset = 36 )]
		public int ai_asid;
		[ExplicitOffset( Offset = 40 )]
		public uintptr ai_flags;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct auditpinfo {
		[ExplicitOffset( Offset = 0 )]
		public int ap_pid;
		[ExplicitOffset( Offset = 4 )]
		public uint ap_auid;
		[ExplicitOffset( Offset = 8 )]
		public au_mask ap_mask;
		[ExplicitOffset( Offset = 16 )]
		public au_tid ap_termid;
		[ExplicitOffset( Offset = 24 )]
		public int ap_asid;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct auditpinfo_addr {
		[ExplicitOffset( Offset = 0 )]
		public int ap_pid;
		[ExplicitOffset( Offset = 4 )]
		public uint ap_auid;
		[ExplicitOffset( Offset = 8 )]
		public au_mask ap_mask;
		[ExplicitOffset( Offset = 16 )]
		public au_tid_addr ap_termid;
		[ExplicitOffset( Offset = 40 )]
		public int ap_asid;
		[ExplicitOffset( Offset = 48 )]
		public uintptr ap_flags;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct bintime {
		[ExplicitOffset( Offset = 0 )]
		public intptr sec;
		[ExplicitOffset( Offset = 8 )]
		public uintptr frac;
	}
	public partial struct cap_rights {
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct clockinfo {
		[ExplicitOffset( Offset = 0 )]
		public int hz;
		[ExplicitOffset( Offset = 4 )]
		public int tick;
		[ExplicitOffset( Offset = 8 )]
		public int spare;
		[ExplicitOffset( Offset = 12 )]
		public int stathz;
		[ExplicitOffset( Offset = 16 )]
		public int profhz;
	}
	[ExplicitSize( Size = 84 )]
	[Alignment( Boundary = 4 )]
	public partial struct cmsgcred {
		[ExplicitOffset( Offset = 0 )]
		public int cmcred_pid;
		[ExplicitOffset( Offset = 4 )]
		public uint cmcred_uid;
		[ExplicitOffset( Offset = 8 )]
		public uint cmcred_euid;
		[ExplicitOffset( Offset = 12 )]
		public uint cmcred_gid;
		[ExplicitOffset( Offset = 16 )]
		public short cmcred_ngroups;
		[ExplicitOffset( Offset = 20 )]
		public uint[16] cmcred_groups;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct cmsghdr {
		[ExplicitOffset( Offset = 0 )]
		public uint cmsg_len;
		[ExplicitOffset( Offset = 4 )]
		public int cmsg_level;
		[ExplicitOffset( Offset = 8 )]
		public int cmsg_type;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct cookie_io_functions_t {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<void*, sbyte*, uintptr, intptr> read;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<void*, sbyte*, uintptr, intptr> write;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<void*, intptr*, int, int> seek;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<void*, int> close;
	}
	[ExplicitSize( Size = 260 )]
	[Alignment( Boundary = 4 )]
	public partial struct crypt_data {
		[ExplicitOffset( Offset = 0 )]
		public int initialized;
		[ExplicitOffset( Offset = 4 )]
		public sbyte[256] __buf;
	}
	public partial struct DIR {
	}
	[ExplicitSize( Size = 280 )]
	[Alignment( Boundary = 8 )]
	public partial struct dirent {
		[ExplicitOffset( Offset = 0 )]
		public uintptr d_fileno;
		[ExplicitOffset( Offset = 8 )]
		public intptr d_off;
		[ExplicitOffset( Offset = 16 )]
		public ushort d_reclen;
		[ExplicitOffset( Offset = 18 )]
		public byte d_type;
		[ExplicitOffset( Offset = 19 )]
		public byte d_pad0;
		[ExplicitOffset( Offset = 20 )]
		public ushort d_namlen;
		[ExplicitOffset( Offset = 22 )]
		public ushort d_pad1;
		[ExplicitOffset( Offset = 24 )]
		public sbyte[256] d_name;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct div_t {
		[ExplicitOffset( Offset = 0 )]
		public int quot;
		[ExplicitOffset( Offset = 4 )]
		public int rem;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct dl_info {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String dli_fname;
		[ExplicitOffset( Offset = 8 )]
		public void* dli_fbase;
		[ExplicitOffset( Offset = 16 )]
		public CUtf8String dli_sname;
		[ExplicitOffset( Offset = 24 )]
		public void* dli_saddr;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct dl_phdr_info {
		[ExplicitOffset( Offset = 0 )]
		public uintptr dlpi_addr;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String dlpi_name;
		[ExplicitOffset( Offset = 16 )]
		public Elf64_Phdr* dlpi_phdr;
		[ExplicitOffset( Offset = 24 )]
		public ushort dlpi_phnum;
		[ExplicitOffset( Offset = 32 )]
		public ulong dlpi_adds;
		[ExplicitOffset( Offset = 40 )]
		public ulong dlpi_subs;
		[ExplicitOffset( Offset = 48 )]
		public uintptr dlpi_tls_modid;
		[ExplicitOffset( Offset = 56 )]
		public void* dlpi_tls_data;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct dl_serinfo {
		[ExplicitOffset( Offset = 0 )]
		public uintptr dls_size;
		[ExplicitOffset( Offset = 8 )]
		public uint dls_cnt;
		[ExplicitOffset( Offset = 16 )]
		public dl_serpath[1] dls_serpath;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct dl_serpath {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String dls_name;
		[ExplicitOffset( Offset = 8 )]
		public uint dls_flags;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf_GNU_Hash_Header {
		[ExplicitOffset( Offset = 0 )]
		public uint gh_nbuckets;
		[ExplicitOffset( Offset = 4 )]
		public uint gh_symndx;
		[ExplicitOffset( Offset = 8 )]
		public uint gh_maskwords;
		[ExplicitOffset( Offset = 12 )]
		public uint gh_shift2;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf_Note {
		[ExplicitOffset( Offset = 0 )]
		public uint n_namesz;
		[ExplicitOffset( Offset = 4 )]
		public uint n_descsz;
		[ExplicitOffset( Offset = 8 )]
		public uint n_type;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Auxinfo {
		[ExplicitOffset( Offset = 0 )]
		public int a_type;
		[ExplicitOffset( Offset = 4 )]
		public UnnamedUnion_9DD2C816 a_un;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Cap {
		[ExplicitOffset( Offset = 0 )]
		public uint c_tag;
		[ExplicitOffset( Offset = 4 )]
		public UnnamedUnion_B56A5F00 c_un;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Chdr {
		[ExplicitOffset( Offset = 0 )]
		public uint ch_type;
		[ExplicitOffset( Offset = 4 )]
		public uint ch_size;
		[ExplicitOffset( Offset = 8 )]
		public uint ch_addralign;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Dyn {
		[ExplicitOffset( Offset = 0 )]
		public int d_tag;
		[ExplicitOffset( Offset = 4 )]
		public UnnamedUnion_B56A5706 d_un;
	}
	[ExplicitSize( Size = 52 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Ehdr {
		[ExplicitOffset( Offset = 0 )]
		public byte[16] e_ident;
		[ExplicitOffset( Offset = 16 )]
		public ushort e_type;
		[ExplicitOffset( Offset = 18 )]
		public ushort e_machine;
		[ExplicitOffset( Offset = 20 )]
		public uint e_version;
		[ExplicitOffset( Offset = 24 )]
		public uint e_entry;
		[ExplicitOffset( Offset = 28 )]
		public uint e_phoff;
		[ExplicitOffset( Offset = 32 )]
		public uint e_shoff;
		[ExplicitOffset( Offset = 36 )]
		public uint e_flags;
		[ExplicitOffset( Offset = 40 )]
		public ushort e_ehsize;
		[ExplicitOffset( Offset = 42 )]
		public ushort e_phentsize;
		[ExplicitOffset( Offset = 44 )]
		public ushort e_phnum;
		[ExplicitOffset( Offset = 46 )]
		public ushort e_shentsize;
		[ExplicitOffset( Offset = 48 )]
		public ushort e_shnum;
		[ExplicitOffset( Offset = 50 )]
		public ushort e_shstrndx;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Lib {
		[ExplicitOffset( Offset = 0 )]
		public uint l_name;
		[ExplicitOffset( Offset = 4 )]
		public uint l_time_stamp;
		[ExplicitOffset( Offset = 8 )]
		public uint l_checksum;
		[ExplicitOffset( Offset = 12 )]
		public uint l_version;
		[ExplicitOffset( Offset = 16 )]
		public uint l_flags;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf32_Move {
		[ExplicitOffset( Offset = 0 )]
		public uintptr m_value;
		[ExplicitOffset( Offset = 8 )]
		public uint m_info;
		[ExplicitOffset( Offset = 12 )]
		public uint m_poffset;
		[ExplicitOffset( Offset = 16 )]
		public ushort m_repeat;
		[ExplicitOffset( Offset = 18 )]
		public ushort m_stride;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Phdr {
		[ExplicitOffset( Offset = 0 )]
		public uint p_type;
		[ExplicitOffset( Offset = 4 )]
		public uint p_offset;
		[ExplicitOffset( Offset = 8 )]
		public uint p_vaddr;
		[ExplicitOffset( Offset = 12 )]
		public uint p_paddr;
		[ExplicitOffset( Offset = 16 )]
		public uint p_filesz;
		[ExplicitOffset( Offset = 20 )]
		public uint p_memsz;
		[ExplicitOffset( Offset = 24 )]
		public uint p_flags;
		[ExplicitOffset( Offset = 28 )]
		public uint p_align;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Rel {
		[ExplicitOffset( Offset = 0 )]
		public uint r_offset;
		[ExplicitOffset( Offset = 4 )]
		public uint r_info;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Rela {
		[ExplicitOffset( Offset = 0 )]
		public uint r_offset;
		[ExplicitOffset( Offset = 4 )]
		public uint r_info;
		[ExplicitOffset( Offset = 8 )]
		public int r_addend;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Shdr {
		[ExplicitOffset( Offset = 0 )]
		public uint sh_name;
		[ExplicitOffset( Offset = 4 )]
		public uint sh_type;
		[ExplicitOffset( Offset = 8 )]
		public uint sh_flags;
		[ExplicitOffset( Offset = 12 )]
		public uint sh_addr;
		[ExplicitOffset( Offset = 16 )]
		public uint sh_offset;
		[ExplicitOffset( Offset = 20 )]
		public uint sh_size;
		[ExplicitOffset( Offset = 24 )]
		public uint sh_link;
		[ExplicitOffset( Offset = 28 )]
		public uint sh_info;
		[ExplicitOffset( Offset = 32 )]
		public uint sh_addralign;
		[ExplicitOffset( Offset = 36 )]
		public uint sh_entsize;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Sym {
		[ExplicitOffset( Offset = 0 )]
		public uint st_name;
		[ExplicitOffset( Offset = 4 )]
		public uint st_value;
		[ExplicitOffset( Offset = 8 )]
		public uint st_size;
		[ExplicitOffset( Offset = 12 )]
		public byte st_info;
		[ExplicitOffset( Offset = 13 )]
		public byte st_other;
		[ExplicitOffset( Offset = 14 )]
		public ushort st_shndx;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 2 )]
	public partial struct Elf32_Syminfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort si_boundto;
		[ExplicitOffset( Offset = 2 )]
		public ushort si_flags;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Verdaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vda_name;
		[ExplicitOffset( Offset = 4 )]
		public uint vda_next;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Verdef {
		[ExplicitOffset( Offset = 0 )]
		public ushort vd_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vd_flags;
		[ExplicitOffset( Offset = 4 )]
		public ushort vd_ndx;
		[ExplicitOffset( Offset = 6 )]
		public ushort vd_cnt;
		[ExplicitOffset( Offset = 8 )]
		public uint vd_hash;
		[ExplicitOffset( Offset = 12 )]
		public uint vd_aux;
		[ExplicitOffset( Offset = 16 )]
		public uint vd_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Vernaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vna_hash;
		[ExplicitOffset( Offset = 4 )]
		public ushort vna_flags;
		[ExplicitOffset( Offset = 6 )]
		public ushort vna_other;
		[ExplicitOffset( Offset = 8 )]
		public uint vna_name;
		[ExplicitOffset( Offset = 12 )]
		public uint vna_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Verneed {
		[ExplicitOffset( Offset = 0 )]
		public ushort vn_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vn_cnt;
		[ExplicitOffset( Offset = 4 )]
		public uint vn_file;
		[ExplicitOffset( Offset = 8 )]
		public uint vn_aux;
		[ExplicitOffset( Offset = 12 )]
		public uint vn_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Auxinfo {
		[ExplicitOffset( Offset = 0 )]
		public intptr a_type;
		[ExplicitOffset( Offset = 8 )]
		public UnnamedUnion_9DD2C70E a_un;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Cap {
		[ExplicitOffset( Offset = 0 )]
		public uintptr c_tag;
		[ExplicitOffset( Offset = 8 )]
		public UnnamedUnion_C30DE334 c_un;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Chdr {
		[ExplicitOffset( Offset = 0 )]
		public uint ch_type;
		[ExplicitOffset( Offset = 4 )]
		public uint ch_reserved;
		[ExplicitOffset( Offset = 8 )]
		public uintptr ch_size;
		[ExplicitOffset( Offset = 16 )]
		public uintptr ch_addralign;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Dyn {
		[ExplicitOffset( Offset = 0 )]
		public intptr d_tag;
		[ExplicitOffset( Offset = 8 )]
		public UnnamedUnion_C30DDA70 d_un;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Ehdr {
		[ExplicitOffset( Offset = 0 )]
		public byte[16] e_ident;
		[ExplicitOffset( Offset = 16 )]
		public ushort e_type;
		[ExplicitOffset( Offset = 18 )]
		public ushort e_machine;
		[ExplicitOffset( Offset = 20 )]
		public uint e_version;
		[ExplicitOffset( Offset = 24 )]
		public uintptr e_entry;
		[ExplicitOffset( Offset = 32 )]
		public uintptr e_phoff;
		[ExplicitOffset( Offset = 40 )]
		public uintptr e_shoff;
		[ExplicitOffset( Offset = 48 )]
		public uint e_flags;
		[ExplicitOffset( Offset = 52 )]
		public ushort e_ehsize;
		[ExplicitOffset( Offset = 54 )]
		public ushort e_phentsize;
		[ExplicitOffset( Offset = 56 )]
		public ushort e_phnum;
		[ExplicitOffset( Offset = 58 )]
		public ushort e_shentsize;
		[ExplicitOffset( Offset = 60 )]
		public ushort e_shnum;
		[ExplicitOffset( Offset = 62 )]
		public ushort e_shstrndx;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Lib {
		[ExplicitOffset( Offset = 0 )]
		public uint l_name;
		[ExplicitOffset( Offset = 4 )]
		public uint l_time_stamp;
		[ExplicitOffset( Offset = 8 )]
		public uint l_checksum;
		[ExplicitOffset( Offset = 12 )]
		public uint l_version;
		[ExplicitOffset( Offset = 16 )]
		public uint l_flags;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Move {
		[ExplicitOffset( Offset = 0 )]
		public uintptr m_value;
		[ExplicitOffset( Offset = 8 )]
		public uintptr m_info;
		[ExplicitOffset( Offset = 16 )]
		public uintptr m_poffset;
		[ExplicitOffset( Offset = 24 )]
		public ushort m_repeat;
		[ExplicitOffset( Offset = 26 )]
		public ushort m_stride;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Phdr {
		[ExplicitOffset( Offset = 0 )]
		public uint p_type;
		[ExplicitOffset( Offset = 4 )]
		public uint p_flags;
		[ExplicitOffset( Offset = 8 )]
		public uintptr p_offset;
		[ExplicitOffset( Offset = 16 )]
		public uintptr p_vaddr;
		[ExplicitOffset( Offset = 24 )]
		public uintptr p_paddr;
		[ExplicitOffset( Offset = 32 )]
		public uintptr p_filesz;
		[ExplicitOffset( Offset = 40 )]
		public uintptr p_memsz;
		[ExplicitOffset( Offset = 48 )]
		public uintptr p_align;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Rel {
		[ExplicitOffset( Offset = 0 )]
		public uintptr r_offset;
		[ExplicitOffset( Offset = 8 )]
		public uintptr r_info;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Rela {
		[ExplicitOffset( Offset = 0 )]
		public uintptr r_offset;
		[ExplicitOffset( Offset = 8 )]
		public uintptr r_info;
		[ExplicitOffset( Offset = 16 )]
		public intptr r_addend;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Shdr {
		[ExplicitOffset( Offset = 0 )]
		public uint sh_name;
		[ExplicitOffset( Offset = 4 )]
		public uint sh_type;
		[ExplicitOffset( Offset = 8 )]
		public uintptr sh_flags;
		[ExplicitOffset( Offset = 16 )]
		public uintptr sh_addr;
		[ExplicitOffset( Offset = 24 )]
		public uintptr sh_offset;
		[ExplicitOffset( Offset = 32 )]
		public uintptr sh_size;
		[ExplicitOffset( Offset = 40 )]
		public uint sh_link;
		[ExplicitOffset( Offset = 44 )]
		public uint sh_info;
		[ExplicitOffset( Offset = 48 )]
		public uintptr sh_addralign;
		[ExplicitOffset( Offset = 56 )]
		public uintptr sh_entsize;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct Elf64_Sym {
		[ExplicitOffset( Offset = 0 )]
		public uint st_name;
		[ExplicitOffset( Offset = 4 )]
		public byte st_info;
		[ExplicitOffset( Offset = 5 )]
		public byte st_other;
		[ExplicitOffset( Offset = 6 )]
		public ushort st_shndx;
		[ExplicitOffset( Offset = 8 )]
		public uintptr st_value;
		[ExplicitOffset( Offset = 16 )]
		public uintptr st_size;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 2 )]
	public partial struct Elf64_Syminfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort si_boundto;
		[ExplicitOffset( Offset = 2 )]
		public ushort si_flags;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Verdaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vda_name;
		[ExplicitOffset( Offset = 4 )]
		public uint vda_next;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Verdef {
		[ExplicitOffset( Offset = 0 )]
		public ushort vd_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vd_flags;
		[ExplicitOffset( Offset = 4 )]
		public ushort vd_ndx;
		[ExplicitOffset( Offset = 6 )]
		public ushort vd_cnt;
		[ExplicitOffset( Offset = 8 )]
		public uint vd_hash;
		[ExplicitOffset( Offset = 12 )]
		public uint vd_aux;
		[ExplicitOffset( Offset = 16 )]
		public uint vd_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Vernaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vna_hash;
		[ExplicitOffset( Offset = 4 )]
		public ushort vna_flags;
		[ExplicitOffset( Offset = 6 )]
		public ushort vna_other;
		[ExplicitOffset( Offset = 8 )]
		public uint vna_name;
		[ExplicitOffset( Offset = 12 )]
		public uint vna_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Verneed {
		[ExplicitOffset( Offset = 0 )]
		public ushort vn_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vn_cnt;
		[ExplicitOffset( Offset = 4 )]
		public uint vn_file;
		[ExplicitOffset( Offset = 8 )]
		public uint vn_aux;
		[ExplicitOffset( Offset = 12 )]
		public uint vn_next;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct fd_set {
		[ExplicitOffset( Offset = 0 )]
		public uintptr[16] __fds_bits;
	}
	[ExplicitSize( Size = 312 )]
	[Alignment( Boundary = 8 )]
	public partial struct FILE {
		[ExplicitOffset( Offset = 0 )]
		public byte* _p;
		[ExplicitOffset( Offset = 8 )]
		public int _r;
		[ExplicitOffset( Offset = 12 )]
		public int _w;
		[ExplicitOffset( Offset = 16 )]
		public short _flags;
		[ExplicitOffset( Offset = 18 )]
		public short _file;
		[ExplicitOffset( Offset = 24 )]
		public __sbuf _bf;
		[ExplicitOffset( Offset = 40 )]
		public int _lbfsize;
		[ExplicitOffset( Offset = 48 )]
		public void* _cookie;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<void*, int> _close;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<void*, sbyte*, int, int> _read;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<void*, intptr, int, intptr> _seek;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<void*, sbyte*, int, int> _write;
		[ExplicitOffset( Offset = 88 )]
		public __sbuf _ub;
		[ExplicitOffset( Offset = 104 )]
		public byte* _up;
		[ExplicitOffset( Offset = 112 )]
		public int _ur;
		[ExplicitOffset( Offset = 116 )]
		public byte[3] _ubuf;
		[ExplicitOffset( Offset = 119 )]
		public byte[1] _nbuf;
		[ExplicitOffset( Offset = 120 )]
		public __sbuf _lb;
		[ExplicitOffset( Offset = 136 )]
		public int _blksize;
		[ExplicitOffset( Offset = 144 )]
		public intptr _offset;
		[ExplicitOffset( Offset = 152 )]
		public pthread_mutex* _fl_mutex;
		[ExplicitOffset( Offset = 160 )]
		public pthread* _fl_owner;
		[ExplicitOffset( Offset = 168 )]
		public int _fl_count;
		[ExplicitOffset( Offset = 172 )]
		public int _orientation;
		[ExplicitOffset( Offset = 176 )]
		public __mbstate_t _mbstate;
		[ExplicitOffset( Offset = 304 )]
		public int _flags2;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct fiodgname_arg {
		[ExplicitOffset( Offset = 0 )]
		public int len;
		[ExplicitOffset( Offset = 8 )]
		public void* buf;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct flock {
		[ExplicitOffset( Offset = 0 )]
		public intptr l_start;
		[ExplicitOffset( Offset = 8 )]
		public intptr l_len;
		[ExplicitOffset( Offset = 16 )]
		public int l_pid;
		[ExplicitOffset( Offset = 20 )]
		public short l_type;
		[ExplicitOffset( Offset = 22 )]
		public short l_whence;
		[ExplicitOffset( Offset = 24 )]
		public int l_sysid;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct group {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String gr_name;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* gr_passwd;
		[ExplicitOffset( Offset = 16 )]
		public uint gr_gid;
		[ExplicitOffset( Offset = 24 )]
		public sbyte** gr_mem;
	}
	[ExplicitSize( Size = 136 )]
	[Alignment( Boundary = 8 )]
	public partial struct group_req {
		[ExplicitOffset( Offset = 0 )]
		public uint gr_interface;
		[ExplicitOffset( Offset = 8 )]
		public sockaddr_storage gr_group;
	}
	[ExplicitSize( Size = 264 )]
	[Alignment( Boundary = 8 )]
	public partial struct group_source_req {
		[ExplicitOffset( Offset = 0 )]
		public uint gsr_interface;
		[ExplicitOffset( Offset = 8 )]
		public sockaddr_storage gsr_group;
		[ExplicitOffset( Offset = 136 )]
		public sockaddr_storage gsr_source;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct ifaddrs {
		[ExplicitOffset( Offset = 0 )]
		public ifaddrs* ifa_next;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String ifa_name;
		[ExplicitOffset( Offset = 16 )]
		public uint ifa_flags;
		[ExplicitOffset( Offset = 24 )]
		public sockaddr* ifa_addr;
		[ExplicitOffset( Offset = 32 )]
		public sockaddr* ifa_netmask;
		[ExplicitOffset( Offset = 40 )]
		public sockaddr* ifa_dstaddr;
		[ExplicitOffset( Offset = 48 )]
		public void* ifa_data;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct ifmaddrs {
		[ExplicitOffset( Offset = 0 )]
		public ifmaddrs* ifma_next;
		[ExplicitOffset( Offset = 8 )]
		public sockaddr* ifma_name;
		[ExplicitOffset( Offset = 16 )]
		public sockaddr* ifma_addr;
		[ExplicitOffset( Offset = 24 )]
		public sockaddr* ifma_lladdr;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct in_addr {
		[ExplicitOffset( Offset = 0 )]
		public uint s_addr;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct in6_addr {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedUnion_AC88FF68 __u6_addr;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct in6_pktinfo {
		[ExplicitOffset( Offset = 0 )]
		public in6_addr ipi6_addr;
		[ExplicitOffset( Offset = 16 )]
		public uint ipi6_ifindex;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct iovec {
		[ExplicitOffset( Offset = 0 )]
		public void* iov_base;
		[ExplicitOffset( Offset = 8 )]
		public uintptr iov_len;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_mreq {
		[ExplicitOffset( Offset = 0 )]
		public in_addr imr_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public in_addr imr_interface;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_mreq_source {
		[ExplicitOffset( Offset = 0 )]
		public in_addr imr_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public in_addr imr_sourceaddr;
		[ExplicitOffset( Offset = 8 )]
		public in_addr imr_interface;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_mreqn {
		[ExplicitOffset( Offset = 0 )]
		public in_addr imr_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public in_addr imr_address;
		[ExplicitOffset( Offset = 8 )]
		public int imr_ifindex;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip6_mtuinfo {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_in6 ip6m_addr;
		[ExplicitOffset( Offset = 28 )]
		public uint ip6m_mtu;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct ipv6_mreq {
		[ExplicitOffset( Offset = 0 )]
		public in6_addr ipv6mr_multiaddr;
		[ExplicitOffset( Offset = 16 )]
		public uint ipv6mr_interface;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct itimerspec {
		[ExplicitOffset( Offset = 0 )]
		public timespec it_interval;
		[ExplicitOffset( Offset = 16 )]
		public timespec it_value;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct itimerval {
		[ExplicitOffset( Offset = 0 )]
		public timeval it_interval;
		[ExplicitOffset( Offset = 16 )]
		public timeval it_value;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct kevent {
		[ExplicitOffset( Offset = 0 )]
		public uintptr ident;
		[ExplicitOffset( Offset = 8 )]
		public short filter;
		[ExplicitOffset( Offset = 10 )]
		public ushort flags;
		[ExplicitOffset( Offset = 12 )]
		public uint fflags;
		[ExplicitOffset( Offset = 16 )]
		public intptr data;
		[ExplicitOffset( Offset = 24 )]
		public void* udata;
		[ExplicitOffset( Offset = 32 )]
		public uintptr[4] ext;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct klist {
		[ExplicitOffset( Offset = 0 )]
		public knote* slh_first;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct knlist {
		[ExplicitOffset( Offset = 0 )]
		public klist kl_list;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<void*> kl_lock;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<void*> kl_unlock;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<void*> kl_assert_locked;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<void*> kl_assert_unlocked;
		[ExplicitOffset( Offset = 40 )]
		public void* kl_lockarg;
		[ExplicitOffset( Offset = 48 )]
		public int kl_autodestroy;
	}
	public partial struct knote {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct kqlist {
		[ExplicitOffset( Offset = 0 )]
		public kqueue* tqh_first;
		[ExplicitOffset( Offset = 8 )]
		public kqueue** tqh_last;
	}
	public partial struct kqueue {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct ldiv_t {
		[ExplicitOffset( Offset = 0 )]
		public intptr quot;
		[ExplicitOffset( Offset = 8 )]
		public intptr rem;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct linger {
		[ExplicitOffset( Offset = 0 )]
		public int l_onoff;
		[ExplicitOffset( Offset = 4 )]
		public int l_linger;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct link_map {
		[ExplicitOffset( Offset = 0 )]
		public sbyte* l_addr;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String l_name;
		[ExplicitOffset( Offset = 16 )]
		public void* l_ld;
		[ExplicitOffset( Offset = 24 )]
		public link_map* l_next;
		[ExplicitOffset( Offset = 32 )]
		public link_map* l_prev;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct lldiv_t {
		[ExplicitOffset( Offset = 0 )]
		public long quot;
		[ExplicitOffset( Offset = 8 )]
		public long rem;
	}
	public partial struct llentry {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct loadavg {
		[ExplicitOffset( Offset = 0 )]
		public uint[3] ldavg;
		[ExplicitOffset( Offset = 16 )]
		public intptr fscale;
	}
	public partial struct locale_t {
	}
	public partial struct loginclass {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 16 )]
	public partial struct max_align_t {
		[ExplicitOffset( Offset = 0 )]
		public long __max_align1;
		[ExplicitOffset( Offset = 16 )]
		public uint[4] __max_align2;
	}
	public partial struct mbuf {
	}
	[ExplicitSize( Size = 800 )]
	[Alignment( Boundary = 16 )]
	public partial struct mcontext_t {
		[ExplicitOffset( Offset = 0 )]
		public intptr mc_onstack;
		[ExplicitOffset( Offset = 8 )]
		public intptr mc_rdi;
		[ExplicitOffset( Offset = 16 )]
		public intptr mc_rsi;
		[ExplicitOffset( Offset = 24 )]
		public intptr mc_rdx;
		[ExplicitOffset( Offset = 32 )]
		public intptr mc_rcx;
		[ExplicitOffset( Offset = 40 )]
		public intptr mc_r8;
		[ExplicitOffset( Offset = 48 )]
		public intptr mc_r9;
		[ExplicitOffset( Offset = 56 )]
		public intptr mc_rax;
		[ExplicitOffset( Offset = 64 )]
		public intptr mc_rbx;
		[ExplicitOffset( Offset = 72 )]
		public intptr mc_rbp;
		[ExplicitOffset( Offset = 80 )]
		public intptr mc_r10;
		[ExplicitOffset( Offset = 88 )]
		public intptr mc_r11;
		[ExplicitOffset( Offset = 96 )]
		public intptr mc_r12;
		[ExplicitOffset( Offset = 104 )]
		public intptr mc_r13;
		[ExplicitOffset( Offset = 112 )]
		public intptr mc_r14;
		[ExplicitOffset( Offset = 120 )]
		public intptr mc_r15;
		[ExplicitOffset( Offset = 128 )]
		public uint mc_trapno;
		[ExplicitOffset( Offset = 132 )]
		public ushort mc_fs;
		[ExplicitOffset( Offset = 134 )]
		public ushort mc_gs;
		[ExplicitOffset( Offset = 136 )]
		public intptr mc_addr;
		[ExplicitOffset( Offset = 144 )]
		public uint mc_flags;
		[ExplicitOffset( Offset = 148 )]
		public ushort mc_es;
		[ExplicitOffset( Offset = 150 )]
		public ushort mc_ds;
		[ExplicitOffset( Offset = 152 )]
		public intptr mc_err;
		[ExplicitOffset( Offset = 160 )]
		public intptr mc_rip;
		[ExplicitOffset( Offset = 168 )]
		public intptr mc_cs;
		[ExplicitOffset( Offset = 176 )]
		public intptr mc_rflags;
		[ExplicitOffset( Offset = 184 )]
		public intptr mc_rsp;
		[ExplicitOffset( Offset = 192 )]
		public intptr mc_ss;
		[ExplicitOffset( Offset = 200 )]
		public intptr mc_len;
		[ExplicitOffset( Offset = 208 )]
		public intptr mc_fpformat;
		[ExplicitOffset( Offset = 216 )]
		public intptr mc_ownedfp;
		[ExplicitOffset( Offset = 224 )]
		public intptr[64] mc_fpstate;
		[ExplicitOffset( Offset = 736 )]
		public intptr mc_fsbase;
		[ExplicitOffset( Offset = 744 )]
		public intptr mc_gsbase;
		[ExplicitOffset( Offset = 752 )]
		public intptr mc_xfpustate;
		[ExplicitOffset( Offset = 760 )]
		public intptr mc_xfpustate_len;
		[ExplicitOffset( Offset = 768 )]
		public intptr[4] mc_spare;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct mmsghdr {
		[ExplicitOffset( Offset = 0 )]
		public msghdr msg_hdr;
		[ExplicitOffset( Offset = 48 )]
		public intptr msg_len;
	}
	public partial struct mqd_t {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct msghdr {
		[ExplicitOffset( Offset = 0 )]
		public void* msg_name;
		[ExplicitOffset( Offset = 8 )]
		public uint msg_namelen;
		[ExplicitOffset( Offset = 16 )]
		public iovec* msg_iov;
		[ExplicitOffset( Offset = 24 )]
		public int msg_iovlen;
		[ExplicitOffset( Offset = 32 )]
		public void* msg_control;
		[ExplicitOffset( Offset = 40 )]
		public uint msg_controllen;
		[ExplicitOffset( Offset = 44 )]
		public int msg_flags;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct omsghdr {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String msg_name;
		[ExplicitOffset( Offset = 8 )]
		public int msg_namelen;
		[ExplicitOffset( Offset = 16 )]
		public iovec* msg_iov;
		[ExplicitOffset( Offset = 24 )]
		public int msg_iovlen;
		[ExplicitOffset( Offset = 32 )]
		public sbyte* msg_accrights;
		[ExplicitOffset( Offset = 40 )]
		public int msg_accrightslen;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct orlimit {
		[ExplicitOffset( Offset = 0 )]
		public int rlim_cur;
		[ExplicitOffset( Offset = 4 )]
		public int rlim_max;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 2 )]
	public partial struct osockaddr {
		[ExplicitOffset( Offset = 0 )]
		public ushort sa_family;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[14] sa_data;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct passwd {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String pw_name;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* pw_passwd;
		[ExplicitOffset( Offset = 16 )]
		public uint pw_uid;
		[ExplicitOffset( Offset = 20 )]
		public uint pw_gid;
		[ExplicitOffset( Offset = 24 )]
		public intptr pw_change;
		[ExplicitOffset( Offset = 32 )]
		public sbyte* pw_class;
		[ExplicitOffset( Offset = 40 )]
		public sbyte* pw_gecos;
		[ExplicitOffset( Offset = 48 )]
		public sbyte* pw_dir;
		[ExplicitOffset( Offset = 56 )]
		public sbyte* pw_shell;
		[ExplicitOffset( Offset = 64 )]
		public intptr pw_expire;
		[ExplicitOffset( Offset = 72 )]
		public int pw_fields;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct pollfd {
		[ExplicitOffset( Offset = 0 )]
		public int fd;
		[ExplicitOffset( Offset = 4 )]
		public short events;
		[ExplicitOffset( Offset = 6 )]
		public short revents;
	}
	public partial struct pthread {
	}
	public partial struct pthread {
	}
	public partial struct pthread_attr {
	}
	public partial struct pthread_attr {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_attr* ) )]
	public partial struct pthread_attr_t {
	}
	public partial struct pthread_barrier {
	}
	public partial struct pthread_barrier_attr {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_barrier* ) )]
	public partial struct pthread_barrier_t {
	}
	public partial struct pthread_barrierattr {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_barrierattr* ) )]
	public partial struct pthread_barrierattr_t {
	}
	public partial struct pthread_cond {
	}
	public partial struct pthread_cond_attr {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_cond* ) )]
	public partial struct pthread_cond_t {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_cond_attr* ) )]
	public partial struct pthread_condattr_t {
	}
	[Alignment( Boundary = 4 )]
	[PrimitiveType( Size = sizeof( int ) )]
	public partial struct pthread_key_t {
	}
	public partial struct pthread_mutex {
	}
	public partial struct pthread_mutex_attr {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_mutex* ) )]
	public partial struct pthread_mutex_t {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_mutex_attr* ) )]
	public partial struct pthread_mutexattr_t {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct pthread_once {
		[ExplicitOffset( Offset = 0 )]
		public int state;
		[ExplicitOffset( Offset = 8 )]
		public pthread_mutex_t mutex;
	}
	public partial struct pthread_rwlock {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_rwlock* ) )]
	public partial struct pthread_rwlock_t {
	}
	public partial struct pthread_rwlockattr {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_rwlockattr* ) )]
	public partial struct pthread_rwlockattr_t {
	}
	public partial struct pthread_spinlock {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread_spinlock* ) )]
	public partial struct pthread_spinlock_t {
	}
	[Alignment( Boundary = 8 )]
	[PrimitiveType( Size = sizeof( pthread* ) )]
	public partial struct pthread_t {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct r_debug {
		public enum UnnamedEnum_C32454D7 : uint {
			RT_CONSISTENT = 0,
			RT_ADD =        1,
			RT_DELETE =     2,
		}
		[ExplicitOffset( Offset = 0 )]
		public int r_version;
		[ExplicitOffset( Offset = 8 )]
		public link_map* r_map;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<r_debug*, link_map*> r_brk;
		[ExplicitOffset( Offset = 24 )]
		public UnnamedEnum_C32454D7 r_state;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct rlimit {
		[ExplicitOffset( Offset = 0 )]
		public intptr rlim_cur;
		[ExplicitOffset( Offset = 8 )]
		public intptr rlim_max;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct route_in6 {
		[ExplicitOffset( Offset = 0 )]
		public rtentry* ro_rt;
		[ExplicitOffset( Offset = 8 )]
		public llentry* ro_lle;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* ro_prepend;
		[ExplicitOffset( Offset = 24 )]
		public ushort ro_plen;
		[ExplicitOffset( Offset = 26 )]
		public ushort ro_flags;
		[ExplicitOffset( Offset = 28 )]
		public ushort ro_mtu;
		[ExplicitOffset( Offset = 30 )]
		public ushort spare;
		[ExplicitOffset( Offset = 32 )]
		public sockaddr_in6 ro_dst;
	}
	public partial struct rtentry {
	}
	[ExplicitSize( Size = 144 )]
	[Alignment( Boundary = 8 )]
	public partial struct rusage {
		[ExplicitOffset( Offset = 0 )]
		public timeval ru_utime;
		[ExplicitOffset( Offset = 16 )]
		public timeval ru_stime;
		[ExplicitOffset( Offset = 32 )]
		public intptr ru_maxrss;
		[ExplicitOffset( Offset = 40 )]
		public intptr ru_ixrss;
		[ExplicitOffset( Offset = 48 )]
		public intptr ru_idrss;
		[ExplicitOffset( Offset = 56 )]
		public intptr ru_isrss;
		[ExplicitOffset( Offset = 64 )]
		public intptr ru_minflt;
		[ExplicitOffset( Offset = 72 )]
		public intptr ru_majflt;
		[ExplicitOffset( Offset = 80 )]
		public intptr ru_nswap;
		[ExplicitOffset( Offset = 88 )]
		public intptr ru_inblock;
		[ExplicitOffset( Offset = 96 )]
		public intptr ru_oublock;
		[ExplicitOffset( Offset = 104 )]
		public intptr ru_msgsnd;
		[ExplicitOffset( Offset = 112 )]
		public intptr ru_msgrcv;
		[ExplicitOffset( Offset = 120 )]
		public intptr ru_nsignals;
		[ExplicitOffset( Offset = 128 )]
		public intptr ru_nvcsw;
		[ExplicitOffset( Offset = 136 )]
		public intptr ru_nivcsw;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sched_param {
		[ExplicitOffset( Offset = 0 )]
		public int sched_priority;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_adaptation_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort sai_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sai_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sai_length;
		[ExplicitOffset( Offset = 8 )]
		public uint sai_adaptation_ind;
		[ExplicitOffset( Offset = 12 )]
		public uint sai_assoc_id;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_adaption_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort sai_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sai_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sai_length;
		[ExplicitOffset( Offset = 8 )]
		public uint sai_adaption_ind;
		[ExplicitOffset( Offset = 12 )]
		public uint sai_assoc_id;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_add_streams {
		[ExplicitOffset( Offset = 0 )]
		public uint sas_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort sas_instrms;
		[ExplicitOffset( Offset = 6 )]
		public ushort sas_outstrms;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assoc_change {
		[ExplicitOffset( Offset = 0 )]
		public ushort sac_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sac_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sac_length;
		[ExplicitOffset( Offset = 8 )]
		public ushort sac_state;
		[ExplicitOffset( Offset = 10 )]
		public ushort sac_error;
		[ExplicitOffset( Offset = 12 )]
		public ushort sac_outbound_streams;
		[ExplicitOffset( Offset = 14 )]
		public ushort sac_inbound_streams;
		[ExplicitOffset( Offset = 16 )]
		public uint sac_assoc_id;
		public byte* sac_info { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assoc_ids {
		[ExplicitOffset( Offset = 0 )]
		public uint gaids_number_of_ids;
		public uint* gaids_assoc_id { get { return cast<uint*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assoc_reset_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort assocreset_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort assocreset_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint assocreset_length;
		[ExplicitOffset( Offset = 8 )]
		public uint assocreset_assoc_id;
		[ExplicitOffset( Offset = 12 )]
		public uint assocreset_local_tsn;
		[ExplicitOffset( Offset = 16 )]
		public uint assocreset_remote_tsn;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assoc_value {
		[ExplicitOffset( Offset = 0 )]
		public uint assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint assoc_value;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_assocparams {
		[ExplicitOffset( Offset = 0 )]
		public uint sasoc_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint sasoc_peer_rwnd;
		[ExplicitOffset( Offset = 8 )]
		public uint sasoc_local_rwnd;
		[ExplicitOffset( Offset = 12 )]
		public uint sasoc_cookie_life;
		[ExplicitOffset( Offset = 16 )]
		public ushort sasoc_asocmaxrxt;
		[ExplicitOffset( Offset = 18 )]
		public ushort sasoc_number_peer_destinations;
	}
	[ExplicitSize( Size = 1 )]
	public partial struct sctp_authchunk {
		[ExplicitOffset( Offset = 0 )]
		public byte sauth_chunk;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authchunks {
		[ExplicitOffset( Offset = 0 )]
		public uint gauth_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint gauth_number_of_chunks;
		public byte* gauth_chunks { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 2 )]
	[Alignment( Boundary = 2 )]
	public partial struct sctp_authinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort auth_keynumber;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authkey {
		[ExplicitOffset( Offset = 0 )]
		public uint sca_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort sca_keynumber;
		[ExplicitOffset( Offset = 6 )]
		public ushort sca_keylength;
		public byte* sca_key { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authkey_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort auth_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort auth_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint auth_length;
		[ExplicitOffset( Offset = 8 )]
		public ushort auth_keynumber;
		[ExplicitOffset( Offset = 10 )]
		public ushort auth_altkeynumber;
		[ExplicitOffset( Offset = 12 )]
		public uint auth_indication;
		[ExplicitOffset( Offset = 16 )]
		public uint auth_assoc_id;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_authkeyid {
		[ExplicitOffset( Offset = 0 )]
		public uint scact_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort scact_keynumber;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_blk_args {
		[ExplicitOffset( Offset = 0 )]
		public uint onsb;
		[ExplicitOffset( Offset = 4 )]
		public uint sndlen;
		[ExplicitOffset( Offset = 8 )]
		public uint peer_rwnd;
		[ExplicitOffset( Offset = 12 )]
		public ushort send_sent_qcnt;
		[ExplicitOffset( Offset = 14 )]
		public ushort stream_qcnt;
		[ExplicitOffset( Offset = 16 )]
		public ushort chunks_on_oque;
		[ExplicitOffset( Offset = 18 )]
		public ushort flight_size;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_cc_option {
		[ExplicitOffset( Offset = 0 )]
		public int option;
		[ExplicitOffset( Offset = 4 )]
		public sctp_assoc_value aid_value;
	}
	[ExplicitSize( Size = 4 )]
	public partial struct sctp_chunkhdr {
		[ExplicitOffset( Offset = 0 )]
		public byte chunk_type;
		[ExplicitOffset( Offset = 1 )]
		public byte chunk_flags;
		[ExplicitOffset( Offset = 2 )]
		public ushort chunk_length;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_cwnd_args {
		[ExplicitOffset( Offset = 0 )]
		public sctp_nets* net;
		[ExplicitOffset( Offset = 8 )]
		public uint cwnd_new_value;
		[ExplicitOffset( Offset = 12 )]
		public uint pseudo_cumack;
		[ExplicitOffset( Offset = 16 )]
		public ushort inflight;
		[ExplicitOffset( Offset = 18 )]
		public ushort cwnd_augment;
		[ExplicitOffset( Offset = 20 )]
		public byte meets_pseudo_cumack;
		[ExplicitOffset( Offset = 21 )]
		public byte need_new_pseudo_cumack;
		[ExplicitOffset( Offset = 22 )]
		public byte cnt_in_send;
		[ExplicitOffset( Offset = 23 )]
		public byte cnt_in_str;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_cwnd_log {
		[ExplicitOffset( Offset = 0 )]
		public uintptr time_event;
		[ExplicitOffset( Offset = 8 )]
		public byte from;
		[ExplicitOffset( Offset = 9 )]
		public byte event_type;
		[ExplicitOffset( Offset = 10 )]
		public byte[2] resv;
		[ExplicitOffset( Offset = 16 )]
		public UnnamedUnion_E263BDEE x;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_cwnd_log_req {
		[ExplicitOffset( Offset = 0 )]
		public int num_in_log;
		[ExplicitOffset( Offset = 4 )]
		public int num_ret;
		[ExplicitOffset( Offset = 8 )]
		public int start_at;
		[ExplicitOffset( Offset = 12 )]
		public int end_at;
		public sctp_cwnd_log* log { get { return cast<sctp_cwnd_log*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_default_prinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort pr_policy;
		[ExplicitOffset( Offset = 4 )]
		public uint pr_value;
		[ExplicitOffset( Offset = 8 )]
		public uint pr_assoc_id;
	}
	[ExplicitSize( Size = 6 )]
	public partial struct sctp_error_auth_invalid_hmac {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
		[ExplicitOffset( Offset = 4 )]
		public ushort hmac_id;
	}
	[ExplicitSize( Size = 4 )]
	public partial struct sctp_error_cause {
		[ExplicitOffset( Offset = 0 )]
		public ushort code;
		[ExplicitOffset( Offset = 2 )]
		public ushort length;
	}
	[ExplicitSize( Size = 8 )]
	public partial struct sctp_error_invalid_stream {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
		[ExplicitOffset( Offset = 4 )]
		public ushort stream_id;
		[ExplicitOffset( Offset = 6 )]
		public ushort reserved;
	}
	[ExplicitSize( Size = 8 )]
	public partial struct sctp_error_missing_param {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
		[ExplicitOffset( Offset = 4 )]
		public uint num_missing_params;
		public ushort* type { get { return cast<ushort*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 8 )]
	public partial struct sctp_error_no_user_data {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
		[ExplicitOffset( Offset = 4 )]
		public uint tsn;
	}
	[ExplicitSize( Size = 4 )]
	public partial struct sctp_error_out_of_resource {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
	}
	[ExplicitSize( Size = 8 )]
	public partial struct sctp_error_stale_cookie {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
		[ExplicitOffset( Offset = 4 )]
		public uint stale_time;
	}
	[ExplicitSize( Size = 8 )]
	public partial struct sctp_error_unrecognized_chunk {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
		[ExplicitOffset( Offset = 4 )]
		public sctp_chunkhdr ch;
	}
	[ExplicitSize( Size = 4 )]
	public partial struct sctp_error_unresolv_addr {
		[ExplicitOffset( Offset = 0 )]
		public sctp_error_cause cause;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_event {
		[ExplicitOffset( Offset = 0 )]
		public uint se_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort se_type;
		[ExplicitOffset( Offset = 6 )]
		public byte se_on;
	}
	[ExplicitSize( Size = 11 )]
	public partial struct sctp_event_subscribe {
		[ExplicitOffset( Offset = 0 )]
		public byte sctp_data_io_event;
		[ExplicitOffset( Offset = 1 )]
		public byte sctp_association_event;
		[ExplicitOffset( Offset = 2 )]
		public byte sctp_address_event;
		[ExplicitOffset( Offset = 3 )]
		public byte sctp_send_failure_event;
		[ExplicitOffset( Offset = 4 )]
		public byte sctp_peer_error_event;
		[ExplicitOffset( Offset = 5 )]
		public byte sctp_shutdown_event;
		[ExplicitOffset( Offset = 6 )]
		public byte sctp_partial_delivery_event;
		[ExplicitOffset( Offset = 7 )]
		public byte sctp_adaptation_layer_event;
		[ExplicitOffset( Offset = 8 )]
		public byte sctp_authentication_event;
		[ExplicitOffset( Offset = 9 )]
		public byte sctp_sender_dry_event;
		[ExplicitOffset( Offset = 10 )]
		public byte sctp_stream_reset_event;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_extrcvinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort sinfo_stream;
		[ExplicitOffset( Offset = 2 )]
		public ushort sinfo_ssn;
		[ExplicitOffset( Offset = 4 )]
		public ushort sinfo_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint sinfo_ppid;
		[ExplicitOffset( Offset = 12 )]
		public uint sinfo_context;
		[ExplicitOffset( Offset = 16 )]
		public uint sinfo_timetolive;
		[ExplicitOffset( Offset = 20 )]
		public uint sinfo_tsn;
		[ExplicitOffset( Offset = 24 )]
		public uint sinfo_cumtsn;
		[ExplicitOffset( Offset = 28 )]
		public uint sinfo_assoc_id;
		[ExplicitOffset( Offset = 32 )]
		public ushort serinfo_next_flags;
		[ExplicitOffset( Offset = 34 )]
		public ushort serinfo_next_stream;
		[ExplicitOffset( Offset = 36 )]
		public uint serinfo_next_aid;
		[ExplicitOffset( Offset = 40 )]
		public uint serinfo_next_length;
		[ExplicitOffset( Offset = 44 )]
		public uint serinfo_next_ppid;
		[ExplicitOffset( Offset = 48 )]
		public ushort sinfo_keynumber;
		[ExplicitOffset( Offset = 50 )]
		public ushort sinfo_keynumber_valid;
		[ExplicitOffset( Offset = 52 )]
		public byte[76] __reserve_pad;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_fr_log {
		[ExplicitOffset( Offset = 0 )]
		public uint largest_tsn;
		[ExplicitOffset( Offset = 4 )]
		public uint largest_new_tsn;
		[ExplicitOffset( Offset = 8 )]
		public uint tsn;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_fr_map {
		[ExplicitOffset( Offset = 0 )]
		public uint @base;
		[ExplicitOffset( Offset = 4 )]
		public uint cum;
		[ExplicitOffset( Offset = 8 )]
		public uint high;
	}
	[ExplicitSize( Size = 4 )]
	public partial struct sctp_gen_error_cause {
		[ExplicitOffset( Offset = 0 )]
		public ushort code;
		[ExplicitOffset( Offset = 2 )]
		public ushort length;
		public byte* info { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_get_nonce_values {
		[ExplicitOffset( Offset = 0 )]
		public uint gn_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint gn_peers_tag;
		[ExplicitOffset( Offset = 8 )]
		public uint gn_local_tag;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_getaddresses {
		[ExplicitOffset( Offset = 0 )]
		public uint sget_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr[1] addr;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_hmacalgo {
		[ExplicitOffset( Offset = 0 )]
		public uint shmac_number_of_idents;
		public ushort* shmac_idents { get { return cast<ushort*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 2 )]
	public partial struct sctp_initmsg {
		[ExplicitOffset( Offset = 0 )]
		public ushort sinit_num_ostreams;
		[ExplicitOffset( Offset = 2 )]
		public ushort sinit_max_instreams;
		[ExplicitOffset( Offset = 4 )]
		public ushort sinit_max_attempts;
		[ExplicitOffset( Offset = 6 )]
		public ushort sinit_max_init_timeo;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_lock_log {
		[ExplicitOffset( Offset = 0 )]
		public void* sock;
		[ExplicitOffset( Offset = 8 )]
		public void* inp;
		[ExplicitOffset( Offset = 16 )]
		public byte tcb_lock;
		[ExplicitOffset( Offset = 17 )]
		public byte inp_lock;
		[ExplicitOffset( Offset = 18 )]
		public byte info_lock;
		[ExplicitOffset( Offset = 19 )]
		public byte sock_lock;
		[ExplicitOffset( Offset = 20 )]
		public byte sockrcvbuf_lock;
		[ExplicitOffset( Offset = 21 )]
		public byte socksndbuf_lock;
		[ExplicitOffset( Offset = 22 )]
		public byte create_lock;
		[ExplicitOffset( Offset = 23 )]
		public byte resv;
	}
	[ExplicitSize( Size = 1200008 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_log {
		[ExplicitOffset( Offset = 0 )]
		public sctp_log_entry[30000] entry;
		[ExplicitOffset( Offset = 1200000 )]
		public uint index;
		[ExplicitOffset( Offset = 1200004 )]
		public uint padding;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_log_closing {
		[ExplicitOffset( Offset = 0 )]
		public void* inp;
		[ExplicitOffset( Offset = 8 )]
		public void* stcb;
		[ExplicitOffset( Offset = 16 )]
		public uint sctp_flags;
		[ExplicitOffset( Offset = 20 )]
		public ushort state;
		[ExplicitOffset( Offset = 22 )]
		public short loc;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_log_entry {
		[ExplicitOffset( Offset = 0 )]
		public uintptr timestamp;
		[ExplicitOffset( Offset = 8 )]
		public uint subsys;
		[ExplicitOffset( Offset = 12 )]
		public uint padding;
		[ExplicitOffset( Offset = 16 )]
		public uint[6] params;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_mbcnt_log {
		[ExplicitOffset( Offset = 0 )]
		public uint total_queue_size;
		[ExplicitOffset( Offset = 4 )]
		public uint size_change;
		[ExplicitOffset( Offset = 8 )]
		public uint total_queue_mb_size;
		[ExplicitOffset( Offset = 12 )]
		public uint mbcnt_change;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_mbuf_log {
		[ExplicitOffset( Offset = 0 )]
		public mbuf* mp;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* ext;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* data;
		[ExplicitOffset( Offset = 24 )]
		public ushort size;
		[ExplicitOffset( Offset = 26 )]
		public byte refcnt;
		[ExplicitOffset( Offset = 27 )]
		public byte mbuf_flags;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_misc_info {
		[ExplicitOffset( Offset = 0 )]
		public uint log1;
		[ExplicitOffset( Offset = 4 )]
		public uint log2;
		[ExplicitOffset( Offset = 8 )]
		public uint log3;
		[ExplicitOffset( Offset = 12 )]
		public uint log4;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_nagle_log {
		[ExplicitOffset( Offset = 0 )]
		public void* stcb;
		[ExplicitOffset( Offset = 8 )]
		public uint total_flight;
		[ExplicitOffset( Offset = 12 )]
		public uint total_in_queue;
		[ExplicitOffset( Offset = 16 )]
		public ushort count_in_queue;
		[ExplicitOffset( Offset = 18 )]
		public ushort count_in_flight;
	}
	public partial struct sctp_nets {
	}
	[ExplicitSize( Size = 152 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_notification {
		[Overlapped( Offset = 0 )]
		public sctp_tlv sn_header;
		[Overlapped( Offset = 0 )]
		public sctp_assoc_change sn_assoc_change;
		[Overlapped( Offset = 0 )]
		public sctp_paddr_change sn_paddr_change;
		[Overlapped( Offset = 0 )]
		public sctp_remote_error sn_remote_error;
		[Overlapped( Offset = 0 )]
		public sctp_send_failed sn_send_failed;
		[Overlapped( Offset = 0 )]
		public sctp_shutdown_event sn_shutdown_event;
		[Overlapped( Offset = 0 )]
		public sctp_adaptation_event sn_adaptation_event;
		[Overlapped( Offset = 0 )]
		public sctp_adaption_event sn_adaption_event;
		[Overlapped( Offset = 0 )]
		public sctp_pdapi_event sn_pdapi_event;
		[Overlapped( Offset = 0 )]
		public sctp_authkey_event sn_auth_event;
		[Overlapped( Offset = 0 )]
		public sctp_sender_dry_event sn_sender_dry_event;
		[Overlapped( Offset = 0 )]
		public sctp_send_failed_event sn_send_failed_event;
		[Overlapped( Offset = 0 )]
		public sctp_stream_reset_event sn_strreset_event;
		[Overlapped( Offset = 0 )]
		public sctp_assoc_reset_event sn_assocreset_event;
		[Overlapped( Offset = 0 )]
		public sctp_stream_change_event sn_strchange_event;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_nxtinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort nxt_sid;
		[ExplicitOffset( Offset = 2 )]
		public ushort nxt_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint nxt_ppid;
		[ExplicitOffset( Offset = 8 )]
		public uint nxt_length;
		[ExplicitOffset( Offset = 12 )]
		public uint nxt_assoc_id;
	}
	[ExplicitSize( Size = 152 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_paddr_change {
		[ExplicitOffset( Offset = 0 )]
		public ushort spc_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort spc_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint spc_length;
		[ExplicitOffset( Offset = 8 )]
		public sockaddr_storage spc_aaddr;
		[ExplicitOffset( Offset = 136 )]
		public uint spc_state;
		[ExplicitOffset( Offset = 140 )]
		public uint spc_error;
		[ExplicitOffset( Offset = 144 )]
		public uint spc_assoc_id;
	}
	[ExplicitSize( Size = 152 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_paddrinfo {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_storage spinfo_address;
		[ExplicitOffset( Offset = 128 )]
		public uint spinfo_assoc_id;
		[ExplicitOffset( Offset = 132 )]
		public int spinfo_state;
		[ExplicitOffset( Offset = 136 )]
		public uint spinfo_cwnd;
		[ExplicitOffset( Offset = 140 )]
		public uint spinfo_srtt;
		[ExplicitOffset( Offset = 144 )]
		public uint spinfo_rto;
		[ExplicitOffset( Offset = 148 )]
		public uint spinfo_mtu;
	}
	[ExplicitSize( Size = 152 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_paddrparams {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_storage spp_address;
		[ExplicitOffset( Offset = 128 )]
		public uint spp_assoc_id;
		[ExplicitOffset( Offset = 132 )]
		public uint spp_hbinterval;
		[ExplicitOffset( Offset = 136 )]
		public uint spp_pathmtu;
		[ExplicitOffset( Offset = 140 )]
		public uint spp_flags;
		[ExplicitOffset( Offset = 144 )]
		public uint spp_ipv6_flowlabel;
		[ExplicitOffset( Offset = 148 )]
		public ushort spp_pathmaxrxt;
		[ExplicitOffset( Offset = 150 )]
		public byte spp_dscp;
	}
	[ExplicitSize( Size = 144 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_paddrthlds {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_storage spt_address;
		[ExplicitOffset( Offset = 128 )]
		public uint spt_assoc_id;
		[ExplicitOffset( Offset = 132 )]
		public ushort spt_pathmaxrxt;
		[ExplicitOffset( Offset = 134 )]
		public ushort spt_pathpfthld;
		[ExplicitOffset( Offset = 136 )]
		public ushort spt_pathcpthld;
	}
	[ExplicitSize( Size = 4 )]
	public partial struct sctp_paramhdr {
		[ExplicitOffset( Offset = 0 )]
		public ushort param_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort param_length;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_pcbinfo {
		[ExplicitOffset( Offset = 0 )]
		public uint ep_count;
		[ExplicitOffset( Offset = 4 )]
		public uint asoc_count;
		[ExplicitOffset( Offset = 8 )]
		public uint laddr_count;
		[ExplicitOffset( Offset = 12 )]
		public uint raddr_count;
		[ExplicitOffset( Offset = 16 )]
		public uint chk_count;
		[ExplicitOffset( Offset = 20 )]
		public uint readq_count;
		[ExplicitOffset( Offset = 24 )]
		public uint free_chunks;
		[ExplicitOffset( Offset = 28 )]
		public uint stream_oque;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_pdapi_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort pdapi_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort pdapi_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint pdapi_length;
		[ExplicitOffset( Offset = 8 )]
		public uint pdapi_indication;
		[ExplicitOffset( Offset = 12 )]
		public ushort pdapi_stream;
		[ExplicitOffset( Offset = 14 )]
		public ushort pdapi_seq;
		[ExplicitOffset( Offset = 16 )]
		public uint pdapi_assoc_id;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_prinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort pr_policy;
		[ExplicitOffset( Offset = 4 )]
		public uint pr_value;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_prstatus {
		[ExplicitOffset( Offset = 0 )]
		public uint sprstat_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort sprstat_sid;
		[ExplicitOffset( Offset = 6 )]
		public ushort sprstat_policy;
		[ExplicitOffset( Offset = 8 )]
		public uintptr sprstat_abandoned_unsent;
		[ExplicitOffset( Offset = 16 )]
		public uintptr sprstat_abandoned_sent;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_rcvinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort rcv_sid;
		[ExplicitOffset( Offset = 2 )]
		public ushort rcv_ssn;
		[ExplicitOffset( Offset = 4 )]
		public ushort rcv_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint rcv_ppid;
		[ExplicitOffset( Offset = 12 )]
		public uint rcv_tsn;
		[ExplicitOffset( Offset = 16 )]
		public uint rcv_cumtsn;
		[ExplicitOffset( Offset = 20 )]
		public uint rcv_context;
		[ExplicitOffset( Offset = 24 )]
		public uint rcv_assoc_id;
	}
	[ExplicitSize( Size = 44 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_recvv_rn {
		[ExplicitOffset( Offset = 0 )]
		public sctp_rcvinfo recvv_rcvinfo;
		[ExplicitOffset( Offset = 28 )]
		public sctp_nxtinfo recvv_nxtinfo;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_remote_error {
		[ExplicitOffset( Offset = 0 )]
		public ushort sre_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sre_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sre_length;
		[ExplicitOffset( Offset = 8 )]
		public ushort sre_error;
		[ExplicitOffset( Offset = 12 )]
		public uint sre_assoc_id;
		public byte* sre_data { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_reset_streams {
		[ExplicitOffset( Offset = 0 )]
		public uint srs_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort srs_flags;
		[ExplicitOffset( Offset = 6 )]
		public ushort srs_number_streams;
		public ushort* srs_stream_list { get { return cast<ushort*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_rto_log {
		[ExplicitOffset( Offset = 0 )]
		public void* net;
		[ExplicitOffset( Offset = 8 )]
		public uint rtt;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_rtoinfo {
		[ExplicitOffset( Offset = 0 )]
		public uint srto_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint srto_initial;
		[ExplicitOffset( Offset = 8 )]
		public uint srto_max;
		[ExplicitOffset( Offset = 12 )]
		public uint srto_min;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_rwnd_log {
		[ExplicitOffset( Offset = 0 )]
		public uint rwnd;
		[ExplicitOffset( Offset = 4 )]
		public uint send_size;
		[ExplicitOffset( Offset = 8 )]
		public uint overhead;
		[ExplicitOffset( Offset = 12 )]
		public uint new_rwnd;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sack_info {
		[ExplicitOffset( Offset = 0 )]
		public uint sack_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint sack_delay;
		[ExplicitOffset( Offset = 8 )]
		public uint sack_freq;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sack_log {
		[ExplicitOffset( Offset = 0 )]
		public uint cumack;
		[ExplicitOffset( Offset = 4 )]
		public uint oldcumack;
		[ExplicitOffset( Offset = 8 )]
		public uint tsn;
		[ExplicitOffset( Offset = 12 )]
		public ushort numGaps;
		[ExplicitOffset( Offset = 14 )]
		public ushort numDups;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_sb_log {
		[ExplicitOffset( Offset = 0 )]
		public void* stcb;
		[ExplicitOffset( Offset = 8 )]
		public uint so_sbcc;
		[ExplicitOffset( Offset = 12 )]
		public uint stcb_sbcc;
		[ExplicitOffset( Offset = 16 )]
		public uint incr;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_sbwake_log {
		[ExplicitOffset( Offset = 0 )]
		public void* stcb;
		[ExplicitOffset( Offset = 8 )]
		public ushort send_q;
		[ExplicitOffset( Offset = 10 )]
		public ushort sent_q;
		[ExplicitOffset( Offset = 12 )]
		public ushort flight;
		[ExplicitOffset( Offset = 14 )]
		public ushort wake_cnt;
		[ExplicitOffset( Offset = 16 )]
		public byte stream_qcnt;
		[ExplicitOffset( Offset = 17 )]
		public byte chunks_on_oque;
		[ExplicitOffset( Offset = 18 )]
		public byte sbflags;
		[ExplicitOffset( Offset = 19 )]
		public byte sctpflags;
	}
	[ExplicitSize( Size = 144 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_send_failed {
		[ExplicitOffset( Offset = 0 )]
		public ushort ssf_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort ssf_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint ssf_length;
		[ExplicitOffset( Offset = 8 )]
		public uint ssf_error;
		[ExplicitOffset( Offset = 12 )]
		public sctp_sndrcvinfo ssf_info;
		[ExplicitOffset( Offset = 140 )]
		public uint ssf_assoc_id;
		public byte* ssf_data { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_send_failed_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort ssfe_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort ssfe_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint ssfe_length;
		[ExplicitOffset( Offset = 8 )]
		public uint ssfe_error;
		[ExplicitOffset( Offset = 12 )]
		public sctp_sndinfo ssfe_info;
		[ExplicitOffset( Offset = 28 )]
		public uint ssfe_assoc_id;
		public byte* ssfe_data { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sender_dry_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort sender_dry_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sender_dry_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sender_dry_length;
		[ExplicitOffset( Offset = 8 )]
		public uint sender_dry_assoc_id;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sendv_spa {
		[ExplicitOffset( Offset = 0 )]
		public uint sendv_flags;
		[ExplicitOffset( Offset = 4 )]
		public sctp_sndinfo sendv_sndinfo;
		[ExplicitOffset( Offset = 20 )]
		public sctp_prinfo sendv_prinfo;
		[ExplicitOffset( Offset = 28 )]
		public sctp_authinfo sendv_authinfo;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_setadaptation {
		[ExplicitOffset( Offset = 0 )]
		public uint ssb_adaptation_ind;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_setadaption {
		[ExplicitOffset( Offset = 0 )]
		public uint ssb_adaption_ind;
	}
	[ExplicitSize( Size = 136 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_setpeerprim {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_storage sspp_addr;
		[ExplicitOffset( Offset = 128 )]
		public uint sspp_assoc_id;
		[ExplicitOffset( Offset = 132 )]
		public byte[4] sspp_padding;
	}
	[ExplicitSize( Size = 136 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_setprim {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_storage ssp_addr;
		[ExplicitOffset( Offset = 128 )]
		public uint ssp_assoc_id;
		[ExplicitOffset( Offset = 132 )]
		public byte[4] ssp_padding;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_shutdown_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort sse_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sse_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sse_length;
		[ExplicitOffset( Offset = 8 )]
		public uint sse_assoc_id;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_snd_all_completes {
		[ExplicitOffset( Offset = 0 )]
		public ushort sall_stream;
		[ExplicitOffset( Offset = 2 )]
		public ushort sall_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sall_ppid;
		[ExplicitOffset( Offset = 8 )]
		public uint sall_context;
		[ExplicitOffset( Offset = 12 )]
		public uint sall_num_sent;
		[ExplicitOffset( Offset = 16 )]
		public uint sall_num_failed;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sndinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort snd_sid;
		[ExplicitOffset( Offset = 2 )]
		public ushort snd_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint snd_ppid;
		[ExplicitOffset( Offset = 8 )]
		public uint snd_context;
		[ExplicitOffset( Offset = 12 )]
		public uint snd_assoc_id;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sndrcvinfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort sinfo_stream;
		[ExplicitOffset( Offset = 2 )]
		public ushort sinfo_ssn;
		[ExplicitOffset( Offset = 4 )]
		public ushort sinfo_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint sinfo_ppid;
		[ExplicitOffset( Offset = 12 )]
		public uint sinfo_context;
		[ExplicitOffset( Offset = 16 )]
		public uint sinfo_timetolive;
		[ExplicitOffset( Offset = 20 )]
		public uint sinfo_tsn;
		[ExplicitOffset( Offset = 24 )]
		public uint sinfo_cumtsn;
		[ExplicitOffset( Offset = 28 )]
		public uint sinfo_assoc_id;
		[ExplicitOffset( Offset = 32 )]
		public ushort sinfo_keynumber;
		[ExplicitOffset( Offset = 34 )]
		public ushort sinfo_keynumber_valid;
		[ExplicitOffset( Offset = 36 )]
		public byte[92] __reserve_pad;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sockstat {
		[ExplicitOffset( Offset = 0 )]
		public uint ss_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint ss_total_sndbuf;
		[ExplicitOffset( Offset = 8 )]
		public uint ss_total_recv_buf;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_sockstore {
		[Overlapped( Offset = 0 )]
		public sockaddr_in sin;
		[Overlapped( Offset = 0 )]
		public sockaddr_in6 sin6;
		[Overlapped( Offset = 0 )]
		public sockaddr sa;
	}
	[ExplicitSize( Size = 176 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_status {
		[ExplicitOffset( Offset = 0 )]
		public uint sstat_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public int sstat_state;
		[ExplicitOffset( Offset = 8 )]
		public uint sstat_rwnd;
		[ExplicitOffset( Offset = 12 )]
		public ushort sstat_unackdata;
		[ExplicitOffset( Offset = 14 )]
		public ushort sstat_penddata;
		[ExplicitOffset( Offset = 16 )]
		public ushort sstat_instrms;
		[ExplicitOffset( Offset = 18 )]
		public ushort sstat_outstrms;
		[ExplicitOffset( Offset = 20 )]
		public uint sstat_fragmentation_point;
		[ExplicitOffset( Offset = 24 )]
		public sctp_paddrinfo sstat_primary;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_str_log {
		[ExplicitOffset( Offset = 0 )]
		public void* stcb;
		[ExplicitOffset( Offset = 8 )]
		public uint n_tsn;
		[ExplicitOffset( Offset = 12 )]
		public uint e_tsn;
		[ExplicitOffset( Offset = 16 )]
		public ushort n_sseq;
		[ExplicitOffset( Offset = 18 )]
		public ushort e_sseq;
		[ExplicitOffset( Offset = 20 )]
		public ushort strm;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_stream_change_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort strchange_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort strchange_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint strchange_length;
		[ExplicitOffset( Offset = 8 )]
		public uint strchange_assoc_id;
		[ExplicitOffset( Offset = 12 )]
		public ushort strchange_instrms;
		[ExplicitOffset( Offset = 14 )]
		public ushort strchange_outstrms;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_stream_reset_event {
		[ExplicitOffset( Offset = 0 )]
		public ushort strreset_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort strreset_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint strreset_length;
		[ExplicitOffset( Offset = 8 )]
		public uint strreset_assoc_id;
		public ushort* strreset_stream_list { get { return cast<ushort*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_stream_value {
		[ExplicitOffset( Offset = 0 )]
		public uint assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public ushort stream_id;
		[ExplicitOffset( Offset = 6 )]
		public ushort stream_value;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_timeouts {
		[ExplicitOffset( Offset = 0 )]
		public uint stimo_assoc_id;
		[ExplicitOffset( Offset = 4 )]
		public uint stimo_init;
		[ExplicitOffset( Offset = 8 )]
		public uint stimo_data;
		[ExplicitOffset( Offset = 12 )]
		public uint stimo_sack;
		[ExplicitOffset( Offset = 16 )]
		public uint stimo_shutdown;
		[ExplicitOffset( Offset = 20 )]
		public uint stimo_heartbeat;
		[ExplicitOffset( Offset = 24 )]
		public uint stimo_cookie;
		[ExplicitOffset( Offset = 28 )]
		public uint stimo_shutdownack;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_timeval {
		[ExplicitOffset( Offset = 0 )]
		public uint tv_sec;
		[ExplicitOffset( Offset = 4 )]
		public uint tv_usec;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctp_tlv {
		[ExplicitOffset( Offset = 0 )]
		public ushort sn_type;
		[ExplicitOffset( Offset = 2 )]
		public ushort sn_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint sn_length;
	}
	[ExplicitSize( Size = 136 )]
	[Alignment( Boundary = 8 )]
	public partial struct sctp_udpencaps {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_storage sue_address;
		[ExplicitOffset( Offset = 128 )]
		public uint sue_assoc_id;
		[ExplicitOffset( Offset = 132 )]
		public ushort sue_port;
	}
	[ExplicitSize( Size = 12 )]
	public partial struct sctphdr {
		[ExplicitOffset( Offset = 0 )]
		public ushort src_port;
		[ExplicitOffset( Offset = 2 )]
		public ushort dest_port;
		[ExplicitOffset( Offset = 4 )]
		public uint v_tag;
		[ExplicitOffset( Offset = 8 )]
		public uint checksum;
	}
	[ExplicitSize( Size = 664 )]
	[Alignment( Boundary = 4 )]
	public partial struct sctpstat {
		[ExplicitOffset( Offset = 0 )]
		public sctp_timeval sctps_discontinuitytime;
		[ExplicitOffset( Offset = 8 )]
		public uint sctps_currestab;
		[ExplicitOffset( Offset = 12 )]
		public uint sctps_activeestab;
		[ExplicitOffset( Offset = 16 )]
		public uint sctps_restartestab;
		[ExplicitOffset( Offset = 20 )]
		public uint sctps_collisionestab;
		[ExplicitOffset( Offset = 24 )]
		public uint sctps_passiveestab;
		[ExplicitOffset( Offset = 28 )]
		public uint sctps_aborted;
		[ExplicitOffset( Offset = 32 )]
		public uint sctps_shutdown;
		[ExplicitOffset( Offset = 36 )]
		public uint sctps_outoftheblue;
		[ExplicitOffset( Offset = 40 )]
		public uint sctps_checksumerrors;
		[ExplicitOffset( Offset = 44 )]
		public uint sctps_outcontrolchunks;
		[ExplicitOffset( Offset = 48 )]
		public uint sctps_outorderchunks;
		[ExplicitOffset( Offset = 52 )]
		public uint sctps_outunorderchunks;
		[ExplicitOffset( Offset = 56 )]
		public uint sctps_incontrolchunks;
		[ExplicitOffset( Offset = 60 )]
		public uint sctps_inorderchunks;
		[ExplicitOffset( Offset = 64 )]
		public uint sctps_inunorderchunks;
		[ExplicitOffset( Offset = 68 )]
		public uint sctps_fragusrmsgs;
		[ExplicitOffset( Offset = 72 )]
		public uint sctps_reasmusrmsgs;
		[ExplicitOffset( Offset = 76 )]
		public uint sctps_outpackets;
		[ExplicitOffset( Offset = 80 )]
		public uint sctps_inpackets;
		[ExplicitOffset( Offset = 84 )]
		public uint sctps_recvpackets;
		[ExplicitOffset( Offset = 88 )]
		public uint sctps_recvdatagrams;
		[ExplicitOffset( Offset = 92 )]
		public uint sctps_recvpktwithdata;
		[ExplicitOffset( Offset = 96 )]
		public uint sctps_recvsacks;
		[ExplicitOffset( Offset = 100 )]
		public uint sctps_recvdata;
		[ExplicitOffset( Offset = 104 )]
		public uint sctps_recvdupdata;
		[ExplicitOffset( Offset = 108 )]
		public uint sctps_recvheartbeat;
		[ExplicitOffset( Offset = 112 )]
		public uint sctps_recvheartbeatack;
		[ExplicitOffset( Offset = 116 )]
		public uint sctps_recvecne;
		[ExplicitOffset( Offset = 120 )]
		public uint sctps_recvauth;
		[ExplicitOffset( Offset = 124 )]
		public uint sctps_recvauthmissing;
		[ExplicitOffset( Offset = 128 )]
		public uint sctps_recvivalhmacid;
		[ExplicitOffset( Offset = 132 )]
		public uint sctps_recvivalkeyid;
		[ExplicitOffset( Offset = 136 )]
		public uint sctps_recvauthfailed;
		[ExplicitOffset( Offset = 140 )]
		public uint sctps_recvexpress;
		[ExplicitOffset( Offset = 144 )]
		public uint sctps_recvexpressm;
		[ExplicitOffset( Offset = 148 )]
		public uint sctps_recv_spare;
		[ExplicitOffset( Offset = 152 )]
		public uint sctps_recvswcrc;
		[ExplicitOffset( Offset = 156 )]
		public uint sctps_recvhwcrc;
		[ExplicitOffset( Offset = 160 )]
		public uint sctps_sendpackets;
		[ExplicitOffset( Offset = 164 )]
		public uint sctps_sendsacks;
		[ExplicitOffset( Offset = 168 )]
		public uint sctps_senddata;
		[ExplicitOffset( Offset = 172 )]
		public uint sctps_sendretransdata;
		[ExplicitOffset( Offset = 176 )]
		public uint sctps_sendfastretrans;
		[ExplicitOffset( Offset = 180 )]
		public uint sctps_sendmultfastretrans;
		[ExplicitOffset( Offset = 184 )]
		public uint sctps_sendheartbeat;
		[ExplicitOffset( Offset = 188 )]
		public uint sctps_sendecne;
		[ExplicitOffset( Offset = 192 )]
		public uint sctps_sendauth;
		[ExplicitOffset( Offset = 196 )]
		public uint sctps_senderrors;
		[ExplicitOffset( Offset = 200 )]
		public uint sctps_send_spare;
		[ExplicitOffset( Offset = 204 )]
		public uint sctps_sendswcrc;
		[ExplicitOffset( Offset = 208 )]
		public uint sctps_sendhwcrc;
		[ExplicitOffset( Offset = 212 )]
		public uint sctps_pdrpfmbox;
		[ExplicitOffset( Offset = 216 )]
		public uint sctps_pdrpfehos;
		[ExplicitOffset( Offset = 220 )]
		public uint sctps_pdrpmbda;
		[ExplicitOffset( Offset = 224 )]
		public uint sctps_pdrpmbct;
		[ExplicitOffset( Offset = 228 )]
		public uint sctps_pdrpbwrpt;
		[ExplicitOffset( Offset = 232 )]
		public uint sctps_pdrpcrupt;
		[ExplicitOffset( Offset = 236 )]
		public uint sctps_pdrpnedat;
		[ExplicitOffset( Offset = 240 )]
		public uint sctps_pdrppdbrk;
		[ExplicitOffset( Offset = 244 )]
		public uint sctps_pdrptsnnf;
		[ExplicitOffset( Offset = 248 )]
		public uint sctps_pdrpdnfnd;
		[ExplicitOffset( Offset = 252 )]
		public uint sctps_pdrpdiwnp;
		[ExplicitOffset( Offset = 256 )]
		public uint sctps_pdrpdizrw;
		[ExplicitOffset( Offset = 260 )]
		public uint sctps_pdrpbadd;
		[ExplicitOffset( Offset = 264 )]
		public uint sctps_pdrpmark;
		[ExplicitOffset( Offset = 268 )]
		public uint sctps_timoiterator;
		[ExplicitOffset( Offset = 272 )]
		public uint sctps_timodata;
		[ExplicitOffset( Offset = 276 )]
		public uint sctps_timowindowprobe;
		[ExplicitOffset( Offset = 280 )]
		public uint sctps_timoinit;
		[ExplicitOffset( Offset = 284 )]
		public uint sctps_timosack;
		[ExplicitOffset( Offset = 288 )]
		public uint sctps_timoshutdown;
		[ExplicitOffset( Offset = 292 )]
		public uint sctps_timoheartbeat;
		[ExplicitOffset( Offset = 296 )]
		public uint sctps_timocookie;
		[ExplicitOffset( Offset = 300 )]
		public uint sctps_timosecret;
		[ExplicitOffset( Offset = 304 )]
		public uint sctps_timopathmtu;
		[ExplicitOffset( Offset = 308 )]
		public uint sctps_timoshutdownack;
		[ExplicitOffset( Offset = 312 )]
		public uint sctps_timoshutdownguard;
		[ExplicitOffset( Offset = 316 )]
		public uint sctps_timostrmrst;
		[ExplicitOffset( Offset = 320 )]
		public uint sctps_timoearlyfr;
		[ExplicitOffset( Offset = 324 )]
		public uint sctps_timoasconf;
		[ExplicitOffset( Offset = 328 )]
		public uint sctps_timodelprim;
		[ExplicitOffset( Offset = 332 )]
		public uint sctps_timoautoclose;
		[ExplicitOffset( Offset = 336 )]
		public uint sctps_timoassockill;
		[ExplicitOffset( Offset = 340 )]
		public uint sctps_timoinpkill;
		[ExplicitOffset( Offset = 344 )]
		public uint[11] sctps_spare;
		[ExplicitOffset( Offset = 388 )]
		public uint sctps_hdrops;
		[ExplicitOffset( Offset = 392 )]
		public uint sctps_badsum;
		[ExplicitOffset( Offset = 396 )]
		public uint sctps_noport;
		[ExplicitOffset( Offset = 400 )]
		public uint sctps_badvtag;
		[ExplicitOffset( Offset = 404 )]
		public uint sctps_badsid;
		[ExplicitOffset( Offset = 408 )]
		public uint sctps_nomem;
		[ExplicitOffset( Offset = 412 )]
		public uint sctps_fastretransinrtt;
		[ExplicitOffset( Offset = 416 )]
		public uint sctps_markedretrans;
		[ExplicitOffset( Offset = 420 )]
		public uint sctps_naglesent;
		[ExplicitOffset( Offset = 424 )]
		public uint sctps_naglequeued;
		[ExplicitOffset( Offset = 428 )]
		public uint sctps_maxburstqueued;
		[ExplicitOffset( Offset = 432 )]
		public uint sctps_ifnomemqueued;
		[ExplicitOffset( Offset = 436 )]
		public uint sctps_windowprobed;
		[ExplicitOffset( Offset = 440 )]
		public uint sctps_lowlevelerr;
		[ExplicitOffset( Offset = 444 )]
		public uint sctps_lowlevelerrusr;
		[ExplicitOffset( Offset = 448 )]
		public uint sctps_datadropchklmt;
		[ExplicitOffset( Offset = 452 )]
		public uint sctps_datadroprwnd;
		[ExplicitOffset( Offset = 456 )]
		public uint sctps_ecnereducedcwnd;
		[ExplicitOffset( Offset = 460 )]
		public uint sctps_vtagexpress;
		[ExplicitOffset( Offset = 464 )]
		public uint sctps_vtagbogus;
		[ExplicitOffset( Offset = 468 )]
		public uint sctps_primary_randry;
		[ExplicitOffset( Offset = 472 )]
		public uint sctps_cmt_randry;
		[ExplicitOffset( Offset = 476 )]
		public uint sctps_slowpath_sack;
		[ExplicitOffset( Offset = 480 )]
		public uint sctps_wu_sacks_sent;
		[ExplicitOffset( Offset = 484 )]
		public uint sctps_sends_with_flags;
		[ExplicitOffset( Offset = 488 )]
		public uint sctps_sends_with_unord;
		[ExplicitOffset( Offset = 492 )]
		public uint sctps_sends_with_eof;
		[ExplicitOffset( Offset = 496 )]
		public uint sctps_sends_with_abort;
		[ExplicitOffset( Offset = 500 )]
		public uint sctps_protocol_drain_calls;
		[ExplicitOffset( Offset = 504 )]
		public uint sctps_protocol_drains_done;
		[ExplicitOffset( Offset = 508 )]
		public uint sctps_read_peeks;
		[ExplicitOffset( Offset = 512 )]
		public uint sctps_cached_chk;
		[ExplicitOffset( Offset = 516 )]
		public uint sctps_cached_strmoq;
		[ExplicitOffset( Offset = 520 )]
		public uint sctps_left_abandon;
		[ExplicitOffset( Offset = 524 )]
		public uint sctps_send_burst_avoid;
		[ExplicitOffset( Offset = 528 )]
		public uint sctps_send_cwnd_avoid;
		[ExplicitOffset( Offset = 532 )]
		public uint sctps_fwdtsn_map_over;
		[ExplicitOffset( Offset = 536 )]
		public uint sctps_queue_upd_ecne;
		[ExplicitOffset( Offset = 540 )]
		public uint[31] sctps_reserved;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sem_t {
		[ExplicitOffset( Offset = 0 )]
		public uint _magic;
		[ExplicitOffset( Offset = 4 )]
		public _usem2 _kern;
		[ExplicitOffset( Offset = 12 )]
		public uint _padding;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct sf_hdtr {
		[ExplicitOffset( Offset = 0 )]
		public iovec* headers;
		[ExplicitOffset( Offset = 8 )]
		public int hdr_cnt;
		[ExplicitOffset( Offset = 16 )]
		public iovec* trailers;
		[ExplicitOffset( Offset = 24 )]
		public int trl_cnt;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct sigaction {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedUnion_9A2C7622 __sigaction_u;
		[ExplicitOffset( Offset = 8 )]
		public int sa_flags;
		[ExplicitOffset( Offset = 12 )]
		public sigset_t sa_mask;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct sigaltstack {
		[ExplicitOffset( Offset = 0 )]
		public void* ss_sp;
		[ExplicitOffset( Offset = 8 )]
		public uintptr ss_size;
		[ExplicitOffset( Offset = 16 )]
		public int ss_flags;
	}
	[ExplicitSize( Size = 816 )]
	[Alignment( Boundary = 16 )]
	public partial struct sigcontext {
		[ExplicitOffset( Offset = 0 )]
		public sigset_t sc_mask;
		[ExplicitOffset( Offset = 16 )]
		public intptr sc_onstack;
		[ExplicitOffset( Offset = 24 )]
		public intptr sc_rdi;
		[ExplicitOffset( Offset = 32 )]
		public intptr sc_rsi;
		[ExplicitOffset( Offset = 40 )]
		public intptr sc_rdx;
		[ExplicitOffset( Offset = 48 )]
		public intptr sc_rcx;
		[ExplicitOffset( Offset = 56 )]
		public intptr sc_r8;
		[ExplicitOffset( Offset = 64 )]
		public intptr sc_r9;
		[ExplicitOffset( Offset = 72 )]
		public intptr sc_rax;
		[ExplicitOffset( Offset = 80 )]
		public intptr sc_rbx;
		[ExplicitOffset( Offset = 88 )]
		public intptr sc_rbp;
		[ExplicitOffset( Offset = 96 )]
		public intptr sc_r10;
		[ExplicitOffset( Offset = 104 )]
		public intptr sc_r11;
		[ExplicitOffset( Offset = 112 )]
		public intptr sc_r12;
		[ExplicitOffset( Offset = 120 )]
		public intptr sc_r13;
		[ExplicitOffset( Offset = 128 )]
		public intptr sc_r14;
		[ExplicitOffset( Offset = 136 )]
		public intptr sc_r15;
		[ExplicitOffset( Offset = 144 )]
		public int sc_trapno;
		[ExplicitOffset( Offset = 148 )]
		public short sc_fs;
		[ExplicitOffset( Offset = 150 )]
		public short sc_gs;
		[ExplicitOffset( Offset = 152 )]
		public intptr sc_addr;
		[ExplicitOffset( Offset = 160 )]
		public int sc_flags;
		[ExplicitOffset( Offset = 164 )]
		public short sc_es;
		[ExplicitOffset( Offset = 166 )]
		public short sc_ds;
		[ExplicitOffset( Offset = 168 )]
		public intptr sc_err;
		[ExplicitOffset( Offset = 176 )]
		public intptr sc_rip;
		[ExplicitOffset( Offset = 184 )]
		public intptr sc_cs;
		[ExplicitOffset( Offset = 192 )]
		public intptr sc_rflags;
		[ExplicitOffset( Offset = 200 )]
		public intptr sc_rsp;
		[ExplicitOffset( Offset = 208 )]
		public intptr sc_ss;
		[ExplicitOffset( Offset = 216 )]
		public intptr sc_len;
		[ExplicitOffset( Offset = 224 )]
		public intptr sc_fpformat;
		[ExplicitOffset( Offset = 232 )]
		public intptr sc_ownedfp;
		[ExplicitOffset( Offset = 240 )]
		public intptr[64] sc_fpstate;
		[ExplicitOffset( Offset = 752 )]
		public intptr sc_fsbase;
		[ExplicitOffset( Offset = 760 )]
		public intptr sc_gsbase;
		[ExplicitOffset( Offset = 768 )]
		public intptr sc_xfpustate;
		[ExplicitOffset( Offset = 776 )]
		public intptr sc_xfpustate_len;
		[ExplicitOffset( Offset = 784 )]
		public intptr[4] sc_spare;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct sigevent {
		[ExplicitOffset( Offset = 0 )]
		public int sigev_notify;
		[ExplicitOffset( Offset = 4 )]
		public int sigev_signo;
		[ExplicitOffset( Offset = 8 )]
		public sigval sigev_value;
		[ExplicitOffset( Offset = 16 )]
		public UnnamedUnion_9A2CAABA _sigev_un;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct siginfo_t {
		[ExplicitOffset( Offset = 0 )]
		public int si_signo;
		[ExplicitOffset( Offset = 4 )]
		public int si_errno;
		[ExplicitOffset( Offset = 8 )]
		public int si_code;
		[ExplicitOffset( Offset = 12 )]
		public int si_pid;
		[ExplicitOffset( Offset = 16 )]
		public uint si_uid;
		[ExplicitOffset( Offset = 20 )]
		public int si_status;
		[ExplicitOffset( Offset = 24 )]
		public void* si_addr;
		[ExplicitOffset( Offset = 32 )]
		public sigval si_value;
		[ExplicitOffset( Offset = 40 )]
		public UnnamedUnion_9A2CA885 _reason;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigset_t {
		[ExplicitOffset( Offset = 0 )]
		public uint[4] __bits;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct sigstack {
		[ExplicitOffset( Offset = 0 )]
		public void* ss_sp;
		[ExplicitOffset( Offset = 8 )]
		public int ss_onstack;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct sigval {
		[Overlapped( Offset = 0 )]
		public int sival_int;
		[Overlapped( Offset = 0 )]
		public void* sival_ptr;
		[Overlapped( Offset = 0 )]
		public int sigval_int;
		[Overlapped( Offset = 0 )]
		public void* sigval_ptr;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct sigvec {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<int> sv_handler;
		[ExplicitOffset( Offset = 8 )]
		public int sv_mask;
		[ExplicitOffset( Offset = 12 )]
		public int sv_flags;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct sock_timestamp_info {
		[ExplicitOffset( Offset = 0 )]
		public uint st_info_flags;
		[ExplicitOffset( Offset = 4 )]
		public uint st_info_pad0;
		[ExplicitOffset( Offset = 8 )]
		public uintptr[7] st_info_rsv;
	}
	[ExplicitSize( Size = 16 )]
	public partial struct sockaddr {
		[ExplicitOffset( Offset = 0 )]
		public byte sa_len;
		[ExplicitOffset( Offset = 1 )]
		public byte sa_family;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[14] sa_data;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_in {
		[ExplicitOffset( Offset = 0 )]
		public byte sin_len;
		[ExplicitOffset( Offset = 1 )]
		public byte sin_family;
		[ExplicitOffset( Offset = 2 )]
		public ushort sin_port;
		[ExplicitOffset( Offset = 4 )]
		public in_addr sin_addr;
		[ExplicitOffset( Offset = 8 )]
		public sbyte[8] sin_zero;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_in6 {
		[ExplicitOffset( Offset = 0 )]
		public byte sin6_len;
		[ExplicitOffset( Offset = 1 )]
		public byte sin6_family;
		[ExplicitOffset( Offset = 2 )]
		public ushort sin6_port;
		[ExplicitOffset( Offset = 4 )]
		public uint sin6_flowinfo;
		[ExplicitOffset( Offset = 8 )]
		public in6_addr sin6_addr;
		[ExplicitOffset( Offset = 24 )]
		public uint sin6_scope_id;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct sockaddr_storage {
		[ExplicitOffset( Offset = 0 )]
		public byte ss_len;
		[ExplicitOffset( Offset = 1 )]
		public byte ss_family;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[6] __ss_pad1;
		[ExplicitOffset( Offset = 8 )]
		public intptr __ss_align;
		[ExplicitOffset( Offset = 16 )]
		public sbyte[112] __ss_pad2;
	}
	[ExplicitSize( Size = 106 )]
	public partial struct sockaddr_un {
		[ExplicitOffset( Offset = 0 )]
		public byte sun_len;
		[ExplicitOffset( Offset = 1 )]
		public byte sun_family;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[104] sun_path;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockcred {
		[ExplicitOffset( Offset = 0 )]
		public uint sc_uid;
		[ExplicitOffset( Offset = 4 )]
		public uint sc_euid;
		[ExplicitOffset( Offset = 8 )]
		public uint sc_gid;
		[ExplicitOffset( Offset = 12 )]
		public uint sc_egid;
		[ExplicitOffset( Offset = 16 )]
		public int sc_ngroups;
		[ExplicitOffset( Offset = 20 )]
		public uint[1] sc_groups;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 2 )]
	public partial struct sockproto {
		[ExplicitOffset( Offset = 0 )]
		public ushort sp_family;
		[ExplicitOffset( Offset = 2 )]
		public ushort sp_protocol;
	}
	[ExplicitSize( Size = 224 )]
	[Alignment( Boundary = 8 )]
	public partial struct stat {
		[ExplicitOffset( Offset = 0 )]
		public uintptr st_dev;
		[ExplicitOffset( Offset = 8 )]
		public uintptr st_ino;
		[ExplicitOffset( Offset = 16 )]
		public uintptr st_nlink;
		[ExplicitOffset( Offset = 24 )]
		public ushort st_mode;
		[ExplicitOffset( Offset = 26 )]
		public short st_padding0;
		[ExplicitOffset( Offset = 28 )]
		public uint st_uid;
		[ExplicitOffset( Offset = 32 )]
		public uint st_gid;
		[ExplicitOffset( Offset = 36 )]
		public int st_padding1;
		[ExplicitOffset( Offset = 40 )]
		public uintptr st_rdev;
		[ExplicitOffset( Offset = 48 )]
		public timespec st_atim;
		[ExplicitOffset( Offset = 64 )]
		public timespec st_mtim;
		[ExplicitOffset( Offset = 80 )]
		public timespec st_ctim;
		[ExplicitOffset( Offset = 96 )]
		public timespec st_birthtim;
		[ExplicitOffset( Offset = 112 )]
		public intptr st_size;
		[ExplicitOffset( Offset = 120 )]
		public intptr st_blocks;
		[ExplicitOffset( Offset = 128 )]
		public int st_blksize;
		[ExplicitOffset( Offset = 132 )]
		public uint st_flags;
		[ExplicitOffset( Offset = 136 )]
		public uintptr st_gen;
		[ExplicitOffset( Offset = 144 )]
		public uintptr[10] st_spare;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_fastopen {
		[ExplicitOffset( Offset = 0 )]
		public int enable;
		[ExplicitOffset( Offset = 4 )]
		public byte[16] psk;
	}
	[ExplicitSize( Size = 36 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_function_set {
		[ExplicitOffset( Offset = 0 )]
		public sbyte[32] function_set_name;
		[ExplicitOffset( Offset = 32 )]
		public uint pcbcnt;
	}
	[ExplicitSize( Size = 236 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_info {
		[ExplicitOffset( Offset = 0 )]
		public byte tcpi_state;
		[ExplicitOffset( Offset = 1 )]
		public byte __tcpi_ca_state;
		[ExplicitOffset( Offset = 2 )]
		public byte __tcpi_retransmits;
		[ExplicitOffset( Offset = 3 )]
		public byte __tcpi_probes;
		[ExplicitOffset( Offset = 4 )]
		public byte __tcpi_backoff;
		[ExplicitOffset( Offset = 5 )]
		public byte tcpi_options;
		public byte tcpi_snd_wscale { get { return cast<byte*>( &this )[6] & 15; } set { cast<byte*>( &this )[6] &= 240; cast<byte*>( &this )[6] |= ( cast<byte>( value ) & 15 ); } }
		public byte tcpi_rcv_wscale { get { return cast<byte*>( &this )[6] >> 4; } set { cast<byte*>( &this )[6] &= 15; cast<byte*>( &this )[6] |= ( cast<byte>( value ) & 240 ) << 4; } }
		[ExplicitOffset( Offset = 8 )]
		public uint tcpi_rto;
		[ExplicitOffset( Offset = 12 )]
		public uint __tcpi_ato;
		[ExplicitOffset( Offset = 16 )]
		public uint tcpi_snd_mss;
		[ExplicitOffset( Offset = 20 )]
		public uint tcpi_rcv_mss;
		[ExplicitOffset( Offset = 24 )]
		public uint __tcpi_unacked;
		[ExplicitOffset( Offset = 28 )]
		public uint __tcpi_sacked;
		[ExplicitOffset( Offset = 32 )]
		public uint __tcpi_lost;
		[ExplicitOffset( Offset = 36 )]
		public uint __tcpi_retrans;
		[ExplicitOffset( Offset = 40 )]
		public uint __tcpi_fackets;
		[ExplicitOffset( Offset = 44 )]
		public uint __tcpi_last_data_sent;
		[ExplicitOffset( Offset = 48 )]
		public uint __tcpi_last_ack_sent;
		[ExplicitOffset( Offset = 52 )]
		public uint tcpi_last_data_recv;
		[ExplicitOffset( Offset = 56 )]
		public uint __tcpi_last_ack_recv;
		[ExplicitOffset( Offset = 60 )]
		public uint __tcpi_pmtu;
		[ExplicitOffset( Offset = 64 )]
		public uint __tcpi_rcv_ssthresh;
		[ExplicitOffset( Offset = 68 )]
		public uint tcpi_rtt;
		[ExplicitOffset( Offset = 72 )]
		public uint tcpi_rttvar;
		[ExplicitOffset( Offset = 76 )]
		public uint tcpi_snd_ssthresh;
		[ExplicitOffset( Offset = 80 )]
		public uint tcpi_snd_cwnd;
		[ExplicitOffset( Offset = 84 )]
		public uint __tcpi_advmss;
		[ExplicitOffset( Offset = 88 )]
		public uint __tcpi_reordering;
		[ExplicitOffset( Offset = 92 )]
		public uint __tcpi_rcv_rtt;
		[ExplicitOffset( Offset = 96 )]
		public uint tcpi_rcv_space;
		[ExplicitOffset( Offset = 100 )]
		public uint tcpi_snd_wnd;
		[ExplicitOffset( Offset = 104 )]
		public uint tcpi_snd_bwnd;
		[ExplicitOffset( Offset = 108 )]
		public uint tcpi_snd_nxt;
		[ExplicitOffset( Offset = 112 )]
		public uint tcpi_rcv_nxt;
		[ExplicitOffset( Offset = 116 )]
		public uint tcpi_toe_tid;
		[ExplicitOffset( Offset = 120 )]
		public uint tcpi_snd_rexmitpack;
		[ExplicitOffset( Offset = 124 )]
		public uint tcpi_rcv_ooopack;
		[ExplicitOffset( Offset = 128 )]
		public uint tcpi_snd_zerowin;
		[ExplicitOffset( Offset = 132 )]
		public uint[26] __tcpi_pad;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcphdr {
		[ExplicitOffset( Offset = 0 )]
		public ushort th_sport;
		[ExplicitOffset( Offset = 2 )]
		public ushort th_dport;
		[ExplicitOffset( Offset = 4 )]
		public uint th_seq;
		[ExplicitOffset( Offset = 8 )]
		public uint th_ack;
		public byte th_x2 { get { return cast<byte*>( &this )[12] & 15; } set { cast<byte*>( &this )[12] &= 240; cast<byte*>( &this )[12] |= ( cast<byte>( value ) & 15 ); } }
		public byte th_off { get { return cast<byte*>( &this )[12] >> 4; } set { cast<byte*>( &this )[12] &= 15; cast<byte*>( &this )[12] |= ( cast<byte>( value ) & 240 ) << 4; } }
		[ExplicitOffset( Offset = 13 )]
		public byte th_flags;
		[ExplicitOffset( Offset = 14 )]
		public ushort th_win;
		[ExplicitOffset( Offset = 16 )]
		public ushort th_sum;
		[ExplicitOffset( Offset = 18 )]
		public ushort th_urp;
	}
	[ExplicitSize( Size = 176 )]
	[Alignment( Boundary = 8 )]
	public partial struct term {
		[ExplicitOffset( Offset = 0 )]
		public termtype type;
		[ExplicitOffset( Offset = 72 )]
		public short Filedes;
		[ExplicitOffset( Offset = 76 )]
		public termios Ottyb;
		[ExplicitOffset( Offset = 120 )]
		public termios Nttyb;
		[ExplicitOffset( Offset = 164 )]
		public int _baudrate;
		[ExplicitOffset( Offset = 168 )]
		public CUtf8String _termname;
	}
	[ExplicitSize( Size = 44 )]
	[Alignment( Boundary = 4 )]
	public partial struct termios {
		[ExplicitOffset( Offset = 0 )]
		public uint c_iflag;
		[ExplicitOffset( Offset = 4 )]
		public uint c_oflag;
		[ExplicitOffset( Offset = 8 )]
		public uint c_cflag;
		[ExplicitOffset( Offset = 12 )]
		public uint c_lflag;
		[ExplicitOffset( Offset = 16 )]
		public byte[20] c_cc;
		[ExplicitOffset( Offset = 36 )]
		public uint c_ispeed;
		[ExplicitOffset( Offset = 40 )]
		public uint c_ospeed;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct termtype {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String term_names;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* str_table;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* Booleans;
		[ExplicitOffset( Offset = 24 )]
		public short* Numbers;
		[ExplicitOffset( Offset = 32 )]
		public sbyte** Strings;
		[ExplicitOffset( Offset = 40 )]
		public sbyte* ext_str_table;
		[ExplicitOffset( Offset = 48 )]
		public sbyte** ext_Names;
		[ExplicitOffset( Offset = 56 )]
		public ushort num_Booleans;
		[ExplicitOffset( Offset = 58 )]
		public ushort num_Numbers;
		[ExplicitOffset( Offset = 60 )]
		public ushort num_Strings;
		[ExplicitOffset( Offset = 62 )]
		public ushort ext_Booleans;
		[ExplicitOffset( Offset = 64 )]
		public ushort ext_Numbers;
		[ExplicitOffset( Offset = 66 )]
		public ushort ext_Strings;
	}
	public partial struct timer_t {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct timespec {
		[ExplicitOffset( Offset = 0 )]
		public intptr tv_sec;
		[ExplicitOffset( Offset = 8 )]
		public intptr tv_nsec;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct timeval {
		[ExplicitOffset( Offset = 0 )]
		public intptr tv_sec;
		[ExplicitOffset( Offset = 8 )]
		public intptr tv_usec;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct timezone {
		[ExplicitOffset( Offset = 0 )]
		public int tz_minuteswest;
		[ExplicitOffset( Offset = 4 )]
		public int tz_dsttime;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct tm {
		[ExplicitOffset( Offset = 0 )]
		public int tm_sec;
		[ExplicitOffset( Offset = 4 )]
		public int tm_min;
		[ExplicitOffset( Offset = 8 )]
		public int tm_hour;
		[ExplicitOffset( Offset = 12 )]
		public int tm_mday;
		[ExplicitOffset( Offset = 16 )]
		public int tm_mon;
		[ExplicitOffset( Offset = 20 )]
		public int tm_year;
		[ExplicitOffset( Offset = 24 )]
		public int tm_wday;
		[ExplicitOffset( Offset = 28 )]
		public int tm_yday;
		[ExplicitOffset( Offset = 32 )]
		public int tm_isdst;
		[ExplicitOffset( Offset = 40 )]
		public intptr tm_gmtoff;
		[ExplicitOffset( Offset = 48 )]
		public sbyte* tm_zone;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct tms {
		[ExplicitOffset( Offset = 0 )]
		public int tms_utime;
		[ExplicitOffset( Offset = 4 )]
		public int tms_stime;
		[ExplicitOffset( Offset = 8 )]
		public int tms_cutime;
		[ExplicitOffset( Offset = 12 )]
		public int tms_cstime;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct ucond {
		[ExplicitOffset( Offset = 0 )]
		public uint c_has_waiters;
		[ExplicitOffset( Offset = 4 )]
		public uint c_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint c_clockid;
		[ExplicitOffset( Offset = 12 )]
		public uint[1] c_spare;
	}
	[ExplicitSize( Size = 880 )]
	[Alignment( Boundary = 16 )]
	public partial struct ucontext_t {
		[ExplicitOffset( Offset = 0 )]
		public sigset_t uc_sigmask;
		[ExplicitOffset( Offset = 16 )]
		public mcontext_t uc_mcontext;
		[ExplicitOffset( Offset = 816 )]
		public ucontext_t* uc_link;
		[ExplicitOffset( Offset = 824 )]
		public sigaltstack uc_stack;
		[ExplicitOffset( Offset = 848 )]
		public int uc_flags;
		[ExplicitOffset( Offset = 852 )]
		public int[4] __spare__;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 2 )]
	public partial struct udphdr {
		[ExplicitOffset( Offset = 0 )]
		public ushort uh_sport;
		[ExplicitOffset( Offset = 2 )]
		public ushort uh_dport;
		[ExplicitOffset( Offset = 4 )]
		public ushort uh_ulen;
		[ExplicitOffset( Offset = 6 )]
		public ushort uh_sum;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct umutex {
		[ExplicitOffset( Offset = 0 )]
		public int m_owner;
		[ExplicitOffset( Offset = 4 )]
		public uint m_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint[2] m_ceilings;
		[ExplicitOffset( Offset = 16 )]
		public uintptr m_rb_lnk;
		[ExplicitOffset( Offset = 24 )]
		public uint[2] m_spare;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct urwlock {
		[ExplicitOffset( Offset = 0 )]
		public int rw_state;
		[ExplicitOffset( Offset = 4 )]
		public uint rw_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint rw_blocked_readers;
		[ExplicitOffset( Offset = 12 )]
		public uint rw_blocked_writers;
		[ExplicitOffset( Offset = 16 )]
		public uint[4] rw_spare;
	}
	[ExplicitSize( Size = 1280 )]
	public partial struct utsname {
		[ExplicitOffset( Offset = 0 )]
		public sbyte[256] sysname;
		[ExplicitOffset( Offset = 256 )]
		public sbyte[256] nodename;
		[ExplicitOffset( Offset = 512 )]
		public sbyte[256] release;
		[ExplicitOffset( Offset = 768 )]
		public sbyte[256] version;
		[ExplicitOffset( Offset = 1024 )]
		public sbyte[256] machine;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 2 )]
	public partial struct winsize {
		[ExplicitOffset( Offset = 0 )]
		public ushort ws_row;
		[ExplicitOffset( Offset = 2 )]
		public ushort ws_col;
		[ExplicitOffset( Offset = 4 )]
		public ushort ws_xpixel;
		[ExplicitOffset( Offset = 6 )]
		public ushort ws_ypixel;
	}
	[ExplicitSize( Size = 160 )]
	[Alignment( Boundary = 8 )]
	public partial struct xsctp_inpcb {
		[ExplicitOffset( Offset = 0 )]
		public uint last;
		[ExplicitOffset( Offset = 4 )]
		public uint flags;
		[ExplicitOffset( Offset = 8 )]
		public uintptr features;
		[ExplicitOffset( Offset = 16 )]
		public uint total_sends;
		[ExplicitOffset( Offset = 20 )]
		public uint total_recvs;
		[ExplicitOffset( Offset = 24 )]
		public uint total_nospaces;
		[ExplicitOffset( Offset = 28 )]
		public uint fragmentation_point;
		[ExplicitOffset( Offset = 32 )]
		public ushort local_port;
		[ExplicitOffset( Offset = 34 )]
		public ushort qlen_old;
		[ExplicitOffset( Offset = 36 )]
		public ushort maxqlen_old;
		[ExplicitOffset( Offset = 38 )]
		public ushort __spare16;
		[ExplicitOffset( Offset = 40 )]
		public uintptr socket;
		[ExplicitOffset( Offset = 48 )]
		public uint qlen;
		[ExplicitOffset( Offset = 52 )]
		public uint maxqlen;
		[ExplicitOffset( Offset = 56 )]
		public uint[26] extra_padding;
	}
	[ExplicitSize( Size = 168 )]
	[Alignment( Boundary = 4 )]
	public partial struct xsctp_laddr {
		[ExplicitOffset( Offset = 0 )]
		public sctp_sockstore address;
		[ExplicitOffset( Offset = 28 )]
		public uint last;
		[ExplicitOffset( Offset = 32 )]
		public sctp_timeval start_time;
		[ExplicitOffset( Offset = 40 )]
		public uint[32] extra_padding;
	}
	[ExplicitSize( Size = 204 )]
	[Alignment( Boundary = 4 )]
	public partial struct xsctp_raddr {
		[ExplicitOffset( Offset = 0 )]
		public sctp_sockstore address;
		[ExplicitOffset( Offset = 28 )]
		public uint last;
		[ExplicitOffset( Offset = 32 )]
		public uint rto;
		[ExplicitOffset( Offset = 36 )]
		public uint max_path_rtx;
		[ExplicitOffset( Offset = 40 )]
		public uint rtx;
		[ExplicitOffset( Offset = 44 )]
		public uint error_counter;
		[ExplicitOffset( Offset = 48 )]
		public uint cwnd;
		[ExplicitOffset( Offset = 52 )]
		public uint flight_size;
		[ExplicitOffset( Offset = 56 )]
		public uint mtu;
		[ExplicitOffset( Offset = 60 )]
		public byte active;
		[ExplicitOffset( Offset = 61 )]
		public byte confirmed;
		[ExplicitOffset( Offset = 62 )]
		public byte heartbeat_enabled;
		[ExplicitOffset( Offset = 63 )]
		public byte potentially_failed;
		[ExplicitOffset( Offset = 64 )]
		public sctp_timeval start_time;
		[ExplicitOffset( Offset = 72 )]
		public uint rtt;
		[ExplicitOffset( Offset = 76 )]
		public uint heartbeat_interval;
		[ExplicitOffset( Offset = 80 )]
		public uint ssthresh;
		[ExplicitOffset( Offset = 84 )]
		public ushort encaps_port;
		[ExplicitOffset( Offset = 86 )]
		public ushort state;
		[ExplicitOffset( Offset = 88 )]
		public uint[29] extra_padding;
	}
	[ExplicitSize( Size = 264 )]
	[Alignment( Boundary = 4 )]
	public partial struct xsctp_tcb {
		[ExplicitOffset( Offset = 0 )]
		public sctp_sockstore primary_addr;
		[ExplicitOffset( Offset = 28 )]
		public uint last;
		[ExplicitOffset( Offset = 32 )]
		public uint heartbeat_interval;
		[ExplicitOffset( Offset = 36 )]
		public uint state;
		[ExplicitOffset( Offset = 40 )]
		public uint in_streams;
		[ExplicitOffset( Offset = 44 )]
		public uint out_streams;
		[ExplicitOffset( Offset = 48 )]
		public uint max_nr_retrans;
		[ExplicitOffset( Offset = 52 )]
		public uint primary_process;
		[ExplicitOffset( Offset = 56 )]
		public uint T1_expireries;
		[ExplicitOffset( Offset = 60 )]
		public uint T2_expireries;
		[ExplicitOffset( Offset = 64 )]
		public uint retransmitted_tsns;
		[ExplicitOffset( Offset = 68 )]
		public uint total_sends;
		[ExplicitOffset( Offset = 72 )]
		public uint total_recvs;
		[ExplicitOffset( Offset = 76 )]
		public uint local_tag;
		[ExplicitOffset( Offset = 80 )]
		public uint remote_tag;
		[ExplicitOffset( Offset = 84 )]
		public uint initial_tsn;
		[ExplicitOffset( Offset = 88 )]
		public uint highest_tsn;
		[ExplicitOffset( Offset = 92 )]
		public uint cumulative_tsn;
		[ExplicitOffset( Offset = 96 )]
		public uint cumulative_tsn_ack;
		[ExplicitOffset( Offset = 100 )]
		public uint mtu;
		[ExplicitOffset( Offset = 104 )]
		public uint refcnt;
		[ExplicitOffset( Offset = 108 )]
		public ushort local_port;
		[ExplicitOffset( Offset = 110 )]
		public ushort remote_port;
		[ExplicitOffset( Offset = 112 )]
		public sctp_timeval start_time;
		[ExplicitOffset( Offset = 120 )]
		public sctp_timeval discontinuity_time;
		[ExplicitOffset( Offset = 128 )]
		public uint peers_rwnd;
		[ExplicitOffset( Offset = 132 )]
		public uint assoc_id;
		[ExplicitOffset( Offset = 136 )]
		public uint[32] extra_padding;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct xucred {
		[ExplicitOffset( Offset = 0 )]
		public uint cr_version;
		[ExplicitOffset( Offset = 4 )]
		public uint cr_uid;
		[ExplicitOffset( Offset = 8 )]
		public short cr_ngroups;
		[ExplicitOffset( Offset = 12 )]
		public uint[16] cr_groups;
		[ExplicitOffset( Offset = 80 )]
		public void* _cr_unused1;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedStruct_9A2C7096 {
		[ExplicitOffset( Offset = 0 )]
		public intptr __spare1__;
		[ExplicitOffset( Offset = 8 )]
		public int[7] __spare2__;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_9A2CA865 {
		[ExplicitOffset( Offset = 0 )]
		public int _trapno;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_9A2CA908 {
		[ExplicitOffset( Offset = 0 )]
		public int _timerid;
		[ExplicitOffset( Offset = 4 )]
		public int _overrun;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_9A2CA98C {
		[ExplicitOffset( Offset = 0 )]
		public int _mqd;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedStruct_9A2CA9B3 {
		[ExplicitOffset( Offset = 0 )]
		public intptr _band;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedStruct_9A2CAAF9 {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<sigval> _function;
		[ExplicitOffset( Offset = 8 )]
		public pthread_attr** _attribute;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_9A2C7622 {
		[Overlapped( Offset = 0 )]
		public Functors.Action<int> __sa_handler;
		[Overlapped( Offset = 0 )]
		public Functors.Action<int, siginfo_t*, void*> __sa_sigaction;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_9A2CA885 {
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_9A2CA865 _fault;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_9A2CA908 _timer;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_9A2CA98C _mesgq;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_9A2CA9B3 _poll;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_9A2C7096 __spare__;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_9A2CAABA {
		[Overlapped( Offset = 0 )]
		public int _threadid;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_9A2CAAF9 _sigev_thread;
		[Overlapped( Offset = 0 )]
		public ushort _kevent_flags;
		[Overlapped( Offset = 0 )]
		public intptr[8] __spare__;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_9DD2C70E {
		[Overlapped( Offset = 0 )]
		public intptr a_val;
		[Overlapped( Offset = 0 )]
		public void* a_ptr;
		[Overlapped( Offset = 0 )]
		public Functors.Action a_fcn;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_9DD2C816 {
		[Overlapped( Offset = 0 )]
		public int a_val;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_AC88FF68 {
		[Overlapped( Offset = 0 )]
		public byte[16] __u6_addr8;
		[Overlapped( Offset = 0 )]
		public ushort[8] __u6_addr16;
		[Overlapped( Offset = 0 )]
		public uint[4] __u6_addr32;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_B56A5706 {
		[Overlapped( Offset = 0 )]
		public uint d_val;
		[Overlapped( Offset = 0 )]
		public uint d_ptr;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_B56A5F00 {
		[Overlapped( Offset = 0 )]
		public uint c_val;
		[Overlapped( Offset = 0 )]
		public uint c_ptr;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_C30DDA70 {
		[Overlapped( Offset = 0 )]
		public uintptr d_val;
		[Overlapped( Offset = 0 )]
		public uintptr d_ptr;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_C30DE334 {
		[Overlapped( Offset = 0 )]
		public uintptr c_val;
		[Overlapped( Offset = 0 )]
		public uintptr c_ptr;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_E263BDEE {
		[Overlapped( Offset = 0 )]
		public sctp_log_closing close;
		[Overlapped( Offset = 0 )]
		public sctp_blk_args blk;
		[Overlapped( Offset = 0 )]
		public sctp_cwnd_args cwnd;
		[Overlapped( Offset = 0 )]
		public sctp_str_log strlog;
		[Overlapped( Offset = 0 )]
		public sctp_fr_log fr;
		[Overlapped( Offset = 0 )]
		public sctp_fr_map map;
		[Overlapped( Offset = 0 )]
		public sctp_rwnd_log rwnd;
		[Overlapped( Offset = 0 )]
		public sctp_mbcnt_log mbcnt;
		[Overlapped( Offset = 0 )]
		public sctp_sack_log sack;
		[Overlapped( Offset = 0 )]
		public sctp_lock_log lock;
		[Overlapped( Offset = 0 )]
		public sctp_rto_log rto;
		[Overlapped( Offset = 0 )]
		public sctp_sb_log sb;
		[Overlapped( Offset = 0 )]
		public sctp_nagle_log nagle;
		[Overlapped( Offset = 0 )]
		public sctp_sbwake_log wake;
		[Overlapped( Offset = 0 )]
		public sctp_mbuf_log mb;
		[Overlapped( Offset = 0 )]
		public sctp_misc_info misc;
	}
}