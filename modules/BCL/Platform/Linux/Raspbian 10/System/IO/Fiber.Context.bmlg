//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Execution and context-switch related functionality
//

using System;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

using Platform.Kernel;
using Platform.Libc;

namespace System.IO {
	public partial struct Fiber {
		internal partial struct FiberInfo {
			private static void PrepareMainFiberEnvironment( FiberInfo* context ) {
			}

			private static void PrepareFiberEnvironment( FiberInfo* context ) {
			}

			private static void SwitchEnvironment( FiberInfo* context, FiberInfo* newContext ) {
			}

			private static void PrepareContext( FiberInfo* fiber, void* stack, int stackSize, Functors.Action<void*> function, void* parameter ) {
				switch( Environment.CurrentCpu ) {
					case System.Runtime.CompilerServices.CpuID.ARM_32: ContextSwitch.ARM32.Linux.PrepareContext_fpu_d8_d15( fiber, stack, stackSize, function, parameter ); break;
				}
			}

			private static void SwitchCurrentContext( void** oldStack, void* newStack ) {
				switch( Environment.CurrentCpu ) {
					case System.Runtime.CompilerServices.CpuID.ARM_32: ContextSwitch.ARM32.Linux.SwitchCurrentContext_fpu_d8_d15( oldStack, newStack ); break;
				}
			}
		}
	}
}