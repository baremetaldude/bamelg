//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

namespace Platform.Kernel {
	public static partial struct KernelApi {
		public const int _LINUX_CAPABILITY_VERSION = 429392688;

	}
	public enum FileDriverCommand : uint {
		TIOCPKT_DATA =        0,
		TIOCPKT_FLUSHREAD =   1,
		TIOCPKT_FLUSHWRITE =  2,
		TIOCPKT_STOP =        4,
		TIOCPKT_START =       8,
		TIOCPKT_NOSTOP =     16,
		TIOCPKT_DOSTOP =     32,
		TCGETS =          21505,
		TCSETS =          21506,
		TCSETSW =         21507,
		TCSETSF =         21508,
		TCGETA =          21509,
		TCSETA =          21510,
		TCSETAW =         21511,
		TCSETAF =         21512,
		TCSBRK =          21513,
		TCXONC =          21514,
		TCFLSH =          21515,
		TIOCEXCL =        21516,
		TIOCNXCL =        21517,
		TIOCSCTTY =       21518,
		TIOCGPGRP =       21519,
		TIOCSPGRP =       21520,
		TIOCOUTQ =        21521,
		TIOCSTI =         21522,
		TIOCGWINSZ =      21523,
		TIOCSWINSZ =      21524,
		TIOCMGET =        21525,
		TIOCMBIS =        21526,
		TIOCMBIC =        21527,
		TIOCMSET =        21528,
		TIOCGSOFTCAR =    21529,
		TIOCSSOFTCAR =    21530,
		FIONREAD =        21531,
		TIOCINQ =         21531,
		TIOCLINUX =       21532,
		TIOCCONS =        21533,
		TIOCGSERIAL =     21534,
		TIOCSSERIAL =     21535,
		TIOCPKT =         21536,
		FIONBIO =         21537,
		TIOCNOTTY =       21538,
		TIOCSETD =        21539,
		TIOCGETD =        21540,
		TCSBRKP =         21541,
		TIOCTTYGSTRUCT =  21542,
		TIOCSBRK =        21543,
		TIOCCBRK =        21544,
		TIOCGSID =        21545,
		FIONCLEX =        21584,
		FIOCLEX =         21585,
		FIOASYNC =        21586,
		TIOCSERCONFIG =   21587,
		TIOCSERGWILD =    21588,
		TIOCSERSWILD =    21589,
		TIOCGLCKTRMIOS =  21590,
		TIOCSLCKTRMIOS =  21591,
		TIOCSERGSTRUCT =  21592,
		TIOCSERGETLSR =   21593,
		TIOCSERGETMULTI = 21594,
		TIOCSERSETMULTI = 21595,
		TIOCMIWAIT =      21596,
		TIOCGICOUNT =     21597,
		TIOCGHAYESESP =   21598,
		TIOCSHAYESESP =   21599,
		FIOQSIZE =        21600,
	}
	public enum ProcessControlActions : int {
		PR_FP_EXC_DISABLED = 0,
		PR_FP_EXC_NONRECOV = 1,
		PR_FPEMU_NOPRINT =   1,
		PR_SET_PDEATHSIG =   1,
		PR_UNALIGN_NOPRINT = 1,
		PR_FP_EXC_ASYNC =    2,
		PR_FPEMU_SIGFPE =    2,
		PR_GET_PDEATHSIG =   2,
		PR_UNALIGN_SIGBUS =  2,
		PR_FP_EXC_PRECISE =  3,
		PR_GET_DUMPABLE =    3,
		PR_SET_DUMPABLE =    4,
		PR_GET_UNALIGN =     5,
		PR_SET_UNALIGN =     6,
		PR_GET_KEEPCAPS =    7,
		PR_SET_KEEPCAPS =    8,
		PR_GET_FPEMU =       9,
		PR_SET_FPEMU =      10,
		PR_GET_FPEXC =      11,
		PR_SET_FPEXC =      12,
	}
	public enum SocketProperty : int {
		SO_DEBUG =                          1,
		SO_REUSEADDR =                      2,
		SO_TYPE =                           3,
		SO_ERROR =                          4,
		SO_DONTROUTE =                      5,
		SO_BROADCAST =                      6,
		SO_SNDBUF =                         7,
		SO_RCVBUF =                         8,
		SO_KEEPALIVE =                      9,
		SO_OOBINLINE =                     10,
		SO_NO_CHECK =                      11,
		SO_PRIORITY =                      12,
		SO_LINGER =                        13,
		SO_BSDCOMPAT =                     14,
		SO_PASSCRED =                      16,
		SO_PEERCRED =                      17,
		SO_RCVLOWAT =                      18,
		SO_SNDLOWAT =                      19,
		SO_RCVTIMEO =                      20,
		SO_SNDTIMEO =                      21,
		SO_SECURITY_AUTHENTICATION =       22,
		SO_SECURITY_ENCRYPTION_TRANSPORT = 23,
		SO_SECURITY_ENCRYPTION_NETWORK =   24,
		SO_BINDTODEVICE =                  25,
		SO_ATTACH_FILTER =                 26,
		SO_DETACH_FILTER =                 27,
		SO_PEERNAME =                      28,
		SO_TIMESTAMP =                     29,
		SO_ACCEPTCONN =                    30,
		SO_LABEL =                        112,
		SO_PRIV =                         113,
	}
	public enum SocketPropertyGroup : uint {
		SOL_IP =       0,
		SOL_SOCKET =   1,
		SOL_TCP =      6,
		SOL_UDP =     17,
		SOL_IPV6 =    41,
		SOL_ICMPV6 =  58,
		SOL_RAW =    255,
		SOL_IPX =    256,
		SOL_AX25 =   257,
		SOL_ATALK =  258,
		SOL_NETROM = 259,
		SOL_ROSE =   260,
		SOL_DECNET = 261,
		SOL_X25 =    262,
		SOL_PACKET = 263,
		SOL_ATM =    264,
		SOL_AAL =    265,
		SOL_IRDA =   266,
		SOL_MCBC = 32768,
	}
	public enum SocketPropertyTcp : int {
		TCP_NODELAY =       1,
		TCP_MAXSEG =        2,
		TCP_CORK =          3,
		TCP_KEEPIDLE =      4,
		TCP_KEEPINTVL =     5,
		TCP_KEEPCNT =       6,
		TCP_SYNCNT =        7,
		TCP_LINGER2 =       8,
		TCP_DEFER_ACCEPT =  9,
		TCP_WINDOW_CLAMP = 10,
		TCP_INFO =         11,
		TCP_QUICKACK =     12,
		TCP_MAX_WINSHIFT = 14,
		TCP_MSS =         512,
		TCP_MAXWIN =    65535,
	}
	public enum SystemCall : uint {
		exit =                     1,
		fork =                     2,
		read =                     3,
		write =                    4,
		open =                     5,
		close =                    6,
		waitpid =                  7,
		creat =                    8,
		link =                     9,
		unlink =                  10,
		execve =                  11,
		chdir =                   12,
		time =                    13,
		mknod =                   14,
		chmod =                   15,
		lchown =                  16,
		@break =                  17,
		oldstat =                 18,
		lseek =                   19,
		getpid =                  20,
		mount =                   21,
		umount =                  22,
		setuid =                  23,
		getuid =                  24,
		stime =                   25,
		ptrace =                  26,
		alarm =                   27,
		oldfstat =                28,
		pause =                   29,
		utime =                   30,
		stty =                    31,
		gtty =                    32,
		access =                  33,
		nice =                    34,
		ftime =                   35,
		sync =                    36,
		kill =                    37,
		rename =                  38,
		mkdir =                   39,
		rmdir =                   40,
		dup =                     41,
		pipe =                    42,
		times =                   43,
		prof =                    44,
		brk =                     45,
		setgid =                  46,
		getgid =                  47,
		signal =                  48,
		geteuid =                 49,
		getegid =                 50,
		acct =                    51,
		umount2 =                 52,
		lock =                    53,
		ioctl =                   54,
		fcntl =                   55,
		mpx =                     56,
		setpgid =                 57,
		ulimit =                  58,
		oldolduname =             59,
		umask =                   60,
		chroot =                  61,
		ustat =                   62,
		dup2 =                    63,
		getppid =                 64,
		getpgrp =                 65,
		setsid =                  66,
		sigaction =               67,
		sgetmask =                68,
		ssetmask =                69,
		setreuid =                70,
		setregid =                71,
		sigsuspend =              72,
		sigpending =              73,
		sethostname =             74,
		setrlimit =               75,
		getrlimit =               76,
		getrusage =               77,
		gettimeofday =            78,
		settimeofday =            79,
		getgroups =               80,
		setgroups =               81,
		select =                  82,
		symlink =                 83,
		oldlstat =                84,
		readlink =                85,
		uselib =                  86,
		swapon =                  87,
		reboot =                  88,
		readdir =                 89,
		mmap =                    90,
		munmap =                  91,
		truncate =                92,
		ftruncate =               93,
		fchmod =                  94,
		fchown =                  95,
		getpriority =             96,
		setpriority =             97,
		profil =                  98,
		statfs =                  99,
		fstatfs =                100,
		ioperm =                 101,
		socketcall =             102,
		syslog =                 103,
		setitimer =              104,
		getitimer =              105,
		stat =                   106,
		lstat =                  107,
		fstat =                  108,
		olduname =               109,
		iopl =                   110,
		vhangup =                111,
		idle =                   112,
		vm86old =                113,
		wait4 =                  114,
		swapoff =                115,
		sysinfo =                116,
		ipc =                    117,
		fsync =                  118,
		sigreturn =              119,
		clone =                  120,
		setdomainname =          121,
		uname =                  122,
		modify_ldt =             123,
		adjtimex =               124,
		mprotect =               125,
		sigprocmask =            126,
		create_module =          127,
		init_module =            128,
		delete_module =          129,
		get_kernel_syms =        130,
		quotactl =               131,
		getpgid =                132,
		fchdir =                 133,
		bdflush =                134,
		sysfs =                  135,
		personality =            136,
		afs_syscall =            137,
		setfsuid =               138,
		setfsgid =               139,
		_llseek =                140,
		getdents =               141,
		_newselect =             142,
		flock =                  143,
		msync =                  144,
		readv =                  145,
		writev =                 146,
		getsid =                 147,
		fdatasync =              148,
		_sysctl =                149,
		mlock =                  150,
		munlock =                151,
		mlockall =               152,
		munlockall =             153,
		sched_setparam =         154,
		sched_getparam =         155,
		sched_setscheduler =     156,
		sched_getscheduler =     157,
		sched_yield =            158,
		sched_get_priority_max = 159,
		sched_get_priority_min = 160,
		sched_rr_get_interval =  161,
		nanosleep =              162,
		mremap =                 163,
		setresuid =              164,
		getresuid =              165,
		vm86 =                   166,
		query_module =           167,
		poll =                   168,
		nfsservctl =             169,
		setresgid =              170,
		getresgid =              171,
		prctl =                  172,
		rt_sigreturn =           173,
		rt_sigaction =           174,
		rt_sigprocmask =         175,
		rt_sigpending =          176,
		rt_sigtimedwait =        177,
		rt_sigqueueinfo =        178,
		rt_sigsuspend =          179,
		pread =                  180,
		pwrite =                 181,
		chown =                  182,
		getcwd =                 183,
		capget =                 184,
		capset =                 185,
		sigaltstack =            186,
		sendfile =               187,
		getpmsg =                188,
		putpmsg =                189,
		vfork =                  190,
		ugetrlimit =             191,
		mmap2 =                  192,
		truncate64 =             193,
		ftruncate64 =            194,
		stat64 =                 195,
		lstat64 =                196,
		fstat64 =                197,
		lchown32 =               198,
		getuid32 =               199,
		getgid32 =               200,
		geteuid32 =              201,
		getegid32 =              202,
		setreuid32 =             203,
		setregid32 =             204,
		getgroups32 =            205,
		setgroups32 =            206,
		fchown32 =               207,
		setresuid32 =            208,
		getresuid32 =            209,
		setresgid32 =            210,
		getresgid32 =            211,
		chown32 =                212,
		setuid32 =               213,
		setgid32 =               214,
		setfsuid32 =             215,
		setfsgid32 =             216,
		pivot_root =             217,
		mincore =                218,
		madvise =                219,
		madvise1 =               219,
		getdents64 =             220,
		fcntl64 =                221,
		security =               223,
		gettid =                 224,
		readahead =              225,
		setxattr =               226,
		lsetxattr =              227,
		fsetxattr =              228,
		getxattr =               229,
		lgetxattr =              230,
		fgetxattr =              231,
		listxattr =              232,
		llistxattr =             233,
		flistxattr =             234,
		removexattr =            235,
		lremovexattr =           236,
		fremovexattr =           237,
		tkill =                  238,
		sendfile64 =             239,
		futex =                  240,
		sched_setaffinity =      241,
		sched_getaffinity =      242,
		set_thread_area =        243,
		get_thread_area =        244,
		io_setup =               245,
		io_destroy =             246,
		io_getevents =           247,
		io_submit =              248,
		io_cancel =              249,
		alloc_hugepages =        250,
		free_hugepages =         251,
		exit_group =             252,
		chmac =                  259,
		fchmac =                 260,
		statmac =                261,
		fstatmac =               262,
		setmac =                 263,
		getmac =                 264,
		chaud =                  265,
		fchaud =                 266,
		stataud =                267,
		fstataud =               268,
		setaud =                 269,
		getaud =                 270,
		chcap =                  271,
		fchcap =                 272,
		statcap =                273,
		fstatcap =               274,
		mcbc30_acl_sorted =      275,
		mcbc30_facl_sorted =     276,
		mcbc30_chmac =           277,
		mcbc30_setmac =          278,
		mcbc30_fchmac =          279,
		mcbc30_getmac =          280,
		mcbc30_getmaccaps =      281,
		mcbc30_procstat =        282,
		mcbc30_setaud =          283,
		mcbc30_chfileaud =       284,
		mcbc30_getfileaud =      285,
		mcbc30_getaud =          286,
		mcbc30_setcap =          287,
	}
	public enum SystemError : int {
		[ErrorCodeSuccess]
		None =             0,
		EPERM =            1,
		ENOENT =           2,
		ESRCH =            3,
		EINTR =            4,
		EIO =              5,
		ENXIO =            6,
		E2BIG =            7,
		ENOEXEC =          8,
		EBADF =            9,
		ECHILD =          10,
		EAGAIN =          11,
		EWOULDBLOCK =     11,
		ENOMEM =          12,
		EACCES =          13,
		EFAULT =          14,
		ENOTBLK =         15,
		EBUSY =           16,
		EEXIST =          17,
		EXDEV =           18,
		ENODEV =          19,
		ENOTDIR =         20,
		EISDIR =          21,
		EINVAL =          22,
		ENFILE =          23,
		EMFILE =          24,
		ENOTTY =          25,
		ETXTBSY =         26,
		EFBIG =           27,
		ENOSPC =          28,
		ESPIPE =          29,
		EROFS =           30,
		EMLINK =          31,
		EPIPE =           32,
		EDOM =            33,
		ERANGE =          34,
		EDEADLK =         35,
		EDEADLOCK =       35,
		ENAMETOOLONG =    36,
		ENOLCK =          37,
		ENOSYS =          38,
		ENOTEMPTY =       39,
		ELOOP =           40,
		ENOMSG =          42,
		EIDRM =           43,
		ECHRNG =          44,
		EL2NSYNC =        45,
		EL3HLT =          46,
		EL3RST =          47,
		ELNRNG =          48,
		EUNATCH =         49,
		ENOCSI =          50,
		EL2HLT =          51,
		EBADE =           52,
		EBADR =           53,
		EXFULL =          54,
		ENOANO =          55,
		EBADRQC =         56,
		EBADSLT =         57,
		EBFONT =          59,
		ENOSTR =          60,
		ENODATA =         61,
		ETIME =           62,
		ENOSR =           63,
		ENONET =          64,
		ENOPKG =          65,
		EREMOTE =         66,
		ENOLINK =         67,
		EADV =            68,
		ESRMNT =          69,
		ECOMM =           70,
		EPROTO =          71,
		EMULTIHOP =       72,
		EDOTDOT =         73,
		EBADMSG =         74,
		EOVERFLOW =       75,
		ENOTUNIQ =        76,
		EBADFD =          77,
		EREMCHG =         78,
		ELIBACC =         79,
		ELIBBAD =         80,
		ELIBSCN =         81,
		ELIBMAX =         82,
		ELIBEXEC =        83,
		EILSEQ =          84,
		ERESTART =        85,
		ESTRPIPE =        86,
		EUSERS =          87,
		ENOTSOCK =        88,
		EDESTADDRREQ =    89,
		EMSGSIZE =        90,
		EPROTOTYPE =      91,
		ENOPROTOOPT =     92,
		EPROTONOSUPPORT = 93,
		ESOCKTNOSUPPORT = 94,
		EOPNOTSUPP =      95,
		EPFNOSUPPORT =    96,
		EAFNOSUPPORT =    97,
		EADDRINUSE =      98,
		EADDRNOTAVAIL =   99,
		ENETDOWN =       100,
		ENETUNREACH =    101,
		ENETRESET =      102,
		ECONNABORTED =   103,
		ECONNRESET =     104,
		ENOBUFS =        105,
		EISCONN =        106,
		ENOTCONN =       107,
		ESHUTDOWN =      108,
		ETOOMANYREFS =   109,
		ETIMEDOUT =      110,
		ECONNREFUSED =   111,
		EHOSTDOWN =      112,
		EHOSTUNREACH =   113,
		EALREADY =       114,
		EINPROGRESS =    115,
		ESTALE =         116,
		EUCLEAN =        117,
		ENOTNAM =        118,
		ENAVAIL =        119,
		EISNAM =         120,
		EREMOTEIO =      121,
		EDQUOT =         122,
		ENOMEDIUM =      123,
		EMEDIUMTYPE =    124,
	}
	public enum ThreadCapabilities : uint {
		CAP_CHOWN =             0,
		CAP_DAC_OVERRIDE =      1,
		CAP_DAC_READ_SEARCH =   2,
		CAP_FOWNER =            3,
		CAP_FSETID =            4,
		CAP_KILL =              5,
		CAP_SETGID =            6,
		CAP_SETUID =            7,
		CAP_SETPCAP =           8,
		CAP_LINUX_IMMUTABLE =   9,
		CAP_NET_BIND_SERVICE = 10,
		CAP_NET_BROADCAST =    11,
		CAP_NET_ADMIN =        12,
		CAP_NET_RAW =          13,
		CAP_IPC_LOCK =         14,
		CAP_IPC_OWNER =        15,
		CAP_SYS_MODULE =       16,
		CAP_SYS_RAWIO =        17,
		CAP_SYS_CHROOT =       18,
		CAP_SYS_PTRACE =       19,
		CAP_SYS_PACCT =        20,
		CAP_SYS_ADMIN =        21,
		CAP_SYS_BOOT =         22,
		CAP_SYS_NICE =         23,
		CAP_SYS_RESOURCE =     24,
		CAP_SYS_TIME =         25,
		CAP_SYS_TTY_CONFIG =   26,
		CAP_MKNOD =            27,
		CAP_LEASE =            28,
		CAP_FS_MASK =          31,
	}
	[ExplicitSize( Size = 10 )]
	[Alignment( Boundary = 2 )]
	public partial struct _fpreg {
		[ExplicitOffset( Offset = 0 )]
		public ushort[4] significand;
		[ExplicitOffset( Offset = 8 )]
		public ushort exponent;
	}
	[ExplicitSize( Size = 624 )]
	[Alignment( Boundary = 4 )]
	public partial struct _fpstate {
		[ExplicitOffset( Offset = 0 )]
		public uintptr cw;
		[ExplicitOffset( Offset = 4 )]
		public uintptr sw;
		[ExplicitOffset( Offset = 8 )]
		public uintptr tag;
		[ExplicitOffset( Offset = 12 )]
		public uintptr ipoff;
		[ExplicitOffset( Offset = 16 )]
		public uintptr cssel;
		[ExplicitOffset( Offset = 20 )]
		public uintptr dataoff;
		[ExplicitOffset( Offset = 24 )]
		public uintptr datasel;
		[ExplicitOffset( Offset = 28 )]
		public _fpreg[8] _st;
		[ExplicitOffset( Offset = 108 )]
		public ushort status;
		[ExplicitOffset( Offset = 110 )]
		public ushort magic;
		[ExplicitOffset( Offset = 112 )]
		public uintptr[6] _fxsr_env;
		[ExplicitOffset( Offset = 136 )]
		public uintptr mxcsr;
		[ExplicitOffset( Offset = 140 )]
		public uintptr reserved;
		[ExplicitOffset( Offset = 144 )]
		public _fpxreg[8] _fxsr_st;
		[ExplicitOffset( Offset = 272 )]
		public _xmmreg[8] _xmm;
		[ExplicitOffset( Offset = 400 )]
		public uintptr[56] padding;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 2 )]
	public partial struct _fpxreg {
		[ExplicitOffset( Offset = 0 )]
		public ushort[4] significand;
		[ExplicitOffset( Offset = 8 )]
		public ushort exponent;
		[ExplicitOffset( Offset = 10 )]
		public ushort[3] padding;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct _xmmreg {
		[ExplicitOffset( Offset = 0 )]
		public uintptr[4] element;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 2 )]
	public partial struct at_addr {
		[ExplicitOffset( Offset = 0 )]
		public ushort s_net;
		[ExplicitOffset( Offset = 2 )]
		public byte s_node;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct atalk_iface {
		[ExplicitOffset( Offset = 0 )]
		public net_device* dev;
		[ExplicitOffset( Offset = 4 )]
		public at_addr address;
		[ExplicitOffset( Offset = 8 )]
		public int status;
		[ExplicitOffset( Offset = 12 )]
		public netrange nets;
		[ExplicitOffset( Offset = 20 )]
		public atalk_iface* next;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct atalk_route {
		[ExplicitOffset( Offset = 0 )]
		public net_device* dev;
		[ExplicitOffset( Offset = 4 )]
		public at_addr target;
		[ExplicitOffset( Offset = 8 )]
		public at_addr gateway;
		[ExplicitOffset( Offset = 12 )]
		public int flags;
		[ExplicitOffset( Offset = 16 )]
		public atalk_route* next;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 2 )]
	public partial struct atalk_sock {
		[ExplicitOffset( Offset = 0 )]
		public ushort dest_net;
		[ExplicitOffset( Offset = 2 )]
		public ushort src_net;
		[ExplicitOffset( Offset = 4 )]
		public byte dest_node;
		[ExplicitOffset( Offset = 5 )]
		public byte src_node;
		[ExplicitOffset( Offset = 6 )]
		public byte dest_port;
		[ExplicitOffset( Offset = 7 )]
		public byte src_port;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct cap_user_data_t {
		[ExplicitOffset( Offset = 0 )]
		public uint effective;
		[ExplicitOffset( Offset = 4 )]
		public uint permitted;
		[ExplicitOffset( Offset = 8 )]
		public uint inheritable;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct cap_user_header_t {
		[ExplicitOffset( Offset = 0 )]
		public uint version;
		[ExplicitOffset( Offset = 4 )]
		public int pid;
	}
	public partial struct net_device {
	}
	[ExplicitSize( Size = 6 )]
	[Alignment( Boundary = 2 )]
	public partial struct netrange {
		[ExplicitOffset( Offset = 0 )]
		public byte nr_phase;
		[ExplicitOffset( Offset = 2 )]
		public ushort nr_firstnet;
		[ExplicitOffset( Offset = 4 )]
		public ushort nr_lastnet;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 4 )]
	public partial struct serial_icounter_struct {
		[ExplicitOffset( Offset = 0 )]
		public int cts;
		[ExplicitOffset( Offset = 4 )]
		public int dsr;
		[ExplicitOffset( Offset = 8 )]
		public int rng;
		[ExplicitOffset( Offset = 12 )]
		public int dcd;
		[ExplicitOffset( Offset = 16 )]
		public int rx;
		[ExplicitOffset( Offset = 20 )]
		public int tx;
		[ExplicitOffset( Offset = 24 )]
		public int frame;
		[ExplicitOffset( Offset = 28 )]
		public int overrun;
		[ExplicitOffset( Offset = 32 )]
		public int parity;
		[ExplicitOffset( Offset = 36 )]
		public int brk;
		[ExplicitOffset( Offset = 40 )]
		public int buf_overrun;
		[ExplicitOffset( Offset = 44 )]
		public int[9] reserved;
	}
	[ExplicitSize( Size = 168 )]
	[Alignment( Boundary = 4 )]
	public partial struct serial_multiport_struct {
		[ExplicitOffset( Offset = 0 )]
		public int irq;
		[ExplicitOffset( Offset = 4 )]
		public int port1;
		[ExplicitOffset( Offset = 8 )]
		public byte mask1;
		[ExplicitOffset( Offset = 9 )]
		public byte match1;
		[ExplicitOffset( Offset = 12 )]
		public int port2;
		[ExplicitOffset( Offset = 16 )]
		public byte mask2;
		[ExplicitOffset( Offset = 17 )]
		public byte match2;
		[ExplicitOffset( Offset = 20 )]
		public int port3;
		[ExplicitOffset( Offset = 24 )]
		public byte mask3;
		[ExplicitOffset( Offset = 25 )]
		public byte match3;
		[ExplicitOffset( Offset = 28 )]
		public int port4;
		[ExplicitOffset( Offset = 32 )]
		public byte mask4;
		[ExplicitOffset( Offset = 33 )]
		public byte match4;
		[ExplicitOffset( Offset = 36 )]
		public int port_monitor;
		[ExplicitOffset( Offset = 40 )]
		public int[32] reserved;
	}
	[ExplicitSize( Size = 60 )]
	[Alignment( Boundary = 4 )]
	public partial struct serial_struct {
		[ExplicitOffset( Offset = 0 )]
		public int type;
		[ExplicitOffset( Offset = 4 )]
		public int line;
		[ExplicitOffset( Offset = 8 )]
		public uint port;
		[ExplicitOffset( Offset = 12 )]
		public int irq;
		[ExplicitOffset( Offset = 16 )]
		public int flags;
		[ExplicitOffset( Offset = 20 )]
		public int xmit_fifo_size;
		[ExplicitOffset( Offset = 24 )]
		public int custom_divisor;
		[ExplicitOffset( Offset = 28 )]
		public int baud_base;
		[ExplicitOffset( Offset = 32 )]
		public ushort close_delay;
		[ExplicitOffset( Offset = 34 )]
		public sbyte io_type;
		[ExplicitOffset( Offset = 35 )]
		public sbyte[1] reserved_char;
		[ExplicitOffset( Offset = 36 )]
		public int hub6;
		[ExplicitOffset( Offset = 40 )]
		public ushort closing_wait;
		[ExplicitOffset( Offset = 42 )]
		public ushort closing_wait2;
		[ExplicitOffset( Offset = 44 )]
		public byte* iomem_base;
		[ExplicitOffset( Offset = 48 )]
		public ushort iomem_reg_shift;
		[ExplicitOffset( Offset = 52 )]
		public uint port_high;
		[ExplicitOffset( Offset = 56 )]
		public int[1] reserved;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct serial_uart_config {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 4 )]
		public int dfl_xmit_fifo_size;
		[ExplicitOffset( Offset = 8 )]
		public int flags;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigcontext {
		[ExplicitOffset( Offset = 0 )]
		public ushort gs;
		[ExplicitOffset( Offset = 2 )]
		public ushort __gsh;
		[ExplicitOffset( Offset = 4 )]
		public ushort fs;
		[ExplicitOffset( Offset = 6 )]
		public ushort __fsh;
		[ExplicitOffset( Offset = 8 )]
		public ushort es;
		[ExplicitOffset( Offset = 10 )]
		public ushort __esh;
		[ExplicitOffset( Offset = 12 )]
		public ushort ds;
		[ExplicitOffset( Offset = 14 )]
		public ushort __dsh;
		[ExplicitOffset( Offset = 16 )]
		public uintptr edi;
		[ExplicitOffset( Offset = 20 )]
		public uintptr esi;
		[ExplicitOffset( Offset = 24 )]
		public uintptr ebp;
		[ExplicitOffset( Offset = 28 )]
		public uintptr esp;
		[ExplicitOffset( Offset = 32 )]
		public uintptr ebx;
		[ExplicitOffset( Offset = 36 )]
		public uintptr edx;
		[ExplicitOffset( Offset = 40 )]
		public uintptr ecx;
		[ExplicitOffset( Offset = 44 )]
		public uintptr eax;
		[ExplicitOffset( Offset = 48 )]
		public uintptr trapno;
		[ExplicitOffset( Offset = 52 )]
		public uintptr err;
		[ExplicitOffset( Offset = 56 )]
		public uintptr eip;
		[ExplicitOffset( Offset = 60 )]
		public ushort cs;
		[ExplicitOffset( Offset = 62 )]
		public ushort __csh;
		[ExplicitOffset( Offset = 64 )]
		public uintptr eflags;
		[ExplicitOffset( Offset = 68 )]
		public uintptr esp_at_signal;
		[ExplicitOffset( Offset = 72 )]
		public ushort ss;
		[ExplicitOffset( Offset = 74 )]
		public ushort __ssh;
		[ExplicitOffset( Offset = 76 )]
		public _fpstate* fpstate;
		[ExplicitOffset( Offset = 80 )]
		public uintptr oldmask;
		[ExplicitOffset( Offset = 84 )]
		public uintptr cr2;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 2 )]
	public partial struct sockaddr_at {
		[ExplicitOffset( Offset = 0 )]
		public ushort sat_family;
		[ExplicitOffset( Offset = 2 )]
		public byte sat_port;
		[ExplicitOffset( Offset = 4 )]
		public at_addr sat_addr;
		[ExplicitOffset( Offset = 8 )]
		public sbyte[8] sat_zero;
	}
}