//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Notification functionality
//

using System;
using System.Collections;
using System.Diagnostics;

using Platform;
using Platform.IO;
using Platform.Kernel;
using Platform.Libc;
using Platform.Threading;

namespace System.IO {
	public partial struct Fiber {
		internal partial struct FiberInfo {
			private IOHandle _waitHandle;
			private PollEvents _waitEvents;
			private int _alarmID;

			internal partial class Manager {
				private System.Threading.Mutex _readyListAsyncLock = new System.Threading.Mutex();
				private List<FiberInfo*> _readyListAsync = new List<FiberInfo*>();

				private bool _isFiberReadyAsync = false;

				public EventLoop CurrentEventLoop;

				private void OnBeforeDispatch() { }
				private void OnAfterDispatch() { }

				public void OnEvent( FiberInfo* fiber, pollfd& currentEvent ) {
					TraceIONotify( fiber, currentEvent );

					fiber->_waitEvents = currentEvent.RaisedEvents;
					Ready( fiber );
				}

				private int BeginAlarm( TimeSpan interval, Functors.Action<void*> action, void* data, bool oneShot = false ) {
					return CurrentEventLoop.BeginAlarm( interval, action, data, oneShot );
				}

				private void RemoveAlarm( int alarmId ) {
					CurrentEventLoop.RemoveAlarm( alarmId );
				}

				private void ReadyIO( FiberInfo* fiber ) {
					if( fiber->_isReady | !fiber->_isAlive ) return;

					TraceReady( fiber );

					_readyList.Add( fiber );
					fiber->_isReady = true;
				}

				// MT-unsafe
				public void Ready( FiberInfo* fiber ) {
					if( fiber->_isReady | !fiber->_isAlive ) return;

					TraceReady( fiber );

					_fiberReadyEventSink.Notify();

					_readyList.Add( fiber );
					fiber->_isReady = true;
				}

				// MT-safe
				public void ReadyAsync( FiberInfo* fiber ) {
					atomic( _isFiberReadyAsync = true, Release );

					TraceReadyAsync( fiber );
					using( _readyListAsyncLock.LockRegion() ) {
						_readyListAsync.Add( fiber );
					}

					_fiberReadyEventSink.Notify();
				}

				private SystemError Wait( TimeSpan timeout, IOHandle handle, PollEvents events ) {
					var pollId = _fiberIOEventSink.RegisterHandle( CurrentFiber, handle, events );

					BeginTimeout( timeout );

					Suspend();

					if( EndTimeout( timeout ) ) {
						CurrentEventLoop.UnregisterHandle( pollId );
						return SystemError.ETIMEDOUT;
					}

					if( CurrentFiber->IsCancelled ) return SystemError.EINTR;
					return SystemError.None;
				}

				public SystemError WaitForConnect( TimeSpan timeout, SocketHandle handle ) {
					TraceWait( CurrentFiber, thismethod, timeout );

					var result = Wait( timeout, handle, PollEvents.POLLIN | PollEvents.POLLOUT );

					if( result != SystemError.None ) return result;
					if( ( CurrentFiber->_waitEvents & ~( PollEvents.POLLIN | PollEvents.POLLOUT ) ) != 0 ) return handle.LastError;
					return SystemError.None;
				}

				public SystemError WaitForConnectWithData( TimeSpan timeout, SocketHandle handle ) {
					TraceWait( CurrentFiber, thismethod, timeout );

					var result = Wait( timeout, handle, PollEvents.POLLIN );

					if( result != SystemError.None ) return result;
					if( ( CurrentFiber->_waitEvents & ~( PollEvents.POLLIN | PollEvents.POLLOUT ) ) != 0 ) return handle.LastError;
					return SystemError.None;
				}

				// \return
				//  'SystemError.None' if IO-event successfully arrived
				//  'SystemError.ETIMEDOUT' if wait timed out
				//  'SystemError.ECONNRESET' on bad epoll notification
				public SystemError WaitForRead( TimeSpan timeout, IOHandle handle ) {
					TraceWait( CurrentFiber, thismethod, timeout );

					var result = Wait( timeout, handle, PollEvents.POLLIN );

					if( result != SystemError.None ) return result;
					if( ( CurrentFiber->_waitEvents & ~( PollEvents.POLLIN | PollEvents.POLLOUT ) ) != 0 ) return SystemError.ECONNRESET;
					return SystemError.None;
				}

				public SystemError WaitForWrite( TimeSpan timeout, IOHandle handle ) {
					TraceWait( CurrentFiber, thismethod, timeout );

					var result = Wait( timeout, handle, PollEvents.POLLOUT );

					if( result != SystemError.None ) return result;
					if( ( CurrentFiber->_waitEvents & ~( PollEvents.POLLIN | PollEvents.POLLOUT ) ) != 0 ) return SystemError.ECONNRESET;
					return SystemError.None;
				}

				/// @{ IO completion. Designed to work with non-blocking handles. Blocks fiber until completion or timeout

				public SystemError ConnectNonBlocking( TimeSpan timeout, SocketHandle socket, sockaddr* address, int addressLength ) {
					socket.EnsureNonBlocking();

				restart:
					var result = LibcApi.connect( socket, address, addressLength );
					if( result == 0 ) return SystemError.None;

					var errno = LibcApi.LastError;
					TraceSocketConnect( socket, errno );

					switch( errno ) {
						case SystemError.EAGAIN:
						case SystemError.EINPROGRESS:
							return WaitForConnect( timeout, socket );
					}

					return errno;
				}

				public SystemError WriteNonBlocking( TimeSpan timeout, IOHandle socket, void* buffer, int count ) {
					socket.EnsureNonBlocking();

					var totalWritten = 0;

				restart:
					var written = LibcApi.write( socket, buffer, count );

					if( written < 0 ) {
						var errno = LibcApi.LastError;
						TraceNonBlockingWrite( socket, errno, written, count, totalWritten );

						switch( errno ) {
							case SystemError.EINTR: goto restart;

							case SystemError.EAGAIN:
							case SystemError.EINPROGRESS:
								var waitResult = WaitForWrite( timeout, socket );
								if( waitResult != SystemError.None ) return waitResult;

								goto restart;

							default:
								return errno;
						}
					}
					else {
						TraceNonBlockingWrite( socket, SystemError.None, written, count, totalWritten );

						totalWritten += written;
						count -= written;
						if( count > 0 && written > 0 ) goto restart; // ensure all bytes are send

						return SystemError.None;
					}
				}

				public SystemError WriteNonBlocking( TimeSpan timeout, IOHandle socket, iovec* segments, int segmentsCount ) {
					socket.EnsureNonBlocking();

					var totalWritten = 0;

				restart:
					var written = LibcApi.writev( socket, segments, segmentsCount );
					if( written < 0 ) {
						var errno = LibcApi.LastError;

						switch( errno ) {
							case SystemError.EINTR: goto restart;

							case SystemError.EAGAIN:
							case SystemError.EINPROGRESS:
								var waitResult = WaitForWrite( timeout, socket );
								if( waitResult != SystemError.None ) return waitResult;

								goto restart;

							default:
								return errno;
						}
					}
					else {
						totalWritten += written;
						if( written > 0 ) {
							while( segmentsCount > 0 ) {
								if( segments[0].iov_len > ( uint ) written ) {
									segments[0].iov_len -= written;
									break;
								}

								written -= ( int ) segments[0].iov_len;
								++segments;
								--segmentsCount;
							}

							if( segmentsCount > 0 ) goto restart; // ensure all bytes are send
						}

						return SystemError.None;
					}
				}

				public SystemError ReadNonBlocking( TimeSpan timeout, IOHandle socket, void* buffer, int count, int& totalReceived ) {
					socket.EnsureNonBlocking();

				restart:
					var readen = LibcApi.read( socket, buffer, count );

					if( readen < 0 ) {
						var errno = LibcApi.LastError;
						TraceNonBlockingRead( socket, errno, readen, count, totalReceived );

						switch( errno ) {
							case SystemError.EINTR:
								goto restart;

							case SystemError.EAGAIN:
							case SystemError.EINPROGRESS: {
									if( readen == -1 ) {
										var waitResult = WaitForRead( timeout, socket );
										if( waitResult != SystemError.None ) return waitResult;

										goto restart;
									}

									totalReceived += readen;
									return SystemError.None;
								}

							default:
								return errno;
						}
					}
					else {
						TraceNonBlockingRead( socket, SystemError.None, readen, count, totalReceived );

						totalReceived += readen;
						return SystemError.None;
					}
				}

				/// @}

				/// @{ EventLoop support

				private FiberReadyEventSink _fiberReadyEventSink;
				private FiberIOEventSink _fiberIOEventSink;

				public void Attach( EventLoop eventLoop ) {
					if( !Assert.IsTrue( _fiberReadyEventSink == null ) ) return;
					CurrentEventLoop = eventLoop;

					_fiberReadyEventSink = new FiberReadyEventSink( this );
					_fiberReadyEventSink.Register();

					_fiberIOEventSink = new FiberIOEventSink( this );
				}

				public void Detach( EventLoop eventLoop ) {
					if( !Assert.IsTrue( _fiberReadyEventSink != null ) ) return;

					_fiberReadyEventSink.Unregister();
					_fiberReadyEventSink.Dispose();

					_fiberIOEventSink.Dispose();
				}

				private sealed class FiberIOEventSink : EventLoop.EventSink {
					private Manager _manager;
					private List<FiberInfo*> _subscribedFibers = new List<FiberInfo*>( 16 );

					public override void OnEvent( pollfd& @event ) {
						var poolID = _manager.CurrentEventLoop._dispatchingIndex;
						var fiber = _subscribedFibers[poolID];
						Parent.UnregisterHandle( poolID );
						_manager.OnEvent( fiber, @event );
					}

					public FiberIOEventSink( Manager manager )
						: base( manager.CurrentEventLoop ) {
						_manager = manager;
					}

					public override void Dispose() {
						_manager = null;

						base.Dispose();
					}

					public int RegisterHandle( FiberInfo* fiber, IOHandle handle, PollEvents events ) {
						fiber->_waitHandle = handle;

						var poolId = RegisterHandle( handle, events );
						_subscribedFibers.Reserve( poolId + 1 );

						if( _subscribedFibers.Count > poolId ) {
							_subscribedFibers[poolId] = fiber;
						}

						return poolId;
					}
				}

				private sealed class FiberReadyEventSink : EventLoop.NotificationEventSink {
					private Manager _manager;

					public FiberReadyEventSink( Manager manager )
						: base( manager.CurrentEventLoop ) {
						_manager = manager;
					}

					public override void OnNotified() {
						_manager.Dispatch();
					}

					public override void Dispose() {
						_manager = null;

						base.Dispose();
					}
				}

				/// @}

				/// @{ Tracing

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceIONotify( FiberInfo* fiber, pollfd& @event ) {
					Trace.Write( "Fiber: Event for fiber [{0}]: {1}", *fiber, @event );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private void TraceSocketConnect( SocketHandle socket, SystemError errno ) {
					Trace.Write( "Fiber: [{0:D2}] Socket {1} connect: errno={2}", *CurrentFiber, socket.ID, errno );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private void TraceNonBlockingWrite( IOHandle socket, SystemError errno, int written, int count, int bytesSended ) {
					Trace.Write( "Fiber: [{0:D2}] Handle {1} write: errno={2} written={3} count={4} total={5}", *CurrentFiber, socket.ID, errno, written, count, bytesSended );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private void TraceNonBlockingRead( IOHandle socket, SystemError errno, int readen, int count, int bytesReceived ) {
					Trace.Write( "Fiber: [{0:D2}] Handle {1} read: errno={2} readen={3} count={4} avail={5} total={6}", *CurrentFiber, socket.ID, errno, readen, count, socket.AvailableBytes, bytesReceived );
				}

				/// @}
			}
		}
	}
}