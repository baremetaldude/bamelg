//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform.Kernel;
using Platform.Libc;

namespace System {
	public partial struct DateTime {
		public static DateTime Now { get { return new DateTime( timespec.Now.DateTimeTicks, DateTimeKind.Local ); } }
		public static DateTime UtcNow { get { return new DateTime( timespec.UtcNow.DateTimeTicks, DateTimeKind.Utc ); } }

		public static DateTime UnbiasedNow {
			get {
				DateTime result;

				switch( _monotonicSource ) {
					case MonotonicSource.ProcUptime: if( GetProcUptime( result ) ) break; goto case MonotonicSource.None;
					case MonotonicSource.Syscall: result = new DateTime( timespec.MonotonicTime.TimeSpanTicks, DateTimeKind.Unbiased ); break;
					case MonotonicSource.None: result = UtcNow; break;
				}

				return result;
			}
		}

		// Old linuxes were designed without proper user-space timekeeping in mind
		private enum MonotonicSource {
			None,       // UTC
			ProcUptime, // /proc/uptime
			Syscall,    // clock_gettime(CLOCK_MONOTONIC)
		}

		private static MonotonicSource _monotonicSource = MonotonicSource.None;

		private static bool GetProcUptime( DateTime& result ) {
			byte[50] buffer;

			IOHandle uptimeHandle;
			var error = IOHandle.RawOpen( uptimeHandle, "/proc/uptime", FctlValue.O_RDONLY, 0 );
			if( error != SystemError.None ) return false;

			using( uptimeHandle ) {
				int readen;
				error = uptimeHandle.RawRead( buffer, buffer.Length, readen );
				if( error != SystemError.None ) return false;

				byte* parsePosition = &buffer[0];
				uint remaining = ( uint ) readen;

				ulong seconds;
				uint milliseconds;

				if( !ulong.TryFetch( parsePosition, remaining, seconds ) || remaining == 0 ) return false;
				if( *parsePosition++ != '.' || --remaining == 0 ) return false;

				if( !uint.TryFetch( parsePosition, remaining, milliseconds ) ) return false;

				result = new DateTime( TimeSpan.FromMilliseconds( seconds * 1000 + milliseconds * 10 ).Ticks, DateTimeKind.Unbiased );

				return true;
			}
		}

		static DateTime() {
			{
				timespec result;
				if( RealTimeApi.clock_gettime( ClockType.CLOCK_MONOTONIC, result ) == 0 ) {
					_monotonicSource = MonotonicSource.Syscall;
					return;
				}
			}

			{
				DateTime result2;
				if( GetProcUptime( result2 ) )
					_monotonicSource = MonotonicSource.ProcUptime;
			}
		}

		public static TimeSpan UtcUnbiasedOffset {
			get {
				var span1 = DateTime.UtcNow.Ticks - DateTime.UnbiasedNow.Ticks; // HACK: there is no way to get both timers atomically ( writing a new kernel syscall is not an option :) )
				var span2 = DateTime.UtcNow.Ticks - DateTime.UnbiasedNow.Ticks;

				// if context switch occured between 'DateTime.UtcNow' and 'DateTime.Unbiased'
				// then 'DateTime.Unbiased' will be greater than it can be,
				// so 'DateTime.UtcNow - DateTime.Unbiased' will be less than it can be
				return new TimeSpan( span1 > span2 ? span1 : span2 );
			}
		}

		public DateTime ToLocalTime() {
			[CheckAllEnumValues]
			switch( Kind ) {
				case DateTimeKind.Unspecified: {
						var result = this;
						result.Kind = DateTimeKind.Local;
						return result;
					}

				case DateTimeKind.Local:
					return this;

				case DateTimeKind.Utc: {
						var result = this + GetLocalFromUtcOffset( this );
						result.Kind = DateTimeKind.Local;
						return result;
					}

				case DateTimeKind.Unbiased: {
						var result = this + UtcUnbiasedOffset;
						result += GetLocalFromUtcOffset( result );
						result.Kind = DateTimeKind.Local;

						return result;
					}
			}

			return this;
		}

		public DateTime ToUniversalTime() {
			[CheckAllEnumValues]
			switch( Kind ) {
				case DateTimeKind.Unspecified: {
						var result = this;
						result.Kind = DateTimeKind.Utc;
						return result;
					}

				case DateTimeKind.Utc:
					return this;

				case DateTimeKind.Local: {
						var result = this - GetLocalFromUtcOffset( this );
						result.Kind = DateTimeKind.Utc;
						return result;
					}

				case DateTimeKind.Unbiased: {
						var result = this + UtcUnbiasedOffset;
						result.Kind = DateTimeKind.Utc;

						return result;
					}
			}

			return this;
		}

		public static TimeSpan GetLocalFromUtcOffset( DateTime time ) { return TimeSpan.FromSeconds( timeval.GetCurrentTimezoneSecondsOffset( ( int ) time.ToUnixSeconds() ) ); }

		public static explicit operator DateTime( timeval& value ) { return new DateTime( value.DateTimeTicks, DateTimeKind.Utc ); }
		public static explicit operator DateTime( timespec& value ) { return new DateTime( value.DateTimeTicks, DateTimeKind.Utc ); }
	}
}