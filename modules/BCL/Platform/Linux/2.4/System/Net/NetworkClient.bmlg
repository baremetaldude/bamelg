//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

using Platform;
using Platform.Kernel;
using Platform.Libc;
using Platform.IO;

namespace System.Net {
	public partial class NetworkClient {
		private bool _implConnect( IPv4Endpoint endpoint, IPv4Address @interface ) {
			var stream = new NetworkStream() { ErrorHandler = ErrorHandler };

			if( @interface != IPv4Address.AllInterfaces ) {
				if( !stream.Bind( new IPv4Endpoint( @interface, 0 ) ) ) return false;
			}

			if( stream.Connect( endpoint ) ) {
				_stream = stream;
			return OnConnected();
		}

			return false;
		}

		private bool _implConnect( IPv6Endpoint endpoint, IPv6Address @interface ) {
			var stream = new NetworkStream() { ErrorHandler = ErrorHandler };

			if( @interface != IPv6Address.AllInterfaces ) {
				if( !stream.Bind( new IPv6Endpoint( @interface, 0 ) ) ) return false;
			}

			if( stream.Connect( endpoint ) ) {
				_stream = stream;
			return OnConnected();
		}

			return false;
		}

		private bool _implConnectLocal( string endpoint ) { return _implConnectLocal( ( Utf8String ) endpoint ); }

		private bool _implConnectLocal( Utf8String endpoint ) {
			using( var socket = new SocketHandleLocal( __socket_type.SOCK_STREAM ) ) {
				if( socket.Connect( endpoint ) != SystemError.None ) return false;

				_stream = new Platform.IO.NetworkStream( socket );
				socket = SocketHandleLocal.Invalid;
			}

			return OnConnected();
		}

		private bool _implAccept( IPv4Endpoint endpoint ) { return false; }
		private bool _implAccept( IPv6Endpoint endpoint ) { return false; }

		private bool _implAcceptLocal( string endpoint ) { return false; }
		private bool _implAcceptLocal( Utf8String endpoint ) { return false; }

		protected virtual IPlatformErrorHandler ErrorHandler { get { return PlatformErrorHandlerNull.Instance; } }
	}
}