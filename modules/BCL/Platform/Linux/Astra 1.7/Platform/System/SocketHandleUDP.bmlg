//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;
using System.Net;

using Platform.Libc;

namespace Platform.Kernel {
	// http://www.kernel.org/doc/man-pages/online/pages/man7/udp.7.html
	public struct SocketHandleUDP : SocketHandle, IFormattable {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		// nonblocking for fibers
		public SocketHandleUDP( ProtocolFamily protocolFamily = ProtocolFamily.PF_INET )
			: this( protocolFamily, Fiber.IsFiberExecuting ) {
		}

		public SocketHandleUDP( ProtocolFamily protocolFamily, bool nonBlocking ) {
			LibcApi.Assert( this = bitcast<SocketHandleUDP>( LibcApi.socket( protocolFamily, __socket_type.SOCK_DGRAM | ( nonBlocking ? __socket_type.SOCK_NONBLOCK : ( __socket_type ) 0 ) | __socket_type.SOCK_CLOEXEC, IPProtocol.IPPROTO_UDP ) ) );
		}

		public bool BindIPv4( ushort port ) { return Bind( new IPv4Endpoint( IPv4Address.AllInterfaces, port ) ); }
		public bool Bind( IPv4Endpoint& endpoint ) {
			var nativeEndpoint = ( sockaddr_in ) endpoint;
			return LibcApi.bind( this, ( sockaddr* ) &nativeEndpoint, sizeof( nativeEndpoint ) ) == 0;
		}

		public bool BindIPv6( ushort port ) { return Bind( new IPv6Endpoint( IPv6Address.AllInterfaces, port ) ); }
		public bool Bind( IPv6Endpoint& endpoint ) {
			var nativeEndpoint = ( sockaddr_in6 ) endpoint;
			return LibcApi.bind( this, ( sockaddr* ) &nativeEndpoint, sizeof( nativeEndpoint ) ) == 0;
		}

		public static bool IsIPv4PortFree( ushort port ) { return IsIPv4PortFree( new IPv4Endpoint( IPv4Address.AllInterfaces, port ) ); }
		public static bool IsIPv4PortFree( IPv4Endpoint& endpoint ) {
			using( var handle = new SocketHandleUDP( ProtocolFamily.PF_INET ) ) {
				handle.ReuseAddress = true;

				return handle.Bind( endpoint );
			}
		}

		public static bool IsIPv6PortFree( ushort port ) { return IsIPv6PortFree( new IPv6Endpoint( IPv6Address.AllInterfaces, port ) ); }
		public static bool IsIPv6PortFree( IPv6Endpoint& endpoint ) {
			using( var handle = new SocketHandleUDP( ProtocolFamily.PF_INET6 ) ) {
				handle.ReuseAddress = true;

				return handle.Bind( endpoint );
			}
		}

		public SystemError Send( sockaddr_in& address, void* buffer, uint count, uint& written ) {
			var writeResult = LibcApi.sendto( this, buffer, count, MessageFlags.None, ( sockaddr* ) &address, sizeof( address ) );
			if( writeResult < 0 ) {
				var lastError = LibcApi.LastError;
				if( lastError == SystemError.EINTR ) lastError = SystemError.ETIMEDOUT;
				written = 0;
				return lastError;
			}

			written = ( uint ) writeResult;
			return SystemError.None;
		}

		public SystemError Receive( sockaddr_in& address, void* buffer, uint count, uint& readen ) {
			var readResult = LibcApi.recvfrom( this, buffer, count, MessageFlags.None, ( sockaddr* ) &address, sizeof( address ) );
			if( readResult < 0 ) {
				var lastError = LibcApi.LastError;
				if( lastError == SystemError.EINTR ) lastError = SystemError.ETIMEDOUT;
				readen = 0;
				return lastError;
			}

			readen = ( uint ) readResult;
			return SystemError.None;
		}

		protected new void DumpRelevantData( StringBuilder builder ) {
			base.DumpRelevantData( builder );
		}

		public new void ToString( StringBuilder builder, string format ) {
			builder.Append( "{" );
			DumpRelevantData( builder );
			builder.Append( " }" );
		}
	}
}