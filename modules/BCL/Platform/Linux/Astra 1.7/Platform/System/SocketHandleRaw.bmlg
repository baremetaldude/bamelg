//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;

using Platform.Libc;

namespace Platform.Kernel {
	public struct SocketHandleRaw : SocketHandle, IFormattable {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public SocketHandleRaw() {
			LibcApi.Assert( this = bitcast<SocketHandleRaw>( LibcApi.socket( ProtocolFamily.PF_INET, __socket_type.SOCK_RAW, IPProtocol.IPPROTO_ICMP ) ) );
		}

		public SystemError Send( sockaddr_in& address, void* buffer, uint count, uint& written ) {
			var writeResult = LibcApi.sendto( this, buffer, count, MessageFlags.None, ( sockaddr* ) &address, sizeof( address ) );
			if( writeResult < 0 ) {
				var lastError = LibcApi.LastError;
				if( lastError == SystemError.EINTR ) lastError = SystemError.ETIMEDOUT;
				written = 0;
				return lastError;
			}

			written = ( uint ) writeResult;
			return SystemError.None;
		}

		public SystemError Receive( sockaddr_in& address, void* buffer, uint count, uint& readen ) {
			var readResult = LibcApi.recvfrom( this, buffer, count, MessageFlags.None, ( sockaddr* ) &address, sizeof( address ) );
			if( readResult < 0 ) {
				var lastError = LibcApi.LastError;
				if( lastError == SystemError.EINTR ) lastError = SystemError.ETIMEDOUT;
				readen = 0;
				return lastError;
			}

			readen = ( uint ) readResult;
			return SystemError.None;
		}

		protected new void DumpRelevantData( StringBuilder builder ) {
			base.DumpRelevantData( builder );
		}

		public new void ToString( StringBuilder builder, string format ) {
			builder.Append( "{" );
			DumpRelevantData( builder );
			builder.Append( " }" );
		}
	}
}