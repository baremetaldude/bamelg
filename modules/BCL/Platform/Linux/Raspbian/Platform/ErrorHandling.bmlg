//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;

using Platform.Kernel;
using Platform.Libc;

namespace Platform {
	public enum PlatformErrorAction {
		Default,
		Restart,
	}

	public interface IPlatformErrorHandler {
		PlatformErrorAction OnError( string operation, IFormattable context, SystemError errorCode );
	}

	public struct PlatformErrorHandlerNull : IPlatformErrorHandler {
		public static readonly PlatformErrorHandlerNull Instance;

		#region IPlatformErrorHandler Members

		public PlatformErrorAction OnError( string operation, IFormattable context, SystemError errorCode ) {
			return PlatformErrorAction.Default;
		}

		#endregion
	}

	public struct PlatformErrorHandlerConsole : IPlatformErrorHandler {
		public static readonly PlatformErrorHandlerConsole Instance;

		#region IPlatformErrorHandler Members

		public PlatformErrorAction OnError( string operation, IFormattable context, SystemError errorCode ) {
			var message = LibcApi.GetErrorDescription( errorCode );

			Console.WriteLine( "'{0}': {1} {2}( {3} )", context, operation, errorCode, message );

			return PlatformErrorAction.Default;
		}

		#endregion
	}

	public struct PlatformErrorHandlerAbort : IPlatformErrorHandler {
		public static readonly PlatformErrorHandlerAbort Instance;

		#region IPlatformErrorHandler Members

		public PlatformErrorAction OnError( string operation, IFormattable context, SystemError errorCode ) {
			PlatformErrorHandlerConsole.Instance.OnError( operation, context, errorCode );
			Environment.Abort( ( int ) errorCode );

			return PlatformErrorAction.Default;
		}

		#endregion
	}

	public struct PlatformErrorHandlerStatus : IPlatformErrorHandler {
		public bool ErrorOccured = false;

		public PlatformErrorHandlerStatus() {
		}

		#region IPlatformErrorHandler Members

		public PlatformErrorAction OnError( string operation, IFormattable context, SystemError errorCode ) {
			ErrorOccured = true;
			return PlatformErrorAction.Default;
		}

		#endregion
	}

}