//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime;
using System.Runtime.InteropServices;

using Platform.Kernel;

namespace Platform.Libc {
	public static partial struct PthreadsApi {
		private static Functors.Func<pthread_t*, pthread_attr_t*, System.Functors.Func<void*, void*>, void*, SystemError> __pthread_create = bitcast<Functors.Func<pthread_t*, pthread_attr_t*, System.Functors.Func<void*, void*>, void*, SystemError>>( LoaderApi.dlsym( DynamicLibraryHandle.RTLD_NEXT, "pthread_create" ) );

		/// http://www.kernel.org/doc/man-pages/online/pages/man3/pthread_create.3.html
		[NoInline]
		[BackendSymbol( Name = "pthread_create" )]
		public static SystemError pthread_create( pthread_t* handle, pthread_attr_t* attr, System.Functors.Func<void*, void*> start, void* parameter ) {
			var payload = heapalloc Tuple<System.Functors.Func<void*, void*>, void*> {
				Item1 = start,
				Item2 = parameter
			};

			return __pthread_create( handle, attr, data => {
				var p = ( Tuple<System.Functors.Func<void*, void*>, void*>* ) data;
				var payloadCopy = *p;
				heapfree p;

				var tlsSegment = Memory.AlignPointer( stackalloc byte[Loader._tlsSnapshotSize + Loader._tlsSnapshotAlignment], Loader._tlsSnapshotAlignment );
				Memory.Copy( tlsSegment, Loader._tlsSnapshotStart, Loader._tlsSnapshotSize );
				Loader.TlsSegment = tlsSegment;
				Loader.InitializeTls();

				_pthread_cleanup_buffer cleanupBuffer;
				_pthread_cleanup_push( &cleanupBuffer, unused => Loader.FinalizeTls(), null );

				var result = payloadCopy.Item1( payloadCopy.Item2 );
				_pthread_cleanup_pop( &cleanupBuffer, true );

				return result;
			}, payload );
		}
	}
}