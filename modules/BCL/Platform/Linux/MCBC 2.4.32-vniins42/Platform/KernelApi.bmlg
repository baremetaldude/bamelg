//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform.Libc;

namespace Platform.Kernel {
	public partial struct cap_user_header_t {
		public cap_user_header_t() {
			version = KernelApi._LINUX_CAPABILITY_VERSION;
			pid = LibcApi.getpid();
		}
	}

	public partial struct KernelApi {
		internal const uint RawErrorsMax = 125;

		public static SystemError ReturnCodeToError( int returnCode ) {
			return bitcast<uint>( returnCode ) > uint.MaxValue - RawErrorsMax ? ( SystemError ) - returnCode : SystemError.None;
		}

		// dont update 'errno'
		internal static intptr raw_syscall( SystemCall code ) asm {
			X86_32 {
				mov eax, [esp + 4] // code
				int 0x80
				ret
			}
		}

		// dont update 'errno'
		internal static intptr raw_syscall( SystemCall code, intptr p1 ) asm {
			X86_32 {
				push ebx

				mov eax, [esp + 8]  // code
				mov ebx, [esp + 12] // p1

				int 0x80

				pop ebx
				ret
			}
		}

		// dont update 'errno'
		internal static intptr raw_syscall( SystemCall code, intptr p1, intptr p2 ) asm {
			X86_32 {
				push ebx

				mov eax, [esp + 8]  // code
				mov ebx, [esp + 12] // p1
				mov ecx, [esp + 16] // p2

				int 0x80

				pop ebx
				ret
			}
		}

		// dont update 'errno'
		internal static intptr raw_syscall( SystemCall code, intptr p1, intptr p2, intptr p3 ) asm {
			X86_32 {
				push ebx

				mov eax, [esp + 8]  // code
				mov ebx, [esp + 12] // p1
				mov ecx, [esp + 16] // p2
				mov edx, [esp + 20] // p3

				int 0x80

				pop ebx
				ret
			}
		}

		// dont update 'errno'
		internal static intptr raw_syscall( SystemCall code, intptr p1, intptr p2, intptr p3, intptr p4 ) asm {
			X86_32 {
				push ebx
				push esi

				mov eax, [esp + 8]  // code
				mov ebx, [esp + 12] // p1
				mov ecx, [esp + 16] // p2
				mov edx, [esp + 20] // p3
				mov esi, [esp + 24] // p4

				int 0x80

				pop esi
				pop ebx
				ret
			}
		}

		// dont update 'errno'
		internal static intptr raw_syscall( SystemCall code, intptr p1, intptr p2, intptr p3, intptr p4, intptr p5 ) asm {
			X86_32 {
				push ebx
				push esi
				push edi

				mov eax, [esp + 8]  // code
				mov ebx, [esp + 12] // p1
				mov ecx, [esp + 16] // p2
				mov edx, [esp + 20] // p3
				mov esi, [esp + 24] // p4
				mov edi, [esp + 24] // p5

				int 0x80

				pop edi
				pop esi
				pop ebx
				ret
			}
		}

		// dont update 'errno'
		internal static intptr raw_syscall( SystemCall code, intptr p1, intptr p2, intptr p3, intptr p4, intptr p5, intptr p6 ) asm {
			X86_32 {
				push ebx
				push esi
				push edi
				push ebp

				mov eax, [esp + 8]  // code
				mov ebx, [esp + 12] // p1
				mov ecx, [esp + 16] // p2
				mov edx, [esp + 20] // p3
				mov esi, [esp + 24] // p4
				mov edi, [esp + 28] // p5
				mov ebp, [esp + 32] // p6

				int 0x80

				pop ebp
				pop edi
				pop esi
				pop ebx
				ret
			}
		}

		public static uint CapsCombine( vararg ThreadCapabilities caps ) {
			var result = 0U;

			foreach( var cap in caps )
				result |= 1U << cap;

			return result;
		}

		public static string CapsParse( uint caps ) {
			using( var result = System.StringBuilder.CachedBuilders.PopScoped() ) {
				for( var i = 0; i < typeof( ThreadCapabilities ).ElementCount; ++i ) {
					var element = enumvalue<ThreadCapabilities>( i );

					if( ( caps & ( 1U << element ) ) != 0 ) {
						if( result.Value.Length > 0 ) result.Value.Append( " | " );
						result.Value.Append( element );
					}
				}

				return result.Value.ToString();
			}
		}

		public static SystemError setresuid( uintptr e, uintptr r, uintptr s ) {
			var code = raw_syscall( SystemCall.setresuid, cast<intptr>( e ), cast<intptr>( r ), cast<intptr>( s ) );
			if( bitcast<uint>( code ) > uint.MaxValue - RawErrorsMax ) {
				return ( SystemError ) - code;
			}

			return SystemError.None;
		}

		public static SystemError setresgid( uintptr e, uintptr r, uintptr s ) {
			var code = raw_syscall( SystemCall.setresgid, cast<intptr>( e ), cast<intptr>( r ), cast<intptr>( s ) );
			if( bitcast<uint>( code ) > uint.MaxValue - RawErrorsMax ) {
				return ( SystemError ) - code;
			}

			return SystemError.None;
		}

		// [Obsolete]
		// public static int getdents( IOHandle handle, dirent* buffer, intptr length ) { return ( int ) raw_syscall( SystemCall.getdents, handle.ID, cast<intptr>( buffer ), length ); }
		/// http://www.kernel.org/doc/man-pages/online/pages/man2/getdents.2.html
		public static SystemError getdents64( int& readen, IOHandle handle, dirent64* buffer, intptr length ) {
			var code = raw_syscall( SystemCall.getdents64, cast<intptr>( handle.ID ), cast<intptr>( buffer ), length );
			if( bitcast<uint>( code ) > uint.MaxValue - RawErrorsMax ) {
				readen = 0;
				return ( SystemError ) - code;
			}

			readen = code;
			return SystemError.None;
		}
	}
}