//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform.Kernel;
using Platform.Libc;

namespace System.Diagnostics {
	public struct ProcessStartInfo {
		public ProcessStartInfo() {
		}

		public ProcessStartInfo( Utf8String fileName ) {
			FileName = fileName;
		}

		public ProcessStartInfo( Utf8String fileName, vararg Utf8String parameter ) {
			FileName = fileName;

			Parameters = new[parameter.Length] Utf8String;

			for( var i = 0U; i < parameter.Length; ++i )
				Parameters[i] = parameter[i];
		}

		public bool DetachSession = true;
		public bool DetachIO = true;
		public bool WaitExit = false;
		public bool InheritHandles = false;

		public IOHandle StdIn = IOHandle.Invalid, StdOut = IOHandle.Invalid, StdErr = IOHandle.Invalid;

		public int ExitCode = -1;
		public int PID = -1;

		public Utf8String FileName;
		public Utf8String[] Parameters;
		public Utf8String WorkingDirectory;

		internal PipeHandle[2] _pipe = new PipeHandle[2] default( PipeHandle.Invalid );
	}

	public class Process {
		public static void Start( Utf8String program, vararg Utf8String parameter ) {
			Start( new ProcessStartInfo( program, vararg( parameter, parameter.Length ) ) {
				DetachIO = false
			} );
		}

		public static int StartWait( Utf8String program, vararg Utf8String parameter ) {
			var info = new ProcessStartInfo( program, vararg( parameter, parameter.Length ) ) {
				DetachSession = false,
				DetachIO = false,
				WaitExit = true
			};

			Start( info );
			return info.ExitCode;
		}

		public static void Start( ProcessStartInfo& info ) {
			int forkedPID;

			if( info.WaitExit ) {
				if( !LibcApi.AssertErrno( forkedPID = LibcApi.vfork() ) ) return;
			}
			else {
				if( !LibcApi.AssertErrno( forkedPID = LibcApi.fork() ) ) return;
			}

			if( forkedPID == 0 ) { // child process
				info._pipe[0].Close();

				if( info.DetachSession ) LibcApi.setsid();
				if( info.WorkingDirectory != null )
					LibcApi.chdir( info.WorkingDirectory );

				var parameters = stackalloc CUtf8String[info.Parameters.Length + 2];
				parameters[0] = info.FileName;

				var parameterCounter = 1;
				for( int i = 0; i < info.Parameters.Length; ++i ) {
					if( info.Parameters[i].IsNullOrEmpty ) continue;
					parameters[parameterCounter++] = info.Parameters[i];
				}
				parameters[parameterCounter] = null;

				if( info.DetachIO ) {
					LibcApi.close( LibcApi.StdIn );
					LibcApi.close( LibcApi.StdOut );
					LibcApi.close( LibcApi.StdErr );
				}

				var devNull = LibcApi.open( "/dev/null", FctlFlags.O_RDWR, 0 );

				if( info.StdIn.IsValid ) LibcApi.dup2( info.StdIn, LibcApi.StdIn );
				else if( info.DetachIO ) LibcApi.dup2( devNull, LibcApi.StdIn );

				if( info.StdOut.IsValid ) LibcApi.dup2( info.StdOut, LibcApi.StdOut );
				else if( info.DetachIO ) LibcApi.dup2( devNull, LibcApi.StdOut );

				if( info.StdErr.IsValid ) LibcApi.dup2( info.StdErr, LibcApi.StdErr );
				else if( info.DetachIO ) LibcApi.dup2( devNull, LibcApi.StdErr );

				// not same as any of StdHandles
				if( devNull.ID > 2 )
					devNull.Close();

				if( !info.InheritHandles ) {
					for( var i = LibcApi.getdtablesize() - 1; i > 2; --i ) {
						var handle = new IOHandle( i );
						if( handle != info._pipe[1] )
							LibcApi.close( handle );
					}
				}

				LibcApi.execve( info.FileName, parameters, LibcApi.environ );

				LibcApi._exit( 1 ); // if 'execve' fails, dot't call dtors/atexit
			}
			else {
				info._pipe[1].Close();
			}

			info.PID = forkedPID;

			if( info.WaitExit ) {
				var waitResult = LibcApi.waitpid( forkedPID, info.ExitCode, 0 );

				info.ExitCode = waitResult != -1 ? info.ExitCode : -1;
			}
			else
				info.ExitCode = -1;
		}
	}
}

// =========================================== IO redirection =====================================
// int[2] pipes;
// LibcApi.pipe( pipes );

// var info = new ProcessStartInfo( DefaultExecutableLocation, EditTimeCommand ) {
// 	DetachSession = false,
// 	     DetachIO = false,
// 	     WaitExit = false,
// 	    StdOut = pipes[1],
// 	    StdErr = pipes[1]
// };

// Console.WriteLine( "pipe[0]: {0}, pipe[1]: {1}", pipes[0], pipes[1] );

// {
// 	var unlock = new Linux.Gdk.GdkThreadsUnlock();
// 	Process.Start( info );

// 	var timeChanged = false;

// 	while( LibcApi.waitpid( info.PID, info.ExitCode, LibcApi.ProcessWaitOptions.WNOHANG ) == 0 ) {
// 		timeChanged |= LibcApi.get_available_bytes( pipes[0] ) > 0;
// 		LibcApi.drop_available_bytes( pipes[0] );

// 		Linux.Threading.pthread_t.Sleep( 1000 );
// 	}

// 	Console.WriteLine( timeChanged );
// }

// LibcApi.close( pipes[0] );
// LibcApi.close( pipes[1] );