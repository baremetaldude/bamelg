//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

using Platform.Kernel;

namespace Platform.Libc {
	[ExternLibrary( Image = "/usr/lib/libc.so.6" )]
	public static partial struct LibcApi {
		public const int PTHREAD_STACK_MIN = 16384;

		public extern static int __sigsetjmp( __jmp_buf_tag* env, int savemask );
		public extern static void _longjmp( __jmp_buf_tag* env, int val );
		public extern static int _setjmp( __jmp_buf_tag* env );
		public extern static void longjmp( __jmp_buf_tag* env, int val );
		public extern static int setjmp( __jmp_buf_tag* env );
		public extern static void siglongjmp( __jmp_buf_tag* env, int val );

		public extern static int backtrace( void** array, int size );
		public extern static CString* backtrace_symbols( void** array, int size );
		public extern static void backtrace_symbols_fd( void** array, int size, IOHandle fd );

		public extern static int poll( pollfd* fds, uintptr nfds, int timeout );
		public extern static int ppoll( pollfd* fds, uintptr nfds, timespec* timeout, sigset_t* ss );

		public extern static int memfd_create( CUtf8String name, uint flags );
		public extern static int mlock2( void* addr, uint length, uint flags );
		public extern static int pkey_alloc( uint flags, uint accessRights );
		public extern static int pkey_free( int key );
		public extern static int pkey_get( int key );
		public extern static int pkey_mprotect( void* addr, uint len, int prot, int pkey );
		public extern static int pkey_set( int key, uint accessRights );

		public extern static int madvise( void* addr, uint len, int advice );
		public extern static int mincore( void* start, uint len, byte* vec );
		public extern static int mlock( void* addr, uint len );
		public extern static int mlockall( int flags );
		public extern static void* mmap( void* addr, uint len, int prot, int flags, IOHandle fd, intptr offset );
		public extern static void* mmap64( void* addr, uint len, int prot, int flags, IOHandle fd, long offset );
		public extern static int mprotect( void* addr, uint len, int prot );
		public extern static int msync( void* addr, uint len, int flags );
		public extern static int munlock( void* addr, uint len );
		public extern static int munlockall();
		public extern static int munmap( void* addr, uint len );
		public extern static int posix_madvise( void* addr, uint len, int advice );
		public extern static int remap_file_pages( void* start, uint size, int prot, uint pgoff, int flags );

		public extern static int pselect( int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timespec* timeout, sigset_t* sigmask );
		public extern static int select( int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout );

		public extern static int __fxstat( int ver, int fildes, stat* statBuf );
		public extern static int __fxstat64( int ver, int fildes, stat64* statBuf );
		public extern static int __fxstatat( int ver, int fildes, CUtf8String filename, stat* statBuf, int flag );
		public extern static int __fxstatat64( int ver, int fildes, CUtf8String filename, stat64* statBuf, int flag );
		public extern static int __lxstat( int ver, CUtf8String filename, stat* statBuf );
		public extern static int __lxstat64( int ver, CUtf8String filename, stat64* statBuf );
		public extern static int __xmknod( int ver, CUtf8String path, uint mode, ulong* dev );
		public extern static int __xmknodat( int ver, int fd, sbyte* path, uint mode, ulong* dev );
		public extern static int __xstat( int ver, CUtf8String filename, stat* statBuf );
		public extern static int __xstat64( int ver, CUtf8String filename, stat64* statBuf );
		public extern static int chmod( CUtf8String file, Permission mode );
		public extern static int fchmod( IOHandle fd, Permission mode );
		public extern static int fchmodat( IOHandle fd, CUtf8String file, Permission mode, SymlinkFollowOption flag );
		public extern static int futimens( IOHandle fd, timespec* times );
		public extern static int mkdir( CUtf8String path, Permission mode );
		public extern static int mkdirat( IOHandle fd, CUtf8String path, Permission mode );
		public extern static int mkfifo( CUtf8String path, Permission mode );
		public extern static int mkfifoat( IOHandle fd, CUtf8String path, Permission mode );
		public extern static uint umask( Permission mask );
		public extern static int utimensat( IOHandle fd, CUtf8String path, timespec* times, SymlinkFollowOption flags );

		public extern static int statx( int dirfd, sbyte* path, int flags, uint mask, statx* buf );

		public extern static void closelog();
		public extern static void openlog( CUtf8String ident, int option, int facility );
		public extern static int setlogmask( int mask );
		public extern static void vsyslog( int pri, CUtf8String fmt, CUtf8String ap );


		public extern static int clock_adjtime( int clockId, timex* utx );

		public extern static sbyte* asctime( tm* tp );
		public extern static sbyte* asctime_r( tm* tp, sbyte* buf );
		public extern static intptr clock();
		public extern static sbyte* ctime( intptr* timer );
		public extern static sbyte* ctime_r( intptr* timer, sbyte* buf );
		[BackendHintReadNone]
		public extern static double difftime( intptr time1, intptr time0 );
		[BackendHintReadNone]
		public extern static int dysize( int year );
		public extern static tm* getdate( sbyte* @string );
		public extern static int getdate_r( sbyte* @string, tm* resbufp );
		public extern static tm* gmtime( intptr* timer );
		public extern static tm* gmtime_r( intptr* timer, tm* tp );
		public extern static tm* localtime( intptr* timer );
		public extern static tm* localtime_r( intptr* timer, tm* tp );
		public extern static intptr mktime( tm* tp );
		public extern static int nanosleep( timespec* requestedTime, timespec* remaining );
		public extern static int stime( intptr* when );
		public extern static uint strftime( sbyte* s, uint maxsize, sbyte* format, tm* tp );
		public extern static uint strftime_l( sbyte* s, uint maxsize, sbyte* format, tm* tp, locale_t* loc );
		public extern static sbyte* strptime( sbyte* s, sbyte* fmt, tm* tp );
		public extern static sbyte* strptime_l( sbyte* s, sbyte* fmt, tm* tp, locale_t* loc );
		public extern static intptr time( intptr* timer );
		public extern static intptr timegm( tm* tp );
		public extern static intptr timelocal( tm* tp );
		public extern static int timespec_get( timespec* ts, int @base );
		public extern static void tzset();

		public extern static TimerHandle timerfd_create( ClockType clockId, TimerHandleCreateFlag flags );
		public extern static int timerfd_gettime( TimerHandle ufd, itimerspec* otmr );
		public extern static int timerfd_settime( TimerHandle ufd, TimerHandleSetFlag flags, itimerspec* utmr, itimerspec* otmr );

		public extern static EventHandle eventfd( int count, EventHandleCreateFlag flags );
		public extern static int eventfd_read( IOHandle fd, ulong* value );
		public extern static int eventfd_write( IOHandle fd, ulong value );

		public extern static SignalHandle signalfd( IOHandle fd, sigset_t* mask, SignalHandleCreateFlag flags );

		public extern static EpollHandle epoll_create( int size );
		public extern static EpollHandle epoll_create1( EpollCreateFlags flags );
		public extern static int epoll_ctl( EpollHandle epfd, EpollControl op, IOHandle fd, epoll_event* @event );
		public extern static int epoll_pwait( EpollHandle epfd, epoll_event* events, int maxevents, int timeout, sigset_t* ss );
		public extern static int epoll_wait( EpollHandle epfd, epoll_event* events, int maxevents, int timeout );

		public extern static int adjtime( timeval* delta, timeval* olddelta );
		public extern static int futimes( int fd, timeval* tvp );
		public extern static int futimesat( int fd, CUtf8String file, timeval* tvp );
		public extern static int getitimer( int which, itimerval* value );
		public extern static int gettimeofday( timeval& tv, timezone* tz );
		public extern static int lutimes( CUtf8String file, timeval* tvp );
		public extern static int setitimer( int which, itimerval* @new, itimerval* old );
		public extern static int settimeofday( timeval& tv, timezone* tz );
		public extern static int utimes( CUtf8String file, timeval* tvp );

		public extern static int uname( utsname& name );

		public extern static SignalCode __libc_current_sigrtmax();
		public extern static SignalCode __libc_current_sigrtmin();
		public extern static Functors.Action<int> __sysv_signal( SignalCode sig, Functors.Action<int> handler );
		public extern static int gsignal( SignalCode sig );
		public extern static int kill( int pid, SignalCode sig );
		public extern static int killpg( int pgrp, SignalCode sig );
		public extern static void psiginfo( siginfo_t* pinfo, sbyte* s );
		public extern static void psignal( int sig, sbyte* s );
		public extern static int raise( int sig );
		public extern static int sigaction( SignalCode sig, sigaction* act, sigaction* oact );
		public extern static int sigaddset( sigset_t* set, SignalCode signo );
		public extern static int sigaltstack( stack_t* ss, stack_t* oss );
		public extern static int sigandset( sigset_t* set, sigset_t* left, sigset_t* right );
		public extern static int sigblock( int mask );
		public extern static int sigdelset( sigset_t* set, SignalCode signo );
		public extern static int sigemptyset( sigset_t* set );
		public extern static int sigfillset( sigset_t* set );
		public extern static int sighold( int sig );
		public extern static int sigignore( int sig );
		public extern static int siginterrupt( int sig, int interrupt );
		public extern static int sigisemptyset( sigset_t* set );
		public extern static int sigismember( sigset_t* set, SignalCode signo );
		public extern static Functors.Action<int> signal( SignalCode sig, Functors.Action<int> handler );
		public extern static int sigorset( sigset_t* set, sigset_t* left, sigset_t* right );
		public extern static int sigpause( int sig );
		public extern static int sigpending( sigset_t* set );
		public extern static int sigprocmask( ApplySignalCommand how, sigset_t* set, sigset_t* oset );
		public extern static int sigqueue( int pid, SignalCode sig, sigval val );
		public extern static int sigrelse( int sig );
		public extern static Functors.Action<int> sigset( int sig, Functors.Action<int> disp );
		public extern static int sigsetmask( int mask );
		public extern static int sigsuspend( sigset_t* set );
		public extern static int sigtimedwait( sigset_t* set, siginfo_t* info, timespec* timeout );
		// public extern static int sigvec( int sig, sigvec* vec, sigvec* ovec );
		public extern static int sigwait( sigset_t* set, int* sig );
		public extern static int sigwaitinfo( sigset_t* set, siginfo_t* info );
		public extern static Functors.Action<int> ssignal( int sig, Functors.Action<int> handler );
		public extern static Functors.Action<int> sysv_signal( int sig, Functors.Action<int> handler );

		public extern static int wait( void* statLoc );
		public extern static int wait3( void* statLoc, int options, rusage& usage );
		public extern static int wait4( int pid, void* statLoc, int options, rusage& usage );
		public extern static int waitid( idtype_t idtype, uint id, siginfo_t& infop, int options );
		public extern static int waitpid( int pid, int& statLoc, int options );

		public extern static intptr times( tms* buffer );


		public extern static int mount( CUtf8String specialFile, CUtf8String dir, CUtf8String fstype, MountFlags rwflag, void* data );
		public extern static int umount( CUtf8String specialFile );
		public extern static int umount2( CUtf8String specialFile, UnmountFlags flags );

		public extern static int fstatfs( int fildes, statfs* buf );
		public extern static int fstatfs64( int fildes, statfs64* buf );
		public extern static int statfs( CUtf8String file, statfs* buf );
		public extern static int statfs64( CUtf8String file, statfs64* buf );

		public extern static intptr sendfile( IOHandle outFd, IOHandle inFd, intptr* offset, uintptr count );
		public extern static intptr sendfile64( IOHandle outFd, IOHandle inFd, long* offset, uintptr count );

		public extern static cmsghdr* __cmsg_nxthdr( msghdr* mhdr, cmsghdr* cmsg );

		public extern static SocketHandle accept( IOHandle fd, void* addr, int& addrLen );
		public extern static SocketHandle accept4( IOHandle fd, void* addr, int& addrLen, SocketAcceptFlag flags );
		public extern static int bind( IOHandle fd, void* addr, int len );
		public extern static int connect( IOHandle fd, void* addr, int len );
		public extern static int getpeername( IOHandle fd, void* addr, int& len );
		public extern static int getsockname( IOHandle fd, void* addr, int& len );
		public extern static int getsockopt( IOHandle fd, SocketPropertyGroup level, int optname, void* optval, int& optlen );
		public extern static int isfdtype( IOHandle fd, int fdtype );
		public extern static int listen( IOHandle fd, int n );
		public extern static int recv( IOHandle fd, void* buf, int n, MessageFlags flags );
		public extern static int recvfrom( IOHandle fd, void* buf, int n, MessageFlags flags, sockaddr* addr, int& addrLen );
		public extern static int recvmmsg( IOHandle fd, mmsghdr* vmessages, uint vlen, int flags, timespec* tmo );
		public extern static int recvmsg( IOHandle fd, msghdr* message, MessageFlags flags );
		public extern static int send( IOHandle fd, void* buf, int n, MessageFlags flags );
		public extern static int sendmmsg( IOHandle fd, mmsghdr* vmessages, uint vlen, int flags );
		public extern static int sendmsg( IOHandle fd, msghdr* message, MessageFlags flags );
		public extern static int sendto( IOHandle fd, void* buf, int n, MessageFlags flags, sockaddr* addr, int addrLen );
		public extern static int setsockopt( IOHandle fd, SocketPropertyGroup level, int optname, void* optval, int optlen );
		public extern static int shutdown( IOHandle fd, SocketShutdownOptions how );
		public extern static int sockatmark( IOHandle fd );
		public extern static int socket( ProtocolFamily domain, __socket_type type, IPProtocol protocol );
		public extern static int socketpair( ProtocolFamily domain, __socket_type type, IPProtocol protocol, SocketHandle[2]& fds );

		public extern static void* __mempcpy( void* dest, void* src, uint n );
		public extern static sbyte* __stpcpy( sbyte* dest, sbyte* src );
		public extern static sbyte* __stpncpy( sbyte* dest, sbyte* src, uint n );
		public extern static sbyte* __strtok_r( sbyte* s, sbyte* delim, sbyte** savePtr );
		public extern static sbyte* basename( CUtf8String filename );
		public extern static void explicit_bzero( void* s, uint n );
		public extern static void* memccpy( void* dest, void* src, int c, uint n );
		[BackendHintReadOnly]
		public extern static void* memchr( void* s, int c, uint n );
		public extern static void* memcpy( void* dest, void* src, uint n );
		public extern static void* memfrob( void* s, uint n );
		[BackendHintReadOnly]
		public extern static void* memmem( void* haystack, uint haystacklen, void* needle, uint needlelen );
		public extern static void* memmove( void* dest, void* src, uint n );
		public extern static void* mempcpy( void* dest, void* src, uint n );
		[BackendHintReadOnly]
		public extern static void* memrchr( void* s, int c, uint n );
		public extern static void* memset( void* s, int c, uint n );
		[BackendHintReadOnly]
		public extern static void* rawmemchr( void* s, int c );
		public extern static sbyte* stpcpy( sbyte* dest, sbyte* src );
		public extern static sbyte* stpncpy( sbyte* dest, sbyte* src, uint n );
		[BackendHintReadOnly]
		public extern static sbyte* strcasestr( sbyte* haystack, sbyte* needle );
		public extern static sbyte* strcat( sbyte* dest, sbyte* src );
		[BackendHintReadOnly]
		public extern static sbyte* strchr( sbyte* s, int c );
		[BackendHintReadOnly]
		public extern static sbyte* strchrnul( sbyte* s, int c );
		[BackendHintReadOnly]
		public extern static int strcmp( sbyte* s1, sbyte* s2 );
		[BackendHintReadOnly]
		public extern static int strcoll( sbyte* s1, sbyte* s2 );
		[BackendHintReadOnly]
		public extern static int strcoll_l( sbyte* s1, sbyte* s2, locale_t* l );
		public extern static sbyte* strcpy( sbyte* dest, sbyte* src );
		[BackendHintReadOnly]
		public extern static uint strcspn( sbyte* s, sbyte* reject );
		public extern static sbyte* strdup( sbyte* s );
		public extern static CString strerror( int errnum );
		public extern static sbyte* strerror_l( int errnum, locale_t* l );
		public extern static CString strerror_r( int errnum, sbyte* buf, uint buflen );
		public extern static sbyte* strfry( sbyte* @string );
		[BackendHintReadOnly]
		public extern static uint strlen( sbyte* s );
		public extern static sbyte* strncat( sbyte* dest, sbyte* src, uint n );
		[BackendHintReadOnly]
		public extern static int strncmp( sbyte* s1, sbyte* s2, uint n );
		public extern static sbyte* strncpy( sbyte* dest, sbyte* src, uint n );
		public extern static sbyte* strndup( sbyte* @string, uint n );
		[BackendHintReadOnly]
		public extern static uint strnlen( sbyte* @string, uint maxlen );
		[BackendHintReadOnly]
		public extern static sbyte* strpbrk( sbyte* s, sbyte* accept );
		[BackendHintReadOnly]
		public extern static sbyte* strrchr( sbyte* s, int c );
		public extern static sbyte* strsep( sbyte** stringp, sbyte* delim );
		public extern static sbyte* strsignal( int sig );
		[BackendHintReadOnly]
		public extern static uint strspn( sbyte* s, sbyte* accept );
		[BackendHintReadOnly]
		public extern static sbyte* strstr( sbyte* haystack, sbyte* needle );
		public extern static sbyte* strtok( sbyte* s, sbyte* delim );
		public extern static sbyte* strtok_r( sbyte* s, sbyte* delim, sbyte** savePtr );
		[BackendHintReadOnly]
		public extern static int strverscmp( sbyte* s1, sbyte* s2 );
		public extern static uint strxfrm( sbyte* dest, sbyte* src, uint n );
		public extern static uint strxfrm_l( sbyte* dest, sbyte* src, uint n, locale_t* l );

		[BackendHintReadOnly]
		public extern static int bcmp( void* s1, void* s2, uint n );
		public extern static void bcopy( void* src, void* dest, uint n );
		public extern static void bzero( void* s, uint n );
		[BackendHintReadNone]
		public extern static int ffs( int i );
		[BackendHintReadNone]
		public extern static int ffsl( intptr l );
		[BackendHintReadNone]
		public extern static int ffsll( long ll );
		[BackendHintReadOnly]
		public extern static sbyte* index( sbyte* s, int c );
		[BackendHintReadOnly]
		public extern static sbyte* rindex( sbyte* s, int c );
		[BackendHintReadOnly]
		public extern static int strcasecmp( sbyte* s1, sbyte* s2 );
		[BackendHintReadOnly]
		public extern static int strcasecmp_l( sbyte* s1, sbyte* s2, locale_t* loc );
		[BackendHintReadOnly]
		public extern static int strncasecmp( sbyte* s1, sbyte* s2, uint n );
		[BackendHintReadOnly]
		public extern static int strncasecmp_l( sbyte* s1, sbyte* s2, uint n, locale_t* loc );

		public extern static int preadv( IOHandle fd, iovec* iovec, int count, intptr offset );
		public extern static int preadv2( IOHandle fp, iovec* iovec, int count, intptr offset, int flags );
		public extern static int preadv64( IOHandle fd, iovec* iovec, int count, long offset );
		public extern static int preadv64v2( IOHandle fp, iovec* iovec, int count, long offset, int flags );
		public extern static int pwritev( IOHandle fd, iovec* iovec, int count, intptr offset );
		public extern static int pwritev2( IOHandle fd, iovec* iodev, int count, intptr offset, int flags );
		public extern static int pwritev64( IOHandle fd, iovec* iovec, int count, long offset );
		public extern static int pwritev64v2( IOHandle fd, iovec* iodev, int count, long offset, int flags );
		public extern static int readv( IOHandle fd, iovec* iovec, int count );
		public extern static int writev( IOHandle fd, iovec* iovec, int count );

		public extern static int process_vm_readv( int pid, iovec* lvec, uintptr liovcnt, iovec* rvec, uintptr riovcnt, uintptr flags );
		public extern static int process_vm_writev( int pid, iovec* lvec, uintptr liovcnt, iovec* rvec, uintptr riovcnt, uintptr flags );

		public extern static uint cfgetispeed( termios* termiosP );
		public extern static uint cfgetospeed( termios* termiosP );
		public extern static void cfmakeraw( termios* termiosP );
		public extern static int cfsetispeed( termios* termiosP, TerminalSpeed speed );
		public extern static int cfsetospeed( termios* termiosP, TerminalSpeed speed );
		public extern static int cfsetspeed( termios* termiosP, TerminalSpeed speed );
		public extern static int tcdrain( IOHandle fd );
		public extern static int tcflow( IOHandle fd, int action );
		public extern static int tcflush( IOHandle fd, int queueSelector );
		public extern static int tcgetattr( IOHandle fd, termios* termiosP );
		public extern static int tcgetsid( IOHandle fd );
		public extern static int tcsendbreak( IOHandle fd, int duration );
		public extern static int tcsetattr( IOHandle fd, TerminalSetAttributesBehaviour optionalActions, termios* termiosP );

		public extern static int bindresvport( int sockfd, sockaddr_in* sockIn );
		public extern static int getipv4sourcefilter( int s, in_addr interfaceAddr, in_addr group, uint* fmode, uint* numsrc, in_addr* slist );
		public extern static int getsourcefilter( int s, uint interfaceAddr, sockaddr* group, uint grouplen, uint* fmode, uint* numsrc, sockaddr_storage* slist );
		[BackendHintReadNone]
		public extern static uint htonl( uint hostlong );
		[BackendHintReadNone]
		public extern static ushort htons( ushort hostshort );
		public extern static int inet6_opt_append( void* extbuf, uint extlen, int offset, byte type, uint len, byte align, void** databufp );
		public extern static int inet6_opt_find( void* extbuf, uint extlen, int offset, byte type, uint* lenp, void** databufp );
		public extern static int inet6_opt_finish( void* extbuf, uint extlen, int offset );
		public extern static int inet6_opt_get_val( void* databuf, int offset, void* val, uint vallen );
		public extern static int inet6_opt_init( void* extbuf, uint extlen );
		public extern static int inet6_opt_next( void* extbuf, uint extlen, int offset, byte* typep, uint* lenp, void** databufp );
		public extern static int inet6_opt_set_val( void* databuf, int offset, void* val, uint vallen );
		public extern static int inet6_rth_add( void* bp, in6_addr* addr );
		public extern static in6_addr* inet6_rth_getaddr( void* bp, int index );
		public extern static void* inet6_rth_init( void* bp, uint bpLen, int type, int segments );
		public extern static int inet6_rth_reverse( void* in, void* out );
		public extern static int inet6_rth_segments( void* bp );
		public extern static uint inet6_rth_space( int type, int segments );
		[BackendHintReadNone]
		public extern static uint ntohl( uint netlong );
		[BackendHintReadNone]
		public extern static ushort ntohs( ushort netshort );
		public extern static int setipv4sourcefilter( int s, in_addr interfaceAddr, in_addr group, uint fmode, uint numsrc, in_addr* slist );
		public extern static int setsourcefilter( int s, uint interfaceAddr, sockaddr* group, uint grouplen, uint fmode, uint numsrc, sockaddr_storage* slist );

		public extern static void freeifaddrs( ifaddrs* ifa );
		public extern static int getifaddrs( ifaddrs** ifap );

		public extern static uint iconv( iconv_t cd, sbyte** inbuf, uint* inbytesleft, sbyte** outbuf, uint* outbytesleft );
		public extern static int iconv_close( iconv_t cd );
		public extern static iconv_t iconv_open( sbyte* tocode, sbyte* fromcode );

		public extern static void endpwent();
		public extern static passwd* fgetpwent( FILE* stream );
		public extern static int fgetpwent_r( FILE* stream, passwd* resultbuf, sbyte* buffer, uint buflen, passwd** result );
		public extern static passwd* getpwent();
		public extern static int getpwent_r( passwd* resultbuf, sbyte* buffer, uint buflen, passwd** result );
		public extern static passwd* getpwnam( CUtf8String name );
		public extern static int getpwnam_r( CUtf8String name, passwd* resultbuf, sbyte* buffer, uint buflen, passwd** result );
		public extern static passwd* getpwuid( uint uid );
		public extern static int getpwuid_r( uint uid, passwd* resultbuf, sbyte* buffer, uint buflen, passwd** result );
		public extern static int putpwent( passwd* p, FILE* f );
		public extern static void setpwent();

		public extern static void _dl_mcount_wrapper_check( void* selfpc );

		public extern static void endrpcent();
		public extern static rpcent* getrpcbyname( CUtf8String name );
		public extern static int getrpcbyname_r( CUtf8String name, rpcent* resultBuf, sbyte* buffer, uint buflen, rpcent** result );
		public extern static rpcent* getrpcbynumber( int number );
		public extern static int getrpcbynumber_r( int number, rpcent* resultBuf, sbyte* buffer, uint buflen, rpcent** result );
		public extern static rpcent* getrpcent();
		public extern static int getrpcent_r( rpcent* resultBuf, sbyte* buffer, uint buflen, rpcent** result );
		public extern static void setrpcent( int stayopen );

		[BackendHintReadNone]
		public extern static int* __h_errno_location();
		public extern static void endhostent();
		public extern static void endnetent();
		public extern static void endnetgrent();
		public extern static void endprotoent();
		public extern static void endservent();
		public extern static void freeaddrinfo( addrinfo* ai );
		public extern static sbyte* gai_strerror( int ecode );
		public extern static int getaddrinfo( CUtf8String name, sbyte* service, addrinfo* req, addrinfo** pai );
		public extern static hostent* gethostbyaddr( void* addr, uint len, int type );
		public extern static int gethostbyaddr_r( void* addr, uint len, int type, hostent* resultBuf, sbyte* buf, uint buflen, hostent** result, int* hErrnop );
		public extern static hostent* gethostbyname( CUtf8String name );
		public extern static int gethostbyname_r( CUtf8String name, hostent* resultBuf, sbyte* buf, uint buflen, hostent** result, int* hErrnop );
		public extern static hostent* gethostbyname2( CUtf8String name, int af );
		public extern static int gethostbyname2_r( CUtf8String name, int af, hostent* resultBuf, sbyte* buf, uint buflen, hostent** result, int* hErrnop );
		public extern static hostent* gethostent();
		public extern static int gethostent_r( hostent* resultBuf, sbyte* buf, uint buflen, hostent** result, int* hErrnop );
		public extern static int getnameinfo( sockaddr* sa, uint salen, sbyte* host, uint hostlen, sbyte* serv, uint servlen, int flags );
		public extern static netent* getnetbyaddr( uint net, int type );
		public extern static int getnetbyaddr_r( uint net, int type, netent* resultBuf, sbyte* buf, uint buflen, netent** result, int* hErrnop );
		public extern static netent* getnetbyname( CUtf8String name );
		public extern static int getnetbyname_r( CUtf8String name, netent* resultBuf, sbyte* buf, uint buflen, netent** result, int* hErrnop );
		public extern static netent* getnetent();
		public extern static int getnetent_r( netent* resultBuf, sbyte* buf, uint buflen, netent** result, int* hErrnop );
		public extern static int getnetgrent( sbyte** hostp, sbyte** userp, sbyte** domainp );
		public extern static int getnetgrent_r( sbyte** hostp, sbyte** userp, sbyte** domainp, sbyte* buffer, uint buflen );
		public extern static protoent* getprotobyname( CUtf8String name );
		public extern static int getprotobyname_r( CUtf8String name, protoent* resultBuf, sbyte* buf, uint buflen, protoent** result );
		public extern static protoent* getprotobynumber( int proto );
		public extern static int getprotobynumber_r( int proto, protoent* resultBuf, sbyte* buf, uint buflen, protoent** result );
		public extern static protoent* getprotoent();
		public extern static int getprotoent_r( protoent* resultBuf, sbyte* buf, uint buflen, protoent** result );
		public extern static servent* getservbyname( CUtf8String name, sbyte* proto );
		public extern static int getservbyname_r( CUtf8String name, sbyte* proto, servent* resultBuf, sbyte* buf, uint buflen, servent** result );
		public extern static servent* getservbyport( int port, sbyte* proto );
		public extern static int getservbyport_r( int port, sbyte* proto, servent* resultBuf, sbyte* buf, uint buflen, servent** result );
		public extern static servent* getservent();
		public extern static int getservent_r( servent* resultBuf, sbyte* buf, uint buflen, servent** result );
		public extern static void herror( sbyte* str );
		public extern static sbyte* hstrerror( int errNum );
		public extern static int innetgr( sbyte* netgroup, sbyte* host, sbyte* user, sbyte* domain );
		public extern static int iruserok( uint raddr, int suser, sbyte* remuser, sbyte* locuser );
		public extern static int iruserok_af( void* raddr, int suser, sbyte* remuser, sbyte* locuser, ushort af );
		public extern static int rcmd( sbyte** ahost, ushort rport, sbyte* locuser, sbyte* remuser, sbyte* cmd, int* fd2p );
		public extern static int rcmd_af( sbyte** ahost, ushort rport, sbyte* locuser, sbyte* remuser, sbyte* cmd, int* fd2p, ushort af );
		public extern static int rexec( sbyte** ahost, int rport, CUtf8String name, sbyte* pass, sbyte* cmd, int* fd2p );
		public extern static int rexec_af( sbyte** ahost, int rport, CUtf8String name, sbyte* pass, sbyte* cmd, int* fd2p, ushort af );
		public extern static int rresvport( int* alport );
		public extern static int rresvport_af( int* alport, ushort af );
		public extern static int ruserok( sbyte* rhost, int suser, sbyte* remuser, sbyte* locuser );
		public extern static int ruserok_af( sbyte* rhost, int suser, sbyte* remuser, sbyte* locuser, ushort af );
		public extern static void sethostent( int stayOpen );
		public extern static void setnetent( int stayOpen );
		public extern static int setnetgrent( sbyte* netgroup );
		public extern static void setprotoent( int stayOpen );
		public extern static void setservent( int stayOpen );

		public extern static int dl_iterate_phdr( Functors.Func<dl_phdr_info*, uint, void*, int> callback, void* data );

		public extern static void endgrent();
		public extern static group* fgetgrent( FILE* stream );
		public extern static int fgetgrent_r( FILE* stream, group* resultbuf, sbyte* buffer, uint buflen, group** result );
		public extern static group* getgrent();
		public extern static int getgrent_r( group* resultbuf, sbyte* buffer, uint buflen, group** result );
		public extern static group* getgrgid( uint gid );
		public extern static int getgrgid_r( uint gid, group* resultbuf, sbyte* buffer, uint buflen, group** result );
		public extern static group* getgrnam( CUtf8String name );
		public extern static int getgrnam_r( CUtf8String name, group* resultbuf, sbyte* buffer, uint buflen, group** result );
		public extern static int getgrouplist( sbyte* user, uint group, uint* groups, int* ngroups );
		public extern static int initgroups( CUtf8String user, uint group );
		public extern static int putgrent( group* p, FILE* f );
		public extern static void setgrent();
		public extern static int setgroups( uint n, uint* groups );

		public extern static int fallocate( int fd, int mode, intptr offset, intptr len );
		public extern static int fallocate64( int fd, int mode, long offset, long len );
		public extern static int name_to_handle_at( int dfd, CUtf8String name, file_handle* handle, int* mntId, int flags );
		public extern static int open_by_handle_at( int mountdirfd, file_handle* handle, int flags );
		public extern static int readahead( int fd, long offset, uint count );
		public extern static int splice( IOHandle fdin, long* offin, IOHandle fdout, long* offout, uint len, SpliceFlags flags );
		public extern static int sync_file_range( int fd, long offset, long count, uint flags );
		public extern static int tee( int fdin, int fdout, uint len, uint flags );
		public extern static int vmsplice( int fdout, iovec* iov, uint count, uint flags );

		public extern static int creat( sbyte* file, uint mode );
		public extern static int creat64( sbyte* file, uint mode );
		public extern static int lockf( int fd, int cmd, intptr len );
		public extern static int lockf64( int fd, int cmd, long len );
		public extern static int posix_fadvise( int fd, intptr offset, intptr len, int advise );
		public extern static int posix_fadvise64( int fd, long offset, long len, int advise );
		public extern static int posix_fallocate( int fd, intptr offset, intptr len );
		public extern static int posix_fallocate64( int fd, long offset, long len );

		public extern static uint __ctype_get_mb_cur_max();
		// public extern static sbyte* __secure_getenv( CUtf8String name );
		public extern static void _Exit( int status );
		[BackendHintReadOnly]
		public extern static intptr a64l( sbyte* s );
		public extern static void abort();
		[BackendHintReadNone]
		public extern static int abs( int x );
		public extern static void* aligned_alloc( uint alignment, uint size );
		[BackendHintReadOnly]
		public extern static double atof( sbyte* nptr );
		[BackendHintReadOnly]
		public extern static int atoi( sbyte* nptr );
		[BackendHintReadOnly]
		public extern static intptr atol( sbyte* nptr );
		[BackendHintReadOnly]
		public extern static long atoll( sbyte* nptr );
		public extern static void* bsearch( void* key, void* @base, uint nmemb, uint size, Functors.Func<void*, void*, int> compar );
		public extern static void* calloc( uint nmemb, uint size );
		public extern static sbyte* canonicalize_file_name( CUtf8String name );
		public extern static int clearenv();
		[BackendHintReadNone]
		public extern static div_t div( int numer, int denom );
		public extern static double drand48();
		public extern static int drand48_r( drand48_data* buffer, double* result );
		public extern static sbyte* ecvt( double value, int ndigit, int* decpt, int* sign );
		public extern static int ecvt_r( double value, int ndigit, int* decpt, int* sign, sbyte* buf, uint len );
		public extern static double erand48( ushort* xsubi );
		public extern static int erand48_r( ushort* xsubi, drand48_data* buffer, double* result );
		public extern static void exit( int status );
		public extern static sbyte* fcvt( double value, int ndigit, int* decpt, int* sign );
		public extern static int fcvt_r( double value, int ndigit, int* decpt, int* sign, sbyte* buf, uint len );
		public extern static void free( void* ptr );
		public extern static sbyte* gcvt( double value, int ndigit, sbyte* buf );
		public extern static CUtf8String getenv( CUtf8String name );
		public extern static int getloadavg( double* loadavg, int nelem );
		public extern static int getpt();
		public extern static int getsubopt( sbyte** optionp, sbyte** tokens, sbyte** valuep );
		public extern static int grantpt( IOHandle fd );
		public extern static sbyte* initstate( uint seed, sbyte* statebuf, uint statelen );
		public extern static int initstate_r( uint seed, sbyte* statebuf, uint statelen, random_data* buf );
		public extern static intptr jrand48( ushort* xsubi );
		public extern static int jrand48_r( ushort* xsubi, drand48_data* buffer, intptr* result );
		public extern static sbyte* l64a( intptr n );
		[BackendHintReadNone]
		public extern static intptr labs( intptr x );
		public extern static void lcong48( ushort* param );
		public extern static int lcong48_r( ushort* param, drand48_data* buffer );
		[BackendHintReadNone]
		public extern static ldiv_t ldiv( intptr numer, intptr denom );
		[BackendHintReadNone]
		public extern static long llabs( long x );
		[BackendHintReadNone]
		public extern static lldiv_t lldiv( long numer, long denom );
		public extern static intptr lrand48();
		public extern static int lrand48_r( drand48_data* buffer, intptr* result );
		public extern static void* malloc( uint size );
		public extern static int mblen( sbyte* s, uint n );
		public extern static uint mbstowcs( char* pwcs, sbyte* s, uint n );
		public extern static int mbtowc( char* pwc, sbyte* s, uint n );
		public extern static sbyte* mkdtemp( sbyte* template );
		public extern static int mkostemp( sbyte* template, int flags );
		public extern static int mkostemp64( sbyte* template, int flags );
		public extern static int mkostemps( sbyte* template, int suffixlen, int flags );
		public extern static int mkostemps64( sbyte* template, int suffixlen, int flags );
		public extern static int mkstemp( sbyte* template );
		public extern static int mkstemp64( sbyte* template );
		public extern static int mkstemps( sbyte* template, int suffixlen );
		public extern static int mkstemps64( sbyte* template, int suffixlen );
		public extern static intptr mrand48();
		public extern static int mrand48_r( drand48_data* buffer, intptr* result );
		public extern static intptr nrand48( ushort* xsubi );
		public extern static int nrand48_r( ushort* xsubi, drand48_data* buffer, intptr* result );
		public extern static int on_exit( Functors.Action<int, void*> func, void* arg );
		public extern static int posix_memalign( void** memptr, uint alignment, uint size );
		public extern static int posix_openpt( int oflag );
		public extern static sbyte* ptsname( IOHandle fd );
		public extern static int ptsname_r( IOHandle fd, sbyte* buf, uint buflen );
		public extern static int putenv( sbyte* @string );
		public extern static sbyte* qecvt( LittleEndianIEEE754_80 value, int ndigit, int* decpt, int* sign );
		public extern static int qecvt_r( LittleEndianIEEE754_80 value, int ndigit, int* decpt, int* sign, sbyte* buf, uint len );
		public extern static sbyte* qfcvt( LittleEndianIEEE754_80 value, int ndigit, int* decpt, int* sign );
		public extern static int qfcvt_r( LittleEndianIEEE754_80 value, int ndigit, int* decpt, int* sign, sbyte* buf, uint len );
		public extern static sbyte* qgcvt( LittleEndianIEEE754_80 value, int ndigit, sbyte* buf );
		public extern static void qsort( void* @base, uint nmemb, uint size, Functors.Func<void*, void*, int> compar );
		public extern static void qsort_r( void* @base, uint nmemb, uint size, Functors.Func<void*, void*, void*, int> compar, void* arg );
		public extern static void quick_exit( int status );
		public extern static int rand();
		public extern static int rand_r( uint* seed );
		public extern static intptr random();
		public extern static int random_r( random_data* buf, int* result );
		public extern static void* realloc( void* ptr, uint size );
		public extern static void* reallocarray( void* ptr, uint nmemb, uint size );
		public extern static sbyte* realpath( CUtf8String name, sbyte* resolved );
		public extern static int rpmatch( sbyte* response );
		public extern static sbyte* secure_getenv( CUtf8String name );
		public extern static ushort* seed48( ushort* seed16v );
		public extern static int seed48_r( ushort* seed16v, drand48_data* buffer );
		public extern static int setenv( CUtf8String name, CUtf8String value, int replace );
		public extern static sbyte* setstate( sbyte* statebuf );
		public extern static int setstate_r( sbyte* statebuf, random_data* buf );
		public extern static void srand( uint seed );
		public extern static void srand48( intptr seedval );
		public extern static int srand48_r( intptr seedval, drand48_data* buffer );
		public extern static void srandom( uint seed );
		public extern static int srandom_r( uint seed, random_data* buf );
		public extern static int strfromd( sbyte* dest, uint size, sbyte* format, double f );
		public extern static int strfromf( sbyte* dest, uint size, sbyte* format, float f );
		public extern static int strfromf32( sbyte* dest, uint size, sbyte* format, float f );
		public extern static int strfromf32x( sbyte* dest, uint size, sbyte* format, double f );
		public extern static int strfromf64( sbyte* dest, uint size, sbyte* format, double f );
		public extern static int strfromf64x( sbyte* dest, uint size, sbyte* format, LittleEndianIEEE754_80 f );
		public extern static int strfroml( sbyte* dest, uint size, sbyte* format, LittleEndianIEEE754_80 f );
		public extern static double strtod( sbyte* nptr, sbyte** endptr );
		public extern static double strtod_l( sbyte* nptr, sbyte** endptr, locale_t* loc );
		public extern static float strtof( sbyte* nptr, sbyte** endptr );
		public extern static float strtof_l( sbyte* nptr, sbyte** endptr, locale_t* loc );
		public extern static float strtof32( sbyte* nptr, sbyte** endptr );
		public extern static float strtof32_l( sbyte* nptr, sbyte** endptr, locale_t* loc );
		public extern static double strtof32x( sbyte* nptr, sbyte** endptr );
		public extern static double strtof32x_l( sbyte* nptr, sbyte** endptr, locale_t* loc );
		public extern static double strtof64( sbyte* nptr, sbyte** endptr );
		public extern static double strtof64_l( sbyte* nptr, sbyte** endptr, locale_t* loc );
		public extern static LittleEndianIEEE754_80 strtof64x( sbyte* nptr, sbyte** endptr );
		public extern static LittleEndianIEEE754_80 strtof64x_l( sbyte* nptr, sbyte** endptr, locale_t* loc );
		public extern static intptr strtol( sbyte* nptr, sbyte** endptr, int @base );
		public extern static intptr strtol_l( sbyte* nptr, sbyte** endptr, int @base, locale_t* loc );
		public extern static LittleEndianIEEE754_80 strtold( sbyte* nptr, sbyte** endptr );
		public extern static LittleEndianIEEE754_80 strtold_l( sbyte* nptr, sbyte** endptr, locale_t* loc );
		public extern static long strtoll( sbyte* nptr, sbyte** endptr, int @base );
		public extern static long strtoll_l( sbyte* nptr, sbyte** endptr, int @base, locale_t* loc );
		public extern static long strtoq( sbyte* nptr, sbyte** endptr, int @base );
		public extern static uintptr strtoul( sbyte* nptr, sbyte** endptr, int @base );
		public extern static uintptr strtoul_l( sbyte* nptr, sbyte** endptr, int @base, locale_t* loc );
		public extern static ulong strtoull( sbyte* nptr, sbyte** endptr, int @base );
		public extern static ulong strtoull_l( sbyte* nptr, sbyte** endptr, int @base, locale_t* loc );
		public extern static ulong strtouq( sbyte* nptr, sbyte** endptr, int @base );
		public extern static int system( CUtf8String command );
		public extern static int unlockpt( IOHandle fd );
		public extern static int unsetenv( CUtf8String name );
		public extern static void* valloc( uint size );
		public extern static uint wcstombs( sbyte* s, char* pwcs, uint n );
		public extern static int wctomb( sbyte* s, char wchar );

		[BackendHintReadNone]
		public extern static int __isinf( double value );
		[BackendHintReadNone]
		public extern static int __isinff( float value );
		[BackendHintReadNone]
		public extern static int __isinfl( LittleEndianIEEE754_80 value );
		[BackendHintReadNone]
		public extern static int __isnan( double value );
		[BackendHintReadNone]
		public extern static int __isnanf( float value );
		[BackendHintReadNone]
		public extern static int __isnanl( LittleEndianIEEE754_80 value );

		[BackendHintReadNone]
		public extern static int isinff( float value );
		[BackendHintReadNone]
		public extern static int isinfl( LittleEndianIEEE754_80 value );
		[BackendHintReadNone]
		public extern static int isnanf( float value );
		[BackendHintReadNone]
		public extern static int isnanl( LittleEndianIEEE754_80 value );

		[BackendHintReadOnly]
		public extern static int alphasort( dirent** e1, dirent** e2 );
		[BackendHintReadOnly]
		public extern static int alphasort64( dirent64** e1, dirent64** e2 );
		public extern static int closedir( DIR* dirp );
		public extern static int dirfd( DIR* dirp );
		public extern static DIR* fdopendir( int fd );
		public extern static int getdirentries( int fd, sbyte* buf, uint nbytes, intptr* basep );
		public extern static int getdirentries64( int fd, sbyte* buf, uint nbytes, long* basep );
		public extern static DIR* opendir( CUtf8String name );
		public extern static dirent* readdir( DIR* dirp );
		public extern static int readdir_r( DIR* dirp, dirent* entry, dirent** result );
		public extern static dirent64* readdir64( DIR* dirp );
		public extern static int readdir64_r( DIR* dirp, dirent64* entry, dirent64** result );
		public extern static void rewinddir( DIR* dirp );
		public extern static int scandir( sbyte* dir, dirent*** namelist, Functors.Func<dirent*, int> selector, Functors.Func<dirent**, dirent**, int> cmp );
		public extern static int scandir64( sbyte* dir, dirent64*** namelist, Functors.Func<dirent64*, int> selector, Functors.Func<dirent64**, dirent64**, int> cmp );
		public extern static int scandirat( int dfd, sbyte* dir, dirent*** namelist, Functors.Func<dirent*, int> selector, Functors.Func<dirent**, dirent**, int> cmp );
		public extern static int scandirat64( int dfd, sbyte* dir, dirent64*** namelist, Functors.Func<dirent64*, int> selector, Functors.Func<dirent64**, dirent64**, int> cmp );
		public extern static void seekdir( DIR* dirp, intptr pos );
		public extern static intptr telldir( DIR* dirp );
		[BackendHintReadOnly]
		public extern static int versionsort( dirent** e1, dirent** e2 );
		[BackendHintReadOnly]
		public extern static int versionsort64( dirent64** e1, dirent64** e2 );

		public extern static int sched_getcpu();
		public extern static int setns( int fd, int nstype );
		public extern static int unshare( int flags );

		public extern static cpu_set_t* __sched_cpualloc( uint count );
		public extern static int __sched_cpucount( uint setsize, cpu_set_t* setp );
		public extern static void __sched_cpufree( cpu_set_t* set );

		public extern static int sched_get_priority_max( int algorithm );
		public extern static int sched_get_priority_min( int algorithm );
		public extern static int sched_getaffinity( int pid, uint cpusetsize, cpu_set_t* cpuset );
		public extern static int sched_getparam( int pid, sched_param* param );
		public extern static int sched_getscheduler( int pid );
		public extern static int sched_rr_get_interval( int pid, timespec* t );
		public extern static int sched_setaffinity( int pid, uint cpusetsize, cpu_set_t* cpuset );
		public extern static int sched_setparam( int pid, sched_param* param );
		public extern static int sched_setscheduler( int pid, int policy, sched_param* param );
		public extern static int sched_yield();

		public extern static int pthread_attr_destroy( pthread_attr_t* attr );
		public extern static int pthread_attr_getdetachstate( pthread_attr_t* attr, int* detachstate );
		public extern static int pthread_attr_getinheritsched( pthread_attr_t* attr, int* inherit );
		public extern static int pthread_attr_getschedparam( pthread_attr_t* attr, sched_param* param );
		public extern static int pthread_attr_getschedpolicy( pthread_attr_t* attr, int* policy );
		public extern static int pthread_attr_getscope( pthread_attr_t* attr, int* scope );
		public extern static int pthread_attr_init( pthread_attr_t* attr );
		public extern static int pthread_attr_setdetachstate( pthread_attr_t* attr, int detachstate );
		public extern static int pthread_attr_setinheritsched( pthread_attr_t* attr, int inherit );
		public extern static int pthread_attr_setschedparam( pthread_attr_t* attr, sched_param* param );
		public extern static int pthread_attr_setschedpolicy( pthread_attr_t* attr, int policy );
		public extern static int pthread_attr_setscope( pthread_attr_t* attr, int scope );
		public extern static int pthread_cond_broadcast( pthread_cond_t* cond );
		public extern static int pthread_cond_destroy( pthread_cond_t* cond );
		public extern static int pthread_cond_init( pthread_cond_t* cond, pthread_condattr_t* condAttr );
		public extern static int pthread_cond_signal( pthread_cond_t* cond );
		public extern static int pthread_cond_timedwait( pthread_cond_t* cond, pthread_mutex_t* mutex, timespec* abstime );
		public extern static int pthread_cond_wait( pthread_cond_t* cond, pthread_mutex_t* mutex );
		public extern static int pthread_condattr_destroy( pthread_condattr_t* attr );
		public extern static int pthread_condattr_init( pthread_condattr_t* attr );
		[BackendHintReadNone]
		public extern static int pthread_equal( pthread_t thread1, pthread_t thread2 );
		public extern static void pthread_exit( void* retval );
		public extern static int pthread_getschedparam( pthread_t targetThread, int* policy, sched_param* param );
		public extern static int pthread_mutex_destroy( pthread_mutex_t* mutex );
		public extern static int pthread_mutex_init( pthread_mutex_t* mutex, pthread_mutexattr_t* mutexattr );
		public extern static int pthread_mutex_lock( pthread_mutex_t* mutex );
		public extern static int pthread_mutex_unlock( pthread_mutex_t* mutex );
		[BackendHintReadNone]
		public extern static pthread_t pthread_self();
		public extern static int pthread_setcancelstate( int state, int* oldstate );
		public extern static int pthread_setcanceltype( int type, int* oldtype );
		public extern static int pthread_setschedparam( pthread_t targetThread, int policy, sched_param* param );

		public extern static int __getpgid( int pid );
		public extern static void _exit( int status );
		public extern static int access( CUtf8String name, int type );
		public extern static int acct( CUtf8String name );
		public extern static uint alarm( uint seconds );
		public extern static int brk( void* addr );
		public extern static int chdir( CUtf8String path );
		public extern static int chown( CUtf8String file, uint owner, uint group );
		public extern static int chroot( CUtf8String path );
		public extern static int close( IOHandle fd );
		public extern static uint confstr( int name, sbyte* buf, uint len );
		public extern static int copy_file_range( int infd, long* pinoff, int outfd, long* poutoff, uint length, uint flags );
		public extern static int daemon( int nochdir, int noclose );
		public extern static IOHandle dup( IOHandle fd );
		public extern static IOHandle dup2( IOHandle fd, IOHandle fd2 );
		public extern static IOHandle dup3( IOHandle fd, IOHandle fd2, int flags );
		public extern static int eaccess( CUtf8String name, int type );
		public extern static void endusershell();
		public extern static int euidaccess( CUtf8String name, int type );
		public extern static int execv( CUtf8String path, CUtf8String* argv );
		public extern static int execve( CUtf8String path, CUtf8String* argv, CUtf8String* envp );
		public extern static int execvp( CUtf8String file, CUtf8String* argv );
		public extern static int execvpe( CUtf8String file, CUtf8String* argv, CUtf8String* envp );
		public extern static int faccessat( IOHandle fd, sbyte* file, int type, int flag );
		public extern static int fchdir( IOHandle fd );
		public extern static int fchown( IOHandle fd, uint owner, uint group );
		public extern static int fchownat( IOHandle fd, CUtf8String file, uint owner, uint group, SymlinkFollowOption flag );
		public extern static int fdatasync( IOHandle fildes );
		public extern static int fexecve( IOHandle fd, CUtf8String* argv, CUtf8String* envp );
		public extern static int fork();
		public extern static intptr fpathconf( IOHandle fd, int name );
		public extern static int fsync( IOHandle fd );
		public extern static int ftruncate( IOHandle fd, intptr length );
		public extern static int ftruncate64( IOHandle fd, long length );
		public extern static sbyte* get_current_dir_name();
		public extern static sbyte* getcwd( sbyte* buf, uint size );
		public extern static int getdomainname( sbyte* name, uint len );
		public extern static int getdtablesize();
		public extern static uint getegid();
		public extern static int getentropy( void* buffer, uint length );
		public extern static uint geteuid();
		public extern static uint getgid();
		public extern static int getgroups( int size, uint* list );
		public extern static intptr gethostid();
		public extern static int gethostname( sbyte* name, uint len );
		public extern static sbyte* getlogin();
		public extern static int getlogin_r( sbyte* name, uint nameLen );
		[BackendHintReadNone]
		public extern static int getpagesize();
		public extern static sbyte* getpass( sbyte* prompt );
		public extern static int getpgid( int pid );
		public extern static int getpgrp();
		public extern static int getpid();
		public extern static int getppid();
		public extern static int getresgid( uint& rgid, uint& egid, uint& sgid );
		public extern static int getresuid( uint& ruid, uint& euid, uint& suid );
		public extern static int getsid( int pid );
		public extern static uint getuid();
		public extern static sbyte* getusershell();
		public extern static int group_member( uint gid );
		public extern static int isatty( int fd );
		public extern static int lchown( sbyte* file, uint owner, uint group );
		public extern static int link( sbyte* from, sbyte* to );
		public extern static int linkat( int fromfd, sbyte* from, int tofd, sbyte* to, int flags );
		public extern static intptr lseek( IOHandle fd, intptr offset, FileSeekOrigin whence );
		public extern static long lseek64( IOHandle fd, long offset, FileSeekOrigin whence );
		public extern static int nice( int inc );
		public extern static intptr pathconf( sbyte* path, int name );
		public extern static int pause();
		public extern static int pipe( PipeHandle[2]& pipedes );
		public extern static int pipe2( int* pipedes, int flags );
		public extern static int pread( IOHandle fd, void* buf, uint nbytes, intptr offset );
		public extern static int pread64( IOHandle fd, void* buf, uint nbytes, long offset );
		public extern static int profil( ushort* sampleBuffer, uint size, uint offset, uint scale );
		public extern static int pwrite( IOHandle fd, void* buf, uint n, intptr offset );
		public extern static int pwrite64( IOHandle fd, void* buf, uint n, long offset );
		public extern static int read( IOHandle fd, void* buf, int nbytes );
		public extern static int readlink( CUtf8String path, sbyte* buf, uint len );
		public extern static int readlinkat( IOHandle fd, CUtf8String path, sbyte* buf, uint len );
		public extern static int rmdir( CUtf8String path );
		public extern static void* sbrk( int delta );
		public extern static int setdomainname( CUtf8String name, uint len );
		public extern static int setegid( uint gid );
		public extern static int seteuid( uint uid );
		public extern static int setgid( uint gid );
		public extern static int sethostid( intptr id );
		public extern static int sethostname( CUtf8String name, uint len );
		public extern static int setpgid( int pid, int pgid );
		public extern static int setpgrp();
		public extern static int setregid( uint rgid, uint egid );
		public extern static int setresgid( uint rgid, uint egid, uint sgid );
		public extern static int setresuid( uint ruid, uint euid, uint suid );
		public extern static int setreuid( uint ruid, uint euid );
		public extern static int setsid();
		public extern static int setuid( uint uid );
		public extern static void setusershell();
		public extern static uint sleep( uint seconds );
		public extern static void swab( void* from, void* to, int n );
		public extern static int symlink( sbyte* from, sbyte* to );
		public extern static int symlinkat( sbyte* from, int tofd, sbyte* to );
		public extern static void sync();
		public extern static int syncfs( int fd );
		public extern static intptr sysconf( SystemConfigurationProperty name );
		public extern static int tcgetpgrp( int fd );
		public extern static int tcsetpgrp( int fd, int pgrpId );
		public extern static int truncate( sbyte* file, intptr length );
		public extern static int truncate64( sbyte* file, long length );
		public extern static sbyte* ttyname( int fd );
		public extern static int ttyname_r( int fd, sbyte* buf, uint buflen );
		public extern static int ttyslot();
		public extern static uint ualarm( uint value, uint interval );
		public extern static int unlink( CUtf8String name );
		public extern static int unlinkat( IOHandle fd, CUtf8String name, SymlinkFollowOption flag );
		public extern static int usleep( uint useconds );
		public extern static int vfork();
		public extern static int vhangup();
		public extern static int write( IOHandle fd, void* buf, int n );

		public extern static int getopt( int argc, sbyte** argv, sbyte* shortopts );

		public extern static int __getdelim( sbyte** lineptr, uint* n, int delimiter, FILE* stream );
		public extern static int __overflow( FILE* p0, int p1 );
		public extern static int __uflow( FILE* p0 );
		public extern static void clearerr( FILE* stream );
		public extern static void clearerr_unlocked( FILE* stream );
		public extern static sbyte* ctermid( sbyte* s );
		public extern static sbyte* cuserid( sbyte* s );
		public extern static int fclose( FILE* stream );
		public extern static int fcloseall();
		public extern static FILE* fdopen( int fd, sbyte* modes );
		public extern static int feof( FILE* stream );
		public extern static int feof_unlocked( FILE* stream );
		public extern static int ferror( FILE* stream );
		public extern static int ferror_unlocked( FILE* stream );
		public extern static int fflush( FILE* stream );
		public extern static int fflush_unlocked( FILE* stream );
		public extern static int fgetc( FILE* stream );
		public extern static int fgetc_unlocked( FILE* stream );
		public extern static int fgetpos( FILE* stream, fpos_t* pos );
		public extern static int fgetpos64( FILE* stream, fpos64_t* pos );
		public extern static sbyte* fgets( sbyte* s, int n, FILE* stream );
		public extern static sbyte* fgets_unlocked( sbyte* s, int n, FILE* stream );
		public extern static int fileno( FILE* stream );
		public extern static int fileno_unlocked( FILE* stream );
		public extern static void flockfile( FILE* stream );
		public extern static FILE* fmemopen( void* s, uint len, CUtf8String modes );
		public extern static FILE* fopen( CUtf8String filename, CUtf8String modes );
		public extern static FILE* fopen64( CUtf8String filename, CUtf8String modes );
		public extern static FILE* fopencookie( void* magicCookie, CUtf8String modes, cookie_io_functions_t ioFuncs );
		public extern static int fputc( int c, FILE* stream );
		public extern static int fputc_unlocked( int c, FILE* stream );
		public extern static int fputs( sbyte* s, FILE* stream );
		public extern static int fputs_unlocked( sbyte* s, FILE* stream );
		public extern static uint fread( void* ptr, uint size, uint n, FILE* stream );
		public extern static uint fread_unlocked( void* ptr, uint size, uint n, FILE* stream );
		public extern static FILE* freopen( CUtf8String filename, CUtf8String modes, FILE* stream );
		public extern static FILE* freopen64( CUtf8String filename, CUtf8String modes, FILE* stream );
		public extern static int fseek( FILE* stream, intptr off, int whence );
		public extern static int fseeko( FILE* stream, intptr off, int whence );
		public extern static int fseeko64( FILE* stream, long off, int whence );
		public extern static int fsetpos( FILE* stream, fpos_t* pos );
		public extern static int fsetpos64( FILE* stream, fpos64_t* pos );
		public extern static intptr ftell( FILE* stream );
		public extern static intptr ftello( FILE* stream );
		public extern static long ftello64( FILE* stream );
		public extern static int ftrylockfile( FILE* stream );
		public extern static void funlockfile( FILE* stream );
		public extern static uint fwrite( void* ptr, uint size, uint n, FILE* s );
		public extern static uint fwrite_unlocked( void* ptr, uint size, uint n, FILE* stream );
		public extern static int getc( FILE* stream );
		public extern static int getc_unlocked( FILE* stream );
		public extern static int getchar();
		public extern static int getchar_unlocked();
		public extern static int getdelim( sbyte** lineptr, uint* n, int delimiter, FILE* stream );
		public extern static int getline( sbyte** lineptr, uint* n, FILE* stream );
		public extern static int getw( FILE* stream );
		public extern static int obstack_vprintf( obstack* obstack, sbyte* format, sbyte* args );
		public extern static FILE* open_memstream( sbyte** bufloc, uint* sizeloc );
		public extern static int pclose( FILE* stream );
		public extern static void perror( sbyte* s );
		public extern static FILE* popen( sbyte* command, sbyte* modes );
		public extern static int putc( int c, FILE* stream );
		public extern static int putc_unlocked( int c, FILE* stream );
		public extern static int putchar( int c );
		public extern static int putchar_unlocked( int c );
		public extern static int puts( sbyte* s );
		public extern static int putw( int w, FILE* stream );
		public extern static int remove( CUtf8String filename );
		public extern static int rename( sbyte* old, sbyte* @new );
		public extern static int renameat( int oldfd, sbyte* old, int newfd, sbyte* @new );
		public extern static int renameat2( int oldfd, sbyte* old, int newfd, sbyte* @new, uint flags );
		public extern static void rewind( FILE* stream );
		public extern static void setbuf( FILE* stream, sbyte* buf );
		public extern static void setbuffer( FILE* stream, sbyte* buf, uint size );
		public extern static void setlinebuf( FILE* stream );
		public extern static int setvbuf( FILE* stream, sbyte* buf, int modes, uint n );
		public extern static FILE* tmpfile();
		public extern static FILE* tmpfile64();
		public extern static int ungetc( int c, FILE* stream );
		public extern static int vasprintf( sbyte** ptr, sbyte* f, sbyte* arg );
		public extern static int vdprintf( int fd, sbyte* fmt, sbyte* arg );
		public extern static int vfprintf( FILE* s, sbyte* format, sbyte* arg );
		public extern static int vfscanf( FILE* s, sbyte* format, sbyte* arg );
		public extern static int vprintf( sbyte* format, sbyte* arg );
		public extern static int vscanf( sbyte* format, sbyte* arg );
		public extern static int vsnprintf( sbyte* s, uint maxlen, sbyte* format, sbyte* arg );
		public extern static int vsprintf( sbyte* s, sbyte* format, sbyte* arg );
		public extern static int vsscanf( sbyte* s, sbyte* format, sbyte* arg );

		[BackendHintReadNone]
		public extern static SystemError* __errno_location();

		public extern static int getcontext( ucontext_t& ucp );
		public extern static int setcontext( ucontext_t& ucp );
		public extern static int swapcontext( ucontext_t& oucp, ucontext_t& ucp );

		public extern static int capget( cap_user_header_t& header, cap_user_data_t& data );
		public extern static int capset( cap_user_header_t& header, cap_user_data_t& data );
	}
	[ExternLibrary( Image = "/usr/lib/libcap.so.2" )]
	public static partial struct CapApi {
		public extern static int cap_clear( cap_t* p0 );
		public extern static int cap_clear_flag( cap_t* p0, cap_flag_t p1 );
		public extern static int cap_compare( cap_t* p0, cap_t* p1 );
		public extern static int cap_copy_ext( void* p0, cap_t* p1, int p2 );
		public extern static cap_t* cap_copy_int( void* p0 );
		public extern static int cap_drop_bound( int p0 );
		public extern static cap_t* cap_dup( cap_t* p0 );
		public extern static int cap_free( void* p0 );
		public extern static int cap_from_name( sbyte* p0, int* p1 );
		public extern static cap_t* cap_from_text( sbyte* p0 );
		public extern static int cap_get_bound( int p0 );
		public extern static cap_t* cap_get_fd( int p0 );
		public extern static cap_t* cap_get_file( sbyte* p0 );
		public extern static int cap_get_flag( cap_t* p0, int p1, cap_flag_t p2, cap_flag_value_t* p3 );
		public extern static cap_t* cap_get_pid( int p0 );
		public extern static cap_t* cap_get_proc();
		public extern static cap_t* cap_init();
		public extern static int cap_set_fd( int p0, cap_t* p1 );
		public extern static int cap_set_file( sbyte* p0, cap_t* p1 );
		public extern static int cap_set_flag( cap_t* p0, cap_flag_t p1, int p2, int* p3, cap_flag_value_t p4 );
		public extern static int cap_set_proc( cap_t* p0 );
		public extern static int cap_size( cap_t* p0 );
		public extern static sbyte* cap_to_name( int p0 );
		public extern static sbyte* cap_to_text( cap_t* p0, int* p1 );
		public extern static int capgetp( int pid, cap_t* capD );
		public extern static int capsetp( int pid, cap_t* capD );
	}
	[ExternLibrary( Image = "/lib/librt.so.1" )]
	public static partial struct RealTimeApi {
		public extern static int shm_open( CUtf8String name, int oflag, uint mode );
		public extern static int shm_unlink( CUtf8String name );

		public extern static int clock_getcpuclockid( int pid, int* clockId );
		public extern static int clock_getres( ClockType clockId, timespec& res );
		public extern static int clock_gettime( ClockType clockId, timespec& tp );
		public extern static int clock_nanosleep( ClockType clockId, int flags, timespec& req, timespec& rem );
		public extern static int clock_settime( ClockType clockId, timespec& tp );
		public extern static int timer_create( ClockType clockId, sigevent* evp, void** timerid );
		public extern static int timer_delete( void* timerid );
		public extern static int timer_getoverrun( void* timerid );
		public extern static int timer_gettime( void* timerid, itimerspec* value );
		public extern static int timer_settime( void* timerid, int flags, itimerspec* value, itimerspec* ovalue );
	}
	[ExternLibrary( Image = "/usr/lib/libc_nonshared.a" )]
	public static partial struct NonSharedApi {
		public extern static int fstat( IOHandle fd, stat* buf );
		public extern static int fstat64( IOHandle fd, stat64* buf );
		public extern static int fstatat( IOHandle fd, CUtf8String file, stat* buf, SymlinkFollowOption flag );
		public extern static int fstatat64( IOHandle fd, CUtf8String file, stat64* buf, SymlinkFollowOption flag );
		public extern static int lstat( CUtf8String file, stat* buf );
		public extern static int lstat64( CUtf8String file, stat64* buf );
		public extern static int mknod( CUtf8String path, uint mode, ulong dev );
		public extern static int mknodat( IOHandle fd, CUtf8String path, uint mode, ulong dev );
		public extern static int stat( CUtf8String file, stat* buf );
		public extern static int stat64( CUtf8String file, stat64* buf );

		public extern static int at_quick_exit( Functors.Action func );
		public extern static int atexit( Functors.Action func );

		public extern static int pthread_atfork( Functors.Action prepare, Functors.Action parent, Functors.Action child );
	}
	[ExternLibrary( Image = "/lib/libdl.so.2" )]
	public static partial struct LoaderApi {
		public extern static int dladdr( void* address, Dl_info* info );
		public extern static int dladdr1( void* address, Dl_info* info, void** extraInfo, int flags );
		public extern static int dlclose( void* handle );
		public extern static sbyte* dlerror();
		public extern static int dlinfo( void* handle, int request, void* arg );
		public extern static void* dlmopen( intptr nsid, sbyte* file, int mode );
		public extern static void* dlopen( sbyte* file, int mode );
		public extern static void* dlsym( DynamicLibraryHandle handle, CUtf8String name );
		public extern static void* dlvsym( DynamicLibraryHandle handle, CUtf8String name, CUtf8String version );
	}
	[ExternLibrary( Image = "/usr/lib/libm.so.6" )]
	public static partial struct MathApi {
		[BackendHintReadNone]
		public extern static int __finite( double value );
		[BackendHintReadNone]
		public extern static int __finitef( float value );
		[BackendHintReadNone]
		public extern static int __finitel( LittleEndianIEEE754_80 value );
		[BackendHintReadNone]
		public extern static int __fpclassify( double value );
		[BackendHintReadNone]
		public extern static int __fpclassifyf( float value );
		[BackendHintReadNone]
		public extern static int __fpclassifyl( LittleEndianIEEE754_80 value );
		public extern static int __iseqsig( double x, double y );
		public extern static int __iseqsigf( float x, float y );
		public extern static int __iseqsigl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static int __issignaling( double value );
		[BackendHintReadNone]
		public extern static int __issignalingf( float value );
		[BackendHintReadNone]
		public extern static int __issignalingl( LittleEndianIEEE754_80 value );
		[BackendHintReadNone]
		public extern static int __signbit( double value );
		[BackendHintReadNone]
		public extern static int __signbitf( float value );
		[BackendHintReadNone]
		public extern static int __signbitl( LittleEndianIEEE754_80 value );

		public extern static double acos( double x );
		public extern static float acosf( float x );
		public extern static float acosf32( float x );
		public extern static double acosf32x( double x );
		public extern static double acosf64( double x );
		public extern static LittleEndianIEEE754_80 acosf64x( LittleEndianIEEE754_80 x );
		public extern static double acosh( double x );
		public extern static float acoshf( float x );
		public extern static float acoshf32( float x );
		public extern static double acoshf32x( double x );
		public extern static double acoshf64( double x );
		public extern static LittleEndianIEEE754_80 acoshf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 acoshl( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 acosl( LittleEndianIEEE754_80 x );
		public extern static double asin( double x );
		public extern static float asinf( float x );
		public extern static float asinf32( float x );
		public extern static double asinf32x( double x );
		public extern static double asinf64( double x );
		public extern static LittleEndianIEEE754_80 asinf64x( LittleEndianIEEE754_80 x );
		public extern static double asinh( double x );
		public extern static float asinhf( float x );
		public extern static float asinhf32( float x );
		public extern static double asinhf32x( double x );
		public extern static double asinhf64( double x );
		public extern static LittleEndianIEEE754_80 asinhf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 asinhl( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 asinl( LittleEndianIEEE754_80 x );
		public extern static double atan( double x );
		public extern static double atan2( double y, double x );
		public extern static float atan2f( float y, float x );
		public extern static float atan2f32( float y, float x );
		public extern static double atan2f32x( double y, double x );
		public extern static double atan2f64( double y, double x );
		public extern static LittleEndianIEEE754_80 atan2f64x( LittleEndianIEEE754_80 y, LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 atan2l( LittleEndianIEEE754_80 y, LittleEndianIEEE754_80 x );
		public extern static float atanf( float x );
		public extern static float atanf32( float x );
		public extern static double atanf32x( double x );
		public extern static double atanf64( double x );
		public extern static LittleEndianIEEE754_80 atanf64x( LittleEndianIEEE754_80 x );
		public extern static double atanh( double x );
		public extern static float atanhf( float x );
		public extern static float atanhf32( float x );
		public extern static double atanhf32x( double x );
		public extern static double atanhf64( double x );
		public extern static LittleEndianIEEE754_80 atanhf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 atanhl( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 atanl( LittleEndianIEEE754_80 x );
		public extern static int canonicalize( double* cx, double* x );
		public extern static int canonicalizef( float* cx, float* x );
		public extern static int canonicalizef32( float* cx, float* x );
		public extern static int canonicalizef32x( double* cx, double* x );
		public extern static int canonicalizef64( double* cx, double* x );
		public extern static int canonicalizef64x( LittleEndianIEEE754_80* cx, LittleEndianIEEE754_80* x );
		public extern static int canonicalizel( LittleEndianIEEE754_80* cx, LittleEndianIEEE754_80* x );
		[BackendHintReadNone]
		public extern static double cbrt( double x );
		[BackendHintReadNone]
		public extern static float cbrtf( float x );
		public extern static float cbrtf32( float x );
		public extern static double cbrtf32x( double x );
		public extern static double cbrtf64( double x );
		public extern static LittleEndianIEEE754_80 cbrtf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 cbrtl( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static double ceil( double x );
		[BackendHintReadNone]
		public extern static float ceilf( float x );
		[BackendHintReadNone]
		public extern static float ceilf32( float x );
		[BackendHintReadNone]
		public extern static double ceilf32x( double x );
		[BackendHintReadNone]
		public extern static double ceilf64( double x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 ceilf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 ceill( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static double copysign( double x, double y );
		[BackendHintReadNone]
		public extern static float copysignf( float x, float y );
		[BackendHintReadNone]
		public extern static float copysignf32( float x, float y );
		[BackendHintReadNone]
		public extern static double copysignf32x( double x, double y );
		[BackendHintReadNone]
		public extern static double copysignf64( double x, double y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 copysignf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 copysignl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double cos( double x );
		public extern static float cosf( float x );
		public extern static float cosf32( float x );
		public extern static double cosf32x( double x );
		public extern static double cosf64( double x );
		public extern static LittleEndianIEEE754_80 cosf64x( LittleEndianIEEE754_80 x );
		public extern static double cosh( double x );
		public extern static float coshf( float x );
		public extern static float coshf32( float x );
		public extern static double coshf32x( double x );
		public extern static double coshf64( double x );
		public extern static LittleEndianIEEE754_80 coshf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 coshl( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 cosl( LittleEndianIEEE754_80 x );
		public extern static double drem( double x, double y );
		public extern static float dremf( float x, float y );
		public extern static LittleEndianIEEE754_80 dreml( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double erf( double p0 );
		public extern static double erfc( double p0 );
		public extern static float erfcf( float p0 );
		public extern static float erfcf32( float p0 );
		public extern static double erfcf32x( double p0 );
		public extern static double erfcf64( double p0 );
		public extern static LittleEndianIEEE754_80 erfcf64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 erfcl( LittleEndianIEEE754_80 p0 );
		public extern static float erff( float p0 );
		public extern static float erff32( float p0 );
		public extern static double erff32x( double p0 );
		public extern static double erff64( double p0 );
		public extern static LittleEndianIEEE754_80 erff64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 erfl( LittleEndianIEEE754_80 p0 );
		public extern static double exp( double x );
		public extern static double exp10( double x );
		public extern static float exp10f( float x );
		public extern static float exp10f32( float x );
		public extern static double exp10f32x( double x );
		public extern static double exp10f64( double x );
		public extern static LittleEndianIEEE754_80 exp10f64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 exp10l( LittleEndianIEEE754_80 x );
		public extern static double exp2( double x );
		public extern static float exp2f( float x );
		public extern static float exp2f32( float x );
		public extern static double exp2f32x( double x );
		public extern static double exp2f64( double x );
		public extern static LittleEndianIEEE754_80 exp2f64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 exp2l( LittleEndianIEEE754_80 x );
		public extern static float expf( float x );
		public extern static float expf32( float x );
		public extern static double expf32x( double x );
		public extern static double expf64( double x );
		public extern static LittleEndianIEEE754_80 expf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 expl( LittleEndianIEEE754_80 x );
		public extern static double expm1( double x );
		public extern static float expm1f( float x );
		public extern static float expm1f32( float x );
		public extern static double expm1f32x( double x );
		public extern static double expm1f64( double x );
		public extern static LittleEndianIEEE754_80 expm1f64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 expm1l( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static double fabs( double x );
		[BackendHintReadNone]
		public extern static float fabsf( float x );
		[BackendHintReadNone]
		public extern static float fabsf32( float x );
		[BackendHintReadNone]
		public extern static double fabsf32x( double x );
		[BackendHintReadNone]
		public extern static double fabsf64( double x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fabsf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fabsl( LittleEndianIEEE754_80 x );
		public extern static double fdim( double x, double y );
		public extern static float fdimf( float x, float y );
		public extern static float fdimf32( float x, float y );
		public extern static double fdimf32x( double x, double y );
		public extern static double fdimf64( double x, double y );
		public extern static LittleEndianIEEE754_80 fdimf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static LittleEndianIEEE754_80 fdiml( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static int finite( double value );
		[BackendHintReadNone]
		public extern static int finitef( float value );
		[BackendHintReadNone]
		public extern static int finitel( LittleEndianIEEE754_80 value );
		[BackendHintReadNone]
		public extern static double floor( double x );
		[BackendHintReadNone]
		public extern static float floorf( float x );
		[BackendHintReadNone]
		public extern static float floorf32( float x );
		[BackendHintReadNone]
		public extern static double floorf32x( double x );
		[BackendHintReadNone]
		public extern static double floorf64( double x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 floorf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 floorl( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static double fma( double x, double y, double z );
		[BackendHintReadNone]
		public extern static float fmaf( float x, float y, float z );
		public extern static float fmaf32( float x, float y, float z );
		public extern static double fmaf32x( double x, double y, double z );
		public extern static double fmaf64( double x, double y, double z );
		public extern static LittleEndianIEEE754_80 fmaf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y, LittleEndianIEEE754_80 z );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fmal( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y, LittleEndianIEEE754_80 z );
		[BackendHintReadNone]
		public extern static double fmax( double x, double y );
		[BackendHintReadNone]
		public extern static float fmaxf( float x, float y );
		[BackendHintReadNone]
		public extern static float fmaxf32( float x, float y );
		[BackendHintReadNone]
		public extern static double fmaxf32x( double x, double y );
		[BackendHintReadNone]
		public extern static double fmaxf64( double x, double y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fmaxf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fmaxl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static double fmaxmag( double x, double y );
		[BackendHintReadNone]
		public extern static float fmaxmagf( float x, float y );
		[BackendHintReadNone]
		public extern static float fmaxmagf32( float x, float y );
		[BackendHintReadNone]
		public extern static double fmaxmagf32x( double x, double y );
		[BackendHintReadNone]
		public extern static double fmaxmagf64( double x, double y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fmaxmagf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fmaxmagl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static double fmin( double x, double y );
		[BackendHintReadNone]
		public extern static float fminf( float x, float y );
		[BackendHintReadNone]
		public extern static float fminf32( float x, float y );
		[BackendHintReadNone]
		public extern static double fminf32x( double x, double y );
		[BackendHintReadNone]
		public extern static double fminf64( double x, double y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fminf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fminl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static double fminmag( double x, double y );
		[BackendHintReadNone]
		public extern static float fminmagf( float x, float y );
		[BackendHintReadNone]
		public extern static float fminmagf32( float x, float y );
		[BackendHintReadNone]
		public extern static double fminmagf32x( double x, double y );
		[BackendHintReadNone]
		public extern static double fminmagf64( double x, double y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fminmagf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 fminmagl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double fmod( double x, double y );
		public extern static float fmodf( float x, float y );
		public extern static float fmodf32( float x, float y );
		public extern static double fmodf32x( double x, double y );
		public extern static double fmodf64( double x, double y );
		public extern static LittleEndianIEEE754_80 fmodf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static LittleEndianIEEE754_80 fmodl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double frexp( double x, int* exponent );
		public extern static float frexpf( float x, int* exponent );
		public extern static float frexpf32( float x, int* exponent );
		public extern static double frexpf32x( double x, int* exponent );
		public extern static double frexpf64( double x, int* exponent );
		public extern static LittleEndianIEEE754_80 frexpf64x( LittleEndianIEEE754_80 x, int* exponent );
		public extern static LittleEndianIEEE754_80 frexpl( LittleEndianIEEE754_80 x, int* exponent );
		public extern static long fromfp( double x, int round, uint width );
		public extern static long fromfpf( float x, int round, uint width );
		public extern static long fromfpf32( float x, int round, uint width );
		public extern static long fromfpf32x( double x, int round, uint width );
		public extern static long fromfpf64( double x, int round, uint width );
		public extern static long fromfpf64x( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static long fromfpl( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static long fromfpx( double x, int round, uint width );
		public extern static long fromfpxf( float x, int round, uint width );
		public extern static long fromfpxf32( float x, int round, uint width );
		public extern static long fromfpxf32x( double x, int round, uint width );
		public extern static long fromfpxf64( double x, int round, uint width );
		public extern static long fromfpxf64x( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static long fromfpxl( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static double gamma( double p0 );
		public extern static float gammaf( float p0 );
		public extern static LittleEndianIEEE754_80 gammal( LittleEndianIEEE754_80 p0 );
		public extern static double getpayload( double* x );
		public extern static float getpayloadf( float* x );
		public extern static float getpayloadf32( float* x );
		public extern static double getpayloadf32x( double* x );
		public extern static double getpayloadf64( double* x );
		public extern static LittleEndianIEEE754_80 getpayloadf64x( LittleEndianIEEE754_80* x );
		public extern static LittleEndianIEEE754_80 getpayloadl( LittleEndianIEEE754_80* x );
		public extern static double hypot( double x, double y );
		public extern static float hypotf( float x, float y );
		public extern static float hypotf32( float x, float y );
		public extern static double hypotf32x( double x, double y );
		public extern static double hypotf64( double x, double y );
		public extern static LittleEndianIEEE754_80 hypotf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static LittleEndianIEEE754_80 hypotl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static int ilogb( double x );
		public extern static int ilogbf( float x );
		public extern static int ilogbf32( float x );
		public extern static int ilogbf32x( double x );
		public extern static int ilogbf64( double x );
		public extern static int ilogbf64x( LittleEndianIEEE754_80 x );
		public extern static int ilogbl( LittleEndianIEEE754_80 x );
		public extern static double j0( double p0 );
		public extern static float j0f( float p0 );
		public extern static float j0f32( float p0 );
		public extern static double j0f32x( double p0 );
		public extern static double j0f64( double p0 );
		public extern static LittleEndianIEEE754_80 j0f64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 j0l( LittleEndianIEEE754_80 p0 );
		public extern static double j1( double p0 );
		public extern static float j1f( float p0 );
		public extern static float j1f32( float p0 );
		public extern static double j1f32x( double p0 );
		public extern static double j1f64( double p0 );
		public extern static LittleEndianIEEE754_80 j1f64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 j1l( LittleEndianIEEE754_80 p0 );
		public extern static double jn( int p0, double p1 );
		public extern static float jnf( int p0, float p1 );
		public extern static float jnf32( int p0, float p1 );
		public extern static double jnf32x( int p0, double p1 );
		public extern static double jnf64( int p0, double p1 );
		public extern static LittleEndianIEEE754_80 jnf64x( int p0, LittleEndianIEEE754_80 p1 );
		public extern static LittleEndianIEEE754_80 jnl( int p0, LittleEndianIEEE754_80 p1 );
		public extern static double ldexp( double x, int exponent );
		public extern static float ldexpf( float x, int exponent );
		public extern static float ldexpf32( float x, int exponent );
		public extern static double ldexpf32x( double x, int exponent );
		public extern static double ldexpf64( double x, int exponent );
		public extern static LittleEndianIEEE754_80 ldexpf64x( LittleEndianIEEE754_80 x, int exponent );
		public extern static LittleEndianIEEE754_80 ldexpl( LittleEndianIEEE754_80 x, int exponent );
		public extern static double lgamma( double p0 );
		public extern static double lgamma_r( double p0, int* signgamp );
		public extern static float lgammaf( float p0 );
		public extern static float lgammaf_r( float p0, int* signgamp );
		public extern static float lgammaf32( float p0 );
		public extern static float lgammaf32_r( float p0, int* signgamp );
		public extern static double lgammaf32x( double p0 );
		public extern static double lgammaf32x_r( double p0, int* signgamp );
		public extern static double lgammaf64( double p0 );
		public extern static double lgammaf64_r( double p0, int* signgamp );
		public extern static LittleEndianIEEE754_80 lgammaf64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 lgammaf64x_r( LittleEndianIEEE754_80 p0, int* signgamp );
		public extern static LittleEndianIEEE754_80 lgammal( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 lgammal_r( LittleEndianIEEE754_80 p0, int* signgamp );
		public extern static intptr llogb( double x );
		public extern static intptr llogbf( float x );
		public extern static intptr llogbf32( float x );
		public extern static intptr llogbf32x( double x );
		public extern static intptr llogbf64( double x );
		public extern static intptr llogbf64x( LittleEndianIEEE754_80 x );
		public extern static intptr llogbl( LittleEndianIEEE754_80 x );
		public extern static long llrint( double x );
		public extern static long llrintf( float x );
		public extern static long llrintf32( float x );
		public extern static long llrintf32x( double x );
		public extern static long llrintf64( double x );
		public extern static long llrintf64x( LittleEndianIEEE754_80 x );
		public extern static long llrintl( LittleEndianIEEE754_80 x );
		public extern static long llround( double x );
		public extern static long llroundf( float x );
		public extern static long llroundf32( float x );
		public extern static long llroundf32x( double x );
		public extern static long llroundf64( double x );
		public extern static long llroundf64x( LittleEndianIEEE754_80 x );
		public extern static long llroundl( LittleEndianIEEE754_80 x );
		public extern static double log( double x );
		public extern static double log10( double x );
		public extern static float log10f( float x );
		public extern static float log10f32( float x );
		public extern static double log10f32x( double x );
		public extern static double log10f64( double x );
		public extern static LittleEndianIEEE754_80 log10f64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 log10l( LittleEndianIEEE754_80 x );
		public extern static double log1p( double x );
		public extern static float log1pf( float x );
		public extern static float log1pf32( float x );
		public extern static double log1pf32x( double x );
		public extern static double log1pf64( double x );
		public extern static LittleEndianIEEE754_80 log1pf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 log1pl( LittleEndianIEEE754_80 x );
		public extern static double log2( double x );
		public extern static float log2f( float x );
		public extern static float log2f32( float x );
		public extern static double log2f32x( double x );
		public extern static double log2f64( double x );
		public extern static LittleEndianIEEE754_80 log2f64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 log2l( LittleEndianIEEE754_80 x );
		public extern static double logb( double x );
		public extern static float logbf( float x );
		public extern static float logbf32( float x );
		public extern static double logbf32x( double x );
		public extern static double logbf64( double x );
		public extern static LittleEndianIEEE754_80 logbf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 logbl( LittleEndianIEEE754_80 x );
		public extern static float logf( float x );
		public extern static float logf32( float x );
		public extern static double logf32x( double x );
		public extern static double logf64( double x );
		public extern static LittleEndianIEEE754_80 logf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 logl( LittleEndianIEEE754_80 x );
		public extern static intptr lrint( double x );
		public extern static intptr lrintf( float x );
		public extern static intptr lrintf32( float x );
		public extern static intptr lrintf32x( double x );
		public extern static intptr lrintf64( double x );
		public extern static intptr lrintf64x( LittleEndianIEEE754_80 x );
		public extern static intptr lrintl( LittleEndianIEEE754_80 x );
		public extern static intptr lround( double x );
		public extern static intptr lroundf( float x );
		public extern static intptr lroundf32( float x );
		public extern static intptr lroundf32x( double x );
		public extern static intptr lroundf64( double x );
		public extern static intptr lroundf64x( LittleEndianIEEE754_80 x );
		public extern static intptr lroundl( LittleEndianIEEE754_80 x );
		public extern static double modf( double x, double* iptr );
		public extern static float modff( float x, float* iptr );
		public extern static float modff32( float x, float* iptr );
		public extern static double modff32x( double x, double* iptr );
		public extern static double modff64( double x, double* iptr );
		public extern static LittleEndianIEEE754_80 modff64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80* iptr );
		public extern static LittleEndianIEEE754_80 modfl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80* iptr );
		[BackendHintReadOnly]
		public extern static double nan( sbyte* tagb );
		[BackendHintReadOnly]
		public extern static float nanf( sbyte* tagb );
		public extern static float nanf32( sbyte* tagb );
		public extern static double nanf32x( sbyte* tagb );
		public extern static double nanf64( sbyte* tagb );
		public extern static LittleEndianIEEE754_80 nanf64x( sbyte* tagb );
		[BackendHintReadOnly]
		public extern static LittleEndianIEEE754_80 nanl( sbyte* tagb );
		[BackendHintReadNone]
		public extern static double nearbyint( double x );
		[BackendHintReadNone]
		public extern static float nearbyintf( float x );
		public extern static float nearbyintf32( float x );
		public extern static double nearbyintf32x( double x );
		public extern static double nearbyintf64( double x );
		public extern static LittleEndianIEEE754_80 nearbyintf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 nearbyintl( LittleEndianIEEE754_80 x );
		public extern static double nextafter( double x, double y );
		public extern static float nextafterf( float x, float y );
		public extern static float nextafterf32( float x, float y );
		public extern static double nextafterf32x( double x, double y );
		public extern static double nextafterf64( double x, double y );
		public extern static LittleEndianIEEE754_80 nextafterf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static LittleEndianIEEE754_80 nextafterl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double nextdown( double x );
		public extern static float nextdownf( float x );
		public extern static float nextdownf32( float x );
		public extern static double nextdownf32x( double x );
		public extern static double nextdownf64( double x );
		public extern static LittleEndianIEEE754_80 nextdownf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 nextdownl( LittleEndianIEEE754_80 x );
		public extern static double nexttoward( double x, LittleEndianIEEE754_80 y );
		public extern static float nexttowardf( float x, LittleEndianIEEE754_80 y );
		public extern static LittleEndianIEEE754_80 nexttowardl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double nextup( double x );
		public extern static float nextupf( float x );
		public extern static float nextupf32( float x );
		public extern static double nextupf32x( double x );
		public extern static double nextupf64( double x );
		public extern static LittleEndianIEEE754_80 nextupf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 nextupl( LittleEndianIEEE754_80 x );
		public extern static double pow( double x, double y );
		public extern static float powf( float x, float y );
		public extern static float powf32( float x, float y );
		public extern static double powf32x( double x, double y );
		public extern static double powf64( double x, double y );
		public extern static LittleEndianIEEE754_80 powf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static LittleEndianIEEE754_80 powl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double remainder( double x, double y );
		public extern static float remainderf( float x, float y );
		public extern static float remainderf32( float x, float y );
		public extern static double remainderf32x( double x, double y );
		public extern static double remainderf64( double x, double y );
		public extern static LittleEndianIEEE754_80 remainderf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static LittleEndianIEEE754_80 remainderl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double remquo( double x, double y, int* quo );
		public extern static float remquof( float x, float y, int* quo );
		public extern static float remquof32( float x, float y, int* quo );
		public extern static double remquof32x( double x, double y, int* quo );
		public extern static double remquof64( double x, double y, int* quo );
		public extern static LittleEndianIEEE754_80 remquof64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y, int* quo );
		public extern static LittleEndianIEEE754_80 remquol( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y, int* quo );
		[BackendHintReadNone]
		public extern static double rint( double x );
		[BackendHintReadNone]
		public extern static float rintf( float x );
		public extern static float rintf32( float x );
		public extern static double rintf32x( double x );
		public extern static double rintf64( double x );
		public extern static LittleEndianIEEE754_80 rintf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 rintl( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static double round( double x );
		[BackendHintReadNone]
		public extern static double roundeven( double x );
		[BackendHintReadNone]
		public extern static float roundevenf( float x );
		[BackendHintReadNone]
		public extern static float roundevenf32( float x );
		[BackendHintReadNone]
		public extern static double roundevenf32x( double x );
		[BackendHintReadNone]
		public extern static double roundevenf64( double x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 roundevenf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 roundevenl( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static float roundf( float x );
		[BackendHintReadNone]
		public extern static float roundf32( float x );
		[BackendHintReadNone]
		public extern static double roundf32x( double x );
		[BackendHintReadNone]
		public extern static double roundf64( double x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 roundf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 roundl( LittleEndianIEEE754_80 x );
		public extern static double scalb( double x, double n );
		public extern static float scalbf( float x, float n );
		public extern static LittleEndianIEEE754_80 scalbl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 n );
		public extern static double scalbln( double x, intptr n );
		public extern static float scalblnf( float x, intptr n );
		public extern static float scalblnf32( float x, intptr n );
		public extern static double scalblnf32x( double x, intptr n );
		public extern static double scalblnf64( double x, intptr n );
		public extern static LittleEndianIEEE754_80 scalblnf64x( LittleEndianIEEE754_80 x, intptr n );
		public extern static LittleEndianIEEE754_80 scalblnl( LittleEndianIEEE754_80 x, intptr n );
		public extern static double scalbn( double x, int n );
		public extern static float scalbnf( float x, int n );
		public extern static float scalbnf32( float x, int n );
		public extern static double scalbnf32x( double x, int n );
		public extern static double scalbnf64( double x, int n );
		public extern static LittleEndianIEEE754_80 scalbnf64x( LittleEndianIEEE754_80 x, int n );
		public extern static LittleEndianIEEE754_80 scalbnl( LittleEndianIEEE754_80 x, int n );
		public extern static int setpayload( double* x, double payload );
		public extern static int setpayloadf( float* x, float payload );
		public extern static int setpayloadf32( float* x, float payload );
		public extern static int setpayloadf32x( double* x, double payload );
		public extern static int setpayloadf64( double* x, double payload );
		public extern static int setpayloadf64x( LittleEndianIEEE754_80* x, LittleEndianIEEE754_80 payload );
		public extern static int setpayloadl( LittleEndianIEEE754_80* x, LittleEndianIEEE754_80 payload );
		public extern static int setpayloadsig( double* x, double payload );
		public extern static int setpayloadsigf( float* x, float payload );
		public extern static int setpayloadsigf32( float* x, float payload );
		public extern static int setpayloadsigf32x( double* x, double payload );
		public extern static int setpayloadsigf64( double* x, double payload );
		public extern static int setpayloadsigf64x( LittleEndianIEEE754_80* x, LittleEndianIEEE754_80 payload );
		public extern static int setpayloadsigl( LittleEndianIEEE754_80* x, LittleEndianIEEE754_80 payload );
		public extern static double significand( double x );
		public extern static float significandf( float x );
		public extern static LittleEndianIEEE754_80 significandl( LittleEndianIEEE754_80 x );
		public extern static double sin( double x );
		public extern static void sincos( double x, double* sinx, double* cosx );
		public extern static void sincosf( float x, float* sinx, float* cosx );
		public extern static void sincosf32( float x, float* sinx, float* cosx );
		public extern static void sincosf32x( double x, double* sinx, double* cosx );
		public extern static void sincosf64( double x, double* sinx, double* cosx );
		public extern static void sincosf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80* sinx, LittleEndianIEEE754_80* cosx );
		public extern static void sincosl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80* sinx, LittleEndianIEEE754_80* cosx );
		public extern static float sinf( float x );
		public extern static float sinf32( float x );
		public extern static double sinf32x( double x );
		public extern static double sinf64( double x );
		public extern static LittleEndianIEEE754_80 sinf64x( LittleEndianIEEE754_80 x );
		public extern static double sinh( double x );
		public extern static float sinhf( float x );
		public extern static float sinhf32( float x );
		public extern static double sinhf32x( double x );
		public extern static double sinhf64( double x );
		public extern static LittleEndianIEEE754_80 sinhf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 sinhl( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 sinl( LittleEndianIEEE754_80 x );
		public extern static double sqrt( double x );
		public extern static float sqrtf( float x );
		public extern static float sqrtf32( float x );
		public extern static double sqrtf32x( double x );
		public extern static double sqrtf64( double x );
		public extern static LittleEndianIEEE754_80 sqrtf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 sqrtl( LittleEndianIEEE754_80 x );
		public extern static double tan( double x );
		public extern static float tanf( float x );
		public extern static float tanf32( float x );
		public extern static double tanf32x( double x );
		public extern static double tanf64( double x );
		public extern static LittleEndianIEEE754_80 tanf64x( LittleEndianIEEE754_80 x );
		public extern static double tanh( double x );
		public extern static float tanhf( float x );
		public extern static float tanhf32( float x );
		public extern static double tanhf32x( double x );
		public extern static double tanhf64( double x );
		public extern static LittleEndianIEEE754_80 tanhf64x( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 tanhl( LittleEndianIEEE754_80 x );
		public extern static LittleEndianIEEE754_80 tanl( LittleEndianIEEE754_80 x );
		public extern static double tgamma( double p0 );
		public extern static float tgammaf( float p0 );
		public extern static float tgammaf32( float p0 );
		public extern static double tgammaf32x( double p0 );
		public extern static double tgammaf64( double p0 );
		public extern static LittleEndianIEEE754_80 tgammaf64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 tgammal( LittleEndianIEEE754_80 p0 );
		[BackendHintReadNone]
		public extern static int totalorder( double x, double y );
		[BackendHintReadNone]
		public extern static int totalorderf( float x, float y );
		[BackendHintReadNone]
		public extern static int totalorderf32( float x, float y );
		[BackendHintReadNone]
		public extern static int totalorderf32x( double x, double y );
		[BackendHintReadNone]
		public extern static int totalorderf64( double x, double y );
		[BackendHintReadNone]
		public extern static int totalorderf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static int totalorderl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static int totalordermag( double x, double y );
		[BackendHintReadNone]
		public extern static int totalordermagf( float x, float y );
		[BackendHintReadNone]
		public extern static int totalordermagf32( float x, float y );
		[BackendHintReadNone]
		public extern static int totalordermagf32x( double x, double y );
		[BackendHintReadNone]
		public extern static int totalordermagf64( double x, double y );
		[BackendHintReadNone]
		public extern static int totalordermagf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static int totalordermagl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		[BackendHintReadNone]
		public extern static double trunc( double x );
		[BackendHintReadNone]
		public extern static float truncf( float x );
		[BackendHintReadNone]
		public extern static float truncf32( float x );
		[BackendHintReadNone]
		public extern static double truncf32x( double x );
		[BackendHintReadNone]
		public extern static double truncf64( double x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 truncf64x( LittleEndianIEEE754_80 x );
		[BackendHintReadNone]
		public extern static LittleEndianIEEE754_80 truncl( LittleEndianIEEE754_80 x );
		public extern static ulong ufromfp( double x, int round, uint width );
		public extern static ulong ufromfpf( float x, int round, uint width );
		public extern static ulong ufromfpf32( float x, int round, uint width );
		public extern static ulong ufromfpf32x( double x, int round, uint width );
		public extern static ulong ufromfpf64( double x, int round, uint width );
		public extern static ulong ufromfpf64x( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static ulong ufromfpl( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static ulong ufromfpx( double x, int round, uint width );
		public extern static ulong ufromfpxf( float x, int round, uint width );
		public extern static ulong ufromfpxf32( float x, int round, uint width );
		public extern static ulong ufromfpxf32x( double x, int round, uint width );
		public extern static ulong ufromfpxf64( double x, int round, uint width );
		public extern static ulong ufromfpxf64x( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static ulong ufromfpxl( LittleEndianIEEE754_80 x, int round, uint width );
		public extern static double y0( double p0 );
		public extern static float y0f( float p0 );
		public extern static float y0f32( float p0 );
		public extern static double y0f32x( double p0 );
		public extern static double y0f64( double p0 );
		public extern static LittleEndianIEEE754_80 y0f64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 y0l( LittleEndianIEEE754_80 p0 );
		public extern static double y1( double p0 );
		public extern static float y1f( float p0 );
		public extern static float y1f32( float p0 );
		public extern static double y1f32x( double p0 );
		public extern static double y1f64( double p0 );
		public extern static LittleEndianIEEE754_80 y1f64x( LittleEndianIEEE754_80 p0 );
		public extern static LittleEndianIEEE754_80 y1l( LittleEndianIEEE754_80 p0 );
		public extern static double yn( int p0, double p1 );
		public extern static float ynf( int p0, float p1 );
		public extern static float ynf32( int p0, float p1 );
		public extern static double ynf32x( int p0, double p1 );
		public extern static double ynf64( int p0, double p1 );
		public extern static LittleEndianIEEE754_80 ynf64x( int p0, LittleEndianIEEE754_80 p1 );
		public extern static LittleEndianIEEE754_80 ynl( int p0, LittleEndianIEEE754_80 p1 );

		public extern static double daddl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double ddivl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double dmull( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double dsubl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float f32addf32x( double x, double y );
		public extern static float f32addf64( double x, double y );
		public extern static float f32addf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float f32divf32x( double x, double y );
		public extern static float f32divf64( double x, double y );
		public extern static float f32divf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float f32mulf32x( double x, double y );
		public extern static float f32mulf64( double x, double y );
		public extern static float f32mulf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float f32subf32x( double x, double y );
		public extern static float f32subf64( double x, double y );
		public extern static float f32subf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f32xaddf64( double x, double y );
		public extern static double f32xaddf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f32xdivf64( double x, double y );
		public extern static double f32xdivf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f32xmulf64( double x, double y );
		public extern static double f32xmulf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f32xsubf64( double x, double y );
		public extern static double f32xsubf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f64addf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f64divf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f64mulf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static double f64subf64x( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float fadd( double x, double y );
		public extern static float faddl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float fdiv( double x, double y );
		public extern static float fdivl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float fmul( double x, double y );
		public extern static float fmull( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );
		public extern static float fsub( double x, double y );
		public extern static float fsubl( LittleEndianIEEE754_80 x, LittleEndianIEEE754_80 y );

		[BackendHintReadNone]
		public extern static int __iscanonicall( LittleEndianIEEE754_80 x );
	}
	[ExternLibrary( Image = "/usr/lib/libanl.so.1" )]
	public static partial struct AnlApi {
		public extern static int gai_cancel( gaicb* gaicbp );
		public extern static int gai_error( gaicb* req );
		public extern static int gai_suspend( gaicb** list, int ent, timespec* timeout );
		public extern static int getaddrinfo_a( int mode, gaicb** list, int ent, sigevent* sig );
	}
	[ExternLibrary( Image = "/usr/lib/libresolv.so.2" )]
	public static partial struct ResolvApi {
	}
	[ExternLibrary( Image = "/usr/lib/libutil.so.1" )]
	public static partial struct UtilApi {
	}
	[ExternLibrary( Image = "/usr/lib/libcrypt.so.1" )]
	public static partial struct CryptApi {
		public extern static sbyte* crypt( sbyte* key, sbyte* salt );
	}
	[ExternLibrary( Image = "/usr/lib/libpthread.so.0" )]
	public static partial struct PthreadsApi {
		public extern static int pthread_kill( pthread_t threadid, SignalCode signo );
		public extern static int pthread_sigmask( ApplySignalCommand how, sigset_t* newmask, sigset_t* oldmask );
		public extern static int pthread_sigqueue( pthread_t threadid, SignalCode signo, void* value );

		public extern static void __pthread_register_cancel( __pthread_unwind_buf_t* buf );
		public extern static void __pthread_register_cancel_defer( __pthread_unwind_buf_t* buf );
		public extern static void __pthread_unregister_cancel( __pthread_unwind_buf_t* buf );
		public extern static void __pthread_unregister_cancel_restore( __pthread_unwind_buf_t* buf );
		public extern static void __pthread_unwind_next( __pthread_unwind_buf_t* buf );
		public extern static int pthread_attr_getaffinity_np( pthread_attr_t* attr, uint cpusetsize, cpu_set_t* cpuset );
		public extern static int pthread_attr_getguardsize( pthread_attr_t* attr, uint* guardsize );
		public extern static int pthread_attr_getstack( pthread_attr_t* attr, void** stackaddr, uint* stacksize );
		public extern static int pthread_attr_getstacksize( pthread_attr_t* attr, uint* stacksize );
		public extern static int pthread_attr_setaffinity_np( pthread_attr_t* attr, uint cpusetsize, cpu_set_t* cpuset );
		public extern static int pthread_attr_setguardsize( pthread_attr_t* attr, uint guardsize );
		public extern static int pthread_attr_setstack( pthread_attr_t* attr, void* stackaddr, uint stacksize );
		public extern static int pthread_attr_setstacksize( pthread_attr_t* attr, uint stacksize );
		public extern static int pthread_barrier_destroy( pthread_barrier_t* barrier );
		public extern static int pthread_barrier_init( pthread_barrier_t* barrier, pthread_barrierattr_t* attr, uint count );
		public extern static int pthread_barrier_wait( pthread_barrier_t* barrier );
		public extern static int pthread_barrierattr_destroy( pthread_barrierattr_t* attr );
		public extern static int pthread_barrierattr_getpshared( pthread_barrierattr_t* attr, int* pshared );
		public extern static int pthread_barrierattr_init( pthread_barrierattr_t* attr );
		public extern static int pthread_barrierattr_setpshared( pthread_barrierattr_t* attr, int pshared );
		public extern static int pthread_cancel( pthread_t th );
		public extern static int pthread_condattr_getclock( pthread_condattr_t* attr, int* clockId );
		public extern static int pthread_condattr_getpshared( pthread_condattr_t* attr, int* pshared );
		public extern static int pthread_condattr_setclock( pthread_condattr_t* attr, int clockId );
		public extern static int pthread_condattr_setpshared( pthread_condattr_t* attr, int pshared );
		public extern static int pthread_create( pthread_t* newthread, pthread_attr_t* attr, Functors.Func<void*, void*> startRoutine, void* arg );
		public extern static int pthread_detach( pthread_t th );
		public extern static int pthread_getaffinity_np( pthread_t th, uint cpusetsize, cpu_set_t* cpuset );
		public extern static int pthread_getattr_default_np( pthread_attr_t* attr );
		public extern static int pthread_getattr_np( pthread_t th, pthread_attr_t* attr );
		public extern static int pthread_getconcurrency();
		public extern static int pthread_getcpuclockid( pthread_t threadId, int* clockId );
		public extern static int pthread_getname_np( pthread_t targetThread, sbyte* buf, uint buflen );
		public extern static void* pthread_getspecific( pthread_key_t key );
		public extern static int pthread_join( pthread_t th, void** threadReturn );
		public extern static int pthread_key_create( pthread_key_t* key, Functors.Action<void*> destrFunction );
		public extern static int pthread_key_delete( pthread_key_t key );
		public extern static int pthread_mutex_consistent( pthread_mutex_t* mutex );
		public extern static int pthread_mutex_consistent_np( pthread_mutex_t* mutex );
		public extern static int pthread_mutex_getprioceiling( pthread_mutex_t* mutex, int* prioceiling );
		public extern static int pthread_mutex_setprioceiling( pthread_mutex_t* mutex, int prioceiling, int* oldCeiling );
		public extern static int pthread_mutex_timedlock( pthread_mutex_t* mutex, timespec* abstime );
		public extern static int pthread_mutex_trylock( pthread_mutex_t* mutex );
		public extern static int pthread_mutexattr_destroy( pthread_mutexattr_t* attr );
		public extern static int pthread_mutexattr_getprioceiling( pthread_mutexattr_t* attr, int* prioceiling );
		public extern static int pthread_mutexattr_getprotocol( pthread_mutexattr_t* attr, int* protocol );
		public extern static int pthread_mutexattr_getpshared( pthread_mutexattr_t* attr, Boolean32* pshared );
		public extern static int pthread_mutexattr_getrobust( pthread_mutexattr_t* attr, int* robustness );
		public extern static int pthread_mutexattr_getrobust_np( pthread_mutexattr_t* attr, int* robustness );
		public extern static int pthread_mutexattr_gettype( pthread_mutexattr_t* attr, MutexKind* kind );
		public extern static int pthread_mutexattr_init( pthread_mutexattr_t* attr );
		public extern static int pthread_mutexattr_setprioceiling( pthread_mutexattr_t* attr, int prioceiling );
		public extern static int pthread_mutexattr_setprotocol( pthread_mutexattr_t* attr, int protocol );
		public extern static int pthread_mutexattr_setpshared( pthread_mutexattr_t* attr, Boolean32 pshared );
		public extern static int pthread_mutexattr_setrobust( pthread_mutexattr_t* attr, int robustness );
		public extern static int pthread_mutexattr_setrobust_np( pthread_mutexattr_t* attr, int robustness );
		public extern static int pthread_mutexattr_settype( pthread_mutexattr_t* attr, MutexKind kind );
		public extern static int pthread_once( int* onceControl, Functors.Action initRoutine );
		public extern static int pthread_rwlock_destroy( pthread_rwlock_t* rwlock );
		public extern static int pthread_rwlock_init( pthread_rwlock_t* rwlock, pthread_rwlockattr_t* attr );
		public extern static int pthread_rwlock_rdlock( pthread_rwlock_t* rwlock );
		public extern static int pthread_rwlock_timedrdlock( pthread_rwlock_t* rwlock, timespec& abstime );
		public extern static int pthread_rwlock_timedwrlock( pthread_rwlock_t* rwlock, timespec& abstime );
		public extern static int pthread_rwlock_tryrdlock( pthread_rwlock_t* rwlock );
		public extern static int pthread_rwlock_trywrlock( pthread_rwlock_t* rwlock );
		public extern static int pthread_rwlock_unlock( pthread_rwlock_t* rwlock );
		public extern static int pthread_rwlock_wrlock( pthread_rwlock_t* rwlock );
		public extern static int pthread_rwlockattr_destroy( pthread_rwlockattr_t* attr );
		public extern static int pthread_rwlockattr_getkind_np( pthread_rwlockattr_t* attr, int* pref );
		public extern static int pthread_rwlockattr_getpshared( pthread_rwlockattr_t* attr, Boolean32& pshared );
		public extern static int pthread_rwlockattr_init( pthread_rwlockattr_t* attr );
		public extern static int pthread_rwlockattr_setkind_np( pthread_rwlockattr_t* attr, int pref );
		public extern static int pthread_rwlockattr_setpshared( pthread_rwlockattr_t* attr, Boolean32 pshared );
		public extern static int pthread_setaffinity_np( pthread_t th, uint cpusetsize, cpu_set_t* cpuset );
		public extern static int pthread_setattr_default_np( pthread_attr_t* attr );
		public extern static int pthread_setconcurrency( int level );
		public extern static int pthread_setname_np( pthread_t targetThread, CUtf8String name );
		public extern static int pthread_setschedprio( pthread_t targetThread, int prio );
		public extern static int pthread_setspecific( pthread_key_t key, void* pointer );
		public extern static int pthread_spin_destroy( pthread_spinlock_t* lock );
		public extern static int pthread_spin_init( pthread_spinlock_t* lock, Boolean32 pshared );
		public extern static int pthread_spin_lock( pthread_spinlock_t* lock );
		public extern static int pthread_spin_trylock( pthread_spinlock_t* lock );
		public extern static int pthread_spin_unlock( pthread_spinlock_t* lock );
		public extern static void pthread_testcancel();
		public extern static int pthread_timedjoin_np( pthread_t th, void** threadReturn, timespec* abstime );
		public extern static int pthread_tryjoin_np( pthread_t th, void** threadReturn );
		public extern static int pthread_yield();

		public extern static int sem_close( sem_t* sem );
		public extern static int sem_destroy( sem_t* sem );
		public extern static int sem_getvalue( sem_t* sem, int* sval );
		public extern static int sem_init( sem_t* sem, int pshared, uint value );
		public extern static int sem_post( sem_t* sem );
		public extern static int sem_timedwait( sem_t* sem, timespec& abstime );
		public extern static int sem_trywait( sem_t* sem );
		public extern static int sem_unlink( CUtf8String name );
		public extern static int sem_wait( sem_t* sem );
	}
	[ExternLibrary( Image = "/usr/lib/audit/sotruss-lib.so" )]
	public static partial struct SoTrussApi {
		public extern static uint la_i86_gnu_pltenter( Elf32_Sym* sym, uint ndx, uint* refcook, uint* defcook, La_i86_regs* regs, uint* flags, CUtf8String symname, intptr* framesizep );
		public extern static uint la_i86_gnu_pltexit( Elf32_Sym* sym, uint ndx, uint* refcook, uint* defcook, La_i86_regs* inregs, La_i86_retval* outregs, CUtf8String symname );

		public extern static uint la_objopen( link_map* map, intptr lmid, uint* cookie );
		public extern static uint la_version( uint version );
	}
	public enum __itimer_which : uint {
		ITIMER_REAL =    0,
		ITIMER_VIRTUAL = 1,
		ITIMER_PROF =    2,
	}
	public enum __pid_type : uint {
		F_OWNER_TID =  0,
		F_OWNER_PID =  1,
		F_OWNER_PGRP = 2,
		F_OWNER_GID =  2,
	}
	public enum __socket_type : uint {
		SOCK_STREAM =       1,
		SOCK_DGRAM =        2,
		SOCK_RAW =          3,
		SOCK_RDM =          4,
		SOCK_SEQPACKET =    5,
		SOCK_DCCP =         6,
		SOCK_PACKET =      10,
		SOCK_CLOEXEC = 524288,
		SOCK_NONBLOCK =  2048,
	}
	public enum AccessTest : int {
		F_OK = 0,
		X_OK = 1,
		W_OK = 2,
		R_OK = 4,
	}
	public enum ApplySignalCommand : uint {
		SIG_BLOCK =   0,
		SIG_UNBLOCK = 1,
		SIG_SETMASK = 2,
	}
	public enum AuxVectorKind : int {
		AT_NULL =               0,
		AT_IGNORE =             1,
		AT_EXECFD =             2,
		AT_PHDR =               3,
		AT_PHENT =              4,
		AT_PHNUM =              5,
		AT_PAGESZ =             6,
		AT_BASE =               7,
		AT_FLAGS =              8,
		AT_ENTRY =              9,
		AT_NOTELF =            10,
		AT_UID =               11,
		AT_EUID =              12,
		AT_GID =               13,
		AT_EGID =              14,
		AT_PLATFORM =          15,
		AT_HWCAP =             16,
		AT_CLKTCK =            17,
		AT_FPUCW =             18,
		AT_DCACHEBSIZE =       19,
		AT_ICACHEBSIZE =       20,
		AT_UCACHEBSIZE =       21,
		AT_IGNOREPPC =         22,
		AT_SECURE =            23,
		AT_BASE_PLATFORM =     24,
		AT_RANDOM =            25,
		AT_HWCAP2 =            26,
		AT_EXECFN =            31,
		AT_SYSINFO =           32,
		AT_SYSINFO_EHDR =      33,
		AT_L1I_CACHESHAPE =    34,
		AT_L1D_CACHESHAPE =    35,
		AT_L2_CACHESHAPE =     36,
		AT_L3_CACHESHAPE =     37,
		AT_L1I_CACHESIZE =     40,
		AT_L1I_CACHEGEOMETRY = 41,
		AT_L1D_CACHESIZE =     42,
		AT_L1D_CACHEGEOMETRY = 43,
		AT_L2_CACHESIZE =      44,
		AT_L2_CACHEGEOMETRY =  45,
		AT_L3_CACHESIZE =      46,
		AT_L3_CACHEGEOMETRY =  47,
	}
	public enum cap_flag_t : uint {
		CAP_EFFECTIVE =   0,
		CAP_PERMITTED =   1,
		CAP_INHERITABLE = 2,
	}
	public enum cap_flag_value_t : uint {
		CAP_CLEAR = 0,
		CAP_SET =   1,
	}
	public enum ClockType : int {
		CLOCK_REALTIME =           0,
		CLOCK_MONOTONIC =          1,
		CLOCK_PROCESS_CPUTIME_ID = 2,
		CLOCK_THREAD_CPUTIME_ID =  3,
		CLOCK_MONOTONIC_RAW =      4,
		CLOCK_REALTIME_COARSE =    5,
		CLOCK_MONOTONIC_COARSE =   6,
		CLOCK_BOOTTIME =           7,
		CLOCK_REALTIME_ALARM =     8,
		CLOCK_BOOTTIME_ALARM =     9,
		CLOCK_TAI =               11,
	}
	public enum ConfigurationProperty : uint {
		_PC_LINK_MAX =            0,
		_PC_MAX_CANON =           1,
		_PC_MAX_INPUT =           2,
		_PC_NAME_MAX =            3,
		_PC_PATH_MAX =            4,
		_PC_PIPE_BUF =            5,
		_PC_CHOWN_RESTRICTED =    6,
		_PC_NO_TRUNC =            7,
		_PC_VDISABLE =            8,
		_PC_SYNC_IO =             9,
		_PC_ASYNC_IO =           10,
		_PC_PRIO_IO =            11,
		_PC_SOCK_MAXBUF =        12,
		_PC_FILESIZEBITS =       13,
		_PC_REC_INCR_XFER_SIZE = 14,
		_PC_REC_MAX_XFER_SIZE =  15,
		_PC_REC_MIN_XFER_SIZE =  16,
		_PC_REC_XFER_ALIGN =     17,
		_PC_ALLOC_SIZE_MIN =     18,
		_PC_SYMLINK_MAX =        19,
		_PC_2_SYMLINKS =         20,
	}
	public enum DirectoryEntryType : uint {
		DT_UNKNOWN = 0,
		DT_FIFO =    1,
		DT_CHR =     2,
		DT_DIR =     4,
		DT_BLK =     6,
		DT_REG =     8,
		DT_LNK =    10,
		DT_SOCK =   12,
		DT_WHT =    14,
	}
	[Flags]
	public enum DlFlags1 : uint {
		None =            0,
		RTLD_DL_SYMENT =  1,
		RTLD_DL_LINKMAP = 2,
	}
	public enum DlFlags2 : uint {
		RTLD_DI_LMID =        1,
		RTLD_DI_LINKMAP =     2,
		RTLD_DI_CONFIGADDR =  3,
		RTLD_DI_SERINFO =     4,
		RTLD_DI_SERINFOSIZE = 5,
		RTLD_DI_ORIGIN =      6,
		RTLD_DI_PROFILENAME = 7,
		RTLD_DI_PROFILEOUT =  8,
		RTLD_DI_TLS_MODID =   9,
		RTLD_DI_TLS_DATA =   10,
		RTLD_DI_MAX =        10,
	}
	[Flags]
	public enum DynamicLibraryLoadFlag : int {
		RTLD_LOCAL =        0,
		RTLD_LAZY =         1,
		RTLD_NOW =          2,
		RTLD_NOLOAD =       4,
		RTLD_DEEPBIND =     8,
		RTLD_GLOBAL =     256,
		RTLD_NODELETE =  4096,
		RTLD_BINDING_MASK = 3,
	}
	public enum ElfArchitectureKind : ushort {
		EM_NONE =            0,
		EM_M32 =             1,
		EM_SPARC =           2,
		EM_386 =             3,
		EM_68K =             4,
		EM_88K =             5,
		EM_IAMCU =           6,
		EM_860 =             7,
		EM_MIPS =            8,
		EM_S370 =            9,
		EM_MIPS_RS3_LE =    10,
		EM_PARISC =         15,
		EM_VPP500 =         17,
		EM_SPARC32PLUS =    18,
		EM_960 =            19,
		EM_PPC =            20,
		EM_PPC64 =          21,
		EM_S390 =           22,
		EM_SPU =            23,
		EM_V800 =           36,
		EM_FR20 =           37,
		EM_RH32 =           38,
		EM_RCE =            39,
		EM_ARM =            40,
		EM_FAKE_ALPHA =     41,
		EM_SH =             42,
		EM_SPARCV9 =        43,
		EM_TRICORE =        44,
		EM_ARC =            45,
		EM_H8_300 =         46,
		EM_H8_300H =        47,
		EM_H8S =            48,
		EM_H8_500 =         49,
		EM_IA_64 =          50,
		EM_MIPS_X =         51,
		EM_COLDFIRE =       52,
		EM_68HC12 =         53,
		EM_MMA =            54,
		EM_PCP =            55,
		EM_NCPU =           56,
		EM_NDR1 =           57,
		EM_STARCORE =       58,
		EM_ME16 =           59,
		EM_ST100 =          60,
		EM_TINYJ =          61,
		EM_X86_64 =         62,
		EM_PDSP =           63,
		EM_PDP10 =          64,
		EM_PDP11 =          65,
		EM_FX66 =           66,
		EM_ST9PLUS =        67,
		EM_ST7 =            68,
		EM_68HC16 =         69,
		EM_68HC11 =         70,
		EM_68HC08 =         71,
		EM_68HC05 =         72,
		EM_SVX =            73,
		EM_ST19 =           74,
		EM_VAX =            75,
		EM_CRIS =           76,
		EM_JAVELIN =        77,
		EM_FIREPATH =       78,
		EM_ZSP =            79,
		EM_MMIX =           80,
		EM_HUANY =          81,
		EM_PRISM =          82,
		EM_AVR =            83,
		EM_FR30 =           84,
		EM_D10V =           85,
		EM_D30V =           86,
		EM_V850 =           87,
		EM_M32R =           88,
		EM_MN10300 =        89,
		EM_MN10200 =        90,
		EM_PJ =             91,
		EM_OPENRISC =       92,
		EM_ARC_A5 =         93,
		EM_ARC_COMPACT =    93,
		EM_XTENSA =         94,
		EM_VIDEOCORE =      95,
		EM_TMM_GPP =        96,
		EM_NS32K =          97,
		EM_TPC =            98,
		EM_SNP1K =          99,
		EM_ST200 =         100,
		EM_IP2K =          101,
		EM_MAX =           102,
		EM_CR =            103,
		EM_F2MC16 =        104,
		EM_MSP430 =        105,
		EM_BLACKFIN =      106,
		EM_SE_C33 =        107,
		EM_SEP =           108,
		EM_ARCA =          109,
		EM_UNICORE =       110,
		EM_EXCESS =        111,
		EM_DXP =           112,
		EM_ALTERA_NIOS2 =  113,
		EM_CRX =           114,
		EM_XGATE =         115,
		EM_C166 =          116,
		EM_M16C =          117,
		EM_DSPIC30F =      118,
		EM_CE =            119,
		EM_M32C =          120,
		EM_TSK3000 =       131,
		EM_RS08 =          132,
		EM_SHARC =         133,
		EM_ECOG2 =         134,
		EM_SCORE7 =        135,
		EM_DSP24 =         136,
		EM_VIDEOCORE3 =    137,
		EM_LATTICEMICO32 = 138,
		EM_SE_C17 =        139,
		EM_TI_C6000 =      140,
		EM_TI_C2000 =      141,
		EM_TI_C5500 =      142,
		EM_TI_ARP32 =      143,
		EM_TI_PRU =        144,
		EM_MMDSP_PLUS =    160,
		EM_CYPRESS_M8C =   161,
		EM_R32C =          162,
		EM_TRIMEDIA =      163,
		EM_QDSP6 =         164,
		EM_8051 =          165,
		EM_STXP7X =        166,
		EM_NDS32 =         167,
		EM_ECOG1X =        168,
		EM_MAXQ30 =        169,
		EM_XIMO16 =        170,
		EM_MANIK =         171,
		EM_CRAYNV2 =       172,
		EM_RX =            173,
		EM_METAG =         174,
		EM_MCST_ELBRUS =   175,
		EM_ECOG16 =        176,
		EM_CR16 =          177,
		EM_ETPU =          178,
		EM_SLE9X =         179,
		EM_L10M =          180,
		EM_K10M =          181,
		EM_AARCH64 =       183,
		EM_AVR32 =         185,
		EM_STM8 =          186,
		EM_TILE64 =        187,
		EM_TILEPRO =       188,
		EM_MICROBLAZE =    189,
		EM_CUDA =          190,
		EM_TILEGX =        191,
		EM_CLOUDSHIELD =   192,
		EM_COREA_1ST =     193,
		EM_COREA_2ND =     194,
		EM_ARC_COMPACT2 =  195,
		EM_OPEN8 =         196,
		EM_RL78 =          197,
		EM_VIDEOCORE5 =    198,
		EM_78KOR =         199,
		EM_56800EX =       200,
		EM_BA1 =           201,
		EM_BA2 =           202,
		EM_XCORE =         203,
		EM_MCHP_PIC =      204,
		EM_KM32 =          210,
		EM_KMX32 =         211,
		EM_EMX16 =         212,
		EM_EMX8 =          213,
		EM_KVARC =         214,
		EM_CDP =           215,
		EM_COGE =          216,
		EM_COOL =          217,
		EM_NORC =          218,
		EM_CSR_KALIMBA =   219,
		EM_Z80 =           220,
		EM_VISIUM =        221,
		EM_FT32 =          222,
		EM_MOXIE =         223,
		EM_AMDGPU =        224,
		EM_RISCV =         243,
		EM_BPF =           247,
		EM_NUM =           248,
		EM_ALPHA =       36902,
	}
	public enum ElfFileKind : ushort {
		ET_NONE =       0,
		ET_REL =        1,
		ET_EXEC =       2,
		ET_DYN =        3,
		ET_CORE =       4,
		ET_NUM =        5,
		ET_LOOS =   65024,
		ET_HIOS =   65279,
		ET_LOPROC = 65280,
		ET_HIPROC = 65535,
	}
	public enum ElfProgramHeaderType : uint {
		PT_NULL =                       0,
		PT_LOAD =                       1,
		PT_DYNAMIC =                    2,
		PT_INTERP =                     3,
		PT_NOTE =                       4,
		PT_SHLIB =                      5,
		PT_PHDR =                       6,
		PT_TLS =                        7,
		PT_NUM =                        8,
		PT_HP_TLS =            1610612736,
		PT_LOOS =              1610612736,
		PT_HP_CORE_NONE =      1610612737,
		PT_HP_CORE_VERSION =   1610612738,
		PT_HP_CORE_KERNEL =    1610612739,
		PT_HP_CORE_COMM =      1610612740,
		PT_HP_CORE_PROC =      1610612741,
		PT_HP_CORE_LOADABLE =  1610612742,
		PT_HP_CORE_STACK =     1610612743,
		PT_HP_CORE_SHM =       1610612744,
		PT_HP_CORE_MMF =       1610612745,
		PT_HP_PARALLEL =       1610612752,
		PT_HP_FASTBIND =       1610612753,
		PT_HP_OPT_ANNOT =      1610612754,
		PT_IA_64_HP_OPT_ANOT = 1610612754,
		PT_HP_HSL_ANNOT =      1610612755,
		PT_IA_64_HP_HSL_ANOT = 1610612755,
		PT_HP_STACK =          1610612756,
		PT_IA_64_HP_STACK =    1610612756,
		PT_GNU_EH_FRAME =      1685382480,
		PT_GNU_STACK =         1685382481,
		PT_GNU_RELRO =         1685382482,
		PT_LOSUNW =            1879048186,
		PT_SUNWBSS =           1879048186,
		PT_SUNWSTACK =         1879048187,
		PT_HIOS =              1879048191,
		PT_HISUNW =            1879048191,
		PT_IA_64_ARCHEXT =     1879048192,
		PT_LOPROC =            1879048192,
		PT_MIPS_REGINFO =      1879048192,
		PT_PARISC_ARCHEXT =    1879048192,
		PT_ARM_EXIDX =         1879048193,
		PT_IA_64_UNWIND =      1879048193,
		PT_MIPS_RTPROC =       1879048193,
		PT_PARISC_UNWIND =     1879048193,
		PT_MIPS_OPTIONS =      1879048194,
		PT_MIPS_ABIFLAGS =     1879048195,
		PT_HIPROC =            2147483647,
	}
	[Flags]
	public enum ElfSectionFlags : uint {
		None =                      0,
		SHF_WRITE =                 1,
		SHF_ALLOC =                 2,
		SHF_EXECINSTR =             4,
		SHF_MERGE =                16,
		SHF_STRINGS =              32,
		SHF_INFO_LINK =            64,
		SHF_LINK_ORDER =          128,
		SHF_OS_NONCONFORMING =    256,
		SHF_GROUP =               512,
		SHF_TLS =                1024,
		SHF_COMPRESSED =         2048,
		SHF_MIPS_NODUPE =    16777216,
		SHF_MIPS_NAMES =     33554432,
		SHF_MIPS_LOCAL =     67108864,
		SHF_MIPS_NOSTRIP =  134217728,
		SHF_ALPHA_GPREL =   268435456,
		SHF_ARM_ENTRYSECT = 268435456,
		SHF_IA_64_SHORT =   268435456,
		SHF_MIPS_GPREL =    268435456,
		SHF_IA_64_NORECOV = 536870912,
		SHF_MIPS_MERGE =    536870912,
		SHF_PARISC_SHORT =  536870912,
		SHF_MIPS_ADDR =    1073741824,
		SHF_ORDERED =      1073741824,
		SHF_PARISC_HUGE =  1073741824,
		SHF_ARM_COMDEF =   2147483648,
		SHF_EXCLUDE =      2147483648,
		SHF_MIPS_STRINGS = 2147483648,
		SHF_PARISC_SBP =   2147483648,
		SHF_MASKPROC =     4026531840,
		SHF_MASKOS =        267386880,
	}
	public enum ElfSectionKind : uint {
		SHT_NULL =                        0,
		SHT_PROGBITS =                    1,
		SHT_SYMTAB =                      2,
		SHT_STRTAB =                      3,
		SHT_RELA =                        4,
		SHT_HASH =                        5,
		SHT_DYNAMIC =                     6,
		SHT_NOTE =                        7,
		SHT_NOBITS =                      8,
		SHT_REL =                         9,
		SHT_SHLIB =                      10,
		SHT_DYNSYM =                     11,
		SHT_INIT_ARRAY =                 14,
		SHT_FINI_ARRAY =                 15,
		SHT_PREINIT_ARRAY =              16,
		SHT_GROUP =                      17,
		SHT_SYMTAB_SHNDX =               18,
		SHT_NUM =                        19,
		SHT_LOOS =               1610612736,
		SHT_GNU_ATTRIBUTES =     1879048181,
		SHT_GNU_HASH =           1879048182,
		SHT_GNU_LIBLIST =        1879048183,
		SHT_CHECKSUM =           1879048184,
		SHT_LOSUNW =             1879048186,
		SHT_SUNW_move =          1879048186,
		SHT_SUNW_COMDAT =        1879048187,
		SHT_SUNW_syminfo =       1879048188,
		SHT_GNU_verdef =         1879048189,
		SHT_GNU_verneed =        1879048190,
		SHT_GNU_versym =         1879048191,
		SHT_HIOS =               1879048191,
		SHT_HISUNW =             1879048191,
		SHT_IA_64_EXT =          1879048192,
		SHT_LOPROC =             1879048192,
		SHT_MIPS_LIBLIST =       1879048192,
		SHT_PARISC_EXT =         1879048192,
		SHT_ALPHA_DEBUG =        1879048193,
		SHT_ARM_EXIDX =          1879048193,
		SHT_IA_64_UNWIND =       1879048193,
		SHT_MIPS_MSYM =          1879048193,
		SHT_PARISC_UNWIND =      1879048193,
		SHT_X86_64_UNWIND =      1879048193,
		SHT_ALPHA_REGINFO =      1879048194,
		SHT_ARM_PREEMPTMAP =     1879048194,
		SHT_MIPS_CONFLICT =      1879048194,
		SHT_PARISC_DOC =         1879048194,
		SHT_ARM_ATTRIBUTES =     1879048195,
		SHT_MIPS_GPTAB =         1879048195,
		SHT_MIPS_UCODE =         1879048196,
		SHT_MIPS_DEBUG =         1879048197,
		SHT_MIPS_REGINFO =       1879048198,
		SHT_MIPS_PACKAGE =       1879048199,
		SHT_MIPS_PACKSYM =       1879048200,
		SHT_MIPS_RELD =          1879048201,
		SHT_MIPS_IFACE =         1879048203,
		SHT_MIPS_CONTENT =       1879048204,
		SHT_MIPS_OPTIONS =       1879048205,
		SHT_MIPS_SHDR =          1879048208,
		SHT_MIPS_FDESC =         1879048209,
		SHT_MIPS_EXTSYM =        1879048210,
		SHT_MIPS_DENSE =         1879048211,
		SHT_MIPS_PDESC =         1879048212,
		SHT_MIPS_LOCSYM =        1879048213,
		SHT_MIPS_AUXSYM =        1879048214,
		SHT_MIPS_OPTSYM =        1879048215,
		SHT_MIPS_LOCSTR =        1879048216,
		SHT_MIPS_LINE =          1879048217,
		SHT_MIPS_RFDESC =        1879048218,
		SHT_MIPS_DELTASYM =      1879048219,
		SHT_MIPS_DELTAINST =     1879048220,
		SHT_MIPS_DELTACLASS =    1879048221,
		SHT_MIPS_DWARF =         1879048222,
		SHT_MIPS_DELTADECL =     1879048223,
		SHT_MIPS_SYMBOL_LIB =    1879048224,
		SHT_MIPS_EVENTS =        1879048225,
		SHT_MIPS_TRANSLATE =     1879048226,
		SHT_MIPS_PIXIE =         1879048227,
		SHT_MIPS_XLATE =         1879048228,
		SHT_MIPS_XLATE_DEBUG =   1879048229,
		SHT_MIPS_WHIRL =         1879048230,
		SHT_MIPS_EH_REGION =     1879048231,
		SHT_MIPS_XLATE_OLD =     1879048232,
		SHT_MIPS_PDR_EXCEPTION = 1879048233,
		SHT_HIPROC =             2147483647,
		SHT_LOUSER =             2147483648,
		SHT_HIUSER =             2415919103,
	}
	public enum ElfSymbolBindKind : byte {
		STB_LOCAL =              0,
		STB_GLOBAL =             1,
		STB_WEAK =               2,
		STB_NUM =                3,
		STB_GNU_UNIQUE =        10,
		STB_LOOS =              10,
		STB_HIOS =              12,
		STB_LOPROC =            13,
		STB_MIPS_SPLIT_COMMON = 13,
		STB_HIPROC =            15,
	}
	public enum ElfSymbolKind : byte {
		STT_NOTYPE =            0,
		STT_OBJECT =            1,
		STT_FUNC =              2,
		STT_SECTION =           3,
		STT_FILE =              4,
		STT_COMMON =            5,
		STT_TLS =               6,
		STT_NUM =               7,
		STT_GNU_IFUNC =        10,
		STT_LOOS =             10,
		STT_HP_OPAQUE =        11,
		STT_HIOS =             12,
		STT_HP_STUB =          12,
		STT_ARM_TFUNC =        13,
		STT_LOPROC =           13,
		STT_PARISC_MILLICODE = 13,
		STT_SPARC_REGISTER =   13,
		STT_ARM_16BIT =        15,
		STT_HIPROC =           15,
	}
	[Flags]
	public enum EPOLL_EVENTS : uint {
		None =                   0,
		EPOLLIN =                1,
		EPOLLPRI =               2,
		EPOLLOUT =               4,
		EPOLLRDNORM =           64,
		EPOLLRDBAND =          128,
		EPOLLWRNORM =          256,
		EPOLLWRBAND =          512,
		EPOLLMSG =            1024,
		EPOLLERR =               8,
		EPOLLHUP =              16,
		EPOLLRDHUP =          8192,
		EPOLLEXCLUSIVE = 268435456,
		EPOLLWAKEUP =    536870912,
		EPOLLONESHOT =  1073741824,
		EPOLLET =       2147483648,
	}
	public enum EpollControl : uint {
		EPOLL_CTL_ADD = 1,
		EPOLL_CTL_DEL = 2,
		EPOLL_CTL_MOD = 3,
	}
	[Flags]
	public enum EpollCreateFlags : uint {
		None =               0,
		EPOLL_CLOEXEC = 524288,
	}
	[Flags]
	public enum EventHandleCreateFlag : uint {
		None =             0,
		EFD_SEMAPHORE =    1,
		EFD_CLOEXEC = 524288,
		EFD_NONBLOCK =  2048,
	}
	public enum FctlCommand : uint {
		F_DUPFD =            0,
		F_GETFD =            1,
		F_SETFD =            2,
		F_GETFL =            3,
		F_SETFL =            4,
		F_GETLK =            5,
		F_SETLK =            6,
		F_SETLKW =           7,
		F_SETOWN =           8,
		F_GETOWN =           9,
		F_SETSIG =          10,
		F_GETSIG =          11,
		F_GETLK64 =         12,
		F_SETLK64 =         13,
		F_SETLKW64 =        14,
		F_NOTIFY =        1026,
		F_DUPFD_CLOEXEC = 1030,
		F_SETPIPE_SZ =    1031,
		F_GETPIPE_SZ =    1032,
		F_GET_SEALS =     1034,
	}
	[Flags]
	public enum FctlFlags : int {
		O_RDONLY =        0,
		FD_CLOEXEC =      1,
		O_WRONLY =        1,
		O_RDWR =          2,
		O_CREAT =        64,
		O_EXCL =        128,
		O_NOCTTY =      256,
		O_TRUNC =       512,
		O_APPEND =     1024,
		O_NDELAY =     2048,
		O_NONBLOCK =   2048,
		FASYNC =       8192,
		O_DIRECT =    16384,
		O_LARGEFILE = 32768,
		O_DIRECTORY = 65536,
		O_NOFOLLOW = 131072,
		O_ACCMODE =       3,
		O_SYNC =    1052672,
	}
	public enum FileSeekOrigin : int {
		SEEK_SET =  0,
		SEEK_CUR =  1,
		SEEK_END =  2,
		SEEK_DATA = 3,
		SEEK_HOLE = 4,
	}
	public enum FPResult : uint {
		FP_NAN =       0,
		FP_INFINITE =  1,
		FP_ZERO =      2,
		FP_SUBNORMAL = 3,
		FP_NORMAL =    4,
	}
	public enum HZ1 : uint {
		_CS_PATH =                               0,
		_CS_V6_WIDTH_RESTRICTED_ENVS =           1,
		_CS_GNU_LIBC_VERSION =                   2,
		_CS_GNU_LIBPTHREAD_VERSION =             3,
		_CS_V5_WIDTH_RESTRICTED_ENVS =           4,
		_CS_V7_WIDTH_RESTRICTED_ENVS =           5,
		_CS_LFS_CFLAGS =                      1000,
		_CS_LFS_LDFLAGS =                     1001,
		_CS_LFS_LIBS =                        1002,
		_CS_LFS_LINTFLAGS =                   1003,
		_CS_LFS64_CFLAGS =                    1004,
		_CS_LFS64_LDFLAGS =                   1005,
		_CS_LFS64_LIBS =                      1006,
		_CS_LFS64_LINTFLAGS =                 1007,
		_CS_XBS5_ILP32_OFF32_CFLAGS =         1100,
		_CS_XBS5_ILP32_OFF32_LDFLAGS =        1101,
		_CS_XBS5_ILP32_OFF32_LIBS =           1102,
		_CS_XBS5_ILP32_OFF32_LINTFLAGS =      1103,
		_CS_XBS5_ILP32_OFFBIG_CFLAGS =        1104,
		_CS_XBS5_ILP32_OFFBIG_LDFLAGS =       1105,
		_CS_XBS5_ILP32_OFFBIG_LIBS =          1106,
		_CS_XBS5_ILP32_OFFBIG_LINTFLAGS =     1107,
		_CS_XBS5_LP64_OFF64_CFLAGS =          1108,
		_CS_XBS5_LP64_OFF64_LDFLAGS =         1109,
		_CS_XBS5_LP64_OFF64_LIBS =            1110,
		_CS_XBS5_LP64_OFF64_LINTFLAGS =       1111,
		_CS_XBS5_LPBIG_OFFBIG_CFLAGS =        1112,
		_CS_XBS5_LPBIG_OFFBIG_LDFLAGS =       1113,
		_CS_XBS5_LPBIG_OFFBIG_LIBS =          1114,
		_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS =     1115,
		_CS_POSIX_V6_ILP32_OFF32_CFLAGS =     1116,
		_CS_POSIX_V6_ILP32_OFF32_LDFLAGS =    1117,
		_CS_POSIX_V6_ILP32_OFF32_LIBS =       1118,
		_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS =  1119,
		_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS =    1120,
		_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS =   1121,
		_CS_POSIX_V6_ILP32_OFFBIG_LIBS =      1122,
		_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
		_CS_POSIX_V6_LP64_OFF64_CFLAGS =      1124,
		_CS_POSIX_V6_LP64_OFF64_LDFLAGS =     1125,
		_CS_POSIX_V6_LP64_OFF64_LIBS =        1126,
		_CS_POSIX_V6_LP64_OFF64_LINTFLAGS =   1127,
		_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS =    1128,
		_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS =   1129,
		_CS_POSIX_V6_LPBIG_OFFBIG_LIBS =      1130,
		_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
		_CS_POSIX_V7_ILP32_OFF32_CFLAGS =     1132,
		_CS_POSIX_V7_ILP32_OFF32_LDFLAGS =    1133,
		_CS_POSIX_V7_ILP32_OFF32_LIBS =       1134,
		_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS =  1135,
		_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS =    1136,
		_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS =   1137,
		_CS_POSIX_V7_ILP32_OFFBIG_LIBS =      1138,
		_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
		_CS_POSIX_V7_LP64_OFF64_CFLAGS =      1140,
		_CS_POSIX_V7_LP64_OFF64_LDFLAGS =     1141,
		_CS_POSIX_V7_LP64_OFF64_LIBS =        1142,
		_CS_POSIX_V7_LP64_OFF64_LINTFLAGS =   1143,
		_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS =    1144,
		_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS =   1145,
		_CS_POSIX_V7_LPBIG_OFFBIG_LIBS =      1146,
		_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
		_CS_V6_ENV =                          1148,
		_CS_V7_ENV =                          1149,
	}
	public enum idtype_t : uint {
		P_ALL =  0,
		P_PID =  1,
		P_PGID = 2,
	}
	public enum IPPort : uint {
		IPPORT_ECHO =            7,
		IPPORT_DISCARD =         9,
		IPPORT_SYSTAT =         11,
		IPPORT_DAYTIME =        13,
		IPPORT_NETSTAT =        15,
		IPPORT_FTP =            21,
		IPPORT_TELNET =         23,
		IPPORT_SMTP =           25,
		IPPORT_TIMESERVER =     37,
		IPPORT_NAMESERVER =     42,
		IPPORT_WHOIS =          43,
		IPPORT_MTP =            57,
		IPPORT_TFTP =           69,
		IPPORT_RJE =            77,
		IPPORT_FINGER =         79,
		IPPORT_TTYLINK =        87,
		IPPORT_SUPDUP =         95,
		IPPORT_EXECSERVER =    512,
		IPPORT_LOGINSERVER =   513,
		IPPORT_CMDSERVER =     514,
		IPPORT_EFSSERVER =     520,
		IPPORT_BIFFUDP =       512,
		IPPORT_WHOSERVER =     513,
		IPPORT_ROUTESERVER =   520,
		IPPORT_RESERVED =     1024,
		IPPORT_USERRESERVED = 5000,
	}
	public enum IPProtocol : uint {
		IPPROTO_IP =        0,
		IPPROTO_ICMP =      1,
		IPPROTO_IGMP =      2,
		IPPROTO_IPIP =      4,
		IPPROTO_TCP =       6,
		IPPROTO_EGP =       8,
		IPPROTO_PUP =      12,
		IPPROTO_UDP =      17,
		IPPROTO_IDP =      22,
		IPPROTO_TP =       29,
		IPPROTO_DCCP =     33,
		IPPROTO_IPV6 =     41,
		IPPROTO_RSVP =     46,
		IPPROTO_GRE =      47,
		IPPROTO_ESP =      50,
		IPPROTO_AH =       51,
		IPPROTO_MTP =      92,
		IPPROTO_BEETPH =   94,
		IPPROTO_ENCAP =    98,
		IPPROTO_PIM =     103,
		IPPROTO_COMP =    108,
		IPPROTO_SCTP =    132,
		IPPROTO_UDPLITE = 136,
		IPPROTO_MPLS =    137,
		IPPROTO_RAW =     255,
		IPPROTO_MAX =     256,
	}
	public enum LinkMapActivity : uint {
		LA_ACT_CONSISTENT = 0,
		LA_ACT_ADD =        1,
		LA_ACT_DELETE =     2,
	}
	public enum MemoryAdvise : int {
		MADV_NORMAL =       0,
		MADV_RANDOM =       1,
		MADV_SEQUENTIAL =   2,
		MADV_WILLNEED =     3,
		MADV_DONTNEED =     4,
		MADV_FREE =         8,
		MADV_REMOVE =       9,
		MADV_DONTFORK =    10,
		MADV_DOFORK =      11,
		MADV_MERGEABLE =   12,
		MADV_UNMERGEABLE = 13,
		MADV_HUGEPAGE =    14,
		MADV_NOHUGEPAGE =  15,
		MADV_DONTDUMP =    16,
		MADV_DODUMP =      17,
		MADV_WIPEONFORK =  18,
		MADV_KEEPONFORK =  19,
		MADV_HWPOISON =   100,
	}
	public enum MemoryMapFlags : int {
		MAP_FILE =                  0,
		MAP_SHARED =                1,
		MAP_PRIVATE =               2,
		MAP_SHARED_VALIDATE =       3,
		MAP_TYPE =                 15,
		MAP_FIXED =                16,
		MAP_HUGE_SHIFT =           26,
		MAP_ANON =                 32,
		MAP_ANONYMOUS =            32,
		MAP_HUGE_MASK =            63,
		MAP_32BIT =                64,
		MAP_GROWSDOWN =           256,
		MAP_DENYWRITE =          2048,
		MAP_EXECUTABLE =         4096,
		MAP_LOCKED =             8192,
		MAP_NORESERVE =         16384,
		MAP_POPULATE =          32768,
		MAP_NONBLOCK =          65536,
		MAP_STACK =            131072,
		MAP_HUGETLB =          262144,
		MAP_SYNC =             524288,
		MAP_FIXED_NOREPLACE = 1048576,
	}
	[Flags]
	public enum MemoryMapProtection : int {
		PROT_NONE =             0,
		PROT_READ =             1,
		PROT_WRITE =            2,
		PROT_EXEC =             4,
		PROT_GROWSDOWN = 16777216,
		PROT_GROWSUP =   33554432,
	}
	[Flags]
	public enum MemoryRemapFlags : int {
		None =           0,
		MREMAP_MAYMOVE = 1,
		MREMAP_FIXED =   2,
	}
	[Flags]
	public enum MessageFlags : uint {
		None =                      0,
		MSG_OOB =                   1,
		MSG_PEEK =                  2,
		MSG_DONTROUTE =             4,
		MSG_TRYHARD =               4,
		MSG_CTRUNC =                8,
		MSG_PROXY =                16,
		MSG_TRUNC =                32,
		MSG_DONTWAIT =             64,
		MSG_EOR =                 128,
		MSG_WAITALL =             256,
		MSG_FIN =                 512,
		MSG_SYN =                1024,
		MSG_CONFIRM =            2048,
		MSG_RST =                4096,
		MSG_ERRQUEUE =           8192,
		MSG_NOSIGNAL =          16384,
		MSG_MORE =              32768,
		MSG_WAITFORONE =        65536,
		MSG_BATCH =            262144,
		MSG_ZEROCOPY =       67108864,
		MSG_FASTOPEN =      536870912,
		MSG_CMSG_CLOEXEC = 1073741824,
	}
	[Flags]
	public enum MountFlags : int {
		None =                  0,
		MS_RDONLY =             1,
		MS_NOSUID =             2,
		MS_NODEV =              4,
		MS_NOEXEC =             8,
		MS_SYNCHRONOUS =       16,
		MS_REMOUNT =           32,
		MS_MANDLOCK =          64,
		MS_DIRSYNC =          128,
		MS_NOATIME =         1024,
		MS_NODIRATIME =      2048,
		MS_BIND =            4096,
		MS_MOVE =            8192,
		MS_REC =            16384,
		MS_SILENT =         32768,
		MS_POSIXACL =       65536,
		MS_UNBINDABLE =    131072,
		MS_PRIVATE =       262144,
		MS_SLAVE =         524288,
		MS_SHARED =       1048576,
		MS_RELATIME =     2097152,
		MS_KERNMOUNT =    4194304,
		MS_I_VERSION =    8388608,
		MS_STRICTATIME = 16777216,
		MS_LAZYTIME =    33554432,
		MS_ACTIVE =    1073741824,
		MS_NOUSER =   -2147483648,
	}
	public enum MutexKind : uint {
		PTHREAD_MUTEX_TIMED_NP =      0,
		PTHREAD_MUTEX_RECURSIVE_NP =  1,
		PTHREAD_MUTEX_ERRORCHECK_NP = 2,
		PTHREAD_MUTEX_ADAPTIVE_NP =   3,
		PTHREAD_MUTEX_NORMAL =        0,
		PTHREAD_MUTEX_RECURSIVE =     1,
		PTHREAD_MUTEX_ERRORCHECK =    2,
		PTHREAD_MUTEX_DEFAULT =       0,
		PTHREAD_MUTEX_FAST_NP =       0,
	}
	public enum MutexProtocolKind : uint {
		PTHREAD_PRIO_NONE =    0,
		PTHREAD_PRIO_INHERIT = 1,
		PTHREAD_PRIO_PROTECT = 2,
	}
	public enum MutexRobustKind : uint {
		PTHREAD_MUTEX_STALLED =    0,
		PTHREAD_MUTEX_STALLED_NP = 0,
		PTHREAD_MUTEX_ROBUST =     1,
		PTHREAD_MUTEX_ROBUST_NP =  1,
	}
	[Flags]
	public enum ObjectSearchFlag : uint {
		None =            0,
		LA_SER_ORIG =     1,
		LA_SER_LIBPATH =  2,
		LA_SER_RUNPATH =  4,
		LA_SER_CONFIG =   8,
		LA_SER_DEFAULT = 64,
		LA_SER_SECURE = 128,
	}
	[Flags]
	public enum PollEvents : ushort {
		None =         0,
		POLLIN =       1,
		POLLPRI =      2,
		POLLOUT =      4,
		POLLERR =      8,
		POLLHUP =     16,
		POLLNVAL =    32,
		POLLRDNORM =  64,
		POLLRDBAND = 128,
		POLLWRNORM = 256,
		POLLWRBAND = 512,
		POLLMSG =   1024,
	}
	public enum ProcessShare : uint {
		PTHREAD_PROCESS_PRIVATE = 0,
		PTHREAD_PROCESS_SHARED =  1,
	}
	public enum ProtocolFamily : ushort {
		PF_UNSPEC =      0,
		PF_FILE =        1,
		PF_LOCAL =       1,
		PF_UNIX =        1,
		PF_INET =        2,
		PF_AX25 =        3,
		PF_IPX =         4,
		PF_APPLETALK =   5,
		PF_NETROM =      6,
		PF_BRIDGE =      7,
		PF_ATMPVC =      8,
		PF_X25 =         9,
		PF_INET6 =      10,
		PF_ROSE =       11,
		PF_DECnet =     12,
		PF_NETBEUI =    13,
		PF_SECURITY =   14,
		PF_KEY =        15,
		PF_NETLINK =    16,
		PF_ROUTE =      16,
		PF_PACKET =     17,
		PF_ASH =        18,
		PF_ECONET =     19,
		PF_ATMSVC =     20,
		PF_RDS =        21,
		PF_SNA =        22,
		PF_IRDA =       23,
		PF_PPPOX =      24,
		PF_WANPIPE =    25,
		PF_LLC =        26,
		PF_IB =         27,
		PF_MPLS =       28,
		PF_CAN =        29,
		PF_TIPC =       30,
		PF_BLUETOOTH =  31,
		PF_IUCV =       32,
		PF_RXRPC =      33,
		PF_ISDN =       34,
		PF_PHONET =     35,
		PF_IEEE802154 = 36,
		PF_CAIF =       37,
		PF_ALG =        38,
		PF_NFC =        39,
		PF_VSOCK =      40,
		PF_KCM =        41,
		PF_QIPCRTR =    42,
		PF_SMC =        43,
		PF_MAX =        44,
	}
	public enum ReaderWriterLockBehaviour : uint {
		PTHREAD_RWLOCK_PREFER_READER_NP =              0,
		PTHREAD_RWLOCK_PREFER_WRITER_NP =              1,
		PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
		PTHREAD_RWLOCK_DEFAULT_NP =                    0,
	}
	public enum RegisterKindX86 : uint {
		REG_GS =      0,
		REG_FS =      1,
		REG_ES =      2,
		REG_DS =      3,
		REG_EDI =     4,
		REG_ESI =     5,
		REG_EBP =     6,
		REG_ESP =     7,
		REG_EBX =     8,
		REG_EDX =     9,
		REG_ECX =    10,
		REG_EAX =    11,
		REG_TRAPNO = 12,
		REG_ERR =    13,
		REG_EIP =    14,
		REG_CS =     15,
		REG_EFL =    16,
		REG_UESP =   17,
		REG_SS =     18,
	}
	public enum Sched : uint {
		PTHREAD_INHERIT_SCHED =  0,
		PTHREAD_EXPLICIT_SCHED = 1,
	}
	public enum SCM_RIGHTS : uint {
		SCM_RIGHTS =      1,
		SCM_CREDENTIALS = 2,
	}
	public enum Scope : uint {
		PTHREAD_SCOPE_SYSTEM =  0,
		PTHREAD_SCOPE_PROCESS = 1,
	}
	public enum SignalCode : uint {
		SIGHUP =      1,
		SIGINT =      2,
		SIGQUIT =     3,
		SIGILL =      4,
		SIGTRAP =     5,
		SIGABRT =     6,
		SIGIOT =      6,
		SIGFPE =      8,
		SIGKILL =     9,
		SIGSEGV =    11,
		SIGPIPE =    13,
		SIGALRM =    14,
		SIGTERM =    15,
		SIGCLD =     17,
		SIGTTIN =    21,
		SIGTTOU =    22,
		SIGXCPU =    24,
		SIGXFSZ =    25,
		SIGVTALRM =  26,
		SIGPROF =    27,
		SIGWINCH =   28,
		SIGIO =      29,
		__SIGRTMIN = 32,
		__SIGRTMAX = 64,
		_NSIG =      65,
	}
	public enum SignalCodeBUS : uint {
		BUS_ADRALN =    1,
		BUS_ADRERR =    2,
		BUS_OBJERR =    3,
		BUS_MCEERR_AR = 4,
		BUS_MCEERR_AO = 5,
	}
	public enum SignalCodeCHLD : uint {
		CLD_EXITED =    1,
		CLD_KILLED =    2,
		CLD_DUMPED =    3,
		CLD_TRAPPED =   4,
		CLD_STOPPED =   5,
		CLD_CONTINUED = 6,
	}
	public enum SignalCodeFPE : uint {
		FPE_INTDIV = 1,
		FPE_INTOVF = 2,
		FPE_FLTDIV = 3,
		FPE_FLTOVF = 4,
		FPE_FLTUND = 5,
		FPE_FLTRES = 6,
		FPE_FLTINV = 7,
		FPE_FLTSUB = 8,
	}
	public enum SignalCodeILL : uint {
		ILL_ILLOPC = 1,
		ILL_ILLOPN = 2,
		ILL_ILLADR = 3,
		ILL_ILLTRP = 4,
		ILL_PRVOPC = 5,
		ILL_PRVREG = 6,
		ILL_COPROC = 7,
		ILL_BADSTK = 8,
	}
	public enum SignalCodeOrigin : int {
		SI_ASYNCNL = -60,
		SI_TKILL =    -6,
		SI_SIGIO =    -5,
		SI_ASYNCIO =  -4,
		SI_MESGQ =    -3,
		SI_TIMER =    -2,
		SI_QUEUE =    -1,
		SI_USER =      0,
		SI_KERNEL =  128,
	}
	public enum SignalCodePOLL : uint {
		POLL_IN =  1,
		POLL_OUT = 2,
		POLL_MSG = 3,
		POLL_ERR = 4,
		POLL_PRI = 5,
		POLL_HUP = 6,
	}
	public enum SignalCodeSEGV : uint {
		SEGV_MAPERR = 1,
		SEGV_ACCERR = 2,
		SEGV_BNDERR = 3,
		SEGV_PKUERR = 4,
	}
	public enum SignalCodeTRAP : uint {
		TRAP_BRKPT = 1,
		TRAP_TRACE = 2,
	}
	[Flags]
	public enum SignalHandleCreateFlag : uint {
		None =             0,
		SFD_CLOEXEC = 524288,
		SFD_NONBLOCK =  2048,
	}
	public enum SignalNotify : uint {
		SIGEV_SIGNAL =    0,
		SIGEV_NONE =      1,
		SIGEV_THREAD =    2,
		SIGEV_THREAD_ID = 4,
	}
	[Flags]
	public enum SocketAcceptFlag : uint {
		None =              0,
		SOCK_NONBLOCK =  2048,
		SOCK_CLOEXEC = 524288,
	}
	[Flags]
	public enum SocketShutdownOptions : uint {
		SHUT_RD =   0,
		SHUT_WR =   1,
		SHUT_RDWR = 2,
	}
	[Flags]
	public enum SpliceFlags : uint {
		None =              0,
		SPLICE_F_MOVE =     1,
		SPLICE_F_NONBLOCK = 2,
		SPLICE_F_MORE =     4,
		SPLICE_F_GIFT =     8,
	}
	public enum SS_ONSTACK : uint {
		SS_ONSTACK = 1,
		SS_DISABLE = 2,
	}
	public enum StatFlags : uint {
		S_IXOTH =      1,
		S_IWOTH =      2,
		S_IROTH =      4,
		S_IRWXO =      7,
		S_IXGRP =      8,
		S_IWGRP =     16,
		S_IRGRP =     32,
		S_IRWXG =     56,
		S_IEXEC =     64,
		S_IXUSR =     64,
		S_IWRITE =   128,
		S_IWUSR =    128,
		S_IREAD =    256,
		S_IRUSR =    256,
		S_IRWXU =    448,
		S_ISVTX =    512,
		S_ISGID =   1024,
		S_ISUID =   2048,
		S_IFIFO =   4096,
		S_IFCHR =   8192,
		S_IFDIR =  16384,
		S_IFBLK =  24576,
		S_IFREG =  32768,
		S_IFLNK =  40960,
		S_IFSOCK = 49152,
		S_IFMT =   61440,
	}
	[Flags]
	public enum SymbolBindFLags : uint {
		None =               0,
		LA_SYMB_NOPLTENTER = 1,
		LA_SYMB_NOPLTEXIT =  2,
		LA_SYMB_STRUCTCALL = 4,
		LA_SYMB_DLSYM =      8,
		LA_SYMB_ALTVALUE =  16,
	}
	[Flags]
	public enum SymlinkFollowOption : uint {
		None =                  0,
		AT_SYMLINK_NOFOLLOW = 256,
	}
	public enum SyslogFacility : uint {
		LOG_KERN =      0,
		LOG_USER =      8,
		LOG_MAIL =     16,
		LOG_DAEMON =   24,
		LOG_AUTH =     32,
		LOG_SYSLOG =   40,
		LOG_LPR =      48,
		LOG_NEWS =     56,
		LOG_UUCP =     64,
		LOG_CRON =     72,
		LOG_AUTHPRIV = 80,
		LOG_FTP =      88,
		LOG_LOCAL0 =  128,
		LOG_LOCAL1 =  136,
		LOG_LOCAL2 =  144,
		LOG_LOCAL3 =  152,
		LOG_LOCAL4 =  160,
		LOG_LOCAL5 =  168,
		LOG_LOCAL6 =  176,
		LOG_LOCAL7 =  184,
	}
	[Flags]
	public enum SyslogOptions : uint {
		None =        0,
		LOG_PID =     1,
		LOG_CONS =    2,
		LOG_ODELAY =  4,
		LOG_NDELAY =  8,
		LOG_NOWAIT = 16,
		LOG_PERROR = 32,
	}
	public enum SyslogPriority : uint {
		LOG_EMERG =   0,
		LOG_ALERT =   1,
		LOG_CRIT =    2,
		LOG_ERR =     3,
		LOG_WARNING = 4,
		LOG_NOTICE =  5,
		LOG_INFO =    6,
		LOG_DEBUG =   7,
	}
	public enum SystemConfigurationProperty : uint {
		_SC_ARG_MAX =                       0,
		_SC_CHILD_MAX =                     1,
		_SC_CLK_TCK =                       2,
		_SC_NGROUPS_MAX =                   3,
		_SC_OPEN_MAX =                      4,
		_SC_STREAM_MAX =                    5,
		_SC_TZNAME_MAX =                    6,
		_SC_JOB_CONTROL =                   7,
		_SC_SAVED_IDS =                     8,
		_SC_REALTIME_SIGNALS =              9,
		_SC_PRIORITY_SCHEDULING =          10,
		_SC_TIMERS =                       11,
		_SC_ASYNCHRONOUS_IO =              12,
		_SC_PRIORITIZED_IO =               13,
		_SC_SYNCHRONIZED_IO =              14,
		_SC_FSYNC =                        15,
		_SC_MAPPED_FILES =                 16,
		_SC_MEMLOCK =                      17,
		_SC_MEMLOCK_RANGE =                18,
		_SC_MEMORY_PROTECTION =            19,
		_SC_MESSAGE_PASSING =              20,
		_SC_SEMAPHORES =                   21,
		_SC_SHARED_MEMORY_OBJECTS =        22,
		_SC_AIO_LISTIO_MAX =               23,
		_SC_AIO_MAX =                      24,
		_SC_AIO_PRIO_DELTA_MAX =           25,
		_SC_DELAYTIMER_MAX =               26,
		_SC_MQ_OPEN_MAX =                  27,
		_SC_MQ_PRIO_MAX =                  28,
		_SC_VERSION =                      29,
		_SC_PAGESIZE =                     30,
		_SC_RTSIG_MAX =                    31,
		_SC_SEM_NSEMS_MAX =                32,
		_SC_SEM_VALUE_MAX =                33,
		_SC_SIGQUEUE_MAX =                 34,
		_SC_TIMER_MAX =                    35,
		_SC_BC_BASE_MAX =                  36,
		_SC_BC_DIM_MAX =                   37,
		_SC_BC_SCALE_MAX =                 38,
		_SC_BC_STRING_MAX =                39,
		_SC_COLL_WEIGHTS_MAX =             40,
		_SC_EQUIV_CLASS_MAX =              41,
		_SC_EXPR_NEST_MAX =                42,
		_SC_LINE_MAX =                     43,
		_SC_RE_DUP_MAX =                   44,
		_SC_CHARCLASS_NAME_MAX =           45,
		_SC_2_VERSION =                    46,
		_SC_2_C_BIND =                     47,
		_SC_2_C_DEV =                      48,
		_SC_2_FORT_DEV =                   49,
		_SC_2_FORT_RUN =                   50,
		_SC_2_SW_DEV =                     51,
		_SC_2_LOCALEDEF =                  52,
		_SC_PII =                          53,
		_SC_PII_XTI =                      54,
		_SC_PII_SOCKET =                   55,
		_SC_PII_INTERNET =                 56,
		_SC_PII_OSI =                      57,
		_SC_POLL =                         58,
		_SC_SELECT =                       59,
		_SC_UIO_MAXIOV =                   60,
		_SC_IOV_MAX =                      60,
		_SC_PII_INTERNET_STREAM =          61,
		_SC_PII_INTERNET_DGRAM =           62,
		_SC_PII_OSI_COTS =                 63,
		_SC_PII_OSI_CLTS =                 64,
		_SC_PII_OSI_M =                    65,
		_SC_T_IOV_MAX =                    66,
		_SC_THREADS =                      67,
		_SC_THREAD_SAFE_FUNCTIONS =        68,
		_SC_GETGR_R_SIZE_MAX =             69,
		_SC_GETPW_R_SIZE_MAX =             70,
		_SC_LOGIN_NAME_MAX =               71,
		_SC_TTY_NAME_MAX =                 72,
		_SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
		_SC_THREAD_KEYS_MAX =              74,
		_SC_THREAD_STACK_MIN =             75,
		_SC_THREAD_THREADS_MAX =           76,
		_SC_THREAD_ATTR_STACKADDR =        77,
		_SC_THREAD_ATTR_STACKSIZE =        78,
		_SC_THREAD_PRIORITY_SCHEDULING =   79,
		_SC_THREAD_PRIO_INHERIT =          80,
		_SC_THREAD_PRIO_PROTECT =          81,
		_SC_THREAD_PROCESS_SHARED =        82,
		_SC_NPROCESSORS_CONF =             83,
		_SC_NPROCESSORS_ONLN =             84,
		_SC_PHYS_PAGES =                   85,
		_SC_AVPHYS_PAGES =                 86,
		_SC_ATEXIT_MAX =                   87,
		_SC_PASS_MAX =                     88,
		_SC_XOPEN_VERSION =                89,
		_SC_XOPEN_XCU_VERSION =            90,
		_SC_XOPEN_UNIX =                   91,
		_SC_XOPEN_CRYPT =                  92,
		_SC_XOPEN_ENH_I18N =               93,
		_SC_XOPEN_SHM =                    94,
		_SC_2_CHAR_TERM =                  95,
		_SC_2_C_VERSION =                  96,
		_SC_2_UPE =                        97,
		_SC_XOPEN_XPG2 =                   98,
		_SC_XOPEN_XPG3 =                   99,
		_SC_XOPEN_XPG4 =                  100,
		_SC_CHAR_BIT =                    101,
		_SC_CHAR_MAX =                    102,
		_SC_CHAR_MIN =                    103,
		_SC_INT_MAX =                     104,
		_SC_INT_MIN =                     105,
		_SC_LONG_BIT =                    106,
		_SC_WORD_BIT =                    107,
		_SC_MB_LEN_MAX =                  108,
		_SC_NZERO =                       109,
		_SC_SSIZE_MAX =                   110,
		_SC_SCHAR_MAX =                   111,
		_SC_SCHAR_MIN =                   112,
		_SC_SHRT_MAX =                    113,
		_SC_SHRT_MIN =                    114,
		_SC_UCHAR_MAX =                   115,
		_SC_UINT_MAX =                    116,
		_SC_ULONG_MAX =                   117,
		_SC_USHRT_MAX =                   118,
		_SC_NL_ARGMAX =                   119,
		_SC_NL_LANGMAX =                  120,
		_SC_NL_MSGMAX =                   121,
		_SC_NL_NMAX =                     122,
		_SC_NL_SETMAX =                   123,
		_SC_NL_TEXTMAX =                  124,
		_SC_XBS5_ILP32_OFF32 =            125,
		_SC_XBS5_ILP32_OFFBIG =           126,
		_SC_XBS5_LP64_OFF64 =             127,
		_SC_XBS5_LPBIG_OFFBIG =           128,
		_SC_XOPEN_LEGACY =                129,
		_SC_XOPEN_REALTIME =              130,
		_SC_XOPEN_REALTIME_THREADS =      131,
		_SC_ADVISORY_INFO =               132,
		_SC_BARRIERS =                    133,
		_SC_BASE =                        134,
		_SC_C_LANG_SUPPORT =              135,
		_SC_C_LANG_SUPPORT_R =            136,
		_SC_CLOCK_SELECTION =             137,
		_SC_CPUTIME =                     138,
		_SC_THREAD_CPUTIME =              139,
		_SC_DEVICE_IO =                   140,
		_SC_DEVICE_SPECIFIC =             141,
		_SC_DEVICE_SPECIFIC_R =           142,
		_SC_FD_MGMT =                     143,
		_SC_FIFO =                        144,
		_SC_PIPE =                        145,
		_SC_FILE_ATTRIBUTES =             146,
		_SC_FILE_LOCKING =                147,
		_SC_FILE_SYSTEM =                 148,
		_SC_MONOTONIC_CLOCK =             149,
		_SC_MULTI_PROCESS =               150,
		_SC_SINGLE_PROCESS =              151,
		_SC_NETWORKING =                  152,
		_SC_READER_WRITER_LOCKS =         153,
		_SC_SPIN_LOCKS =                  154,
		_SC_REGEXP =                      155,
		_SC_REGEX_VERSION =               156,
		_SC_SHELL =                       157,
		_SC_SIGNALS =                     158,
		_SC_SPAWN =                       159,
		_SC_SPORADIC_SERVER =             160,
		_SC_THREAD_SPORADIC_SERVER =      161,
		_SC_SYSTEM_DATABASE =             162,
		_SC_SYSTEM_DATABASE_R =           163,
		_SC_TIMEOUTS =                    164,
		_SC_TYPED_MEMORY_OBJECTS =        165,
		_SC_USER_GROUPS =                 166,
		_SC_USER_GROUPS_R =               167,
		_SC_2_PBS =                       168,
		_SC_2_PBS_ACCOUNTING =            169,
		_SC_2_PBS_LOCATE =                170,
		_SC_2_PBS_MESSAGE =               171,
		_SC_2_PBS_TRACK =                 172,
		_SC_SYMLOOP_MAX =                 173,
		_SC_STREAMS =                     174,
		_SC_2_PBS_CHECKPOINT =            175,
		_SC_V6_ILP32_OFF32 =              176,
		_SC_V6_ILP32_OFFBIG =             177,
		_SC_V6_LP64_OFF64 =               178,
		_SC_V6_LPBIG_OFFBIG =             179,
		_SC_HOST_NAME_MAX =               180,
		_SC_TRACE =                       181,
		_SC_TRACE_EVENT_FILTER =          182,
		_SC_TRACE_INHERIT =               183,
		_SC_TRACE_LOG =                   184,
		_SC_LEVEL1_ICACHE_SIZE =          185,
		_SC_LEVEL1_ICACHE_ASSOC =         186,
		_SC_LEVEL1_ICACHE_LINESIZE =      187,
		_SC_LEVEL1_DCACHE_SIZE =          188,
		_SC_LEVEL1_DCACHE_ASSOC =         189,
		_SC_LEVEL1_DCACHE_LINESIZE =      190,
		_SC_LEVEL2_CACHE_SIZE =           191,
		_SC_LEVEL2_CACHE_ASSOC =          192,
		_SC_LEVEL2_CACHE_LINESIZE =       193,
		_SC_LEVEL3_CACHE_SIZE =           194,
		_SC_LEVEL3_CACHE_ASSOC =          195,
		_SC_LEVEL3_CACHE_LINESIZE =       196,
		_SC_LEVEL4_CACHE_SIZE =           197,
		_SC_LEVEL4_CACHE_ASSOC =          198,
		_SC_LEVEL4_CACHE_LINESIZE =       199,
		_SC_IPV6 =                        235,
		_SC_RAW_SOCKETS =                 236,
		_SC_V7_ILP32_OFF32 =              237,
		_SC_V7_ILP32_OFFBIG =             238,
		_SC_V7_LP64_OFF64 =               239,
		_SC_V7_LPBIG_OFFBIG =             240,
		_SC_SS_REPL_MAX =                 241,
		_SC_TRACE_EVENT_NAME_MAX =        242,
		_SC_TRACE_NAME_MAX =              243,
		_SC_TRACE_SYS_MAX =               244,
		_SC_TRACE_USER_EVENT_MAX =        245,
		_SC_XOPEN_STREAMS =               246,
		_SC_THREAD_ROBUST_PRIO_INHERIT =  247,
		_SC_THREAD_ROBUST_PRIO_PROTECT =  248,
	}
	public enum tcp_ca_state : uint {
		TCP_CA_Open =     0,
		TCP_CA_Disorder = 1,
		TCP_CA_CWR =      2,
		TCP_CA_Recovery = 3,
		TCP_CA_Loss =     4,
	}
	public enum TcpState : uint {
		TCP_ESTABLISHED = 1,
		TCP_SYN_SENT =    2,
		TCP_SYN_RECV =    3,
		TCP_FIN_WAIT1 =   4,
		TCP_FIN_WAIT2 =   5,
		TCP_TIME_WAIT =   6,
		TCP_CLOSE =       7,
		TCP_CLOSE_WAIT =  8,
		TCP_LAST_ACK =    9,
		TCP_LISTEN =     10,
		TCP_CLOSING =    11,
	}
	[Flags]
	public enum TerminalControlSignal : uint {
		None =        0,
		TIOCM_LE =    1,
		TIOCM_DTR =   2,
		TIOCM_RTS =   4,
		TIOCM_ST =    8,
		TIOCM_SR =   16,
		TIOCM_CTS =  32,
		TIOCM_CAR =  64,
		TIOCM_CD =   64,
		TIOCM_RI =  128,
		TIOCM_RNG = 128,
		TIOCM_DSR = 256,
	}
	public enum TerminalSetAttributesBehaviour : uint {
		TCSANOW =   0,
		TCSADRAIN = 1,
		TCSAFLUSH = 2,
	}
	public enum TerminalSpeed : uint {
		B0 =          0,
		B50 =         1,
		B75 =         2,
		B110 =        3,
		B134 =        4,
		B150 =        5,
		B200 =        6,
		B300 =        7,
		B600 =        8,
		B1200 =       9,
		B1800 =      10,
		B2400 =      11,
		B4800 =      12,
		B9600 =      13,
		B19200 =     14,
		B38400 =     15,
		B57600 =   4097,
		B115200 =  4098,
		B230400 =  4099,
		B460800 =  4100,
		B500000 =  4101,
		B576000 =  4102,
		B921600 =  4103,
		B1000000 = 4104,
		B1152000 = 4105,
		B1500000 = 4106,
		B2000000 = 4107,
		B2500000 = 4108,
		B3000000 = 4109,
		B3500000 = 4110,
		B4000000 = 4111,
	}
	public enum ThreadCancellationType : uint {
		PTHREAD_CANCEL_DEFERRED =     0,
		PTHREAD_CANCEL_ASYNCHRONOUS = 1,
	}
	public enum ThreadCancelOption : uint {
		PTHREAD_CANCEL_ENABLE =  0,
		PTHREAD_CANCEL_DISABLE = 1,
	}
	[Flags]
	public enum ThreadCreateFlags : uint {
		PTHREAD_CREATE_JOINABLE = 0,
		PTHREAD_CREATE_DETACHED = 1,
	}
	[Flags]
	public enum TimerHandleCreateFlag : uint {
		None =             0,
		TFD_CLOEXEC = 524288,
		TFD_NONBLOCK =  2048,
	}
	[Flags]
	public enum TimerHandleSetFlag : uint {
		None =                    0,
		TFD_TIMER_ABSTIME =       1,
		TFD_TIMER_CANCEL_ON_SET = 2,
	}
	[Flags]
	public enum UnmountFlags : uint {
		None =            0,
		MNT_FORCE =       1,
		MNT_DETACH =      2,
		MNT_EXPIRE =      4,
		UMOUNT_NOFOLLOW = 8,
	}
	[Flags]
	public enum WaitIdFlags : uint {
		None =              0,
		WSTOPPED =          2,
		WEXITED =           4,
		WCONTINUED =        8,
		WNOWAIT =    16777216,
		__WALL =   1073741824,
		__WCLONE = 2147483648,
	}
	[Flags]
	public enum WaitPidFlags : uint {
		None =      0,
		WNOHANG =   1,
		WUNTRACED = 2,
	}
	public enum UnnamedEnum_2681F2CC : uint {
		FP_INT_UPWARD =            0,
		FP_INT_DOWNWARD =          1,
		FP_INT_TOWARDZERO =        2,
		FP_INT_TONEARESTFROMZERO = 3,
		FP_INT_TONEAREST =         4,
	}
	public enum UnnamedEnum_37F1A8A4 : uint {
		TCP_NO_QUEUE =   0,
		TCP_RECV_QUEUE = 1,
		TCP_SEND_QUEUE = 2,
		TCP_QUEUES_NR =  3,
	}
	public enum UnnamedEnum_672DAEF7 : uint {
		RT_CONSISTENT = 0,
		RT_ADD =        1,
		RT_DELETE =     2,
	}
	public enum UnnamedEnum_672DB64A : uint {
		LA_FLG_BINDTO =   1,
		LA_FLG_BINDFROM = 2,
	}
	public enum UnnamedEnum_79C4A3F4 : uint {
		IPPROTO_HOPOPTS =   0,
		IPPROTO_ROUTING =  43,
		IPPROTO_FRAGMENT = 44,
		IPPROTO_ICMPV6 =   58,
		IPPROTO_NONE =     59,
		IPPROTO_DSTOPTS =  60,
		IPPROTO_MH =      135,
	}
	public enum UnnamedEnum_94565962 : uint {
		Val_GNU_MIPS_ABI_FP_ANY =    0,
		Val_GNU_MIPS_ABI_FP_DOUBLE = 1,
		Val_GNU_MIPS_ABI_FP_SINGLE = 2,
		Val_GNU_MIPS_ABI_FP_SOFT =   3,
		Val_GNU_MIPS_ABI_FP_OLD_64 = 4,
		Val_GNU_MIPS_ABI_FP_XX =     5,
		Val_GNU_MIPS_ABI_FP_64 =     6,
		Val_GNU_MIPS_ABI_FP_64A =    7,
		Val_GNU_MIPS_ABI_FP_MAX =    7,
	}
	public partial struct __iseqsig_type {
	}
	public partial struct __iseqsig_type {
	}
	public partial struct __iseqsig_type {
	}
	[ExplicitSize( Size = 156 )]
	[Alignment( Boundary = 4 )]
	public partial struct __jmp_buf_tag {
		[ExplicitOffset( Offset = 0 )]
		public int[6] __jmpbuf;
		[ExplicitOffset( Offset = 24 )]
		public int __mask_was_saved;
		[ExplicitOffset( Offset = 28 )]
		public sigset_t __saved_mask;
	}
	public partial struct __locale_data {
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct __mbstate_t {
		[ExplicitOffset( Offset = 0 )]
		public int __count;
		[ExplicitOffset( Offset = 4 )]
		public UnnamedUnion_64DED47D __value;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct __pthread_cleanup_frame {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<void*> __cancel_routine;
		[ExplicitOffset( Offset = 4 )]
		public void* __cancel_arg;
		[ExplicitOffset( Offset = 8 )]
		public int __do_it;
		[ExplicitOffset( Offset = 12 )]
		public int __cancel_type;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 4 )]
	public partial struct __pthread_cond_s {
		[Overlapped( Offset = 0 )]
		public ulong __wseq;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C7B465F9 __wseq32;
		[Overlapped( Offset = 8 )]
		public ulong __g1_start;
		[Overlapped( Offset = 8 )]
		public UnnamedStruct_C7B466E6 __g1_start32;
		[ExplicitOffset( Offset = 16 )]
		public uint[2] __g_refs;
		[ExplicitOffset( Offset = 24 )]
		public uint[2] __g_size;
		[ExplicitOffset( Offset = 32 )]
		public uint __g1_orig_size;
		[ExplicitOffset( Offset = 36 )]
		public uint __wrefs;
		[ExplicitOffset( Offset = 40 )]
		public uint[2] __g_signals;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct __pthread_internal_slist {
		[ExplicitOffset( Offset = 0 )]
		public __pthread_internal_slist* __next;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct __pthread_mutex_s {
		[ExplicitOffset( Offset = 0 )]
		public int __lock;
		[ExplicitOffset( Offset = 4 )]
		public uint __count;
		[ExplicitOffset( Offset = 8 )]
		public int __owner;
		[ExplicitOffset( Offset = 12 )]
		public int __kind;
		[ExplicitOffset( Offset = 16 )]
		public uint __nusers;
		[Overlapped( Offset = 20 )]
		public UnnamedStruct_C7B463E9 __elision_data;
		[Overlapped( Offset = 20 )]
		public __pthread_internal_slist __list;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct __pthread_rwlock_arch_t {
		[ExplicitOffset( Offset = 0 )]
		public uint __readers;
		[ExplicitOffset( Offset = 4 )]
		public uint __writers;
		[ExplicitOffset( Offset = 8 )]
		public uint __wrphase_futex;
		[ExplicitOffset( Offset = 12 )]
		public uint __writers_futex;
		[ExplicitOffset( Offset = 16 )]
		public uint __pad3;
		[ExplicitOffset( Offset = 20 )]
		public uint __pad4;
		[ExplicitOffset( Offset = 24 )]
		public byte __flags;
		[ExplicitOffset( Offset = 25 )]
		public byte __shared;
		[ExplicitOffset( Offset = 26 )]
		public sbyte __rwelision;
		[ExplicitOffset( Offset = 27 )]
		public byte __pad2;
		[ExplicitOffset( Offset = 28 )]
		public int __cur_writer;
	}
	[ExplicitSize( Size = 44 )]
	[Alignment( Boundary = 4 )]
	public partial struct __pthread_unwind_buf_t {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedStruct_E4E406AB[1] __cancel_jmp_buf;
		[ExplicitOffset( Offset = 28 )]
		public void*[4] __pad;
	}
	[ExplicitSize( Size = 10 )]
	[Alignment( Boundary = 2 )]
	public partial struct _fpreg {
		[ExplicitOffset( Offset = 0 )]
		public ushort[4] significand;
		[ExplicitOffset( Offset = 8 )]
		public ushort exponent;
	}
	[ExplicitSize( Size = 624 )]
	[Alignment( Boundary = 4 )]
	public partial struct _fpstate {
		[ExplicitOffset( Offset = 0 )]
		public uint cw;
		[ExplicitOffset( Offset = 4 )]
		public uint sw;
		[ExplicitOffset( Offset = 8 )]
		public uint tag;
		[ExplicitOffset( Offset = 12 )]
		public uint ipoff;
		[ExplicitOffset( Offset = 16 )]
		public uint cssel;
		[ExplicitOffset( Offset = 20 )]
		public uint dataoff;
		[ExplicitOffset( Offset = 24 )]
		public uint datasel;
		[ExplicitOffset( Offset = 28 )]
		public _fpreg[8] _st;
		[ExplicitOffset( Offset = 108 )]
		public ushort status;
		[ExplicitOffset( Offset = 110 )]
		public ushort magic;
		[ExplicitOffset( Offset = 112 )]
		public uint[6] _fxsr_env;
		[ExplicitOffset( Offset = 136 )]
		public uint mxcsr;
		[ExplicitOffset( Offset = 140 )]
		public uint __glibc_reserved1;
		[ExplicitOffset( Offset = 144 )]
		public _fpxreg[8] _fxsr_st;
		[ExplicitOffset( Offset = 272 )]
		public _xmmreg[8] _xmm;
		[ExplicitOffset( Offset = 400 )]
		public uint[56] __glibc_reserved2;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 4 )]
	public partial struct _fpx_sw_bytes {
		[ExplicitOffset( Offset = 0 )]
		public uint magic1;
		[ExplicitOffset( Offset = 4 )]
		public uint extended_size;
		[ExplicitOffset( Offset = 8 )]
		public ulong xstate_bv;
		[ExplicitOffset( Offset = 16 )]
		public uint xstate_size;
		[ExplicitOffset( Offset = 20 )]
		public uint[7] __glibc_reserved1;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 2 )]
	public partial struct _fpxreg {
		[ExplicitOffset( Offset = 0 )]
		public ushort[4] significand;
		[ExplicitOffset( Offset = 8 )]
		public ushort exponent;
		[ExplicitOffset( Offset = 10 )]
		public ushort[3] __glibc_reserved1;
	}
	public partial struct _IO_codecvt {
	}
	public partial struct _IO_marker {
	}
	public partial struct _IO_wide_data {
	}
	[ExplicitSize( Size = 10 )]
	[Alignment( Boundary = 2 )]
	public partial struct _libc_fpreg {
		[ExplicitOffset( Offset = 0 )]
		public ushort[4] significand;
		[ExplicitOffset( Offset = 8 )]
		public ushort exponent;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct _pthread_cleanup_buffer {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<void*> __routine;
		[ExplicitOffset( Offset = 4 )]
		public void* __arg;
		[ExplicitOffset( Offset = 8 )]
		public int __canceltype;
		[ExplicitOffset( Offset = 12 )]
		public _pthread_cleanup_buffer* __prev;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct _xmmreg {
		[ExplicitOffset( Offset = 0 )]
		public uint[4] element;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 4 )]
	public partial struct _xsave_hdr {
		[ExplicitOffset( Offset = 0 )]
		public ulong xstate_bv;
		[ExplicitOffset( Offset = 8 )]
		public ulong[2] __glibc_reserved1;
		[ExplicitOffset( Offset = 24 )]
		public ulong[5] __glibc_reserved2;
	}
	[ExplicitSize( Size = 944 )]
	[Alignment( Boundary = 4 )]
	public partial struct _xstate {
		[ExplicitOffset( Offset = 0 )]
		public _fpstate fpstate;
		[ExplicitOffset( Offset = 624 )]
		public _xsave_hdr xstate_hdr;
		[ExplicitOffset( Offset = 688 )]
		public _ymmh_state ymmh;
	}
	[ExplicitSize( Size = 256 )]
	[Alignment( Boundary = 4 )]
	public partial struct _ymmh_state {
		[ExplicitOffset( Offset = 0 )]
		public uint[64] ymmh_space;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct addrinfo {
		[ExplicitOffset( Offset = 0 )]
		public int ai_flags;
		[ExplicitOffset( Offset = 4 )]
		public int ai_family;
		[ExplicitOffset( Offset = 8 )]
		public int ai_socktype;
		[ExplicitOffset( Offset = 12 )]
		public int ai_protocol;
		[ExplicitOffset( Offset = 16 )]
		public uint ai_addrlen;
		[ExplicitOffset( Offset = 20 )]
		public sockaddr* ai_addr;
		[ExplicitOffset( Offset = 24 )]
		public CUtf8String ai_canonname;
		[ExplicitOffset( Offset = 28 )]
		public addrinfo* ai_next;
	}
	[ExplicitSize( Size = 7 )]
	public partial struct ax25_address {
		[ExplicitOffset( Offset = 0 )]
		public sbyte[7] ax25_call;
	}
	[ExplicitSize( Size = 23 )]
	public partial struct ax25_bpqaddr_struct {
		[ExplicitOffset( Offset = 0 )]
		public sbyte[16] dev;
		[ExplicitOffset( Offset = 16 )]
		public ax25_address addr;
	}
	[ExplicitSize( Size = 92 )]
	[Alignment( Boundary = 4 )]
	public partial struct ax25_ctl_struct {
		[ExplicitOffset( Offset = 0 )]
		public ax25_address port_addr;
		[ExplicitOffset( Offset = 7 )]
		public ax25_address source_addr;
		[ExplicitOffset( Offset = 14 )]
		public ax25_address dest_addr;
		[ExplicitOffset( Offset = 24 )]
		public uint cmd;
		[ExplicitOffset( Offset = 28 )]
		public uintptr arg;
		[ExplicitOffset( Offset = 32 )]
		public byte digi_count;
		[ExplicitOffset( Offset = 33 )]
		public ax25_address[8] digi_addr;
	}
	[ExplicitSize( Size = 14 )]
	public partial struct ax25_fwd_struct {
		[ExplicitOffset( Offset = 0 )]
		public ax25_address port_from;
		[ExplicitOffset( Offset = 7 )]
		public ax25_address port_to;
	}
	[ExplicitSize( Size = 52 )]
	[Alignment( Boundary = 4 )]
	public partial struct ax25_info_struct {
		[ExplicitOffset( Offset = 0 )]
		public uint n2;
		[ExplicitOffset( Offset = 4 )]
		public uint n2count;
		[ExplicitOffset( Offset = 8 )]
		public uint t1;
		[ExplicitOffset( Offset = 12 )]
		public uint t1timer;
		[ExplicitOffset( Offset = 16 )]
		public uint t2;
		[ExplicitOffset( Offset = 20 )]
		public uint t2timer;
		[ExplicitOffset( Offset = 24 )]
		public uint t3;
		[ExplicitOffset( Offset = 28 )]
		public uint t3timer;
		[ExplicitOffset( Offset = 32 )]
		public uint idle;
		[ExplicitOffset( Offset = 36 )]
		public uint idletimer;
		[ExplicitOffset( Offset = 40 )]
		public uint state;
		[ExplicitOffset( Offset = 44 )]
		public uint rcv_q;
		[ExplicitOffset( Offset = 48 )]
		public uint snd_q;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 2 )]
	public partial struct ax25_parms_struct {
		[ExplicitOffset( Offset = 0 )]
		public ax25_address port_addr;
		[ExplicitOffset( Offset = 8 )]
		public ushort[20] values;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct ax25_route_opt_struct {
		[ExplicitOffset( Offset = 0 )]
		public ax25_address port_addr;
		[ExplicitOffset( Offset = 7 )]
		public ax25_address dest_addr;
		[ExplicitOffset( Offset = 16 )]
		public int cmd;
		[ExplicitOffset( Offset = 20 )]
		public int arg;
	}
	[ExplicitSize( Size = 71 )]
	public partial struct ax25_routes_struct {
		[ExplicitOffset( Offset = 0 )]
		public ax25_address port_addr;
		[ExplicitOffset( Offset = 7 )]
		public ax25_address dest_addr;
		[ExplicitOffset( Offset = 14 )]
		public byte digi_count;
		[ExplicitOffset( Offset = 15 )]
		public ax25_address[8] digi_addr;
	}
	public partial struct cap_t {
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct cmsghdr {
		[ExplicitOffset( Offset = 0 )]
		public uint cmsg_len;
		[ExplicitOffset( Offset = 4 )]
		public int cmsg_level;
		[ExplicitOffset( Offset = 8 )]
		public int cmsg_type;
		public byte* __cmsg_data { get { return cast<byte*>( &this + 1 ); } }
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct cookie_io_functions_t {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<void*, sbyte*, uint, int> read;
		[ExplicitOffset( Offset = 4 )]
		public Functors.Func<void*, sbyte*, uint, int> write;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<void*, long*, int, int> seek;
		[ExplicitOffset( Offset = 12 )]
		public Functors.Func<void*, int> close;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct cpu_set_t {
		[ExplicitOffset( Offset = 0 )]
		public uintptr[32] __bits;
	}
	public partial struct DIR {
	}
	[ExplicitSize( Size = 268 )]
	[Alignment( Boundary = 4 )]
	public partial struct dirent {
		[ExplicitOffset( Offset = 0 )]
		public uintptr d_ino;
		[ExplicitOffset( Offset = 4 )]
		public intptr d_off;
		[ExplicitOffset( Offset = 8 )]
		public ushort d_reclen;
		[ExplicitOffset( Offset = 10 )]
		public byte d_type;
		[ExplicitOffset( Offset = 11 )]
		public sbyte[256] d_name;
	}
	[ExplicitSize( Size = 276 )]
	[Alignment( Boundary = 4 )]
	public partial struct dirent64 {
		[ExplicitOffset( Offset = 0 )]
		public ulong d_ino;
		[ExplicitOffset( Offset = 8 )]
		public long d_off;
		[ExplicitOffset( Offset = 16 )]
		public ushort d_reclen;
		[ExplicitOffset( Offset = 18 )]
		public byte d_type;
		[ExplicitOffset( Offset = 19 )]
		public sbyte[256] d_name;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct div_t {
		[ExplicitOffset( Offset = 0 )]
		public int quot;
		[ExplicitOffset( Offset = 4 )]
		public int rem;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Dl_info {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String dli_fname;
		[ExplicitOffset( Offset = 4 )]
		public void* dli_fbase;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String dli_sname;
		[ExplicitOffset( Offset = 12 )]
		public void* dli_saddr;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 4 )]
	public partial struct dl_phdr_info {
		[ExplicitOffset( Offset = 0 )]
		public uint dlpi_addr;
		[ExplicitOffset( Offset = 4 )]
		public CUtf8String dlpi_name;
		[ExplicitOffset( Offset = 8 )]
		public Elf32_Phdr* dlpi_phdr;
		[ExplicitOffset( Offset = 12 )]
		public ushort dlpi_phnum;
		[ExplicitOffset( Offset = 16 )]
		public ulong dlpi_adds;
		[ExplicitOffset( Offset = 24 )]
		public ulong dlpi_subs;
		[ExplicitOffset( Offset = 32 )]
		public uint dlpi_tls_modid;
		[ExplicitOffset( Offset = 36 )]
		public void* dlpi_tls_data;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Dl_serinfo {
		[ExplicitOffset( Offset = 0 )]
		public uint dls_size;
		[ExplicitOffset( Offset = 4 )]
		public uint dls_cnt;
		[ExplicitOffset( Offset = 8 )]
		public Dl_serpath[1] dls_serpath;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Dl_serpath {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String dls_name;
		[ExplicitOffset( Offset = 4 )]
		public uint dls_flags;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct drand48_data {
		[ExplicitOffset( Offset = 0 )]
		public ushort[3] __x;
		[ExplicitOffset( Offset = 6 )]
		public ushort[3] __old_x;
		[ExplicitOffset( Offset = 12 )]
		public ushort __c;
		[ExplicitOffset( Offset = 14 )]
		public ushort __init;
		[ExplicitOffset( Offset = 16 )]
		public ulong __a;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf_MIPS_ABIFlags_v0 {
		[ExplicitOffset( Offset = 0 )]
		public ushort version;
		[ExplicitOffset( Offset = 2 )]
		public byte isa_level;
		[ExplicitOffset( Offset = 3 )]
		public byte isa_rev;
		[ExplicitOffset( Offset = 4 )]
		public byte gpr_size;
		[ExplicitOffset( Offset = 5 )]
		public byte cpr1_size;
		[ExplicitOffset( Offset = 6 )]
		public byte cpr2_size;
		[ExplicitOffset( Offset = 7 )]
		public byte fp_abi;
		[ExplicitOffset( Offset = 8 )]
		public uint isa_ext;
		[ExplicitOffset( Offset = 12 )]
		public uint ases;
		[ExplicitOffset( Offset = 16 )]
		public uint flags1;
		[ExplicitOffset( Offset = 20 )]
		public uint flags2;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf_Options {
		[ExplicitOffset( Offset = 0 )]
		public byte kind;
		[ExplicitOffset( Offset = 1 )]
		public byte size;
		[ExplicitOffset( Offset = 2 )]
		public ushort section;
		[ExplicitOffset( Offset = 4 )]
		public uint info;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf_Options_Hw {
		[ExplicitOffset( Offset = 0 )]
		public uint hwp_flags1;
		[ExplicitOffset( Offset = 4 )]
		public uint hwp_flags2;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_auxv_t {
		[ExplicitOffset( Offset = 0 )]
		public uint a_type;
		[ExplicitOffset( Offset = 4 )]
		public UnnamedUnion_7012B444 a_un;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Chdr {
		[ExplicitOffset( Offset = 0 )]
		public uint ch_type;
		[ExplicitOffset( Offset = 4 )]
		public uint ch_size;
		[ExplicitOffset( Offset = 8 )]
		public uint ch_addralign;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Dyn {
		[ExplicitOffset( Offset = 0 )]
		public int d_tag;
		[ExplicitOffset( Offset = 4 )]
		public UnnamedUnion_70135FBA d_un;
	}
	[ExplicitSize( Size = 52 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Ehdr {
		[ExplicitOffset( Offset = 0 )]
		public byte[16] e_ident;
		[ExplicitOffset( Offset = 16 )]
		public ushort e_type;
		[ExplicitOffset( Offset = 18 )]
		public ushort e_machine;
		[ExplicitOffset( Offset = 20 )]
		public uint e_version;
		[ExplicitOffset( Offset = 24 )]
		public uint e_entry;
		[ExplicitOffset( Offset = 28 )]
		public uint e_phoff;
		[ExplicitOffset( Offset = 32 )]
		public uint e_shoff;
		[ExplicitOffset( Offset = 36 )]
		public uint e_flags;
		[ExplicitOffset( Offset = 40 )]
		public ushort e_ehsize;
		[ExplicitOffset( Offset = 42 )]
		public ushort e_phentsize;
		[ExplicitOffset( Offset = 44 )]
		public ushort e_phnum;
		[ExplicitOffset( Offset = 46 )]
		public ushort e_shentsize;
		[ExplicitOffset( Offset = 48 )]
		public ushort e_shnum;
		[ExplicitOffset( Offset = 50 )]
		public ushort e_shstrndx;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_gptab {
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_70130B8F gt_header;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_70130A60 gt_entry;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Lib {
		[ExplicitOffset( Offset = 0 )]
		public uint l_name;
		[ExplicitOffset( Offset = 4 )]
		public uint l_time_stamp;
		[ExplicitOffset( Offset = 8 )]
		public uint l_checksum;
		[ExplicitOffset( Offset = 12 )]
		public uint l_version;
		[ExplicitOffset( Offset = 16 )]
		public uint l_flags;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Move {
		[ExplicitOffset( Offset = 0 )]
		public ulong m_value;
		[ExplicitOffset( Offset = 8 )]
		public uint m_info;
		[ExplicitOffset( Offset = 12 )]
		public uint m_poffset;
		[ExplicitOffset( Offset = 16 )]
		public ushort m_repeat;
		[ExplicitOffset( Offset = 18 )]
		public ushort m_stride;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Nhdr {
		[ExplicitOffset( Offset = 0 )]
		public uint n_namesz;
		[ExplicitOffset( Offset = 4 )]
		public uint n_descsz;
		[ExplicitOffset( Offset = 8 )]
		public uint n_type;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Phdr {
		[ExplicitOffset( Offset = 0 )]
		public uint p_type;
		[ExplicitOffset( Offset = 4 )]
		public uint p_offset;
		[ExplicitOffset( Offset = 8 )]
		public uint p_vaddr;
		[ExplicitOffset( Offset = 12 )]
		public uint p_paddr;
		[ExplicitOffset( Offset = 16 )]
		public uint p_filesz;
		[ExplicitOffset( Offset = 20 )]
		public uint p_memsz;
		[ExplicitOffset( Offset = 24 )]
		public uint p_flags;
		[ExplicitOffset( Offset = 28 )]
		public uint p_align;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_RegInfo {
		[ExplicitOffset( Offset = 0 )]
		public uint ri_gprmask;
		[ExplicitOffset( Offset = 4 )]
		public uint[4] ri_cprmask;
		[ExplicitOffset( Offset = 20 )]
		public int ri_gp_value;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Rel {
		[ExplicitOffset( Offset = 0 )]
		public uint r_offset;
		[ExplicitOffset( Offset = 4 )]
		public uint r_info;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Rela {
		[ExplicitOffset( Offset = 0 )]
		public uint r_offset;
		[ExplicitOffset( Offset = 4 )]
		public uint r_info;
		[ExplicitOffset( Offset = 8 )]
		public int r_addend;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Shdr {
		[ExplicitOffset( Offset = 0 )]
		public uint sh_name;
		[ExplicitOffset( Offset = 4 )]
		public uint sh_type;
		[ExplicitOffset( Offset = 8 )]
		public uint sh_flags;
		[ExplicitOffset( Offset = 12 )]
		public uint sh_addr;
		[ExplicitOffset( Offset = 16 )]
		public uint sh_offset;
		[ExplicitOffset( Offset = 20 )]
		public uint sh_size;
		[ExplicitOffset( Offset = 24 )]
		public uint sh_link;
		[ExplicitOffset( Offset = 28 )]
		public uint sh_info;
		[ExplicitOffset( Offset = 32 )]
		public uint sh_addralign;
		[ExplicitOffset( Offset = 36 )]
		public uint sh_entsize;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Sym {
		[ExplicitOffset( Offset = 0 )]
		public uint st_name;
		[ExplicitOffset( Offset = 4 )]
		public uint st_value;
		[ExplicitOffset( Offset = 8 )]
		public uint st_size;
		[ExplicitOffset( Offset = 12 )]
		public byte st_info;
		[ExplicitOffset( Offset = 13 )]
		public byte st_other;
		[ExplicitOffset( Offset = 14 )]
		public ushort st_shndx;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 2 )]
	public partial struct Elf32_Syminfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort si_boundto;
		[ExplicitOffset( Offset = 2 )]
		public ushort si_flags;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Verdaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vda_name;
		[ExplicitOffset( Offset = 4 )]
		public uint vda_next;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Verdef {
		[ExplicitOffset( Offset = 0 )]
		public ushort vd_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vd_flags;
		[ExplicitOffset( Offset = 4 )]
		public ushort vd_ndx;
		[ExplicitOffset( Offset = 6 )]
		public ushort vd_cnt;
		[ExplicitOffset( Offset = 8 )]
		public uint vd_hash;
		[ExplicitOffset( Offset = 12 )]
		public uint vd_aux;
		[ExplicitOffset( Offset = 16 )]
		public uint vd_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Vernaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vna_hash;
		[ExplicitOffset( Offset = 4 )]
		public ushort vna_flags;
		[ExplicitOffset( Offset = 6 )]
		public ushort vna_other;
		[ExplicitOffset( Offset = 8 )]
		public uint vna_name;
		[ExplicitOffset( Offset = 12 )]
		public uint vna_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf32_Verneed {
		[ExplicitOffset( Offset = 0 )]
		public ushort vn_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vn_cnt;
		[ExplicitOffset( Offset = 4 )]
		public uint vn_file;
		[ExplicitOffset( Offset = 8 )]
		public uint vn_aux;
		[ExplicitOffset( Offset = 12 )]
		public uint vn_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_auxv_t {
		[ExplicitOffset( Offset = 0 )]
		public ulong a_type;
		[ExplicitOffset( Offset = 8 )]
		public UnnamedUnion_7012B2B8 a_un;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Chdr {
		[ExplicitOffset( Offset = 0 )]
		public uint ch_type;
		[ExplicitOffset( Offset = 4 )]
		public uint ch_reserved;
		[ExplicitOffset( Offset = 8 )]
		public ulong ch_size;
		[ExplicitOffset( Offset = 16 )]
		public ulong ch_addralign;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Dyn {
		[ExplicitOffset( Offset = 0 )]
		public long d_tag;
		[ExplicitOffset( Offset = 8 )]
		public UnnamedUnion_70135DE8 d_un;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Ehdr {
		[ExplicitOffset( Offset = 0 )]
		public byte[16] e_ident;
		[ExplicitOffset( Offset = 16 )]
		public ushort e_type;
		[ExplicitOffset( Offset = 18 )]
		public ushort e_machine;
		[ExplicitOffset( Offset = 20 )]
		public uint e_version;
		[ExplicitOffset( Offset = 24 )]
		public ulong e_entry;
		[ExplicitOffset( Offset = 32 )]
		public ulong e_phoff;
		[ExplicitOffset( Offset = 40 )]
		public ulong e_shoff;
		[ExplicitOffset( Offset = 48 )]
		public uint e_flags;
		[ExplicitOffset( Offset = 52 )]
		public ushort e_ehsize;
		[ExplicitOffset( Offset = 54 )]
		public ushort e_phentsize;
		[ExplicitOffset( Offset = 56 )]
		public ushort e_phnum;
		[ExplicitOffset( Offset = 58 )]
		public ushort e_shentsize;
		[ExplicitOffset( Offset = 60 )]
		public ushort e_shnum;
		[ExplicitOffset( Offset = 62 )]
		public ushort e_shstrndx;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Lib {
		[ExplicitOffset( Offset = 0 )]
		public uint l_name;
		[ExplicitOffset( Offset = 4 )]
		public uint l_time_stamp;
		[ExplicitOffset( Offset = 8 )]
		public uint l_checksum;
		[ExplicitOffset( Offset = 12 )]
		public uint l_version;
		[ExplicitOffset( Offset = 16 )]
		public uint l_flags;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Move {
		[ExplicitOffset( Offset = 0 )]
		public ulong m_value;
		[ExplicitOffset( Offset = 8 )]
		public ulong m_info;
		[ExplicitOffset( Offset = 16 )]
		public ulong m_poffset;
		[ExplicitOffset( Offset = 24 )]
		public ushort m_repeat;
		[ExplicitOffset( Offset = 26 )]
		public ushort m_stride;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Nhdr {
		[ExplicitOffset( Offset = 0 )]
		public uint n_namesz;
		[ExplicitOffset( Offset = 4 )]
		public uint n_descsz;
		[ExplicitOffset( Offset = 8 )]
		public uint n_type;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Phdr {
		[ExplicitOffset( Offset = 0 )]
		public uint p_type;
		[ExplicitOffset( Offset = 4 )]
		public uint p_flags;
		[ExplicitOffset( Offset = 8 )]
		public ulong p_offset;
		[ExplicitOffset( Offset = 16 )]
		public ulong p_vaddr;
		[ExplicitOffset( Offset = 24 )]
		public ulong p_paddr;
		[ExplicitOffset( Offset = 32 )]
		public ulong p_filesz;
		[ExplicitOffset( Offset = 40 )]
		public ulong p_memsz;
		[ExplicitOffset( Offset = 48 )]
		public ulong p_align;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Rel {
		[ExplicitOffset( Offset = 0 )]
		public ulong r_offset;
		[ExplicitOffset( Offset = 8 )]
		public ulong r_info;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Rela {
		[ExplicitOffset( Offset = 0 )]
		public ulong r_offset;
		[ExplicitOffset( Offset = 8 )]
		public ulong r_info;
		[ExplicitOffset( Offset = 16 )]
		public long r_addend;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Shdr {
		[ExplicitOffset( Offset = 0 )]
		public uint sh_name;
		[ExplicitOffset( Offset = 4 )]
		public uint sh_type;
		[ExplicitOffset( Offset = 8 )]
		public ulong sh_flags;
		[ExplicitOffset( Offset = 16 )]
		public ulong sh_addr;
		[ExplicitOffset( Offset = 24 )]
		public ulong sh_offset;
		[ExplicitOffset( Offset = 32 )]
		public ulong sh_size;
		[ExplicitOffset( Offset = 40 )]
		public uint sh_link;
		[ExplicitOffset( Offset = 44 )]
		public uint sh_info;
		[ExplicitOffset( Offset = 48 )]
		public ulong sh_addralign;
		[ExplicitOffset( Offset = 56 )]
		public ulong sh_entsize;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Sym {
		[ExplicitOffset( Offset = 0 )]
		public uint st_name;
		[ExplicitOffset( Offset = 4 )]
		public byte st_info;
		[ExplicitOffset( Offset = 5 )]
		public byte st_other;
		[ExplicitOffset( Offset = 6 )]
		public ushort st_shndx;
		[ExplicitOffset( Offset = 8 )]
		public ulong st_value;
		[ExplicitOffset( Offset = 16 )]
		public ulong st_size;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 2 )]
	public partial struct Elf64_Syminfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort si_boundto;
		[ExplicitOffset( Offset = 2 )]
		public ushort si_flags;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Verdaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vda_name;
		[ExplicitOffset( Offset = 4 )]
		public uint vda_next;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Verdef {
		[ExplicitOffset( Offset = 0 )]
		public ushort vd_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vd_flags;
		[ExplicitOffset( Offset = 4 )]
		public ushort vd_ndx;
		[ExplicitOffset( Offset = 6 )]
		public ushort vd_cnt;
		[ExplicitOffset( Offset = 8 )]
		public uint vd_hash;
		[ExplicitOffset( Offset = 12 )]
		public uint vd_aux;
		[ExplicitOffset( Offset = 16 )]
		public uint vd_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Vernaux {
		[ExplicitOffset( Offset = 0 )]
		public uint vna_hash;
		[ExplicitOffset( Offset = 4 )]
		public ushort vna_flags;
		[ExplicitOffset( Offset = 6 )]
		public ushort vna_other;
		[ExplicitOffset( Offset = 8 )]
		public uint vna_name;
		[ExplicitOffset( Offset = 12 )]
		public uint vna_next;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct Elf64_Verneed {
		[ExplicitOffset( Offset = 0 )]
		public ushort vn_version;
		[ExplicitOffset( Offset = 2 )]
		public ushort vn_cnt;
		[ExplicitOffset( Offset = 4 )]
		public uint vn_file;
		[ExplicitOffset( Offset = 8 )]
		public uint vn_aux;
		[ExplicitOffset( Offset = 12 )]
		public uint vn_next;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct epoll_data {
		[Overlapped( Offset = 0 )]
		public void* ptr;
		[Overlapped( Offset = 0 )]
		public int fd;
		[Overlapped( Offset = 0 )]
		public uint u32;
		[Overlapped( Offset = 0 )]
		public ulong u64;
	}
	[ExplicitSize( Size = 12 )]
	public partial struct epoll_event {
		[ExplicitOffset( Offset = 0 )]
		public uint events;
		[ExplicitOffset( Offset = 4 )]
		public epoll_data data;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct f_owner_ex {
		[ExplicitOffset( Offset = 0 )]
		public __pid_type type;
		[ExplicitOffset( Offset = 4 )]
		public int pid;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct fd_set {
		[ExplicitOffset( Offset = 0 )]
		public intptr[32] fds_bits;
	}
	[ExplicitSize( Size = 148 )]
	[Alignment( Boundary = 4 )]
	public partial struct FILE {
		[ExplicitOffset( Offset = 0 )]
		public int _flags;
		[ExplicitOffset( Offset = 4 )]
		public sbyte* _IO_read_ptr;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* _IO_read_end;
		[ExplicitOffset( Offset = 12 )]
		public sbyte* _IO_read_base;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* _IO_write_base;
		[ExplicitOffset( Offset = 20 )]
		public sbyte* _IO_write_ptr;
		[ExplicitOffset( Offset = 24 )]
		public sbyte* _IO_write_end;
		[ExplicitOffset( Offset = 28 )]
		public sbyte* _IO_buf_base;
		[ExplicitOffset( Offset = 32 )]
		public sbyte* _IO_buf_end;
		[ExplicitOffset( Offset = 36 )]
		public sbyte* _IO_save_base;
		[ExplicitOffset( Offset = 40 )]
		public sbyte* _IO_backup_base;
		[ExplicitOffset( Offset = 44 )]
		public sbyte* _IO_save_end;
		[ExplicitOffset( Offset = 48 )]
		public _IO_marker* _markers;
		[ExplicitOffset( Offset = 52 )]
		public FILE* _chain;
		[ExplicitOffset( Offset = 56 )]
		public int _fileno;
		[ExplicitOffset( Offset = 60 )]
		public int _flags2;
		[ExplicitOffset( Offset = 64 )]
		public intptr _old_offset;
		[ExplicitOffset( Offset = 68 )]
		public ushort _cur_column;
		[ExplicitOffset( Offset = 70 )]
		public sbyte _vtable_offset;
		[ExplicitOffset( Offset = 71 )]
		public sbyte[1] _shortbuf;
		[ExplicitOffset( Offset = 72 )]
		public void* _lock;
		[ExplicitOffset( Offset = 76 )]
		public long _offset;
		[ExplicitOffset( Offset = 84 )]
		public _IO_codecvt* _codecvt;
		[ExplicitOffset( Offset = 88 )]
		public _IO_wide_data* _wide_data;
		[ExplicitOffset( Offset = 92 )]
		public FILE* _freeres_list;
		[ExplicitOffset( Offset = 96 )]
		public void* _freeres_buf;
		[ExplicitOffset( Offset = 100 )]
		public uint __pad5;
		[ExplicitOffset( Offset = 104 )]
		public int _mode;
		[ExplicitOffset( Offset = 108 )]
		public sbyte[40] _unused2;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct file_handle {
		[ExplicitOffset( Offset = 0 )]
		public uint handle_bytes;
		[ExplicitOffset( Offset = 4 )]
		public int handle_type;
		[ExplicitOffset( Offset = 8 )]
		public byte[0] f_handle;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct flock {
		[ExplicitOffset( Offset = 0 )]
		public short l_type;
		[ExplicitOffset( Offset = 2 )]
		public short l_whence;
		[ExplicitOffset( Offset = 4 )]
		public intptr l_start;
		[ExplicitOffset( Offset = 8 )]
		public intptr l_len;
		[ExplicitOffset( Offset = 12 )]
		public int l_pid;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct flock64 {
		[ExplicitOffset( Offset = 0 )]
		public short l_type;
		[ExplicitOffset( Offset = 2 )]
		public short l_whence;
		[ExplicitOffset( Offset = 4 )]
		public long l_start;
		[ExplicitOffset( Offset = 12 )]
		public long l_len;
		[ExplicitOffset( Offset = 20 )]
		public int l_pid;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct fpos_t {
		[ExplicitOffset( Offset = 0 )]
		public intptr __pos;
		[ExplicitOffset( Offset = 4 )]
		public __mbstate_t __state;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct fpos64_t {
		[ExplicitOffset( Offset = 0 )]
		public long __pos;
		[ExplicitOffset( Offset = 8 )]
		public __mbstate_t __state;
	}
	[ExplicitSize( Size = 112 )]
	[Alignment( Boundary = 4 )]
	public partial struct fpregset_t {
		[ExplicitOffset( Offset = 0 )]
		public uintptr cw;
		[ExplicitOffset( Offset = 4 )]
		public uintptr sw;
		[ExplicitOffset( Offset = 8 )]
		public uintptr tag;
		[ExplicitOffset( Offset = 12 )]
		public uintptr ipoff;
		[ExplicitOffset( Offset = 16 )]
		public uintptr cssel;
		[ExplicitOffset( Offset = 20 )]
		public uintptr dataoff;
		[ExplicitOffset( Offset = 24 )]
		public uintptr datasel;
		[ExplicitOffset( Offset = 28 )]
		public _libc_fpreg[8] _st;
		[ExplicitOffset( Offset = 108 )]
		public uintptr status;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct fsid_t {
		[ExplicitOffset( Offset = 0 )]
		public int[2] __val;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 4 )]
	public partial struct full_sockaddr_ax25 {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_ax25 fsa_ax25;
		[ExplicitOffset( Offset = 16 )]
		public ax25_address[8] fsa_digipeater;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 4 )]
	public partial struct full_sockaddr_rose {
		[ExplicitOffset( Offset = 0 )]
		public ushort srose_family;
		[ExplicitOffset( Offset = 2 )]
		public rose_address srose_addr;
		[ExplicitOffset( Offset = 7 )]
		public ax25_address srose_call;
		[ExplicitOffset( Offset = 16 )]
		public uint srose_ndigis;
		[ExplicitOffset( Offset = 20 )]
		public ax25_address[6] srose_digis;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 4 )]
	public partial struct gaicb {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String ar_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte* ar_service;
		[ExplicitOffset( Offset = 8 )]
		public addrinfo* ar_request;
		[ExplicitOffset( Offset = 12 )]
		public addrinfo* ar_result;
		[ExplicitOffset( Offset = 16 )]
		public int __return;
		[ExplicitOffset( Offset = 20 )]
		public int[5] __glibc_reserved;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct group {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String gr_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte* gr_passwd;
		[ExplicitOffset( Offset = 8 )]
		public uint gr_gid;
		[ExplicitOffset( Offset = 12 )]
		public sbyte** gr_mem;
	}
	[ExplicitSize( Size = 268 )]
	[Alignment( Boundary = 4 )]
	public partial struct group_filter {
		[ExplicitOffset( Offset = 0 )]
		public uint gf_interface;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage gf_group;
		[ExplicitOffset( Offset = 132 )]
		public uint gf_fmode;
		[ExplicitOffset( Offset = 136 )]
		public uint gf_numsrc;
		[ExplicitOffset( Offset = 140 )]
		public sockaddr_storage[1] gf_slist;
	}
	[ExplicitSize( Size = 132 )]
	[Alignment( Boundary = 4 )]
	public partial struct group_req {
		[ExplicitOffset( Offset = 0 )]
		public uint gr_interface;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage gr_group;
	}
	[ExplicitSize( Size = 260 )]
	[Alignment( Boundary = 4 )]
	public partial struct group_source_req {
		[ExplicitOffset( Offset = 0 )]
		public uint gsr_interface;
		[ExplicitOffset( Offset = 4 )]
		public sockaddr_storage gsr_group;
		[ExplicitOffset( Offset = 132 )]
		public sockaddr_storage gsr_source;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct hostent {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String h_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte** h_aliases;
		[ExplicitOffset( Offset = 8 )]
		public int h_addrtype;
		[ExplicitOffset( Offset = 12 )]
		public int h_length;
		[ExplicitOffset( Offset = 16 )]
		public sbyte** h_addr_list;
	}
	[Alignment( Boundary = 4 )]
	[PrimitiveType( Size = sizeof( void* ) )]
	public partial struct iconv_t {
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct ifaddrs {
		[ExplicitOffset( Offset = 0 )]
		public ifaddrs* ifa_next;
		[ExplicitOffset( Offset = 4 )]
		public CUtf8String ifa_name;
		[ExplicitOffset( Offset = 8 )]
		public uint ifa_flags;
		[ExplicitOffset( Offset = 12 )]
		public sockaddr* ifa_addr;
		[ExplicitOffset( Offset = 16 )]
		public sockaddr* ifa_netmask;
		[ExplicitOffset( Offset = 20 )]
		public UnnamedUnion_EA05F89D ifa_ifu;
		[ExplicitOffset( Offset = 24 )]
		public void* ifa_data;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct in_addr {
		[ExplicitOffset( Offset = 0 )]
		public uint s_addr;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct in_pktinfo {
		[ExplicitOffset( Offset = 0 )]
		public int ipi_ifindex;
		[ExplicitOffset( Offset = 4 )]
		public in_addr ipi_spec_dst;
		[ExplicitOffset( Offset = 8 )]
		public in_addr ipi_addr;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct in6_addr {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedUnion_851F6047 __in6_u;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct in6_pktinfo {
		[ExplicitOffset( Offset = 0 )]
		public in6_addr ipi6_addr;
		[ExplicitOffset( Offset = 16 )]
		public uint ipi6_ifindex;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct iovec {
		[ExplicitOffset( Offset = 0 )]
		public void* iov_base;
		[ExplicitOffset( Offset = 4 )]
		public uint iov_len;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_mreq {
		[ExplicitOffset( Offset = 0 )]
		public in_addr imr_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public in_addr imr_interface;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_mreq_source {
		[ExplicitOffset( Offset = 0 )]
		public in_addr imr_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public in_addr imr_interface;
		[ExplicitOffset( Offset = 8 )]
		public in_addr imr_sourceaddr;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_mreqn {
		[ExplicitOffset( Offset = 0 )]
		public in_addr imr_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public in_addr imr_address;
		[ExplicitOffset( Offset = 8 )]
		public int imr_ifindex;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_msfilter {
		[ExplicitOffset( Offset = 0 )]
		public in_addr imsf_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public in_addr imsf_interface;
		[ExplicitOffset( Offset = 8 )]
		public uint imsf_fmode;
		[ExplicitOffset( Offset = 12 )]
		public uint imsf_numsrc;
		[ExplicitOffset( Offset = 16 )]
		public in_addr[1] imsf_slist;
	}
	[ExplicitSize( Size = 44 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_opts {
		[ExplicitOffset( Offset = 0 )]
		public in_addr ip_dst;
		[ExplicitOffset( Offset = 4 )]
		public sbyte[40] _ip_opts;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip6_mtuinfo {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_in6 ip6m_addr;
		[ExplicitOffset( Offset = 28 )]
		public uint ip6m_mtu;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct ipv6_mreq {
		[ExplicitOffset( Offset = 0 )]
		public in6_addr ipv6mr_multiaddr;
		[ExplicitOffset( Offset = 16 )]
		public uint ipv6mr_interface;
	}
	[ExplicitSize( Size = 2 )]
	public partial struct ipx_config_data {
		[ExplicitOffset( Offset = 0 )]
		public byte ipxcfg_auto_select_primary;
		[ExplicitOffset( Offset = 1 )]
		public byte ipxcfg_auto_create_interfaces;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct ipx_interface_definition {
		[ExplicitOffset( Offset = 0 )]
		public uintptr ipx_network;
		[ExplicitOffset( Offset = 4 )]
		public byte[16] ipx_device;
		[ExplicitOffset( Offset = 20 )]
		public byte ipx_dlink_type;
		[ExplicitOffset( Offset = 21 )]
		public byte ipx_special;
		[ExplicitOffset( Offset = 22 )]
		public byte[6] ipx_node;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct ipx_route_def {
		[ExplicitOffset( Offset = 0 )]
		public uintptr ipx_network;
		[ExplicitOffset( Offset = 4 )]
		public uintptr ipx_router_network;
		[ExplicitOffset( Offset = 8 )]
		public byte[6] ipx_router_node;
		[ExplicitOffset( Offset = 14 )]
		public byte[16] ipx_device;
		[ExplicitOffset( Offset = 30 )]
		public ushort ipx_flags;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct ipx_route_definition {
		[ExplicitOffset( Offset = 0 )]
		public uintptr ipx_network;
		[ExplicitOffset( Offset = 4 )]
		public uintptr ipx_router_network;
		[ExplicitOffset( Offset = 8 )]
		public byte[6] ipx_router_node;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct itimerspec {
		[ExplicitOffset( Offset = 0 )]
		public timespec it_interval;
		[ExplicitOffset( Offset = 8 )]
		public timespec it_value;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct itimerval {
		[ExplicitOffset( Offset = 0 )]
		public timeval it_interval;
		[ExplicitOffset( Offset = 8 )]
		public timeval it_value;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct La_i86_regs {
		[ExplicitOffset( Offset = 0 )]
		public uint lr_edx;
		[ExplicitOffset( Offset = 4 )]
		public uint lr_ecx;
		[ExplicitOffset( Offset = 8 )]
		public uint lr_eax;
		[ExplicitOffset( Offset = 12 )]
		public uint lr_ebp;
		[ExplicitOffset( Offset = 16 )]
		public uint lr_esp;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 4 )]
	public partial struct La_i86_retval {
		[ExplicitOffset( Offset = 0 )]
		public uint lrv_eax;
		[ExplicitOffset( Offset = 4 )]
		public uint lrv_edx;
		[ExplicitOffset( Offset = 8 )]
		public uint[3] lrv_st0;
		[ExplicitOffset( Offset = 20 )]
		public uint[3] lrv_st1;
		[ExplicitOffset( Offset = 32 )]
		public ulong lrv_bnd0;
		[ExplicitOffset( Offset = 40 )]
		public ulong lrv_bnd1;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct ldiv_t {
		[ExplicitOffset( Offset = 0 )]
		public intptr quot;
		[ExplicitOffset( Offset = 4 )]
		public intptr rem;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct linger {
		[ExplicitOffset( Offset = 0 )]
		public int l_onoff;
		[ExplicitOffset( Offset = 4 )]
		public int l_linger;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct link_map {
		[ExplicitOffset( Offset = 0 )]
		public uint l_addr;
		[ExplicitOffset( Offset = 4 )]
		public CUtf8String l_name;
		[ExplicitOffset( Offset = 8 )]
		public Elf32_Dyn* l_ld;
		[ExplicitOffset( Offset = 12 )]
		public link_map* l_next;
		[ExplicitOffset( Offset = 16 )]
		public link_map* l_prev;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct lldiv_t {
		[ExplicitOffset( Offset = 0 )]
		public long quot;
		[ExplicitOffset( Offset = 8 )]
		public long rem;
	}
	[ExplicitSize( Size = 116 )]
	[Alignment( Boundary = 4 )]
	public partial struct locale_t {
		[ExplicitOffset( Offset = 0 )]
		public __locale_data*[13] __locales;
		[ExplicitOffset( Offset = 52 )]
		public ushort* __ctype_b;
		[ExplicitOffset( Offset = 56 )]
		public int* __ctype_tolower;
		[ExplicitOffset( Offset = 60 )]
		public int* __ctype_toupper;
		[ExplicitOffset( Offset = 64 )]
		public sbyte*[13] __names;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 16 )]
	public partial struct max_align_t {
		[ExplicitOffset( Offset = 0 )]
		public long __max_align_ll;
		[ExplicitOffset( Offset = 8 )]
		public uint[3] __max_align_ld;
		[ExplicitOffset( Offset = 32 )]
		public ulong[2] __max_align_f128;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 4 )]
	public partial struct mcontext_t {
		[ExplicitOffset( Offset = 0 )]
		public int[19] gregs;
		[ExplicitOffset( Offset = 76 )]
		public fpregset_t* fpregs;
		[ExplicitOffset( Offset = 80 )]
		public uintptr oldmask;
		[ExplicitOffset( Offset = 84 )]
		public uintptr cr2;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct mmsghdr {
		[ExplicitOffset( Offset = 0 )]
		public msghdr msg_hdr;
		[ExplicitOffset( Offset = 28 )]
		public uint msg_len;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct msghdr {
		[ExplicitOffset( Offset = 0 )]
		public void* msg_name;
		[ExplicitOffset( Offset = 4 )]
		public uint msg_namelen;
		[ExplicitOffset( Offset = 8 )]
		public iovec* msg_iov;
		[ExplicitOffset( Offset = 12 )]
		public uint msg_iovlen;
		[ExplicitOffset( Offset = 16 )]
		public void* msg_control;
		[ExplicitOffset( Offset = 20 )]
		public uint msg_controllen;
		[ExplicitOffset( Offset = 24 )]
		public int msg_flags;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct netent {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String n_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte** n_aliases;
		[ExplicitOffset( Offset = 8 )]
		public int n_addrtype;
		[ExplicitOffset( Offset = 12 )]
		public uint n_net;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct nr_ctl_struct {
		[ExplicitOffset( Offset = 0 )]
		public byte index;
		[ExplicitOffset( Offset = 1 )]
		public byte id;
		[ExplicitOffset( Offset = 4 )]
		public uint cmd;
		[ExplicitOffset( Offset = 8 )]
		public uintptr arg;
	}
	[ExplicitSize( Size = 36 )]
	[Alignment( Boundary = 4 )]
	public partial struct nr_parms_struct {
		[ExplicitOffset( Offset = 0 )]
		public uint quality;
		[ExplicitOffset( Offset = 4 )]
		public uint obs_count;
		[ExplicitOffset( Offset = 8 )]
		public uint ttl;
		[ExplicitOffset( Offset = 12 )]
		public uint timeout;
		[ExplicitOffset( Offset = 16 )]
		public uint ack_delay;
		[ExplicitOffset( Offset = 20 )]
		public uint busy_delay;
		[ExplicitOffset( Offset = 24 )]
		public uint tries;
		[ExplicitOffset( Offset = 28 )]
		public uint window;
		[ExplicitOffset( Offset = 32 )]
		public uint paclen;
	}
	[ExplicitSize( Size = 112 )]
	[Alignment( Boundary = 4 )]
	public partial struct nr_route_struct {
		[ExplicitOffset( Offset = 0 )]
		public int type;
		[ExplicitOffset( Offset = 4 )]
		public ax25_address callsign;
		[ExplicitOffset( Offset = 11 )]
		public sbyte[16] device;
		[ExplicitOffset( Offset = 28 )]
		public uint quality;
		[ExplicitOffset( Offset = 32 )]
		public sbyte[7] mnemonic;
		[ExplicitOffset( Offset = 39 )]
		public ax25_address neighbour;
		[ExplicitOffset( Offset = 48 )]
		public uint obs_count;
		[ExplicitOffset( Offset = 52 )]
		public uint ndigis;
		[ExplicitOffset( Offset = 56 )]
		public ax25_address[8] digipeaters;
	}
	public partial struct obstack {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 2 )]
	public partial struct osockaddr {
		[ExplicitOffset( Offset = 0 )]
		public ushort sa_family;
		[ExplicitOffset( Offset = 2 )]
		public byte[14] sa_data;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct passwd {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String pw_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte* pw_passwd;
		[ExplicitOffset( Offset = 8 )]
		public uint pw_uid;
		[ExplicitOffset( Offset = 12 )]
		public uint pw_gid;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* pw_gecos;
		[ExplicitOffset( Offset = 20 )]
		public sbyte* pw_dir;
		[ExplicitOffset( Offset = 24 )]
		public sbyte* pw_shell;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct pollfd {
		[ExplicitOffset( Offset = 0 )]
		public int fd;
		[ExplicitOffset( Offset = 4 )]
		public short events;
		[ExplicitOffset( Offset = 6 )]
		public short revents;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct protoent {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String p_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte** p_aliases;
		[ExplicitOffset( Offset = 8 )]
		public int p_proto;
	}
	[ExplicitSize( Size = 36 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_attr_t {
		[Overlapped( Offset = 0 )]
		public sbyte[36] __size;
		[Overlapped( Offset = 0 )]
		public intptr __align;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_barrier_t {
		[Overlapped( Offset = 0 )]
		public sbyte[20] __size;
		[Overlapped( Offset = 0 )]
		public intptr __align;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_barrierattr_t {
		[Overlapped( Offset = 0 )]
		public sbyte[4] __size;
		[Overlapped( Offset = 0 )]
		public int __align;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_cond_t {
		[Overlapped( Offset = 0 )]
		public __pthread_cond_s __data;
		[Overlapped( Offset = 0 )]
		public sbyte[48] __size;
		[Overlapped( Offset = 0 )]
		public long __align;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_condattr_t {
		[Overlapped( Offset = 0 )]
		public sbyte[4] __size;
		[Overlapped( Offset = 0 )]
		public int __align;
	}
	[Alignment( Boundary = 4 )]
	[PrimitiveType( Size = sizeof( uint ) )]
	public partial struct pthread_key_t {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_mutex_t {
		[Overlapped( Offset = 0 )]
		public __pthread_mutex_s __data;
		[Overlapped( Offset = 0 )]
		public sbyte[24] __size;
		[Overlapped( Offset = 0 )]
		public intptr __align;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_mutexattr_t {
		[Overlapped( Offset = 0 )]
		public sbyte[4] __size;
		[Overlapped( Offset = 0 )]
		public int __align;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_rwlock_t {
		[Overlapped( Offset = 0 )]
		public __pthread_rwlock_arch_t __data;
		[Overlapped( Offset = 0 )]
		public sbyte[32] __size;
		[Overlapped( Offset = 0 )]
		public intptr __align;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct pthread_rwlockattr_t {
		[Overlapped( Offset = 0 )]
		public sbyte[8] __size;
		[Overlapped( Offset = 0 )]
		public intptr __align;
	}
	[Alignment( Boundary = 4 )]
	[PrimitiveType( Size = sizeof( int ) )]
	public partial struct pthread_spinlock_t {
	}
	[Alignment( Boundary = 4 )]
	[PrimitiveType( Size = sizeof( uintptr ) )]
	public partial struct pthread_t {
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct r_debug {
		public enum UnnamedEnum_672DAEF7 : uint {
			RT_CONSISTENT = 0,
			RT_ADD =        1,
			RT_DELETE =     2,
		}
		[ExplicitOffset( Offset = 0 )]
		public int r_version;
		[ExplicitOffset( Offset = 4 )]
		public link_map* r_map;
		[ExplicitOffset( Offset = 8 )]
		public uint r_brk;
		[ExplicitOffset( Offset = 12 )]
		public UnnamedEnum_672DAEF7 r_state;
		[ExplicitOffset( Offset = 16 )]
		public uint r_ldbase;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct random_data {
		[ExplicitOffset( Offset = 0 )]
		public int* fptr;
		[ExplicitOffset( Offset = 4 )]
		public int* rptr;
		[ExplicitOffset( Offset = 8 )]
		public int* state;
		[ExplicitOffset( Offset = 12 )]
		public int rand_type;
		[ExplicitOffset( Offset = 16 )]
		public int rand_deg;
		[ExplicitOffset( Offset = 20 )]
		public int rand_sep;
		[ExplicitOffset( Offset = 24 )]
		public int* end_ptr;
	}
	[ExplicitSize( Size = 5 )]
	public partial struct rose_address {
		[ExplicitOffset( Offset = 0 )]
		public sbyte[5] rose_addr;
	}
	[ExplicitSize( Size = 2 )]
	public partial struct rose_cause_struct {
		[ExplicitOffset( Offset = 0 )]
		public byte cause;
		[ExplicitOffset( Offset = 1 )]
		public byte diagnostic;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct rose_facilities_struct {
		[ExplicitOffset( Offset = 0 )]
		public rose_address source_addr;
		[ExplicitOffset( Offset = 5 )]
		public rose_address dest_addr;
		[ExplicitOffset( Offset = 10 )]
		public ax25_address source_call;
		[ExplicitOffset( Offset = 17 )]
		public ax25_address dest_call;
		[ExplicitOffset( Offset = 24 )]
		public byte source_ndigis;
		[ExplicitOffset( Offset = 25 )]
		public byte dest_ndigis;
		[ExplicitOffset( Offset = 26 )]
		public ax25_address[6] source_digis;
		[ExplicitOffset( Offset = 68 )]
		public ax25_address[6] dest_digis;
		[ExplicitOffset( Offset = 112 )]
		public uint rand;
		[ExplicitOffset( Offset = 116 )]
		public rose_address fail_addr;
		[ExplicitOffset( Offset = 121 )]
		public ax25_address fail_call;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 2 )]
	public partial struct rose_route_struct {
		[ExplicitOffset( Offset = 0 )]
		public rose_address address;
		[ExplicitOffset( Offset = 6 )]
		public ushort mask;
		[ExplicitOffset( Offset = 8 )]
		public ax25_address neighbour;
		[ExplicitOffset( Offset = 15 )]
		public sbyte[16] device;
		[ExplicitOffset( Offset = 31 )]
		public byte ndigis;
		[ExplicitOffset( Offset = 32 )]
		public ax25_address[8] digipeaters;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct rpcent {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String r_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte** r_aliases;
		[ExplicitOffset( Offset = 8 )]
		public int r_number;
	}
	public partial struct rusage {
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sched_param {
		[ExplicitOffset( Offset = 0 )]
		public int sched_priority;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sem_t {
		[Overlapped( Offset = 0 )]
		public sbyte[16] __size;
		[Overlapped( Offset = 0 )]
		public intptr __align;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct servent {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String s_name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte** s_aliases;
		[ExplicitOffset( Offset = 8 )]
		public int s_port;
		[ExplicitOffset( Offset = 12 )]
		public sbyte* s_proto;
	}
	[ExplicitSize( Size = 140 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigaction {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedUnion_133700BF __sigaction_handler;
		[ExplicitOffset( Offset = 4 )]
		public sigset_t sa_mask;
		[ExplicitOffset( Offset = 132 )]
		public int sa_flags;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Action sa_restorer;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigcontext {
		[ExplicitOffset( Offset = 0 )]
		public ushort gs;
		[ExplicitOffset( Offset = 2 )]
		public ushort __gsh;
		[ExplicitOffset( Offset = 4 )]
		public ushort fs;
		[ExplicitOffset( Offset = 6 )]
		public ushort __fsh;
		[ExplicitOffset( Offset = 8 )]
		public ushort es;
		[ExplicitOffset( Offset = 10 )]
		public ushort __esh;
		[ExplicitOffset( Offset = 12 )]
		public ushort ds;
		[ExplicitOffset( Offset = 14 )]
		public ushort __dsh;
		[ExplicitOffset( Offset = 16 )]
		public uintptr edi;
		[ExplicitOffset( Offset = 20 )]
		public uintptr esi;
		[ExplicitOffset( Offset = 24 )]
		public uintptr ebp;
		[ExplicitOffset( Offset = 28 )]
		public uintptr esp;
		[ExplicitOffset( Offset = 32 )]
		public uintptr ebx;
		[ExplicitOffset( Offset = 36 )]
		public uintptr edx;
		[ExplicitOffset( Offset = 40 )]
		public uintptr ecx;
		[ExplicitOffset( Offset = 44 )]
		public uintptr eax;
		[ExplicitOffset( Offset = 48 )]
		public uintptr trapno;
		[ExplicitOffset( Offset = 52 )]
		public uintptr err;
		[ExplicitOffset( Offset = 56 )]
		public uintptr eip;
		[ExplicitOffset( Offset = 60 )]
		public ushort cs;
		[ExplicitOffset( Offset = 62 )]
		public ushort __csh;
		[ExplicitOffset( Offset = 64 )]
		public uintptr eflags;
		[ExplicitOffset( Offset = 68 )]
		public uintptr esp_at_signal;
		[ExplicitOffset( Offset = 72 )]
		public ushort ss;
		[ExplicitOffset( Offset = 74 )]
		public ushort __ssh;
		[ExplicitOffset( Offset = 76 )]
		public _fpstate* fpstate;
		[ExplicitOffset( Offset = 80 )]
		public uintptr oldmask;
		[ExplicitOffset( Offset = 84 )]
		public uintptr cr2;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigevent {
		[ExplicitOffset( Offset = 0 )]
		public sigval sigev_value;
		[ExplicitOffset( Offset = 4 )]
		public int sigev_signo;
		[ExplicitOffset( Offset = 8 )]
		public int sigev_notify;
		[ExplicitOffset( Offset = 12 )]
		public UnnamedUnion_E6EE561E _sigev_un;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct siginfo_t {
		[ExplicitOffset( Offset = 0 )]
		public int si_signo;
		[ExplicitOffset( Offset = 4 )]
		public int si_errno;
		[ExplicitOffset( Offset = 8 )]
		public int si_code;
		[ExplicitOffset( Offset = 12 )]
		public UnnamedUnion_C5CBA19C _sifields;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct signalfd_siginfo {
		[ExplicitOffset( Offset = 0 )]
		public uint ssi_signo;
		[ExplicitOffset( Offset = 4 )]
		public int ssi_errno;
		[ExplicitOffset( Offset = 8 )]
		public int ssi_code;
		[ExplicitOffset( Offset = 12 )]
		public uint ssi_pid;
		[ExplicitOffset( Offset = 16 )]
		public uint ssi_uid;
		[ExplicitOffset( Offset = 20 )]
		public int ssi_fd;
		[ExplicitOffset( Offset = 24 )]
		public uint ssi_tid;
		[ExplicitOffset( Offset = 28 )]
		public uint ssi_band;
		[ExplicitOffset( Offset = 32 )]
		public uint ssi_overrun;
		[ExplicitOffset( Offset = 36 )]
		public uint ssi_trapno;
		[ExplicitOffset( Offset = 40 )]
		public int ssi_status;
		[ExplicitOffset( Offset = 44 )]
		public int ssi_int;
		[ExplicitOffset( Offset = 48 )]
		public ulong ssi_ptr;
		[ExplicitOffset( Offset = 56 )]
		public ulong ssi_utime;
		[ExplicitOffset( Offset = 64 )]
		public ulong ssi_stime;
		[ExplicitOffset( Offset = 72 )]
		public ulong ssi_addr;
		[ExplicitOffset( Offset = 80 )]
		public byte[48] __pad;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigset_t {
		[ExplicitOffset( Offset = 0 )]
		public uintptr[32] __val;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigstack {
		[ExplicitOffset( Offset = 0 )]
		public void* ss_sp;
		[ExplicitOffset( Offset = 4 )]
		public int ss_onstack;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct sigval {
		[Overlapped( Offset = 0 )]
		public int sival_int;
		[Overlapped( Offset = 0 )]
		public void* sival_ptr;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 2 )]
	public partial struct sockaddr {
		[ExplicitOffset( Offset = 0 )]
		public ushort sa_family;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[14] sa_data;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_ax25 {
		[ExplicitOffset( Offset = 0 )]
		public ushort sax25_family;
		[ExplicitOffset( Offset = 2 )]
		public ax25_address sax25_call;
		[ExplicitOffset( Offset = 12 )]
		public int sax25_ndigis;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_in {
		[ExplicitOffset( Offset = 0 )]
		public ushort sin_family;
		[ExplicitOffset( Offset = 2 )]
		public ushort sin_port;
		[ExplicitOffset( Offset = 4 )]
		public in_addr sin_addr;
		[ExplicitOffset( Offset = 8 )]
		public byte[8] sin_zero;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_in6 {
		[ExplicitOffset( Offset = 0 )]
		public ushort sin6_family;
		[ExplicitOffset( Offset = 2 )]
		public ushort sin6_port;
		[ExplicitOffset( Offset = 4 )]
		public uint sin6_flowinfo;
		[ExplicitOffset( Offset = 8 )]
		public in6_addr sin6_addr;
		[ExplicitOffset( Offset = 24 )]
		public uint sin6_scope_id;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_ipx {
		[ExplicitOffset( Offset = 0 )]
		public ushort sipx_family;
		[ExplicitOffset( Offset = 2 )]
		public ushort sipx_port;
		[ExplicitOffset( Offset = 4 )]
		public uint sipx_network;
		[ExplicitOffset( Offset = 8 )]
		public byte[6] sipx_node;
		[ExplicitOffset( Offset = 14 )]
		public byte sipx_type;
		[ExplicitOffset( Offset = 15 )]
		public byte sipx_zero;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_rose {
		[ExplicitOffset( Offset = 0 )]
		public ushort srose_family;
		[ExplicitOffset( Offset = 2 )]
		public rose_address srose_addr;
		[ExplicitOffset( Offset = 7 )]
		public ax25_address srose_call;
		[ExplicitOffset( Offset = 16 )]
		public int srose_ndigis;
		[ExplicitOffset( Offset = 20 )]
		public ax25_address srose_digi;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct sockaddr_storage {
		[ExplicitOffset( Offset = 0 )]
		public ushort ss_family;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[122] __ss_padding;
		[ExplicitOffset( Offset = 124 )]
		public uintptr __ss_align;
	}
	[ExplicitSize( Size = 110 )]
	[Alignment( Boundary = 2 )]
	public partial struct sockaddr_un {
		[ExplicitOffset( Offset = 0 )]
		public ushort sun_family;
		[ExplicitOffset( Offset = 2 )]
		public sbyte[108] sun_path;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct stack_t {
		[ExplicitOffset( Offset = 0 )]
		public void* ss_sp;
		[ExplicitOffset( Offset = 4 )]
		public int ss_flags;
		[ExplicitOffset( Offset = 8 )]
		public uint ss_size;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 4 )]
	public partial struct stat {
		[ExplicitOffset( Offset = 0 )]
		public ulong st_dev;
		[ExplicitOffset( Offset = 8 )]
		public ushort __pad1;
		[ExplicitOffset( Offset = 12 )]
		public uintptr st_ino;
		[ExplicitOffset( Offset = 16 )]
		public uint st_mode;
		[ExplicitOffset( Offset = 20 )]
		public uint st_nlink;
		[ExplicitOffset( Offset = 24 )]
		public uint st_uid;
		[ExplicitOffset( Offset = 28 )]
		public uint st_gid;
		[ExplicitOffset( Offset = 32 )]
		public ulong st_rdev;
		[ExplicitOffset( Offset = 40 )]
		public ushort __pad2;
		[ExplicitOffset( Offset = 44 )]
		public intptr st_size;
		[ExplicitOffset( Offset = 48 )]
		public intptr st_blksize;
		[ExplicitOffset( Offset = 52 )]
		public intptr st_blocks;
		[ExplicitOffset( Offset = 56 )]
		public timespec st_atim;
		[ExplicitOffset( Offset = 64 )]
		public timespec st_mtim;
		[ExplicitOffset( Offset = 72 )]
		public timespec st_ctim;
		[ExplicitOffset( Offset = 80 )]
		public uintptr __glibc_reserved4;
		[ExplicitOffset( Offset = 84 )]
		public uintptr __glibc_reserved5;
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 4 )]
	public partial struct stat64 {
		[ExplicitOffset( Offset = 0 )]
		public ulong st_dev;
		[ExplicitOffset( Offset = 8 )]
		public uint __pad1;
		[ExplicitOffset( Offset = 12 )]
		public uintptr __st_ino;
		[ExplicitOffset( Offset = 16 )]
		public uint st_mode;
		[ExplicitOffset( Offset = 20 )]
		public uint st_nlink;
		[ExplicitOffset( Offset = 24 )]
		public uint st_uid;
		[ExplicitOffset( Offset = 28 )]
		public uint st_gid;
		[ExplicitOffset( Offset = 32 )]
		public ulong st_rdev;
		[ExplicitOffset( Offset = 40 )]
		public uint __pad2;
		[ExplicitOffset( Offset = 44 )]
		public long st_size;
		[ExplicitOffset( Offset = 52 )]
		public intptr st_blksize;
		[ExplicitOffset( Offset = 56 )]
		public long st_blocks;
		[ExplicitOffset( Offset = 64 )]
		public timespec st_atim;
		[ExplicitOffset( Offset = 72 )]
		public timespec st_mtim;
		[ExplicitOffset( Offset = 80 )]
		public timespec st_ctim;
		[ExplicitOffset( Offset = 88 )]
		public ulong st_ino;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 4 )]
	public partial struct statfs {
		[ExplicitOffset( Offset = 0 )]
		public int f_type;
		[ExplicitOffset( Offset = 4 )]
		public int f_bsize;
		[ExplicitOffset( Offset = 8 )]
		public uintptr f_blocks;
		[ExplicitOffset( Offset = 12 )]
		public uintptr f_bfree;
		[ExplicitOffset( Offset = 16 )]
		public uintptr f_bavail;
		[ExplicitOffset( Offset = 20 )]
		public uintptr f_files;
		[ExplicitOffset( Offset = 24 )]
		public uintptr f_ffree;
		[ExplicitOffset( Offset = 28 )]
		public fsid_t f_fsid;
		[ExplicitOffset( Offset = 36 )]
		public int f_namelen;
		[ExplicitOffset( Offset = 40 )]
		public int f_frsize;
		[ExplicitOffset( Offset = 44 )]
		public int f_flags;
		[ExplicitOffset( Offset = 48 )]
		public int[4] f_spare;
	}
	[ExplicitSize( Size = 84 )]
	[Alignment( Boundary = 4 )]
	public partial struct statfs64 {
		[ExplicitOffset( Offset = 0 )]
		public int f_type;
		[ExplicitOffset( Offset = 4 )]
		public int f_bsize;
		[ExplicitOffset( Offset = 8 )]
		public ulong f_blocks;
		[ExplicitOffset( Offset = 16 )]
		public ulong f_bfree;
		[ExplicitOffset( Offset = 24 )]
		public ulong f_bavail;
		[ExplicitOffset( Offset = 32 )]
		public ulong f_files;
		[ExplicitOffset( Offset = 40 )]
		public ulong f_ffree;
		[ExplicitOffset( Offset = 48 )]
		public fsid_t f_fsid;
		[ExplicitOffset( Offset = 56 )]
		public int f_namelen;
		[ExplicitOffset( Offset = 60 )]
		public int f_frsize;
		[ExplicitOffset( Offset = 64 )]
		public int f_flags;
		[ExplicitOffset( Offset = 68 )]
		public int[4] f_spare;
	}
	[ExplicitSize( Size = 256 )]
	[Alignment( Boundary = 4 )]
	public partial struct statx {
		[ExplicitOffset( Offset = 0 )]
		public uint stx_mask;
		[ExplicitOffset( Offset = 4 )]
		public uint stx_blksize;
		[ExplicitOffset( Offset = 8 )]
		public ulong stx_attributes;
		[ExplicitOffset( Offset = 16 )]
		public uint stx_nlink;
		[ExplicitOffset( Offset = 20 )]
		public uint stx_uid;
		[ExplicitOffset( Offset = 24 )]
		public uint stx_gid;
		[ExplicitOffset( Offset = 28 )]
		public ushort stx_mode;
		[ExplicitOffset( Offset = 30 )]
		public ushort[1] __statx_pad1;
		[ExplicitOffset( Offset = 32 )]
		public ulong stx_ino;
		[ExplicitOffset( Offset = 40 )]
		public ulong stx_size;
		[ExplicitOffset( Offset = 48 )]
		public ulong stx_blocks;
		[ExplicitOffset( Offset = 56 )]
		public ulong stx_attributes_mask;
		[ExplicitOffset( Offset = 64 )]
		public statx_timestamp stx_atime;
		[ExplicitOffset( Offset = 80 )]
		public statx_timestamp stx_btime;
		[ExplicitOffset( Offset = 96 )]
		public statx_timestamp stx_ctime;
		[ExplicitOffset( Offset = 112 )]
		public statx_timestamp stx_mtime;
		[ExplicitOffset( Offset = 128 )]
		public uint stx_rdev_major;
		[ExplicitOffset( Offset = 132 )]
		public uint stx_rdev_minor;
		[ExplicitOffset( Offset = 136 )]
		public uint stx_dev_major;
		[ExplicitOffset( Offset = 140 )]
		public uint stx_dev_minor;
		[ExplicitOffset( Offset = 144 )]
		public ulong[14] __statx_pad2;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct statx_timestamp {
		[ExplicitOffset( Offset = 0 )]
		public long tv_sec;
		[ExplicitOffset( Offset = 8 )]
		public uint tv_nsec;
		[ExplicitOffset( Offset = 12 )]
		public int[1] __statx_timestamp_pad1;
	}
	[ExplicitSize( Size = 544 )]
	[Alignment( Boundary = 2 )]
	public partial struct tcp_cookie_transactions {
		[ExplicitOffset( Offset = 0 )]
		public ushort tcpct_flags;
		[ExplicitOffset( Offset = 2 )]
		public byte __tcpct_pad1;
		[ExplicitOffset( Offset = 3 )]
		public byte tcpct_cookie_desired;
		[ExplicitOffset( Offset = 4 )]
		public ushort tcpct_s_data_desired;
		[ExplicitOffset( Offset = 6 )]
		public ushort tcpct_used;
		[ExplicitOffset( Offset = 8 )]
		public byte[536] tcpct_value;
	}
	[ExplicitSize( Size = 104 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_info {
		[ExplicitOffset( Offset = 0 )]
		public byte tcpi_state;
		[ExplicitOffset( Offset = 1 )]
		public byte tcpi_ca_state;
		[ExplicitOffset( Offset = 2 )]
		public byte tcpi_retransmits;
		[ExplicitOffset( Offset = 3 )]
		public byte tcpi_probes;
		[ExplicitOffset( Offset = 4 )]
		public byte tcpi_backoff;
		[ExplicitOffset( Offset = 5 )]
		public byte tcpi_options;
		public byte tcpi_snd_wscale { get { return cast<byte*>( &this )[6] & 15; } set { cast<byte*>( &this )[6] &= 240; cast<byte*>( &this )[6] |= ( cast<byte>( value ) & 15 ); } }
		public byte tcpi_rcv_wscale { get { return cast<byte*>( &this )[6] >> 4; } set { cast<byte*>( &this )[6] &= 15; cast<byte*>( &this )[6] |= ( cast<byte>( value ) & 240 ) << 4; } }
		[ExplicitOffset( Offset = 8 )]
		public uint tcpi_rto;
		[ExplicitOffset( Offset = 12 )]
		public uint tcpi_ato;
		[ExplicitOffset( Offset = 16 )]
		public uint tcpi_snd_mss;
		[ExplicitOffset( Offset = 20 )]
		public uint tcpi_rcv_mss;
		[ExplicitOffset( Offset = 24 )]
		public uint tcpi_unacked;
		[ExplicitOffset( Offset = 28 )]
		public uint tcpi_sacked;
		[ExplicitOffset( Offset = 32 )]
		public uint tcpi_lost;
		[ExplicitOffset( Offset = 36 )]
		public uint tcpi_retrans;
		[ExplicitOffset( Offset = 40 )]
		public uint tcpi_fackets;
		[ExplicitOffset( Offset = 44 )]
		public uint tcpi_last_data_sent;
		[ExplicitOffset( Offset = 48 )]
		public uint tcpi_last_ack_sent;
		[ExplicitOffset( Offset = 52 )]
		public uint tcpi_last_data_recv;
		[ExplicitOffset( Offset = 56 )]
		public uint tcpi_last_ack_recv;
		[ExplicitOffset( Offset = 60 )]
		public uint tcpi_pmtu;
		[ExplicitOffset( Offset = 64 )]
		public uint tcpi_rcv_ssthresh;
		[ExplicitOffset( Offset = 68 )]
		public uint tcpi_rtt;
		[ExplicitOffset( Offset = 72 )]
		public uint tcpi_rttvar;
		[ExplicitOffset( Offset = 76 )]
		public uint tcpi_snd_ssthresh;
		[ExplicitOffset( Offset = 80 )]
		public uint tcpi_snd_cwnd;
		[ExplicitOffset( Offset = 84 )]
		public uint tcpi_advmss;
		[ExplicitOffset( Offset = 88 )]
		public uint tcpi_reordering;
		[ExplicitOffset( Offset = 92 )]
		public uint tcpi_rcv_rtt;
		[ExplicitOffset( Offset = 96 )]
		public uint tcpi_rcv_space;
		[ExplicitOffset( Offset = 100 )]
		public uint tcpi_total_retrans;
	}
	[ExplicitSize( Size = 216 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_md5sig {
		[ExplicitOffset( Offset = 0 )]
		public sockaddr_storage tcpm_addr;
		[ExplicitOffset( Offset = 128 )]
		public byte tcpm_flags;
		[ExplicitOffset( Offset = 129 )]
		public byte tcpm_prefixlen;
		[ExplicitOffset( Offset = 130 )]
		public ushort tcpm_keylen;
		[ExplicitOffset( Offset = 132 )]
		public uint __tcpm_pad;
		[ExplicitOffset( Offset = 136 )]
		public byte[80] tcpm_key;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_repair_opt {
		[ExplicitOffset( Offset = 0 )]
		public uint opt_code;
		[ExplicitOffset( Offset = 4 )]
		public uint opt_val;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_repair_window {
		[ExplicitOffset( Offset = 0 )]
		public uint snd_wl1;
		[ExplicitOffset( Offset = 4 )]
		public uint snd_wnd;
		[ExplicitOffset( Offset = 8 )]
		public uint max_window;
		[ExplicitOffset( Offset = 12 )]
		public uint rcv_wnd;
		[ExplicitOffset( Offset = 16 )]
		public uint rcv_wup;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcphdr {
		[Overlapped( Offset = 0 )]
		public ushort th_sport;
		[Overlapped( Offset = 2 )]
		public ushort th_dport;
		[Overlapped( Offset = 4 )]
		public uint th_seq;
		[Overlapped( Offset = 8 )]
		public uint th_ack;
		[Overlapped( Offset = 12 )]
		public byte th_x2;
		[Overlapped( Offset = 12 )]
		public byte th_off;
		[Overlapped( Offset = 13 )]
		public byte th_flags;
		[Overlapped( Offset = 14 )]
		public ushort th_win;
		[Overlapped( Offset = 16 )]
		public ushort th_sum;
		[Overlapped( Offset = 18 )]
		public ushort th_urp;
		[Overlapped( Offset = 0 )]
		public ushort source;
		[Overlapped( Offset = 2 )]
		public ushort dest;
		[Overlapped( Offset = 4 )]
		public uint seq;
		[Overlapped( Offset = 8 )]
		public uint ack_seq;
		[Overlapped( Offset = 12 )]
		public ushort res1;
		[Overlapped( Offset = 12 )]
		public ushort doff;
		[Overlapped( Offset = 13 )]
		public ushort fin;
		[Overlapped( Offset = 13 )]
		public ushort syn;
		[Overlapped( Offset = 13 )]
		public ushort rst;
		[Overlapped( Offset = 13 )]
		public ushort psh;
		[Overlapped( Offset = 13 )]
		public ushort ack;
		[Overlapped( Offset = 13 )]
		public ushort urg;
		[Overlapped( Offset = 13 )]
		public ushort res2;
		[Overlapped( Offset = 14 )]
		public ushort window;
		[Overlapped( Offset = 16 )]
		public ushort check;
		[Overlapped( Offset = 18 )]
		public ushort urg_ptr;
	}
	[ExplicitSize( Size = 18 )]
	[Alignment( Boundary = 2 )]
	public partial struct termio {
		[ExplicitOffset( Offset = 0 )]
		public ushort c_iflag;
		[ExplicitOffset( Offset = 2 )]
		public ushort c_oflag;
		[ExplicitOffset( Offset = 4 )]
		public ushort c_cflag;
		[ExplicitOffset( Offset = 6 )]
		public ushort c_lflag;
		[ExplicitOffset( Offset = 8 )]
		public byte c_line;
		[ExplicitOffset( Offset = 9 )]
		public byte[8] c_cc;
	}
	[ExplicitSize( Size = 60 )]
	[Alignment( Boundary = 4 )]
	public partial struct termios {
		[ExplicitOffset( Offset = 0 )]
		public uint c_iflag;
		[ExplicitOffset( Offset = 4 )]
		public uint c_oflag;
		[ExplicitOffset( Offset = 8 )]
		public uint c_cflag;
		[ExplicitOffset( Offset = 12 )]
		public uint c_lflag;
		[ExplicitOffset( Offset = 16 )]
		public byte c_line;
		[ExplicitOffset( Offset = 17 )]
		public byte[32] c_cc;
		[ExplicitOffset( Offset = 52 )]
		public uint c_ispeed;
		[ExplicitOffset( Offset = 56 )]
		public uint c_ospeed;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct timespec {
		[ExplicitOffset( Offset = 0 )]
		public intptr tv_sec;
		[ExplicitOffset( Offset = 4 )]
		public intptr tv_nsec;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct timeval {
		[ExplicitOffset( Offset = 0 )]
		public intptr tv_sec;
		[ExplicitOffset( Offset = 4 )]
		public intptr tv_usec;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 4 )]
	public partial struct timex {
		[ExplicitOffset( Offset = 0 )]
		public uint modes;
		[ExplicitOffset( Offset = 4 )]
		public intptr offset;
		[ExplicitOffset( Offset = 8 )]
		public intptr freq;
		[ExplicitOffset( Offset = 12 )]
		public intptr maxerror;
		[ExplicitOffset( Offset = 16 )]
		public intptr esterror;
		[ExplicitOffset( Offset = 20 )]
		public int status;
		[ExplicitOffset( Offset = 24 )]
		public intptr constant;
		[ExplicitOffset( Offset = 28 )]
		public intptr precision;
		[ExplicitOffset( Offset = 32 )]
		public intptr tolerance;
		[ExplicitOffset( Offset = 36 )]
		public timeval time;
		[ExplicitOffset( Offset = 44 )]
		public intptr tick;
		[ExplicitOffset( Offset = 48 )]
		public intptr ppsfreq;
		[ExplicitOffset( Offset = 52 )]
		public intptr jitter;
		[ExplicitOffset( Offset = 56 )]
		public int shift;
		[ExplicitOffset( Offset = 60 )]
		public intptr stabil;
		[ExplicitOffset( Offset = 64 )]
		public intptr jitcnt;
		[ExplicitOffset( Offset = 68 )]
		public intptr calcnt;
		[ExplicitOffset( Offset = 72 )]
		public intptr errcnt;
		[ExplicitOffset( Offset = 76 )]
		public intptr stbcnt;
		[ExplicitOffset( Offset = 80 )]
		public int tai;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct timezone {
		[ExplicitOffset( Offset = 0 )]
		public int tz_minuteswest;
		[ExplicitOffset( Offset = 4 )]
		public int tz_dsttime;
	}
	[ExplicitSize( Size = 44 )]
	[Alignment( Boundary = 4 )]
	public partial struct tm {
		[ExplicitOffset( Offset = 0 )]
		public int tm_sec;
		[ExplicitOffset( Offset = 4 )]
		public int tm_min;
		[ExplicitOffset( Offset = 8 )]
		public int tm_hour;
		[ExplicitOffset( Offset = 12 )]
		public int tm_mday;
		[ExplicitOffset( Offset = 16 )]
		public int tm_mon;
		[ExplicitOffset( Offset = 20 )]
		public int tm_year;
		[ExplicitOffset( Offset = 24 )]
		public int tm_wday;
		[ExplicitOffset( Offset = 28 )]
		public int tm_yday;
		[ExplicitOffset( Offset = 32 )]
		public int tm_isdst;
		[ExplicitOffset( Offset = 36 )]
		public intptr tm_gmtoff;
		[ExplicitOffset( Offset = 40 )]
		public sbyte* tm_zone;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct tms {
		[ExplicitOffset( Offset = 0 )]
		public intptr tms_utime;
		[ExplicitOffset( Offset = 4 )]
		public intptr tms_stime;
		[ExplicitOffset( Offset = 8 )]
		public intptr tms_cutime;
		[ExplicitOffset( Offset = 12 )]
		public intptr tms_cstime;
	}
	[ExplicitSize( Size = 364 )]
	[Alignment( Boundary = 4 )]
	public partial struct ucontext_t {
		[ExplicitOffset( Offset = 0 )]
		public uintptr uc_flags;
		[ExplicitOffset( Offset = 4 )]
		public ucontext_t* uc_link;
		[ExplicitOffset( Offset = 8 )]
		public stack_t uc_stack;
		[ExplicitOffset( Offset = 20 )]
		public mcontext_t uc_mcontext;
		[ExplicitOffset( Offset = 108 )]
		public sigset_t uc_sigmask;
		[ExplicitOffset( Offset = 236 )]
		public fpregset_t __fpregs_mem;
		[ExplicitOffset( Offset = 348 )]
		public uintptr[4] __ssp;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct ucred {
		[ExplicitOffset( Offset = 0 )]
		public int pid;
		[ExplicitOffset( Offset = 4 )]
		public uint uid;
		[ExplicitOffset( Offset = 8 )]
		public uint gid;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 2 )]
	public partial struct udphdr {
		[Overlapped( Offset = 0 )]
		public ushort uh_sport;
		[Overlapped( Offset = 2 )]
		public ushort uh_dport;
		[Overlapped( Offset = 4 )]
		public ushort uh_ulen;
		[Overlapped( Offset = 6 )]
		public ushort uh_sum;
		[Overlapped( Offset = 0 )]
		public ushort source;
		[Overlapped( Offset = 2 )]
		public ushort dest;
		[Overlapped( Offset = 4 )]
		public ushort len;
		[Overlapped( Offset = 6 )]
		public ushort check;
	}
	[ExplicitSize( Size = 390 )]
	public partial struct utsname {
		[ExplicitOffset( Offset = 0 )]
		public sbyte[65] sysname;
		[ExplicitOffset( Offset = 65 )]
		public sbyte[65] nodename;
		[ExplicitOffset( Offset = 130 )]
		public sbyte[65] release;
		[ExplicitOffset( Offset = 195 )]
		public sbyte[65] version;
		[ExplicitOffset( Offset = 260 )]
		public sbyte[65] machine;
		[ExplicitOffset( Offset = 325 )]
		public sbyte[65] domainname;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 2 )]
	public partial struct winsize {
		[ExplicitOffset( Offset = 0 )]
		public ushort ws_row;
		[ExplicitOffset( Offset = 2 )]
		public ushort ws_col;
		[ExplicitOffset( Offset = 4 )]
		public ushort ws_xpixel;
		[ExplicitOffset( Offset = 6 )]
		public ushort ws_ypixel;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_70130A60 {
		[ExplicitOffset( Offset = 0 )]
		public uint gt_g_value;
		[ExplicitOffset( Offset = 4 )]
		public uint gt_bytes;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_70130B8F {
		[ExplicitOffset( Offset = 0 )]
		public uint gt_current_g_value;
		[ExplicitOffset( Offset = 4 )]
		public uint gt_unused;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CB9681 {
		[ExplicitOffset( Offset = 0 )]
		public void* si_addr;
		[ExplicitOffset( Offset = 4 )]
		public short si_addr_lsb;
		[ExplicitOffset( Offset = 8 )]
		public UnnamedUnion_C5CB96A2 _bounds;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CB97CF {
		[ExplicitOffset( Offset = 0 )]
		public int si_pid;
		[ExplicitOffset( Offset = 4 )]
		public uint si_uid;
		[ExplicitOffset( Offset = 8 )]
		public sigval si_sigval;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CB98D7 {
		[ExplicitOffset( Offset = 0 )]
		public int si_pid;
		[ExplicitOffset( Offset = 4 )]
		public uint si_uid;
		[ExplicitOffset( Offset = 8 )]
		public int si_status;
		[ExplicitOffset( Offset = 12 )]
		public intptr si_utime;
		[ExplicitOffset( Offset = 16 )]
		public intptr si_stime;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CB99FC {
		[ExplicitOffset( Offset = 0 )]
		public void* _call_addr;
		[ExplicitOffset( Offset = 4 )]
		public int _syscall;
		[ExplicitOffset( Offset = 8 )]
		public uint _arch;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CB9BA8 {
		[ExplicitOffset( Offset = 0 )]
		public void* _lower;
		[ExplicitOffset( Offset = 4 )]
		public void* _upper;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CB9D14 {
		[ExplicitOffset( Offset = 0 )]
		public intptr si_band;
		[ExplicitOffset( Offset = 4 )]
		public int si_fd;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CBA2C0 {
		[ExplicitOffset( Offset = 0 )]
		public int si_pid;
		[ExplicitOffset( Offset = 4 )]
		public uint si_uid;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C5CBA327 {
		[ExplicitOffset( Offset = 0 )]
		public int si_tid;
		[ExplicitOffset( Offset = 4 )]
		public int si_overrun;
		[ExplicitOffset( Offset = 8 )]
		public sigval si_sigval;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 2 )]
	public partial struct UnnamedStruct_C7B463E9 {
		[ExplicitOffset( Offset = 0 )]
		public short __espins;
		[ExplicitOffset( Offset = 2 )]
		public short __eelision;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C7B465F9 {
		[ExplicitOffset( Offset = 0 )]
		public uint __low;
		[ExplicitOffset( Offset = 4 )]
		public uint __high;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_C7B466E6 {
		[ExplicitOffset( Offset = 0 )]
		public uint __low;
		[ExplicitOffset( Offset = 4 )]
		public uint __high;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_E4E406AB {
		[ExplicitOffset( Offset = 0 )]
		public int[6] __cancel_jmp_buf;
		[ExplicitOffset( Offset = 24 )]
		public int __mask_was_saved;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_E6EE4EE1 {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<sigval> _function;
		[ExplicitOffset( Offset = 4 )]
		public pthread_attr_t* _attribute;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_133700BF {
		[Overlapped( Offset = 0 )]
		public Functors.Action<int> sa_handler;
		[Overlapped( Offset = 0 )]
		public Functors.Action<int, siginfo_t*, void*> sa_sigaction;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_64DED47D {
		[Overlapped( Offset = 0 )]
		public uint __wch;
		[Overlapped( Offset = 0 )]
		public sbyte[4] __wchb;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_7012B2B8 {
		[Overlapped( Offset = 0 )]
		public ulong a_val;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_7012B444 {
		[Overlapped( Offset = 0 )]
		public uint a_val;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_70135DE8 {
		[Overlapped( Offset = 0 )]
		public ulong d_val;
		[Overlapped( Offset = 0 )]
		public ulong d_ptr;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_70135FBA {
		[Overlapped( Offset = 0 )]
		public uint d_val;
		[Overlapped( Offset = 0 )]
		public uint d_ptr;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_851F6047 {
		[Overlapped( Offset = 0 )]
		public byte[16] __u6_addr8;
		[Overlapped( Offset = 0 )]
		public ushort[8] __u6_addr16;
		[Overlapped( Offset = 0 )]
		public uint[4] __u6_addr32;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_C5CB96A2 {
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CB9BA8 _addr_bnd;
		[Overlapped( Offset = 0 )]
		public uint _pkey;
	}
	[ExplicitSize( Size = 116 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_C5CBA19C {
		[Overlapped( Offset = 0 )]
		public int[29] _pad;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CBA2C0 _kill;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CBA327 _timer;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CB97CF _rt;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CB98D7 _sigchld;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CB9681 _sigfault;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CB9D14 _sigpoll;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_C5CB99FC _sigsys;
	}
	[ExplicitSize( Size = 52 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_E6EE561E {
		[Overlapped( Offset = 0 )]
		public int[13] _pad;
		[Overlapped( Offset = 0 )]
		public int _tid;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_E6EE4EE1 _sigev_thread;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedUnion_EA05F89D {
		[Overlapped( Offset = 0 )]
		public sockaddr* ifu_broadaddr;
		[Overlapped( Offset = 0 )]
		public sockaddr* ifu_dstaddr;
	}
}