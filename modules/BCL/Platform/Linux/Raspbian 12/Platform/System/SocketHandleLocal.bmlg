//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

using Platform.IO;
using Platform.Libc;

namespace Platform.Kernel {
	// http://www.kernel.org/doc/man-pages/online/pages/man7/unix.7.html
	public struct SocketHandleLocal : SocketHandle {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		// nonblocking for fibers
		public SocketHandleLocal( __socket_type type )
			: this( type, Fiber.IsFiberExecuting ) {
		}

		public SocketHandleLocal( __socket_type type, bool nonBlocking ) {
			LibcApi.Assert( this = bitcast<SocketHandleLocal>( LibcApi.socket( ProtocolFamily.PF_UNIX, type | ( nonBlocking ? __socket_type.SOCK_NONBLOCK : ( __socket_type ) 0 ) | __socket_type.SOCK_CLOEXEC, IPProtocol.IPPROTO_IP ) ) );
		}

		public SystemError Connect( Utf8String path, bool @abstract = false ) {
			var endpoint = new sockaddr_un( path, @abstract );
			return Connect( endpoint );
		}

		public SystemError Connect( sockaddr_un& endpoint ) {
			return ConnectNonBlocking( TimeSpan.Zero, ( sockaddr* ) &endpoint, sizeof( endpoint ) );
		}

		public SystemError Connect( TimeSpan& timeout, Utf8String path ) {
			var endpoint = new sockaddr_un( path );
			return ConnectNonBlocking( timeout, ( sockaddr* ) &endpoint, sizeof( endpoint ) );
		}

		public SystemError Connect( TimeSpan& timeout, sockaddr_un& endpoint ) {
			return ConnectNonBlocking( timeout, ( sockaddr* ) &endpoint, sizeof( endpoint ) );
		}

		public bool Bind( Utf8String path, bool @abstract = false ) {
			var nativeEndpoint = new sockaddr_un( path, @abstract );
			return LibcApi.bind( this, ( sockaddr* ) &nativeEndpoint, sizeof( nativeEndpoint ) ) == 0;
		}

		public static bool Exists( Utf8String path ) {
			stat stat;
			if( LibcApi.stat( path, &stat ) < 0 ) return false;

			return stat.IsSocket;
		}

		public bool ReceiveCredentials {
			get {
				int result;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_PASSCRED, &result, sizeof( result ) ) ); // SOL_SOCKET for historical reasons
				return result != 0;
			}
			set {
				var result = ( int ) value;
				LibcApi.AssertErrno( LibcApi.setsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_PASSCRED, &result, sizeof( result ) ) ); // SOL_SOCKET for historical reasons
			}
		}

		public ucred PeerCredentials {
			get {
				ucred result;
				LibcApi.AssertErrno( LibcApi.getsockopt( this, SocketPropertyGroup.SOL_SOCKET, SocketProperty.SO_PEERCRED, &result, sizeof( result ) ) ); // SOL_SOCKET for historical reasons
				return result;
			}
		}

		public static SocketHandleLocal[2] CreatePair( __socket_type type = __socket_type.SOCK_DGRAM ) {
			SocketHandle[2] result;
			LibcApi.AssertErrno( LibcApi.socketpair( ProtocolFamily.PF_UNIX, type, IPProtocol.IPPROTO_IP, result ) );
			return bitcast<SocketHandleLocal[2]>( result );
		}
	}
}