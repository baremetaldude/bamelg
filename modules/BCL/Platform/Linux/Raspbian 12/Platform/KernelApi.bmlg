//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform.Libc;

namespace Platform.Kernel {
	public partial struct cap_user_header_t {
		public cap_user_header_t() {
			version = KernelApi._LINUX_CAPABILITY_VERSION;
		}
	}

	/// See http://stackoverflow.com/questions/2535989/what-are-the-calling-conventions-for-unix-linux-system-calls-on-x86-64
	// @{ X64
	// User-level applications use as integer registers for passing the sequence %rdi, %rsi, %rdx, %rcx, %r8 and %r9
	// The kernel interface uses %rdi, %rsi, %rdx, %r10, %r8 and %r9
	// @}
	public partial struct KernelApi {
		public static uint CapsCombine( vararg ThreadCapabilities caps ) {
			var result = 0U;
			foreach( var cap in caps ) {
				result |= 1U << cap;
			}

			return result;
		}
		public static string CapsParse( uint caps ) {
			using( var result = System.StringBuilder.CachedBuilders.PopScoped() ) {
				for( var i = 0U; i < typeof( ThreadCapabilities ).ElementCount; ++i ) {
					var element = enumvalue<ThreadCapabilities>( i );

					if( ( caps & ( 1U << element ) ) != 0 ) {
						if( result.Value.Length > 0 ) result.Value.Append( " | " );
						result.Value.Append( element );
					}
				}

				return result.Value.ToString();
			}
		}

		public static SystemError gettid( uintptr& tid ) {
			var code = LibcApi.syscall( SystemCall.gettid );
			if( code < 0 ) {
				return LibcApi.LastError;
			}

			tid = ( uintptr ) code;
			return SystemError.None;
		}

		public static SystemError setresuid( uintptr e, uintptr r, uintptr s ) {
			var code = LibcApi.syscall( SystemCall.setresuid, cast<intptr>( e ), cast<intptr>( r ), cast<intptr>( s ) );
			if( code < 0 ) {
				return LibcApi.LastError;
			}

			return SystemError.None;
		}

		public static SystemError setresgid( uintptr e, uintptr r, uintptr s ) {
			var code = LibcApi.syscall( SystemCall.setresgid, cast<intptr>( e ), cast<intptr>( r ), cast<intptr>( s ) );
			if( code < 0 ) {
				return LibcApi.LastError;
			}

			return SystemError.None;
		}

		// [Obsolete]
		// public static int getdents( IOHandle handle, dirent* buffer, intptr length ) { return ( int ) raw_syscall( SystemCall.getdents, handle.ID, cast<intptr>( buffer ), length ); }
		/// http://www.kernel.org/doc/man-pages/online/pages/man2/getdents.2.html
		public static SystemError getdents64( int& readen, IOHandle handle, dirent64* buffer, intptr length ) {
			var code = LibcApi.syscall( SystemCall.getdents64, cast<intptr>( handle.ID ), cast<intptr>( buffer ), length );
			if( code < 0 ) {
				readen = 0;
				return LibcApi.LastError;
			}

			readen = ( int ) code;
			return SystemError.None;
		}

		public static SystemError write( IOHandle handle, void* buffer, intptr length ) {
			var code = LibcApi.syscall( SystemCall.write, bitcast<int>( handle ), cast<intptr>( buffer ), length );
			if( code < 0 ) {
				return LibcApi.LastError;
			}

			return SystemError.None;
		}

	}

	public partial struct serial_icounter_struct : System.IFormattable {
		public void ToString( System.StringBuilder builder, string format ) {
			builder.Append( "cts=" ); builder.Append( cts );
			builder.Append( " dsr=" ); builder.Append( dsr );
			builder.Append( " rng=" ); builder.Append( rng );
			builder.Append( " dcd=" ); builder.Append( dcd );
			builder.Append( " rx=" ); builder.Append( rx );
			builder.Append( " tx=" ); builder.Append( tx );
			builder.Append( " frame=" ); builder.Append( frame );
			builder.Append( " overrun=" ); builder.Append( overrun );
			builder.Append( " parity=" ); builder.Append( parity );
			builder.Append( " buf_overrun=" ); builder.Append( buf_overrun );
		}
	}
}