//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform.Libc;

namespace System.Threading {
	public partial class Thread : IFormattable {
		public pthread_t _nativeThread;
		public bool DetachOnExit { get; set; } = false;
		public bool JoinOnExit { get; set; } = false;

		private bool _implIsCurrent() { return _nativeThread.IsCurrent; }

		internal Thread() {
		}

		~Thread() {
			if( !_nativeThread.IsValid ) return;

			if( DetachOnExit ) _nativeThread.Detach();
			else if( JoinOnExit ) _nativeThread.Join();
		}

		private static Thread _implStart( Functors.Action action ) {
			var thread = new pthread_t( action );
			return new Thread() { _nativeThread = thread, DetachOnExit = true };
		}

		private static Thread _implStart( Delegates.Action action ) {
			var thread = new pthread_t( action );
			return new Thread() { _nativeThread = thread, DetachOnExit = true };
		}

		private static Thread _implStart( DPC* action ) {
			var thread = new pthread_t( action );
			return new Thread() { _nativeThread = thread, DetachOnExit = true };
		}

		private static Thread _implCurrentThread() { return new Thread() { _nativeThread = pthread_t.CurrentThread }; }

		private static void _implSleep( uint milliseconds ) { pthread_t.Sleep( ( int ) milliseconds ); }

		private static void _implYield() { pthread_t.Yield(); }

		private void _implJoin() { _nativeThread.Join(); _nativeThread = pthread_t.Invalid; }

		void IFormattable.ToString( StringBuilder builder, string format ) {
			builder.Append( _nativeThread );
		}
	}
}