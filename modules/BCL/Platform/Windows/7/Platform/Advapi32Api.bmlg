//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Net;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Platform {
	[DllImport( Image = "ADVAPI32.dll" )]
	[CallingConvention( Value = NtApi.DefaultCallingConvention )]
	public static partial struct Advapi32Api {
		/// @{ Registry
		/// Limits:
		///		Key name: 255 characters
		///		Value name: 16383 characters
		///		Value Available memory: 1 MB (standard format)
		///		Tree: 512 levels deep

		[BackendSymbol( Name = "RegConnectRegistryExA" )]
		public extern static SystemErrorCode RegConnectRegistryEx( CString machineName, HKEY key, uint flags, HKEY& result );
		[BackendSymbol( Name = "RegConnectRegistryExW" )]
		public extern static SystemErrorCode RegConnectRegistryEx( CUtf16String machineName, HKEY key, uint flags, HKEY& result );

		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegCreateKeyEx" )]
		// [BackendSymbol( Name = "RegCreateKeyA" )]
		// public extern static SystemErrorCode RegCreateKey( HKEY key, CString subKey, HKEY& result );
		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegCreateKeyEx" )]
		// [BackendSymbol( Name = "RegCreateKeyW" )]
		// public extern static SystemErrorCode RegCreateKey( HKEY key, CUtf16String subKey, HKEY& result );

		[BackendSymbol( Name = "RegCreateKeyExA" )]
		public extern static SystemErrorCode RegCreateKeyEx( HKEY key, CString subKey, [Unused] uint reserved, byte* @class, RegCreateKeyOption options, RegistryAccessRights samDesired, [In] SECURITY_ATTRIBUTES& attributes, HKEY& result, RegCreateKeyDisposition& disposition );
		[BackendSymbol( Name = "RegCreateKeyExW" )]
		public extern static SystemErrorCode RegCreateKeyEx( HKEY key, CUtf16String subKey, [Unused] uint reserved, char* @class, RegCreateKeyOption options, RegistryAccessRights samDesired, [In] SECURITY_ATTRIBUTES& attributes, HKEY& result, RegCreateKeyDisposition& disposition );

		[BackendSymbol( Name = "RegCreateKeyTransactedA" )]
		public extern static SystemErrorCode RegCreateKeyTransacted( HKEY key, CString subKey, [Unused] uint reserved, byte* @class, RegCreateKeyOption options, RegistryAccessRights samDesired, [In] SECURITY_ATTRIBUTES& attributes, HKEY& result, RegCreateKeyDisposition& disposition, TransactionHandle transaction, void* extendedParemeter );
		[BackendSymbol( Name = "RegCreateKeyTransactedW" )]
		public extern static SystemErrorCode RegCreateKeyTransacted( HKEY key, CUtf16String subKey, [Unused] uint reserved, char* @class, RegCreateKeyOption options, RegistryAccessRights samDesired, [In] SECURITY_ATTRIBUTES& attributes, HKEY& result, RegCreateKeyDisposition& disposition, TransactionHandle transaction, void* extendedParemeter );

		[BackendSymbol( Name = "RegDeleteKeyA" )]
		public extern static SystemErrorCode RegDeleteKey( HKEY key, CString subKey );
		[BackendSymbol( Name = "RegDeleteKeyW" )]
		public extern static SystemErrorCode RegDeleteKey( HKEY key, CUtf16String subKey );

		[BackendSymbol( Name = "RegDeleteKeyExA" )]
		public extern static SystemErrorCode RegDeleteKeyEx( HKEY key, CString subKey, RegistryAccessRights samDesired, [Unused] uint reserved );
		[BackendSymbol( Name = "RegDeleteKeyExW" )]
		public extern static SystemErrorCode RegDeleteKeyEx( HKEY key, CUtf16String subKey, RegistryAccessRights samDesired, [Unused] uint reserved );

		[BackendSymbol( Name = "RegDeleteKeyTransactedA" )]
		public extern static SystemErrorCode RegDeleteKeyTransacted( HKEY key, CString subKey, RegistryAccessRights samDesired, [Unused] uint reserved, HANDLE transaction, void* extendedParameter );
		[BackendSymbol( Name = "RegDeleteKeyTransactedW" )]
		public extern static SystemErrorCode RegDeleteKeyTransacted( HKEY key, CUtf16String subKey, RegistryAccessRights samDesired, [Unused] uint reserved, HANDLE transaction, void* extendedParameter );

		public extern static SystemErrorCode RegDisableReflectionKey( HKEY hBase );

		public extern static SystemErrorCode RegEnableReflectionKey( HKEY hBase );

		public extern static SystemErrorCode RegQueryReflectionKey( HKEY hBase, int& isReflectionDisabled );

		[BackendSymbol( Name = "RegDeleteValueA" )]
		public extern static SystemErrorCode RegDeleteValue( HKEY key, CString valueName );
		[BackendSymbol( Name = "RegDeleteValueW" )]
		public extern static SystemErrorCode RegDeleteValue( HKEY key, CUtf16String valueName );

		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegEnumKeyEx" )]
		// [BackendSymbol( Name = "RegEnumKeyA" )]
		// public extern static SystemErrorCode RegEnumKey( HKEY key, uint index, byte* name, uint cchName );
		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegEnumKeyEx" )]
		// [BackendSymbol( Name = "RegEnumKeyW" )]
		// public extern static SystemErrorCode RegEnumKey( HKEY key, uint index, char* name, uint cchName );

		[BackendSymbol( Name = "RegEnumKeyExA" )]
		public extern static SystemErrorCode RegEnumKeyEx( HKEY key, uint index, byte* name, uint& nameLength, uint& reserved, byte* @class, uint& classLength, FILETIME& lastWriteTime );
		[BackendSymbol( Name = "RegEnumKeyExW" )]
		public extern static SystemErrorCode RegEnumKeyEx( HKEY key, uint index, char* name, uint& nameLength, uint& reserved, char* @class, uint& classLength, FILETIME& lastWriteTime );

		[BackendSymbol( Name = "RegEnumValueA" )]
		public extern static SystemErrorCode RegEnumValue( HKEY key, uint index, byte* valueName, uint& valueNameLength, [Unused] uint& reserved, RegValueType& type, void* data, uint& dataLength );
		[BackendSymbol( Name = "RegEnumValueW" )]
		public extern static SystemErrorCode RegEnumValue( HKEY key, uint index, char* valueName, uint& valueNameLength, [Unused] uint& reserved, RegValueType& type, void* data, uint& dataLength );
		public extern static SystemErrorCode RegFlushKey( HKEY key );

		public extern static SystemErrorCode RegGetKeySecurity( HKEY key, SECURITY_INFORMATION securityInformation, SECURITY_DESCRIPTOR* securityDescriptor, uint& securityDescriptorLength );

		[BackendSymbol( Name = "RegLoadKeyA" )]
		public extern static SystemErrorCode RegLoadKey( HKEY key, CString subKey, CString file );
		[BackendSymbol( Name = "RegLoadKeyW" )]
		public extern static SystemErrorCode RegLoadKey( HKEY key, CUtf16String subKey, CUtf16String file );

		public extern static SystemErrorCode RegNotifyChangeKeyValue( HKEY key, bool watchSubtree, uint notifyFilter, HANDLE @event, bool asynchronous );

		[BackendSymbol( Name = "RegReplaceKeyA" )]
		public extern static SystemErrorCode RegReplaceKey( HKEY key, CString subKey, CString newFile, CString oldFile );
		[BackendSymbol( Name = "RegReplaceKeyW" )]
		public extern static SystemErrorCode RegReplaceKey( HKEY key, CUtf16String subKey, CUtf16String newFile, CUtf16String oldFile );

		[BackendSymbol( Name = "RegRestoreKeyA" )]
		public extern static SystemErrorCode RegRestoreKey( HKEY key, CString file, uint flags );
		[BackendSymbol( Name = "RegRestoreKeyW" )]
		public extern static SystemErrorCode RegRestoreKey( HKEY key, CUtf16String file, uint flags );

		public extern static SystemErrorCode RegRenameKey( HKEY key, CUtf16String subKeyName, CUtf16String newKeyName );

		[BackendSymbol( Name = "RegSaveKeyA" )]
		public extern static SystemErrorCode RegSaveKey( HKEY key, CString file, [In] SECURITY_ATTRIBUTES& attributes );
		[BackendSymbol( Name = "RegSaveKeyW" )]
		public extern static SystemErrorCode RegSaveKey( HKEY key, CUtf16String file, [In] SECURITY_ATTRIBUTES& attributes );

		public extern static int RegSetKeySecurity( HKEY key, SECURITY_INFORMATION securityInformation, SECURITY_DESCRIPTOR& securityDescriptor );

		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegEnumKeyEx" )]
		// [BackendSymbol( Name = "RegSetValueA" )]
		// public extern static SystemErrorCode RegSetValue( HKEY key, CString subKey, RegValueType type, void* data, uint dataLength );
		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegEnumKeyEx" )]
		// [BackendSymbol( Name = "RegSetValueW" )]
		// public extern static SystemErrorCode RegSetValue( HKEY key, CUtf16String subKey, RegValueType type, void* data, uint dataLength );
		[BackendSymbol( Name = "RegSetValueExA" )]
		public extern static SystemErrorCode RegSetValueEx( HKEY key, CString valueName, [Unused] uint reserved, RegValueType type, void* data, uint dataLength );
		[BackendSymbol( Name = "RegSetValueExW" )]
		public extern static SystemErrorCode RegSetValueEx( HKEY key, CUtf16String valueName, [Unused] uint reserved, RegValueType type, void* data, uint dataLength );

		[BackendSymbol( Name = "RegUnLoadKeyA" )]
		public extern static SystemErrorCode RegUnLoadKey( HKEY key, CString subKey );
		[BackendSymbol( Name = "RegUnLoadKeyW" )]
		public extern static SystemErrorCode RegUnLoadKey( HKEY key, CUtf16String subKey );
		[BackendSymbol( Name = "RegDeleteKeyValueA" )]
		public extern static SystemErrorCode RegDeleteKeyValue( HKEY key, CString subKey, CString valueName );
		[BackendSymbol( Name = "RegDeleteKeyValueW" )]
		public extern static SystemErrorCode RegDeleteKeyValue( HKEY key, CUtf16String subKey, CUtf16String valueName );
		[BackendSymbol( Name = "RegSetKeyValueA" )]
		public extern static SystemErrorCode RegSetKeyValue( HKEY key, CString subKey, CString valueName, uint type, [In] void* data, uint dataLength );
		[BackendSymbol( Name = "RegSetKeyValueW" )]
		public extern static SystemErrorCode RegSetKeyValue( HKEY key, CUtf16String subKey, CUtf16String valueName, uint type, [In] void* data, uint dataLength );
		[BackendSymbol( Name = "RegDeleteTreeA" )]
		public extern static SystemErrorCode RegDeleteTree( HKEY key, CString subKey );
		[BackendSymbol( Name = "RegDeleteTreeW" )]
		public extern static SystemErrorCode RegDeleteTree( HKEY key, CUtf16String subKey );
		[BackendSymbol( Name = "RegCopyTreeA" )]
		public extern static SystemErrorCode RegCopyTree( HKEY hKeySrc, CString subKey, HKEY keyDest );
		[BackendSymbol( Name = "RegCopyTreeW" )]
		public extern static SystemErrorCode RegCopyTree( HKEY hKeySrc, CUtf16String subKey, HKEY keyDest );

		[BackendSymbol( Name = "RegGetValueA" )]
		public extern static SystemErrorCode RegGetValue( HKEY hkey, CString subKey, CString valueName, uint dwFlags, uint& pdwType, void* data, uint& dataLength );
		[BackendSymbol( Name = "RegGetValueW" )]
		public extern static SystemErrorCode RegGetValue( HKEY hkey, CUtf16String subKey, CUtf16String valueName, uint dwFlags, uint& pdwType, void* data, uint& dataLength );
		[BackendSymbol( Name = "RegLoadMUIStringA" )]
		public extern static SystemErrorCode RegLoadMUIString( HKEY key, CString pszValue, byte* pszOutBuf, uint cbOutBuf, uint& pcbData, uint flags, CString pszDirectory );
		[BackendSymbol( Name = "RegLoadMUIStringW" )]
		public extern static SystemErrorCode RegLoadMUIString( HKEY key, CUtf16String pszValue, char* pszOutBuf, uint cbOutBuf, uint& pcbData, uint flags, CUtf16String directory );

		[BackendSymbol( Name = "RegLoadAppKeyA" )]
		public extern static SystemErrorCode RegLoadAppKey( CString file, HKEY& result, RegistryAccessRights samDesired, uint options, uint reserved );
		[BackendSymbol( Name = "RegLoadAppKeyW" )]
		public extern static SystemErrorCode RegLoadAppKey( CUtf16String file, HKEY& result, RegistryAccessRights samDesired, uint options, uint reserved );

		[BackendSymbol( Name = "RegSaveKeyExA" )]
		public extern static SystemErrorCode RegSaveKeyEx( HKEY key, CString file, [In] SECURITY_ATTRIBUTES& attributes, uint flags );
		[BackendSymbol( Name = "RegSaveKeyExW" )]
		public extern static SystemErrorCode RegSaveKeyEx( HKEY key, CUtf16String file, [In] SECURITY_ATTRIBUTES& attributes, uint flags );

		public extern static SystemErrorCode RegOverridePredefKey( HKEY key, HKEY newKey );
		public extern static SystemErrorCode RegOpenUserClassesRoot( HANDLE token, [Unused] uint reserved, RegistryAccessRights samDesired, HKEY& result );
		public extern static SystemErrorCode RegOpenCurrentUser( RegistryAccessRights samDesired, HKEY& result );
		public extern static SystemErrorCode RegDisablePredefinedCache();
		public extern static SystemErrorCode RegDisablePredefinedCacheEx();

		[BackendSymbol( Name = "RegConnectRegistryA" )]
		public extern static SystemErrorCode RegConnectRegistry( CString machineName, HKEY key, HKEY& result );
		[BackendSymbol( Name = "RegConnectRegistryW" )]
		public extern static SystemErrorCode RegConnectRegistry( CUtf16String machineName, HKEY key, HKEY& result );

		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegOpenKeyEx" )]
		// [BackendSymbol( Name = "RegOpenKeyA" )]
		// public extern static SystemErrorCode RegOpenKey( HKEY key, CString subKey, HKEY& result );
		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegOpenKeyEx" )]
		// [BackendSymbol( Name = "RegOpenKeyW" )]
		// public extern static SystemErrorCode RegOpenKey( HKEY key, CUtf16String subKey, HKEY& result );
		[BackendSymbol( Name = "RegOpenKeyExA" )]
		public extern static SystemErrorCode RegOpenKeyEx( HKEY key, CString subKey, [Unused] uint reserved, RegistryAccessRights samDesired, HKEY& result );
		[BackendSymbol( Name = "RegOpenKeyExW" )]
		public extern static SystemErrorCode RegOpenKeyEx( HKEY key, CUtf16String subKey, [Unused] uint reserved, RegistryAccessRights samDesired, HKEY& result );

		[BackendSymbol( Name = "RegOpenKeyTransactedA" )]
		public extern static SystemErrorCode RegOpenKeyTransacted( HKEY key, CString subKey, uint options, RegistryAccessRights samDesired, HKEY& result, HANDLE transaction, void* extendedParemeter );
		[BackendSymbol( Name = "RegOpenKeyTransactedW" )]
		public extern static SystemErrorCode RegOpenKeyTransacted( HKEY key, CUtf16String subKey, uint options, RegistryAccessRights samDesired, HKEY& result, TransactionHandle transaction, void* extendedParemeter );

		[BackendSymbol( Name = "RegQueryInfoKeyA" )]
		public extern static SystemErrorCode RegQueryInfoKey( HKEY key, byte* @class, uint& classLength, [Unused] uint& reserved, uint& subKeys, uint& maxSubKeyLen, uint& maxClassLen, uint& values, uint& maxValueNameLen, uint& maxValueLen, uint& securityDescriptor, FILETIME& lastWriteTime );
		[BackendSymbol( Name = "RegQueryInfoKeyW" )]
		public extern static SystemErrorCode RegQueryInfoKey( HKEY key, char* @class, uint& classLength, [Unused] uint& reserved, uint& subKeys, uint& maxSubKeyLen, uint& maxClassLen, uint& values, uint& maxValueNameLen, uint& maxValueLen, uint& securityDescriptor, FILETIME& lastWriteTime );

		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegQueryValueEx" )]
		// [BackendSymbol( Name = "RegQueryValueA" )]
		// public extern static SystemErrorCode RegQueryValue( HKEY key, CString valueName, void* data, uint& dataLength );
		// [Obsolete( Message = "retained for compatibility with 16-bit versions of Windows, use RegQueryValueEx" )]
		// [BackendSymbol( Name = "RegQueryValueW" )]
		// public extern static SystemErrorCode RegQueryValue( HKEY key, CUtf16String valueName, void* data, uint& dataLength );

		[BackendSymbol( Name = "RegQueryValueExA" )]
		public extern static SystemErrorCode RegQueryValueEx( HKEY key, CString valueName, [Unused] uint& reserved, RegValueType& type, void* data, uint& dataLength );
		[BackendSymbol( Name = "RegQueryValueExW" )]
		public extern static SystemErrorCode RegQueryValueEx( HKEY key, CUtf16String valueName, [Unused] uint& reserved, RegValueType& type, void* data, uint& dataLength );

		[BackendSymbol( Name = "RegQueryMultipleValuesA" )]
		public extern static SystemErrorCode RegQueryMultipleValues( HKEY key, VALENTA* values, uint count, void* valueBuf, uint& totalSize );
		[BackendSymbol( Name = "RegQueryMultipleValuesW" )]
		public extern static SystemErrorCode RegQueryMultipleValues( HKEY key, VALENTW* values, uint count, void* valueBuf, uint& totalSize );

		public extern static SystemErrorCode RegCloseKey( HKEY key );
		/// @}

		public extern static bool ImpersonateNamedPipeClient( NamedPipeHandle pipe );
		public extern static bool RevertToSelf();

		public functor void ServiceMainFunctionA( uint dwNumServicesArgs, CString* lpServiceArgVectors );
		public functor void ServiceMainFunctionW( uint dwNumServicesArgs, CUtf16String* lpServiceArgVectors );

		public functor void HandlerFunction( uint dwControl );

		[BackendSymbol( Name = "StartServiceCtrlDispatcherA" )]
		public extern static Boolean32 StartServiceCtrlDispatcher( SERVICE_TABLE_ENTRYA* lpServiceStartTable );
		[BackendSymbol( Name = "StartServiceCtrlDispatcherW" )]
		public extern static Boolean32 StartServiceCtrlDispatcher( SERVICE_TABLE_ENTRYW* lpServiceStartTable );

		public extern static SERVICE_STATUS_HANDLE* RegisterServiceCtrlHandlerW( CUtf16String lpServiceName, HandlerFunction lpHandlerProc );

		public extern static Boolean32 SetServiceStatus( SERVICE_STATUS_HANDLE* hServiceStatus, SERVICE_STATUS* lpServiceStatus );
	}

	public enum ServiceAcceptedControl : uint {
		SERVICE_ACCEPT_STOP =                   0x1U,
		SERVICE_ACCEPT_PAUSE_CONTINUE =         0x2U,
		SERVICE_ACCEPT_SHUTDOWN =               0x4U,
		SERVICE_ACCEPT_PARAMCHANGE =            0x8U,
		SERVICE_ACCEPT_NETBINDCHANGE =         0x10U,
		SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 0x20U,
		SERVICE_ACCEPT_POWEREVENT =            0x40U,
		SERVICE_ACCEPT_SESSIONCHANGE =         0x80U,
		SERVICE_ACCEPT_PRESHUTDOWN =          0x100U,
		SERVICE_ACCEPT_TIMECHANGE =           0x200U,
		SERVICE_ACCEPT_TRIGGEREVENT =         0x400U,
	}

	public enum ServiceControl : uint {
		SERVICE_CONTROL_STOP =                  0x1U,
		SERVICE_CONTROL_PAUSE =                 0x2U,
		SERVICE_CONTROL_CONTINUE =              0x3U,
		SERVICE_CONTROL_INTERROGATE =           0x4U,
		SERVICE_CONTROL_SHUTDOWN =              0x5U,
		SERVICE_CONTROL_PARAMCHANGE =           0x6U,
		SERVICE_CONTROL_NETBINDADD =            0x7U,
		SERVICE_CONTROL_NETBINDREMOVE =         0x8U,
		SERVICE_CONTROL_NETBINDENABLE =         0x9U,
		SERVICE_CONTROL_NETBINDDISABLE =        0xAU,
		SERVICE_CONTROL_DEVICEEVENT =           0xBU,
		SERVICE_CONTROL_HARDWAREPROFILECHANGE = 0xCU,
		SERVICE_CONTROL_POWEREVENT =            0xDU,
		SERVICE_CONTROL_SESSIONCHANGE =         0xEU,
		SERVICE_CONTROL_PRESHUTDOWN =           0xFU,
		SERVICE_CONTROL_TIMECHANGE =           0x10U,
		SERVICE_CONTROL_TRIGGEREVENT =         0x20U,
	}

	public enum ServiceControlFlags : uint {
		SERVICE_ACCEPT_STOP =                   0x1U,
		SERVICE_ACCEPT_PAUSE_CONTINUE =         0x2U,
		SERVICE_ACCEPT_SHUTDOWN =               0x4U,
		SERVICE_ACCEPT_PARAMCHANGE =            0x8U,
		SERVICE_ACCEPT_NETBINDCHANGE =         0x10U,
		SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 0x20U,
		SERVICE_ACCEPT_POWEREVENT =            0x40U,
		SERVICE_ACCEPT_SESSIONCHANGE =         0x80U,
		SERVICE_ACCEPT_PRESHUTDOWN =          0x100U,
		SERVICE_ACCEPT_TIMECHANGE =           0x200U,
		SERVICE_ACCEPT_TRIGGEREVENT =         0x400U,
	}

	public enum ServiceStatus : uint {
		SERVICE_STOPPED =          0x1U,
		SERVICE_START_PENDING =    0x2U,
		SERVICE_STOP_PENDING =     0x3U,
		SERVICE_RUNNING =          0x4U,
		SERVICE_CONTINUE_PENDING = 0x5U,
		SERVICE_PAUSE_PENDING =    0x6U,
		SERVICE_PAUSED =           0x7U,
	}

	public enum ServiceType : uint {
		SERVICE_KERNEL_DRIVER =         0x1U,
		SERVICE_FILE_SYSTEM_DRIVER =    0x2U,
		SERVICE_ADAPTER =               0x4U,
		SERVICE_RECOGNIZER_DRIVER =     0x8U,
		SERVICE_DRIVER =                0xBU,
		SERVICE_WIN32_OWN_PROCESS =    0x10U,
		SERVICE_WIN32_SHARE_PROCESS =  0x20U,
		SERVICE_WIN32 =                0x30U,
		SERVICE_INTERACTIVE_PROCESS = 0x100U,
	}

	public partial struct SERVICE_STATUS {
		public uint dwServiceType;
		public uint dwCurrentState;
		public uint dwControlsAccepted;
		public uint dwWin32ExitCode;
		public uint dwServiceSpecificExitCode;
		public uint dwCheckPoint;
		public uint dwWaitHint;
	}

	public partial struct SERVICE_STATUS_HANDLE {
		public int unused;
	}

	public partial struct SERVICE_TABLE_ENTRYA {
		public CString lpServiceName;
		public Advapi32Api.ServiceMainFunctionA lpServiceProc;
	}

	public partial struct SERVICE_TABLE_ENTRYW {
		public CUtf16String lpServiceName;
		public Advapi32Api.ServiceMainFunctionW lpServiceProc;
	}

	public partial struct HKEY : HANDLE {
		public static new HKEY Invalid { get { return bitcast<HKEY>( uintptr.MaxValue ); } }
		public static new HKEY Null { get { return bitcast<HKEY>( ( uintptr ) 0 ); } }

		public new void Close() { Advapi32Api.RegCloseKey( this ); }
		public new void Dispose() { Close(); }

		public static Functors.Action<SystemErrorCode, CallerContext&> OnError = null;

		private static SystemErrorCode Verify( SystemErrorCode code, [In] CallerContext& callercontext = nullref ) {
			if( code != SystemErrorCode.ERROR_SUCCESS && OnError != null )
				OnError( code, callercontext );

			return code;
		}

		public HKEY OpenOrCreate( string name, RegistryAccessRights rights = RegistryAccessRights.KEY_ALL_ACCESS, RegCreateKeyOption option = RegCreateKeyOption.None ) {
			RegCreateKeyDisposition disposition;
			HKEY result;
			Verify( Advapi32Api.RegCreateKeyEx( this, name, 0, null, option, rights, nullref, result, disposition ) );
			return result;
		}

		public HKEY Open( string name, RegistryAccessRights rights = RegistryAccessRights.KEY_ALL_ACCESS ) {
			HKEY result;
			Verify( Advapi32Api.RegOpenKeyEx( this, name, 0, rights, result ) );
			return result;
		}

		public HKEY OpenRead( string name ) {
			return Open( name, RegistryAccessRights.KEY_READ | RegistryAccessRights.KEY_ENUMERATE_SUB_KEYS | RegistryAccessRights.KEY_QUERY_VALUE );
		}

		public RegValueType ValueType[string valueName] {
			get {
				RegValueType result;
				Verify( Advapi32Api.RegQueryValueEx( this, valueName, nullref, result, null, nullref ) );
				return result;
			}
		}

		public uint ValueSize[string valueName] {
			get {
				uint result;
				Verify( Advapi32Api.RegQueryValueEx( this, valueName, nullref, nullref, null, result ) );
				return result;
			}
		}

		public uint ValueUInt32[string valueName] {
			get {
				uint result;
				RegValueType type;
				Verify( Advapi32Api.RegQueryValueEx( this, valueName, nullref, type, &result, ( uint ) sizeof( result ) ) );

				switch( type ) {
					case RegValueType.REG_DWORD_LITTLE_ENDIAN:
						return *( uint_littleendian* ) &result;

					case RegValueType.REG_DWORD_BIG_ENDIAN:
						return *( uint_bigendian* ) &result;
				}

				return 0;
			}
			set {
				Verify( Advapi32Api.RegSetValueEx( this, valueName, 0, RegValueType.REG_DWORD, &value, ( uint ) sizeof( value ) ) );
			}
		}

		public ulong ValueUInt64[string valueName] {
			get {
				ulong result;
				RegValueType type;
				Verify( Advapi32Api.RegQueryValueEx( this, valueName, nullref, type, &result, ( uint ) sizeof( result ) ) );
				if( type != RegValueType.REG_QWORD ) return 0;
				return result;
			}
			set {
				Verify( Advapi32Api.RegSetValueEx( this, valueName, 0, RegValueType.REG_QWORD, &value, ( uint ) sizeof( value ) ) );
			}
		}

		public string ValueString[string valueName] {
			get {
				uint dataLength, dataLength2;
				RegValueType type, type2;

			refetch:
				var code = Advapi32Api.RegQueryValueEx( this, valueName, nullref, type, null, dataLength );
				if( !Verify( code ) ) return null;

				switch( type ) {
					case RegValueType.REG_SZ:
					case RegValueType.REG_EXPAND_SZ:
					case RegValueType.REG_MULTI_SZ:
						break;

					default: return null;
				}

				dataLength2 = dataLength;

				var result = new string.Builder( dataLength / 2 - 1 );
				code = Advapi32Api.RegQueryValueEx( this, valueName, nullref, type2, result.GetChars(), dataLength2 );
				if( type != type2 || dataLength != dataLength2 || code == SystemErrorCode.ERROR_MORE_DATA ) goto refetch;
				if( !Verify( code ) ) return null;

				return result.Detach();
			}
			set {
				Verify( Advapi32Api.RegSetValueEx( this, valueName, 0, RegValueType.REG_SZ, value.GetChars(), ( uint ) value.ByteLength + 2 ) ); // store with '\0'
			}
		}

		public byte[] ValueBinary[string valueName] {
			get {
				uint dataLength, dataLength2;
				RegValueType type, type2;

			refetch:
				var code = Advapi32Api.RegQueryValueEx( this, valueName, nullref, type, null, dataLength );
				if( !Verify( code ) ) return null;

				switch( type ) {
					case RegValueType.REG_BINARY:
						break;

					default: return null;
				}

				var result = new[dataLength] byte;
				code = Advapi32Api.RegQueryValueEx( this, valueName, nullref, type, &result[0], dataLength2 );
				if( type != type2 || dataLength != dataLength2 || code == SystemErrorCode.ERROR_MORE_DATA ) goto refetch;
				if( !Verify( code ) ) return null;

				return result;
			}
			set {
				Verify( Advapi32Api.RegSetValueEx( this, valueName, 0, RegValueType.REG_SZ, &value[0], ( uint ) value.Length ) );
			}
		}

		public string GetStringValue( ValueInfo& value ) {
			return GetStringValue( value.Name, value.Type, value.Length );
		}

		public string GetStringValue( string valueName, RegValueType type, uint dataLength ) {
			var dataLengthNew = dataLength;
			RegValueType typeNew;

		restart:
			switch( type ) {
				case RegValueType.REG_SZ:
				case RegValueType.REG_EXPAND_SZ:
				case RegValueType.REG_MULTI_SZ:
					break;

				default: return null;
			}

			var result = new string.Builder( dataLength / 2 - 1 );
			var code = Advapi32Api.RegQueryValueEx( this, valueName, nullref, typeNew, result.GetChars(), dataLengthNew );
			if( type != typeNew || dataLength != dataLengthNew || code == SystemErrorCode.ERROR_MORE_DATA ) {
				type = typeNew;
				dataLength = dataLengthNew;

				goto restart;
			}

			if( !Verify( code ) ) return null;

			return result.Detach();
		}

		public byte[] GetBinaryValue( ValueInfo& value ) {
			return GetBinaryValue( value.Name, value.Type, value.Length );
		}

		public byte[] GetBinaryValue( string valueName, RegValueType type, uint dataLength ) {
			uint dataLengthNew;
			RegValueType typeNew;

		restart:
			switch( type ) {
				case RegValueType.REG_BINARY: break;
				default: return null;
			}

			var result = new[dataLength] byte;
			var code = Advapi32Api.RegQueryValueEx( this, valueName, nullref, typeNew, &result[0], dataLengthNew );
			if( type != typeNew || dataLength != dataLengthNew || code == SystemErrorCode.ERROR_MORE_DATA ) {
				type = typeNew;
				dataLength = dataLengthNew;

				goto restart;
			}

			if( !Verify( code ) ) return null;

			return result;
		}

		public void Flush() {
			Verify( Advapi32Api.RegFlushKey( this ) );
		}

		public yield<string> GetKeys() {
			RegValueType type;
			uint dataLength;
			ValueInfo result;

			uint subKeys, maxSubKeyLength;
			Verify( Advapi32Api.RegQueryInfoKey( this, ( char* ) null, nullref, nullref, subKeys, maxSubKeyLength, nullref, nullref, nullref, nullref, nullref, nullref ) );
			var buffer = new[maxSubKeyLength + 1] char;

			for( var i = 0U; i < subKeys; ++i ) {
			refetch:
				var bufferLength = ( uint ) buffer.Length;

				if( !Verify( Advapi32Api.RegEnumKeyEx( this, i, &buffer[0], bufferLength, nullref, null, nullref, nullref ) ) )
					continue;

				if( bufferLength == ( uint ) buffer.Length ) {
					buffer = new[( int )( buffer.Length * 1.7 )] char;
					goto refetch;
				}

				yield return string.FromUtf16( &buffer[0], bufferLength );
			}
		}

		public yield<string> GetKeysReversed() {
			RegValueType type;
			uint dataLength;
			ValueInfo result;

			uint subKeys, maxSubKeyLength;
			Verify( Advapi32Api.RegQueryInfoKey( this, ( char* ) null, nullref, nullref, subKeys, maxSubKeyLength, nullref, nullref, nullref, nullref, nullref, nullref ) );
			var buffer = new[maxSubKeyLength + 1] char;

			for( var i = subKeys - 1; i != uint.MaxValue; --i ) {
			refetch:
				var bufferLength = ( uint ) buffer.Length;

				if( !Verify( Advapi32Api.RegEnumKeyEx( this, i, &buffer[0], bufferLength, nullref, null, nullref, nullref ) ) )
					continue;

				if( bufferLength == ( uint ) buffer.Length ) {
					buffer = new[( int )( buffer.Length * 1.7 )] char;
					goto refetch;
				}

				yield return string.FromUtf16( &buffer[0], bufferLength );
			}
		}

		public yield<ValueInfo> GetValues() {
			if( !IsValid ) yield break;

			RegValueType type;
			uint dataLength;
			ValueInfo result;

			uint values, maxValueNameLength, maxValueLength;
			Verify( Advapi32Api.RegQueryInfoKey( this, ( char* ) null, nullref, nullref, nullref, nullref, nullref, values, maxValueNameLength, maxValueLength, nullref, nullref ) );
			var buffer = new[maxValueNameLength + 1] char;

			for( var i = 0U; i < values; ++i ) {
			refetch:
				var bufferLength = ( uint ) buffer.Length;

				if( !Verify( Advapi32Api.RegEnumValue( this, i, &buffer[0], bufferLength, nullref, type, null, dataLength ) ) )
					break;

				if( bufferLength == ( uint ) buffer.Length ) {
					buffer = new[( int )( buffer.Length * 1.7 )] char;
					goto refetch;
				}

				result.Name = string.FromUtf16( &buffer[0], bufferLength );
				result.Type = type;
				result.Length = dataLength;
				yield return result;
			}
		}

		public yield<ValueInfo> GetValuesReversed() {
			if( !IsValid ) yield break;

			RegValueType type;
			uint dataLength;
			ValueInfo result;

			uint values, maxValueNameLength, maxValueLength;
			Verify( Advapi32Api.RegQueryInfoKey( this, ( char* ) null, nullref, nullref, nullref, nullref, nullref, values, maxValueNameLength, maxValueLength, nullref, nullref ) );
			var buffer = new[maxValueNameLength + 1] char;

			for( var i = values - 1; i != uint.MaxValue; --i ) {
			refetch:
				var bufferLength = ( uint ) buffer.Length;

				if( !Verify( Advapi32Api.RegEnumValue( this, i, &buffer[0], bufferLength, nullref, type, null, dataLength ) ) )
					break;

				if( bufferLength == ( uint ) buffer.Length ) {
					buffer = new[( int )( buffer.Length * 1.7 )] char;
					goto refetch;
				}

				result.Name = string.FromUtf16( &buffer[0], bufferLength );
				result.Type = type;
				result.Length = dataLength;
				yield return result;
			}
		}

		public void SetValues( Binder.Context& context, Binder.MapperUtf16 mapper ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				var valueFormatter = builder.Value;
				bool isNull;

				foreach( var idMapping in mapper.IdMapping ) {
					var name = idMapping.Key;
					var& mapping = context.Binder.Mappings[idMapping.Value];

					// if( mapping.GetDirectType().AsEnum == nullref )
					switch( mapping.GetType() ) {
						case typeof( bool ):
						case typeof( byte ):
						case typeof( ushort_littleendian ):
						case typeof( ushort_bigendian ):
						case typeof( uint_littleendian ):
						case typeof( uint_bigendian ): {
								uint uintValue;
								context.Binder.GetValue( context, idMapping.Value, uintValue );
								Verify( Advapi32Api.RegSetValueEx( this, name, 0, RegValueType.REG_DWORD, &uintValue, ( uint ) sizeof( uintValue ) ) );
							} continue;

						case typeof( sbyte ):
						case typeof( short_littleendian ):
						case typeof( short_bigendian ):
						case typeof( int_littleendian ):
						case typeof( int_bigendian ): {
								uint intValue;
								context.Binder.GetValue( context, idMapping.Value, intValue );
								if( intValue >= 0 ) {
									Verify( Advapi32Api.RegSetValueEx( this, name, 0, RegValueType.REG_DWORD, &intValue, ( uint ) sizeof( intValue ) ) );
									continue;
								}
							} break;

						case typeof( ulong_littleendian ):
						case typeof( ulong_bigendian ): {
								ulong ulongValue;
								context.Binder.GetValue( context, idMapping.Value, ulongValue );
								Verify( Advapi32Api.RegSetValueEx( this, name, 0, RegValueType.REG_QWORD, &ulongValue, ( uint ) sizeof( ulongValue ) ) );
							} continue;

						case typeof( long_littleendian ):
						case typeof( long_bigendian ): {
								long longValue;
								context.Binder.GetValue( context, idMapping.Value, longValue );
								if( longValue >= 0 ) {
									Verify( Advapi32Api.RegSetValueEx( this, name, 0, RegValueType.REG_QWORD, &longValue, ( uint ) sizeof( longValue ) ) );
									continue;
								}
							} break;

						case typeof( byte[] ): {
								byte[] arrayValue;
								context.Binder.GetValue( context, idMapping.Value, arrayValue );
								if( arrayValue != null )
									Verify( Advapi32Api.RegSetValueEx( this, name, 0, RegValueType.REG_BINARY, &arrayValue[0], ( uint ) arrayValue.Length ) );
							} continue;
					}

					valueFormatter.Clear();
					context.Binder.GetValue( context, idMapping.Value, valueFormatter, isNull );

					if( !isNull )
						Verify( Advapi32Api.RegSetValueEx( this, name, 0, RegValueType.REG_SZ, valueFormatter.GetNullTerminatingBuffer().GetChars(), ( uint )( valueFormatter.Length + 1 ) * sizeof( char ) ) );
					else
						Verify( Advapi32Api.RegDeleteValue( this, name ) );
				}
			}
		}

		public void GetValues( Binder.Context& context, Binder.MapperUtf16 idMapping ) {
			foreach( var value in GetValues() ) {
				var id = idMapping[value.Name];
				if( id == -1 ) continue;

				switch( value.Type ) {
					case RegValueType.REG_DWORD_LITTLE_ENDIAN:
					case RegValueType.REG_DWORD_BIG_ENDIAN:
						context.Binder.SetValue( context, id, ValueUInt32[value.Name] );
						break;

					case RegValueType.REG_QWORD:
						context.Binder.SetValue( context, id, ValueUInt64[value.Name] );
						break;

					case RegValueType.REG_EXPAND_SZ:
					case RegValueType.REG_MULTI_SZ:
					case RegValueType.REG_SZ:
						context.Binder.SetValue( context, id, GetStringValue( value ) );
						break;

					case RegValueType.REG_BINARY:
						context.Binder.SetValue( context, id, GetBinaryValue( value ) );
						break;
				}
			}
		}

		public SystemErrorCode DeleteValue( string subKey, string valueName ) {
			return Verify( Advapi32Api.RegDeleteKeyValue( this, subKey, valueName ) );
		}

		public SystemErrorCode DeleteValue( string valueName ) {
			return Verify( Advapi32Api.RegDeleteValue( this, valueName ) );
		}

		public SystemErrorCode DeleteKey( string subKey ) {
			return Verify( Advapi32Api.RegDeleteKey( this, subKey ) );
		}

		public SystemErrorCode DeleteTree( string subKey ) {
			return Verify( Advapi32Api.RegDeleteTree( this, subKey ) );
		}

		public struct ValueInfo : IFormattable {
			public string Name;
			public RegValueType Type;
			public uint Length;

			public void ToString( StringBuilder builder, string format ) {
				builder.Append( Name );
			}
		}
	}
}