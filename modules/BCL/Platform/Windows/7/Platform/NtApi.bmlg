//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Net;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Platform {
	[DllImport( Image = "NTDLL.dll" )]
	[CallingConvention( Value = NtApi.DefaultCallingConvention )]
	public static partial struct NtApi {
		public const CallingConvention DefaultCallingConvention = Environment.CurrentCpu == System.Runtime.CompilerServices.CpuID.X86_32 ? CallingConvention.StdCallX86 : CallingConvention.Default;

		#region Time
		public extern static NtStatus NtQuerySystemTime( ulong& systemTime );
		public extern static bool RtlTimeToSecondsSince1970( ulong& time, uint& elapsedSeconds );
		public extern static bool RtlTimeToSecondsSince1980( ulong& time, uint& elapsedSeconds );

		public extern static NtStatus RtlLocalTimeToSystemTime( ulong& localTime, ulong& systemTime );
		public extern static NtStatus RtlSystemTimeToLocalTime( ulong& systemTime, ulong& localTime );
		#endregion

		public extern static uint NtGetCurrentProcessorNumber();
		// public extern static uint NtQueryInformationProcess( ProcessHandle processHandle, PROCESSINFOCLASS processInformationClass, void* processInformation, uint processInformationLength, uint& returnLength );
		// public extern static uint NtQueryInformationThread( ThreadHandle threadHandle, THREADINFOCLASS threadInformationClass, void* ThreadInformation, uint threadInformationLength, uint& returnLength );

		public static _TEB* NtCurrentTeb() {
			return &_TEB.Current;
		}

		public extern static SystemErrorCode RtlNtStatusToDosError( NtStatus value );
		public extern static void RtlProtectHeap( HeapHandle heap, bool readOnly );
		public extern static NtStatus NtClose( HANDLE handle );

		#region
		public extern static void RtlFreeUnicodeString( UNICODE_STRING& value );
		public extern static void RtlFreeAnsiString( STRING& value );
		public extern static void RtlFreeOemString( STRING& value );

		public extern static void RtlInitString( STRING& destinationString, CString sourceString );
		public extern static void RtlInitUnicodeString( UNICODE_STRING& DestinationString, CUtf16String sourceString );

		public extern static NtStatus RtlAnsiStringToUnicodeString( UNICODE_STRING& destinationString, STRING& sourceString, bool allocateDestinationString );
		public extern static NtStatus RtlUnicodeStringToAnsiString( STRING& destinationString, UNICODE_STRING& sourceString, bool allocateDestinationString );
		public extern static NtStatus RtlUnicodeStringToOemString( STRING& destinationString, UNICODE_STRING& sourceString, bool allocateDestinationString );
		public extern static NtStatus RtlUnicodeToMultiByteSize( uint& bytesInMultiByteString, CUtf16String UnicodeString, uint bytesInUnicodeString );
		public extern static NtStatus RtlUnicodeToUTF8N( byte* UTF8StringDestination, uint UTF8StringMaxByteCount, uint& UTF8StringActualByteCount, CUtf16String unicodeStringSource, uint unicodeStringWCharCount );
		public extern static NtStatus RtlUTF8ToUnicodeN( char* unicodeStringDestination, uint unicodeStringMaxWCharCount, uint& unicodeStringActualWCharCount, CUtf8String UTF8StringSource, uint UTF8StringByteCount );
		#endregion

		#region undocumented LPC api
		/// See http://www.rsdn.ru/article/baseserv/lpc.xml
		public extern static NtStatus NtCreatePort( [Out] PortHandleLpc& portHandle, OBJECT_ATTRIBUTES& objectAttributes, uint maxConnectInfoLength, uint maxDataLength, uint maxPoolUsage );
		public extern static NtStatus NtCreateWaitablePort( [Out] PortHandleLpc& portHandle, OBJECT_ATTRIBUTES& objectAttributes, uint maxConnectInfoLength, uint maxDataLength, uint maxPoolUsage );

		public extern static NtStatus NtReplyWaitReceivePort( PortHandleLpc portHandle, void*& portContext, LPC_MESSAGE_HEADER* reply, LPC_MESSAGE_HEADER* incomingRequest );
		public extern static NtStatus NtAcceptConnectPort( [Out] PortHandleLpc& serverPortHandle, void* portContext, LPC_MESSAGE_HEADER* connectionMsg, bool acceptConnection, LPC_SECTION_OWNER_MEMORY& serverSharedMemory, [Out] LPC_SECTION_MEMORY& clientSharedMemory );
		public extern static NtStatus NtCompleteConnectPort( PortHandleLpc portHandle );
		public extern static NtStatus NtReplyPort( PortHandleLpc portHandle, LPC_MESSAGE_HEADER& reply );
		public extern static NtStatus NtConnectPort( [Out] PortHandleLpc& clientPortHandle, UNICODE_STRING& serverPortName, SECURITY_QUALITY_OF_SERVICE& securityQos, LPC_SECTION_OWNER_MEMORY& clientSharedMemory, [Out] LPC_SECTION_MEMORY& serverSharedMemory, [Out] uint& maximumMessageLength, void* connectionInfo, uint& connectionInfoLength );
		public extern static NtStatus NtRequestPort( PortHandleLpc portHandle, LPC_MESSAGE_HEADER* request );
		public extern static NtStatus NtRequestWaitReplyPort( PortHandleLpc portHandle, LPC_MESSAGE_HEADER* request, [Out] LPC_MESSAGE_HEADER* incomingReply );
		public extern static NtStatus NtListenPort( PortHandleLpc portHandle, LPC_MESSAGE_HEADER* connectionRequest );
		public extern static NtStatus NtImpersonateClientOfPort( PortHandleLpc portHandle, LPC_MESSAGE_HEADER* request );
		// public extern static NtStatus  NtQueryInformationPort( PortHandleLpc portHandle, PORT_INFORMATION_CLASS portInformationClass, void* portInformation, uint length, uint& resultLength );
		#endregion

		#region ALPC api
		public extern static uint AlpcMaxAllowedMessageLength();
		public extern static uint AlpcGetHeaderSize( uint flags );

		public extern static NtStatus NtAlpcCreatePort( PortHandleAlpc* portHandle, OBJECT_ATTRIBUTES* objectAttributes, ALPC_PORT_ATTRIBUTES* portAttributes );
		// public extern static NtStatus NtAlpcDisconnectPort( PortHandleAlpc portHandle, uint flags );
		// public extern static NtStatus NtAlpcQueryInformation( PortHandleAlpc portHandle, ALPC_PORT_INFORMATION_CLASS portInformationClass, void* portInformation, uint length, uint* returnLength );
		// public extern static NtStatus NtAlpcSetInformation( PortHandleAlpc portHandle, ALPC_PORT_INFORMATION_CLASS portInformationClass, void* portInformation, uint length );
		// public extern static NtStatus NtAlpcSendWaitReceivePort( PortHandleAlpc portHandle, uint sendFlags, LPC_MESSAGE* sendMessage, void* inMessageBuffer,LPC_MESSAGE* receiveBuffer,ulong* ReceiveBufferSize, void* outMessageBuffer, long* timeout );
		// public extern static NtStatus NtAlpcConnectPort( PortHandleAlpc* PortHandle, UNICODE_STRING* portName, OBJECT_ATTRIBUTES* objectAttributes, ALPC_PORT_ATTRIBUTES* portAttributes, uint flags, SID* requiredServerSid, PORT_MESSAGE* connectionMessage, uint* bufferLength, ALPC_MESSAGE_ATTRIBUTES* outMessageAttributes, ALPC_MESSAGE_ATTRIBUTES* inMessageAttributes, long* timeout  );
		// public extern static NtStatus NtAlpcAcceptConnectPort( [Out] PortHandleAlpc* PortHandle, PortHandleAlpc connectionPortHandle, uint flags, OBJECT_ATTRIBUTES* objectAttributes, ALPC_PORT_ATTRIBUTES* portAttributes, void* portContext, PORT_MESSAGE* connectionRequest, ALPC_MESSAGE_ATTRIBUTES* connectionMessageAttributes, bool acceptConnection );
		// public extern static NtStatus NtAlpcCancelMessage( PortHandleAlpc PortHandle, uint flags, ALPC_CONTEXT_ATTR* messageContext );
		// public extern static NtStatus NtAlpcImpersonateClientOfPort( PortHandleAlpc PortHandle, PORT_MESSAGE* portMessage, void* reserved );
		// public extern static NtStatus NtAlpcOpenSenderProcess( ProcessHandle* processHandle, PortHandleAlpc portHandle, PORT_MESSAGE* portMessage, uint flags, ProcessAccessRights desiredAccess, OBJECT_ATTRIBUTES* objectAttributes );
		// public extern static NtStatus NtAlpcOpenSenderThread( ThreadHandle* threadHandle, PortHandleAlpc portHandle, PORT_MESSAGE* portMessage, uint flags, ThreadAccessRights desiredAccess, OBJECT_ATTRIBUTES* objectAttributes );

		// public extern static NtStatus AlpcInitializeMessageAttribute( uint attributeFlags, ALPC_MESSAGE_ATTRIBUTES* buffer, uint bufferSize, uint* requiredBufferSize );
		// public extern static void* AlpcGetMessageAttribute( ALPC_MESSAGE_ATTRIBUTES* buffer, uint attributeFlag );
		// public extern static NtStatus AlpcRegisterCompletionList( PortHandleAlpc portHandle, ALPC_COMPLETION_LIST_HEADER* buffer, uint size, uint concurrencyCount, uint attributeFlags  );
		// public extern static NtStatus AlpcUnregisterCompletionList( PortHandleAlpc portHandle );
		// public extern static NtStatus AlpcRundownCompletionList( PortHandleAlpc portHandle );
		// public extern static NtStatus AlpcAdjustCompletionListConcurrencyCount( PortHandleAlpc portHandle, uint concurrencyCount );

		// public extern static bool AlpcRegisterCompletionListWorkerThread( void* completionList );
		// public extern static bool AlpcUnregisterCompletionListWorkerThread( void* completionList );
		// public extern static void AlpcGetCompletionListLastMessageInformation( void* completionList, uint* lastMessageId, uint* lastCallbackId );
		// public extern static uint AlpcGetOutstandingCompletionListMessageCount( void* completionList );
		// public extern static PORT_MESSAGE* AlpcGetMessageFromCompletionList( void* completionList, ALPC_MESSAGE_ATTRIBUTES **messageAttributes );
		// public extern static void AlpcFreeCompletionListMessage( void* completionList, PORT_MESSAGE *message );
		// public extern static ALPC_MESSAGE_ATTRIBUTES* AlpcGetCompletionListMessageAttributes(  void* completionList, PORT_MESSAGE* message );

		// public extern static NtStatus NtAlpcCreatePortSection( PortHandleAlpc portHandle, uint flags, HANDLE sectionHandle, uintptr sectionSize, ALPC_HANDLE* alpcSectionHandle, uintptr* actualSectionSize );
		// public extern static NtStatus NtAlpcDeletePortSection( PortHandleAlpc portHandle, uint flags, ALPC_HANDLE sectionHandle );
		// public extern static NtStatus NtAlpcCreateResourceReserve( PortHandleAlpc portHandle, uint flags, uintptr MessageSize, ALPC_HANDLE* resourceId );
		// public extern static NtStatus NtAlpcDeleteResourceReserve( PortHandleAlpc portHandle, uint flags, ALPC_HANDLE resourceId );
		// public extern static NtStatus NtAlpcCreateSectionView( PortHandleAlpc portHandle, uint flags, ALPC_DATA_VIEW_ATTR* viewAttributes );
		// public extern static NtStatus NtAlpcDeleteSectionView( PortHandleAlpc portHandle, uint flags, void* viewBase );
		#endregion

		public extern static NtStatus NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS SystemInformationClass, void* SystemInformation, uint SystemInformationLength, uint* ReturnLength );

		public static yield<SYSTEM_PROCESS_INFORMATION*> EnumerateProcess() {
			uint ntQuerySystemInformationLength;
			var status = NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS.SystemProcessInformation, null, 0, &ntQuerySystemInformationLength );
			if( status != NtStatus.STATUS_INFO_LENGTH_MISMATCH ) yield break;

			// fetch:
			byte[] data;
			do {
				ntQuerySystemInformationLength = ntQuerySystemInformationLength + ntQuerySystemInformationLength / 5;
				data = new[ntQuerySystemInformationLength] byte;
				status = NtQuerySystemInformation( SYSTEM_INFORMATION_CLASS.SystemProcessInformation, &data[0], ntQuerySystemInformationLength, &ntQuerySystemInformationLength );
				// Console.WriteLine( "status1={0} ntQuerySystemInformationLength={1}", status1, ntQuerySystemInformationLength );
			} while( status == NtStatus.STATUS_INFO_LENGTH_MISMATCH );
			// if( status == NtStatus.STATUS_INFO_LENGTH_MISMATCH ) goto fetch;

			if( status != NtStatus.STATUS_SUCCESS ) yield break;

			var result = ( SYSTEM_PROCESS_INFORMATION* ) &data[0];
			for( ; ; ) {
				yield return result;

				var nextOffset = result->NextEntryOffset;
				if( nextOffset == 0 ) yield break;

				result = ( SYSTEM_PROCESS_INFORMATION* )( ( byte* ) result + nextOffset );
			}
		}

		public static void Assert( NtStatus condition, [In] CallerContext& callercontext = nullref ) {
			if( condition ) return;

			Console.Write( "Assertion failed: " );
			Console.Write( callercontext.Expression );
			Console.Write( " NtStatus: " );
			Console.Write( condition );
			Console.Write( " at line " );
			Console.Write( callercontext.Row );

			Assert.PrintContextInfo( callercontext );
			Console.WriteLine();
		}
	}

	public enum SYSTEM_INFORMATION_CLASS {
		SystemBasicInformation =                0,
		SystemPerformanceInformation =          2,
		SystemTimeOfDayInformation =            3,
		SystemProcessInformation =              5,
		SystemProcessorPerformanceInformation = 8,
		SystemInterruptInformation =           23,
		SystemExceptionInformation =           33,
		SystemRegistryQuotaInformation =       37,
		SystemLookasideInformation =           45,
		SystemCodeIntegrityInformation =      103,
		SystemPolicyInformation =             134,
	}

	[StructLayoutSequential]
	public struct SYSTEM_PROCESS_INFORMATION {
		public uint NextEntryOffset;
		public uint NumberOfThreads;
		public byte[48] Reserved1;
		public UNICODE_STRING ImageName;
		public uint BasePriority;
		public HANDLE UniqueProcessId;
		public void* Reserved2;
		public uint HandleCount;
		public uint SessionId;
		public void* Reserved3;
		public uintptr PeakVirtualSize;
		public uintptr VirtualSize;
		public void* Reserved4;
		public uintptr PeakWorkingSetSize;
		public uintptr WorkingSetSize;
		public void* Reserved5;
		public uintptr QuotaPagedPoolUsage;
		public void* Reserved6;
		public uintptr QuotaNonPagedPoolUsage;
		public uintptr PagefileUsage;
		public uintptr PeakPagefileUsage;
		public uintptr PrivatePageCount;
		public ulong[6] Reserved7;
	}

	[StructLayoutSequential]
	public struct SYSTEM_THREAD_INFORMATION {
		public uint[3] Reserved1;
		public uint Reserved2;
		public void* StartAddress;
		public _CLIENT_ID ClientId;
		public uint Priority;
		public int BasePriority;
		public uint ContextSwitchCount;
		public uint ThreadState;
		public uint WaitReason;
	}

	public partial struct UNICODE_STRING {
		// result valid only while 'value' alive
		public static implicit operator UNICODE_STRING( string value ) {
			Assert.IsTrue( value.Length < 32768 );

			return new UNICODE_STRING {
				Length = ( ushort )( value.Length * sizeof( char ) ),
				MaximumLength = ( ushort )( value.Length * sizeof( char ) ),
				Buffer = value
			};
		}
	}

	public partial struct _TEB {
		public static thistype& Current {
			get {
				return *( thistype* ) System.Runtime.Memory.LoadPointer( TebAddressSpace, ( uintptr )( memberinfo( NtTib ).ByteOffset + memberinfo( _NT_TIB.Self ).ByteOffset ) );
			}
		}

		public static uint CurrentProcessId {
			get {
				return cast<uint>( System.Runtime.Memory.LoadPointer( TebAddressSpace, ( uintptr )( memberinfo( ClientId ).ByteOffset + memberinfo( _CLIENT_ID.UniqueProcess ).ByteOffset ) ) );
			}
		}

		// in win32 - call + 2xjmp + 2 mem accesses
		// in bamelg - 1 mem access
		public static uint CurrentThreadId {
			get {
				return cast<uint>( System.Runtime.Memory.LoadPointer( TebAddressSpace, ( uintptr )( memberinfo( ClientId ).ByteOffset + memberinfo( _CLIENT_ID.UniqueThread ).ByteOffset ) ) );
			}
		}

		// in win32 - call + 2xjmp + 2 mem accesses
		// in bamelg - 1 mem access
		public static SystemErrorCode LastError {
			get {
				return bitcast<SystemErrorCode>( System.Runtime.Memory.LoadUInt32( TebAddressSpace, ( uintptr ) memberinfo( LastErrorValue ).ByteOffset ) );
			}
			set {
				System.Runtime.Memory.StoreUInt32( TebAddressSpace, ( uintptr ) memberinfo( LastErrorValue ).ByteOffset, value.Value() );
			}
		}

		[UnitTest]
		public static void CheckValidity() {
			Assert.IsTrue( ( uint ) Current.ClientId.UniqueProcess == Kernel32Api.GetCurrentProcessId() );
			Assert.IsTrue( ( uint ) Current.ClientId.UniqueThread == Kernel32Api.GetCurrentThreadId() );

			Kernel32Api.SetLastError( SystemErrorCode.CERT_E_REVOKED );
			Assert.IsTrue( LastError == SystemErrorCode.CERT_E_REVOKED );
		}
	}

	public enum LpcMessageType : ushort {
		UNUSED_MSG_TYPE =        0x0,
		LPC_REQUEST =            0x1,
		LPC_REPLY =              0x2,
		LPC_DATAGRAM =           0x3,
		LPC_LOST_REPLY =         0x4,
		LPC_PORT_CLOSED =        0x5,
		LPC_CLIENT_DIED =        0x6,
		LPC_EXCEPTION =          0x7,
		LPC_DEBUG_EVENT =        0x8,
		LPC_ERROR_EVENT =        0x9,
		LPC_CONNECTION_REQUEST = 0xA,
		LPC_CONNECTION_REFUSED = 0xB,
	}

	public struct LPC_MESSAGE_HEADER {
		public ushort DataLength;
		public ushort TotalLength;
		public LpcMessageType MessageType;
		public ushort DataInfoOffset;
		public uint ProcessId;
		public uint ThreadId;
		public uint MessageId;
		public uint CallbackId;
	}

	public struct LPC_TERMINATION_MESSAGE : LPC_MESSAGE_HEADER {
		public long CreationTime;
	}

	public struct LPC_SECTION_MEMORY {
		public uint Length;
		public uint ViewSize;
		public void* ViewBase;
	}

	public struct LPC_SECTION_OWNER_MEMORY {
		public uint Length;
		public HANDLE SectionHandle;
		public uint OffsetInSection;
		public uint ViewSize;
		public void* ViewBase;
		public void* OtherSideViewBase;
	}

	public struct PORT_CONTEXT {
		public PortHandleLpc ReplyPort;
		public CString ClientLogin;
		public void* ClientAuthorizationAttributes;
	}

	// internally implemented via ALPC
	public struct PortHandleLpc : HANDLE {
	}

	public struct PortHandleAlpc : HANDLE {
		public PortHandleAlpc( uint maxMessageLength = 256 ) {
			var objectAttributes = default( OBJECT_ATTRIBUTES );
			objectAttributes.Length = sizeof( objectAttributes );
			// objectAttributes.Length = sizeof(attributes);

			var portAttributes = default( ALPC_PORT_ATTRIBUTES );
			portAttributes.MaxMessageLength = maxMessageLength;
			NtApi.NtAlpcCreatePort( &this, &objectAttributes, &portAttributes );
		}
	}

	[StructLayoutSequential]
	public struct ALPC_PORT_ATTRIBUTES {
		public uint Flags;
		public SECURITY_QUALITY_OF_SERVICE SecurityQos;
		public uintptr MaxMessageLength;
		public uintptr MemoryBandwidth;
		public uintptr MaxPoolUsage;
		public uintptr MaxSectionSize;
		public uintptr MaxViewSize;
		public uintptr MaxTotalSectionSize;
		public uint DupObjectTypes;
		public uint Reserved;
	}

	/// See http://www.microsoft.com/msj/0197/exception/exception.aspx
	public partial struct _EXCEPTION_REGISTRATION_RECORD {
		public const _EXCEPTION_REGISTRATION_RECORD* EndOfListMark = ( _EXCEPTION_REGISTRATION_RECORD* ) uintptr.MaxValue;

		public static yield<_EXCEPTION_REGISTRATION_RECORD*> GetExceptionRecords() {
			for( var record = _TEB.Current.NtTib.ExceptionList; record != EndOfListMark; record = record->Next ) {
				yield return record;
			}
		}
	}
}