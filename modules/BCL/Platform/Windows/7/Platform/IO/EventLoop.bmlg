//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace Platform.IO {
	public partial class EventLoop : System.Threading.Dispatcher {
		#region settings
		public bool EnableFibers = true;
		#endregion

		protected bool _quitRequest = false;
		public bool QuitRequest { get { return _quitRequest; } }

		private bool _fiberDispatch = false;
		private bool _dispatching = false;

		private Thread _dispatchThread;

		public int PollId;

		internal static AutoResetEventHandle _eventPlaceholder = new AutoResetEventHandle();

		static ~EventLoop() {
			_eventPlaceholder.Dispose();
		}

		[ThreadStatic]
		public static thistype Instance;

		public EventLoop() {
			_dispatchThread = Thread.CurrentThread;
			_dispatchThread._thread = Kernel32Api.OpenThread( ThreadAccessRights.THREAD_SET_CONTEXT, false, _dispatchThread._threadId );

			if( Instance == null ) Instance = this;
		}

		~EventLoop() {
			_dispatchThread.Join();
		}

		public override void Dispose() {
			ExecuteTasks();

			using( _consoleQuitLock.LockRegion() )
				if( _consoleQuitHandlerIndex != -1 ) {
					CtrlCListeners.RemoveAt( _consoleQuitHandlerIndex );
					_consoleQuitHandlerIndex = -1;
				}

			if( _fiberDispatch ) {
				Fiber.FiberManager.Detach( this );
				Fiber.RuntimeShutdown();
				_fiberDispatch = false;
			}

			foreach( var eventSink in _eventSinks )
				if( eventSink != null )
					eventSink.Dispose();
			_eventSinks.Clear();

			_quitRequest = false;
		}

		[CallingConvention( Value = NtApi.DefaultCallingConvention )]
		private void ExitLoopAPC() {
			_quitRequest = true;
			_exitRequestPending = false;
		}

		[CallingConvention( Value = NtApi.DefaultCallingConvention )]
		private void UpdateEventListAPC() {
			_updateRequestPending = false;
		}

		[CallingConvention( Value = NtApi.DefaultCallingConvention )]
		private void NewTasksAPC() {
			_newTasksRequestPending = false;
			ExecuteTasks();
		}

		public void QueueAPC( void* object, void* method ) {
			// Console.WriteLine( "{0} sending APC from {1} to {2}", thismethod, ThreadHandle.CurrentThreadID, _dispatchThread._threadId );
			Assert.IsTrue( Kernel32Api.QueueUserAPC( bitcast<Kernel32Api.APCProc>( method ), _dispatchThread._thread, bitcast<uintptr>( object ) ) != 0 );
		}

		public void QueueAPC( RuntimeObjectBase object, void* method ) { QueueAPC( bitcast<void*>( object ), method ); }

		private bool _exitRequestPending = false;
		public void RequestExit() {
			if( _dispatchThread.IsCurrent ) { _quitRequest = true; return; }
			if( atomic( _exitRequestPending = true ) ) return;

			QueueAPC( this, memberinfo( ExitLoopAPC ).Address );
		}

		private bool _updateRequestPending = false;
		public void RequestUpdateEventList() {
			if( _dispatchThread.IsCurrent ) return;
			if( atomic( _updateRequestPending = true ) ) return;

			QueueAPC( this, memberinfo( UpdateEventListAPC ).Address );
		}

		private bool _newTasksRequestPending = false;
		protected override void NotifyNewDispatcherTasks() {
			if( _dispatchThread.IsCurrent & !_dispatching ) return;
			if( atomic( _newTasksRequestPending = true ) ) return;

			QueueAPC( this, memberinfo( NewTasksAPC ).Address );
		}

		private List<EventSink> _eventSinks = new List<EventSink>();

		private List<HANDLE> _waitEvents = new List<HANDLE>( ( int ) MAXIMUM_WAIT_OBJECTS );
		private PoolIndexManager _indexManager = new PoolIndexManager( ( int ) MAXIMUM_WAIT_OBJECTS ) { Expandable = false };

		private const uint WAIT_OBJECT_0 = 0;
		private const uint WAIT_IO_COMPLETION = 192, WAIT_TIMEOUT = 258;
		private const uint MAXIMUM_WAIT_OBJECTS = 64;
		private const uint WAIT_FAILED = uint.MaxValue;

		public bool HasFreeSinks {
			get { return _indexManager.Count < _indexManager.Capacity; }
		}

		public void Dispatch() {
			TraceDispatchStarted();
			Instance = this;
			_dispatching = true;

			if( EnableFibers ) {
				_fiberDispatch = true;
				Fiber.RuntimeInitialize();
				Fiber.FiberManager.Attach( this );
			}

			NewTasksAPC();

			for( ; ; ) {
				if( _quitRequest ) {
					if( Fiber.FiberManager != null && Fiber.FiberManager.FiberCount > 0 )
						Fiber.FiberManager.CancelAllFibers();
					else break;
				}

				uint waitTimeout = Kernel32Api.INFINITE;

				var timeout = GetWaitTime();
				if( timeout != TimeSpan.MaxValue ) {
					var newTimeout = ( ulong ) timeout.TotalMilliseconds;
					uint newTimeout32;
					if( newTimeout >= int.MaxValue ) newTimeout32 = uint.MaxValue - 1; // wait finite amount of time
					else {
						newTimeout32 = ( uint ) newTimeout;
						++newTimeout32; // delay alarms, prevent early wakeups
					}

					waitTimeout = newTimeout32;
				}

				TraceBeginWait( _waitEvents.Count, waitTimeout );
				var useSleep = _waitEvents.Count == 0;

				atomic( ++PollId, Relaxed );
				// Console.WriteLine( "_waitEvents.Count={0}", _waitEvents.Count );
				var waitResult = !useSleep ? Kernel32Api.WaitForMultipleObjectsEx( ( uint ) _waitEvents.Count, _waitEvents.GetBuffer(), false, waitTimeout, true ) : Kernel32Api.SleepEx( waitTimeout, true );
				// Console.WriteLine( "waitResult={0}", waitResult );

				UnbiasedNow = DateTime.UnbiasedNow;
				UtcNow = DateTime.UtcNow;
				TraceEndWait( waitResult );

				switch( waitResult ) {
					case WAIT_IO_COMPLETION:
						TraceApcCompleted();
						break; // APC

					case WAIT_TIMEOUT:
						// Console.WriteLine( "Wait timeout" );
						break;

					case WAIT_FAILED:
						_quitRequest = true;
						// Console.WriteLine( "Wait failed: {0}", Kernel32Api.LastError );
						break;

					default:
						if( useSleep ) break;
						if( waitResult >= WAIT_OBJECT_0 && waitResult < WAIT_OBJECT_0 + 64 ) {
							var sinkIndex = waitResult - WAIT_OBJECT_0;
							_eventSinks[( int ) sinkIndex].OnEvent();
						}

						break;
				}

				OnAlarm();
			}

			_dispatching = false;

			TraceDispatchFinished();
			Dispose();
			Instance = null;
		}

		// No more than MAXIMUM_WAIT_OBJECTS == 64 event sinks in single event loop
		public abstract class EventSink {
			public EventLoop Parent;
			public abstract HANDLE EventHandle { get; } ///< Handle passed to 'WaitForMultipleObjectsEx'

			public int PoolID = -1; ///< Index of EventSink in array of 'HANDLE' passed to 'WaitForMultipleObjectsEx'

			public abstract void OnEvent();

			public EventSink( EventLoop parent ) {
				Parent = parent;
			}

			public override void Dispose() {
				Parent = null;

				base.Dispose();
			}

			public sealed override uint GetHashCode() { return base.GetHashCode(); }

			/// @{
			public void Register() { Register( Parent, EventHandle ); }
			public void Unregister() { Unregister( Parent, EventHandle ); }
			/// @}

			protected void Register( EventLoop parent, HANDLE handle ) {
				EnsureEventSinkNotRegistered( parent );

				PoolID = RegisterHandle( parent, handle );

				parent.TraceEventSinkRegistered( this );
			}

			protected int RegisterHandle( EventLoop parent, HANDLE handle ) {
				if( !parent.HasFreeSinks ) return -1;

				var poolID = parent._indexManager.Allocate();
				if( poolID == -1 ) return -1;

				if( poolID >= parent._eventSinks.Count ) {
					parent._waitEvents.Add( handle );
					parent._eventSinks.Add( this );
				}
				else {
					parent._eventSinks[poolID] = this;
					parent._waitEvents[poolID] = handle;
				}

				return poolID;
			}

			protected virtual void Unregister( EventLoop parent, HANDLE handle ) {
				parent.TraceEventSinkUnregistered( this );
				EnsureEventSinkRegistered( parent );

				var poolId = PoolID;
				PoolID = -1;
				UnregisterHandle( parent, poolId );
			}

			protected void UnregisterHandle( EventLoop parent, int poolID ) {
				parent._indexManager.Deallocate( poolID );
				parent._waitEvents[poolID] = _eventPlaceholder;
				parent._eventSinks[poolID] = null; // 'this' may be destroyed after that statement
			}

			[Conditional( ConditionString = "DEBUG" )]
			protected void EnsureEventSinkRegistered( EventLoop parent ) {
				if( PoolID == -1 )
					Assert.Fail( "EventSink not registered!" );
			}

			[Conditional( ConditionString = "DEBUG" )]
			protected void EnsureEventSinkNotRegistered( EventLoop parent ) {
				if( PoolID != -1 )
					Assert.Fail( "EventSink already registered!" );
			}
		}

		public abstract class SocketEventSink : EventSink {
			protected SocketHandle _socket;
			protected WSAEVENT _eventSelector = bitcast<WSAEVENT>( new AutoResetEventHandle() );

			public override HANDLE EventHandle { get { return _eventSelector; } }

			public SocketEventSink( EventLoop parent )
				: base( parent ) {
			}

			~SocketEventSink() {
				Assert.AreEqual( 0, WinsockApi.WSAEventSelect( _socket, _eventSelector, 0 ) );
				_eventSelector.Close();
			}

			public void Subscribe( SocketEvent events ) {
				Assert.AreEqual( 0, WinsockApi.WSAEventSelect( _socket, _eventSelector, events ) );
			}

			public override void OnEvent() {
				WSANETWORKEVENTS events;
				Assert.AreEqual( 0, WinsockApi.WSAEnumNetworkEvents( _socket, _eventSelector, events ) );
				OnEvent( events );
			}

			public abstract void OnEvent( WSANETWORKEVENTS& events );
		}

		public abstract class NamedPipeEventSink : EventSink {
			public NamedPipeHandle _pipe;
			protected ManualResetEventHandle _connectedEvent = new ManualResetEventHandle();
			public OVERLAPPED _overlapped;
			protected bool _unregisteredConnect;

			public override HANDLE EventHandle { get { return _connectedEvent; } }

			public NamedPipeEventSink( EventLoop parent, NamedPipeHandle pipe )
				: base( parent ) {
				_pipe = pipe;
			}

			~NamedPipeEventSink() {
				_connectedEvent.Close();
				_pipe.Close();
			}

			public override void OnEvent() {
				_connectedEvent.Reset();
			}

			public void Disconnect() {
				// FlushFileBuffers
				Kernel32Api.DisconnectNamedPipe( _pipe );
			}

			public bool Connect() {
				_overlapped = default( OVERLAPPED );
				_overlapped.Event = _connectedEvent;
				_unregisteredConnect = false;

				if( !Kernel32Api.ConnectNamedPipe( _pipe, _overlapped ) )
					switch( Kernel32Api.LastError ) {
						case SystemErrorCode.ERROR_IO_PENDING: Register(); return true;
						case SystemErrorCode.ERROR_PIPE_CONNECTED: _unregisteredConnect = true; OnEvent(); return true;
					}

				return false;
			}
		}

		private int _consoleQuitHandlerIndex = -1;
		private static Mutex _consoleQuitLock = new Mutex();

		public void CatchConsoleQuit() {
			using( _consoleQuitLock.LockRegion() )
				if( _consoleQuitHandlerIndex == -1 ) {
					_consoleQuitHandlerIndex = CtrlCListeners.Count;
					CtrlCListeners.Add( this );
				}
		}

		static EventLoop() {
			Kernel32Api.SetConsoleCtrlHandler( CtrlCHandler, true );
		}

		private static List<EventLoop> CtrlCListeners = new List<EventLoop>();

		[CallingConvention( Value = NtApi.DefaultCallingConvention )]
		internal static Boolean32 CtrlCHandler( ConsoleTerminationEvent @event ) {
			using( _consoleQuitLock.LockRegion() ) {
				foreach( var listener in CtrlCListeners ) {
					listener.RequestExit();
				}
			}

			return true;
		}

		#region Dispatcher

		protected override bool IsDispatchingThread { get { return _dispatchThread.IsCurrent; } }

		#endregion

		/// @{ Tracing
		[Conditional( ConditionString = TraceConditionString )]
		private void TraceDispatchStarted() {
			if( !Tracing ) return;

			using( Console.AttributedRegion( TraceStyleNormal ) )
				Console.WriteLine( "EventLoop dispatch started: {0}", DateTime.UtcNow );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private void TraceDispatchFinished() {
			if( !Tracing ) return;

			using( Console.AttributedRegion( TraceStyleNormal ) )
				Console.WriteLine( "EventLoop dispatch finished: {0}", DateTime.UtcNow );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private void TraceApcCompleted() {
			if( !Tracing ) return;

			using( Console.AttributedRegion( TraceStyleNormal ) )
				Console.WriteLine( "EventLoop: APC completed" );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private void TraceBeginWait( int eventCount, uint milliseconds ) {
			if( !Tracing ) return;

			TypedReference timeout = milliseconds;
			if( milliseconds == Kernel32Api.INFINITE ) timeout = "INFINITE";

			using( Console.AttributedRegion( TraceStyleNormal ) )
				Console.WriteLine( "EventLoop: Begin wait {0} events for {1}{2}", eventCount, timeout, milliseconds != Kernel32Api.INFINITE ? "ms" : "" );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private void TraceEndWait( uint code ) {
			if( !Tracing ) return;

			using( Console.AttributedRegion( TraceStyleNormal ) )
				Console.WriteLine( "EventLoop: End wait, code={0}, UnbiasedNow={1}, UtcNow={2}", code, UnbiasedNow, UtcNow );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private void TraceEventSinkRegistered( EventSink eventSink ) {
			if( !Tracing ) return;

			using( Console.AttributedRegion( TraceStyleNormal ) )
				Console.WriteLine( "EventSink '{0}'({1}) registered. Handle={2}", eventSink.GetType(), bitcast<void*>( eventSink ), eventSink.EventHandle.ID );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private void TraceEventSinkUnregistered( EventSink eventSink ) {
			if( !Tracing ) return;

			using( Console.AttributedRegion( TraceStyleNormal ) )
				Console.WriteLine( "EventSink '{0}'({1}) unregistered. Handle={2}", eventSink.GetType(), bitcast<void*>( eventSink ), eventSink.EventHandle.ID );
		}

		/// @}
	}
}