//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

using Platform.IO;

namespace Platform {
	[DllImport( Image = "WS2_32.dll" )]
	[CallingConvention( Value = NtApi.DefaultCallingConvention )]
	public static partial struct WinsockApi {
		public extern static int WSAStartup( ushort versionRequested, WSADATA& data );
		public extern static int WSACleanup();

		public extern static SocketHandle socket( ADDRESS_FAMILY family, SocketType type, IPPROTO protocol );
		
		/// https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketa
		public static SocketHandle WSASocket( ADDRESS_FAMILY family, SocketType type, IPPROTO protocol, [In] WSAPROTOCOL_INFOA& protocolInfo, SocketGroup group, SocketCreateFlags flags ) { return WSASocket( ( int ) family, type, protocol, protocolInfo, group, flags ); }
		[BackendSymbol( Name = "WSASocketA" )]
		private extern static SocketHandle WSASocket( int family, SocketType type, IPPROTO protocol, [In] WSAPROTOCOL_INFOA& protocolInfo, SocketGroup group, SocketCreateFlags flags );

		public static SocketHandle WSASocket( ADDRESS_FAMILY family, SocketType type, IPPROTO protocol, [In] WSAPROTOCOL_INFOW& protocolInfo, SocketGroup group, SocketCreateFlags flags ) { return WSASocket( ( int ) family, type, protocol, protocolInfo, group, flags ); }
		[BackendSymbol( Name = "WSASocketW" )]
		private extern static SocketHandle WSASocket( int family, SocketType type, IPPROTO protocol, [In] WSAPROTOCOL_INFOW& protocolInfo, SocketGroup group, SocketCreateFlags flags );

		public extern static int shutdown( SocketHandle socket, SocketShutdownOptions options );
		public extern static int closesocket( SocketHandle socket );

		public extern static int ioctlsocket( SocketHandle socket, SocketCommand command, void* parameter );

		public extern static bool WSACloseEvent( WSAEVENT value );
		public extern static bool WSAResetEvent( WSAEVENT value );
		public extern static bool WSASetEvent( WSAEVENT value );

		public extern static SystemErrorCode WSAGetLastError();
		public extern static void WSASetLastError( SystemErrorCode error );

		public functor void WsaIOCompletionRoutine( SystemErrorCode errorCode, uint numberOfBytesTransfered, OVERLAPPED& overlapped, uint flags );

		public extern static int WSAIoctl( SocketHandle socket, uint dwIoControlCode, void* inBuffer, uint cbInBuffer, void* outBuffer, uint cbOutBuffer, uint& bytesReturned, OVERLAPPED& overlapped, WsaIOCompletionRoutine completionRoutine );

		public extern static SocketHandle accept( SocketHandle socket, sockaddr* addr, int& addrlen );
		public extern static SocketHandle WSAAccept( SocketHandle socket, sockaddr* addr, int& addrlen, LPCONDITIONPROC lpfnCondition, uintptr callbackData );

		public extern static int bind( SocketHandle socket, sockaddr* name, int namelen );
		public extern static int listen( SocketHandle socket, int backlog );

		public extern static int connect( SocketHandle socket, sockaddr* name, int namelen );
		public extern static int WSAConnect( SocketHandle socket, sockaddr* name, int namelen, WSABUF& callerData, WSABUF& calleeData, QOS& SQOS, QOS& GQOS );

		public extern static int send( SocketHandle socket, void* buffer, int length, int flags );
		public extern static int WSASend( SocketHandle socket, WSABUF* buffers, uint bufferCount, uint& numberOfBytesSent, uint flags, WSAOVERLAPPED& overlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE completionRoutine );
		public extern static int WSASendDisconnect( SocketHandle socket, WSABUF& outboundDisconnectData );
		public extern static int WSASendMsg( SocketHandle socket, WSAMSG& msg, uint flags, uint& numberOfBytesSent, WSAOVERLAPPED& overlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE completionRoutine );
		public extern static int WSASendTo( SocketHandle socket, WSABUF* buffers, uint bufferCount, uint& numberOfBytesSent, uint dwFlags, sockaddr* to, int toLength, WSAOVERLAPPED& overlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE completionRoutine );

		public extern static int recv( SocketHandle socket, void* buffer, int length, int flags );
		public extern static int WSARecv( SocketHandle socket, WSABUF* buffers, uint bufferCount, uint& numberOfBytesReceived, uint& flags, WSAOVERLAPPED& overlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE completionRoutine );
		public extern static int WSARecvDisconnect( SocketHandle socket, WSABUF& inboundDisconnectData );
		public extern static int WSARecvFrom( SocketHandle socket, WSABUF* buffers, uint bufferCount, uint& numberOfBytesRecvd, uint& flags, sockaddr* from, int& fromlen, WSAOVERLAPPED& overlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE completionRoutine );
		// public extern static int WSARecvMsg( SocketHandle socket, WSAMSG& msg, uint& numberOfBytesReceived, WSAOVERLAPPED& overlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE completionRoutine );

		public functor void LPWSAOVERLAPPED_COMPLETION_ROUTINE( SystemErrorCode error, uint transferred, WSAOVERLAPPED& overlapped, uint flags );
		public functor int LPCONDITIONPROC( WSABUF& callerId, WSABUF& callerData, QOS& SQOS, QOS& GQOS, WSABUF& calleeId, WSABUF& calleeData, [Out] GROUP& g, uintptr callbackData );

		public extern static uint WSAWaitForMultipleEvents( uint count, WSAEVENT* events, bool waitAll, uint timeout, bool alertable );
		public extern static int WSAEnumNetworkEvents( SocketHandle socket, WSAEVENT eventObject, [Out] WSANETWORKEVENTS& networkEvents );

		public extern static int WSAEventSelect( SocketHandle socket, WSAEVENT eventObject, SocketEvent networkEvents );
		public extern static int WSAAsyncSelect( SocketHandle socket, HWND hWnd, uint msg, SocketEvent @event );

		public extern static int setsockopt( SocketHandle socket, SocketOptionLevel level, int optname, void* option, int optionLength );
		public extern static int getsockopt( SocketHandle socket, SocketOptionLevel level, int optname, void* option, int& optionLength );

		public extern static int getsockname( SocketHandle socket, sockaddr* name, int& nameLength );
		public extern static int getpeername( SocketHandle socket, sockaddr* name, int& nameLength );

		public extern static int getaddrinfo( CString pNodeName, CString pServiceName, addrinfo* pHints, addrinfo** ppResult );
		public extern static void freeaddrinfo( addrinfo* pAddrInfo );

		public static readonly WinsockInitializer Instance = new WinsockInitializer();

		internal static void GetExtensions() {
			using( var socket = new SocketHandleTCP() ) {
				GetExtension( socket, "ConnectEx", GuidConnectEx, &ConnectEx );
			}
		}

		public static SystemErrorCode GetExtension( SocketHandle socket, string name, [In] Guid& functionId, void* fn ) {
			uint SIO_GET_EXTENSION_FUNCTION_POINTER = 3355443206;
			if( WinsockApi.WSAIoctl( socket, SIO_GET_EXTENSION_FUNCTION_POINTER, &functionId, ( uint ) sizeof( functionId ), fn, ( uint ) sizeof( fn ), 0U, nullref, null ) != 0 ) {
				var error = Kernel32Api.LastError;
				// Console.WriteLine( "WSAIoctl: Unable to get required extension {0}( {1} ) - {2}", name, functionId, error );
				return error;
			}

			return SystemErrorCode.NO_ERROR;
		}

		public static SystemErrorCode SetTcpKeepAlive( SocketHandle socket, tcp_keepalive& settings ) {
			uint SIO_KEEPALIVE_VALS = 2550136836;
			if( WinsockApi.WSAIoctl( socket, SIO_KEEPALIVE_VALS, &settings, ( uint ) sizeof( settings ), null, 0, 0U, nullref, null ) != 0 ) {
				var error = Kernel32Api.LastError;
				// Console.WriteLine( "WSAIoctl: Unable to set keep-alive values" );
				return error;
			}

			return SystemErrorCode.NO_ERROR;
		}

		private const Guid GuidAcceptEx = "{B5367DF1-CBAC-11CF-95CA-00805F48A192}";
		private const Guid GuidConnectEx = "{25A207B9-DDF3-4660-8EE9-76E58C74063E}";

		public static readonly FnConnectEx ConnectEx;
		public functor Boolean32 FnConnectEx( SocketHandle socket, sockaddr* name, int namelen, void* sendBuffer, uint sendDataLength, uint& bytesSent, OVERLAPPED& overlapped );
	}

	[DllImport( Image = "MSWSOCK.dll" )]
	[CallingConvention( Value = NtApi.DefaultCallingConvention )]
	public static partial struct WinsockApiEx {
		/// http://msdn.microsoft.com/en-us/library/ms737524(VS.85).aspx
		public extern static bool AcceptEx( SocketHandle listenSocket, SocketHandle acceptSocket, void* outputBuffer, uint receiveDataLength, uint localAddressLength, uint remoteAddressLength, uint& bytesReceived, OVERLAPPED& overlapped );

		// http://msdn.microsoft.com/en-us/library/windows/desktop/ms741684(v=vs.85).aspx
		public extern static int WSARecvEx( SocketHandle socket, void* buffer, int length, int& flags );
	}

	public struct SocketHandle : IOHandle, IDisposable {
		public static new SocketHandle Invalid { get { return bitcast<SocketHandle>( uintptr.MaxValue ); } }

		public new void Close() {
			if( IsValid ) {
				WinsockApi.closesocket( this );
				this = Invalid;
			}
		}

		public new void Dispose() {
			Close();
		}

		public int AvailableBytes {
			get {
				int result;
				WinsockApi.ioctlsocket( this, SocketCommand.FIONREAD, &result );
				return result;
			}
		}

		/// Avoid use of NonBlocking since it creates additional thread
		public Boolean32 NonBlocking {
			// get {
			// 	Boolean32 result;
			// 	WinsockApi.ioctlsocket( this, SocketCommand.FIONREAD, &result );
			// 	return result;
			// }
			set {
				WinsockApi.ioctlsocket( this, SocketCommand.FIONBIO, &value );
			}
		}

		public bool Broadcast {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_BROADCAST, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_BROADCAST, &result, sizeof( result ) );
			}
		}

		public bool ConditionalAccept {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_CONDITIONAL_ACCEPT, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_CONDITIONAL_ACCEPT, &result, sizeof( result ) );
			}
		}

		public bool IsDebug {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_DEBUG, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_DEBUG, &result, sizeof( result ) );
			}
		}

		public bool DisableRoute {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_DONTROUTE, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_DONTROUTE, &result, sizeof( result ) );
			}
		}

		public bool KeepAlive {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_KEEPALIVE, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_KEEPALIVE, &result, sizeof( result ) );
			}
		}

		public bool OutOfBandInline {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_OOBINLINE, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_OOBINLINE, &result, sizeof( result ) );
			}
		}

		public int ReceiveBuffer {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_RCVBUF, &result, sizeof( result ) );
				return result;
			}
			set {
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_RCVBUF, &value, sizeof( value ) );
			}
		}

		public int SendBuffer {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_SNDBUF, &result, sizeof( result ) );
				return result;
			}
			set {
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_SNDBUF, &value, sizeof( value ) );
			}
		}

		public bool ReuseAddress {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_REUSEADDR, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_REUSEADDR, &result, sizeof( result ) );
			}
		}

		public bool ExclusiveAddressUse {
			get {
				int result;
				WinsockApi.getsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_EXCLUSIVEADDRUSE, &result, sizeof( result ) );
				return result != 0;
			}
			set {
				var result = ( int ) value;
				WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_EXCLUSIVEADDRUSE, &result, sizeof( result ) );
			}
		}

		public bool UpdateConnectContext() {
			return WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_UPDATE_CONNECT_CONTEXT, null, 0 ) == 0;
		}

		public bool UpdateAcceptContext( SocketHandle listenHandle ) {
			return WinsockApi.setsockopt( this, SocketOptionLevel.SOL_SOCKET, SocketOption.SO_UPDATE_ACCEPT_CONTEXT, &listenHandle, sizeof( listenHandle ) ) == 0;
		}

		public SystemErrorCode Listen( int backlog ) {
			if( WinsockApi.listen( this, backlog ) != 0 ) return Kernel32Api.LastError;
			return SystemErrorCode.NO_ERROR;
		}

		public SystemErrorCode Bind( void* address, int addressLength ) {
			if( WinsockApi.bind( this, ( sockaddr* ) address, addressLength ) != 0 ) return Kernel32Api.LastError;
			return SystemErrorCode.NO_ERROR;
		}

		public SystemErrorCode SendTo( TimeSpan timeout, void* address, int addressLength, void* buffer, int count, int& total ) { return System.IO.Fiber.FiberInfo.Manager.SendTo( timeout, this, address, addressLength, buffer, count, total ); }
		public SystemErrorCode ReceiveFrom( TimeSpan timeout, void* address, int addressLength, void* buffer, int count, int& total ) { return System.IO.Fiber.FiberInfo.Manager.ReceiveFrom( timeout, this, address, addressLength, buffer, count, total ); }

		public SystemErrorCode SendTo( void* address, int addressLength, void* buffer, int count, int& total ) { return System.IO.Fiber.FiberInfo.Manager.SendTo( TimeSpan.Zero, this, address, addressLength, buffer, count, total ); }
		public SystemErrorCode ReceiveFrom( void* address, int addressLength, void* buffer, int count, int& total ) { return System.IO.Fiber.FiberInfo.Manager.ReceiveFrom( TimeSpan.Zero, this, address, addressLength, buffer, count, total ); }
	}

	public struct SocketHandleTCP : SocketHandle {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public SocketHandleTCP( ADDRESS_FAMILY family = ADDRESS_FAMILY.AF_INET ) {
			WSAPROTOCOL_INFOW& protocolInfo = nullref;
			this = bitcast<SocketHandleTCP>( WinsockApi.WSASocket( family, SocketType.SOCK_STREAM, IPPROTO.IPPROTO_TCP, protocolInfo, SocketGroup.None, SocketCreateFlags.WSA_FLAG_OVERLAPPED ) );
		}

		public SystemErrorCode Connect( System.Net.IPv4Endpoint endpoint ) {
			var nativeEndpoint = ( sockaddr_in ) endpoint;
			return System.IO.Fiber.FiberInfo.Manager.Connect( this, &nativeEndpoint, sizeof( nativeEndpoint ) );
		}

		public SystemErrorCode Connect( System.Net.IPv6Endpoint endpoint ) {
			var nativeEndpoint = ( sockaddr_in6 ) endpoint;
			return System.IO.Fiber.FiberInfo.Manager.Connect( this, &nativeEndpoint, sizeof( nativeEndpoint ) );
		}

		public bool NoDelay {
			get {
				Boolean32 result;
				WinsockApi.getsockopt( this, SocketOptionLevel.IPPROTO_TCP, SocketOptionTCP.TCP_NODELAY, &result, sizeof( result ) );
				return result;
			}
			set {
				Boolean32 result = value;
				WinsockApi.setsockopt( this, SocketOptionLevel.IPPROTO_TCP, SocketOptionTCP.TCP_NODELAY, &result, sizeof( result ) );
			}
		}
	}

	public struct SocketHandleUDP : SocketHandle {
		public static new thistype Invalid { get { return bitcast<thistype>( basetype.Invalid ); } }

		public SocketHandleUDP( ADDRESS_FAMILY family = ADDRESS_FAMILY.AF_INET ) {
			WSAPROTOCOL_INFOW& protocolInfo = nullref;
			this = bitcast<SocketHandleUDP>( WinsockApi.WSASocket( family, SocketType.SOCK_DGRAM, IPPROTO.IPPROTO_UDP, protocolInfo, SocketGroup.None, SocketCreateFlags.WSA_FLAG_OVERLAPPED ) );
		}
	}

	public struct WsaAddress {
		public sockaddr Address;
		public int Length;

		public WsaAddress( IPv4Endpoint endpoint ) {
			var nativeEndpoint = ( sockaddr_in ) endpoint;
			*( sockaddr_in* ) &Address = nativeEndpoint;
			Length = sizeof( nativeEndpoint );
		}

		public WsaAddress( IPv6Endpoint endpoint ) {
			var nativeEndpoint = ( sockaddr_in6 ) endpoint;
			*( sockaddr_in6* ) &Address = nativeEndpoint;
			Length = sizeof( nativeEndpoint );
		}
	}

	[StructLayoutSequential]
	[ExplicitSize( Size = Math.Max( sizeof( sockaddr_in ), sizeof( sockaddr_in6 ) ) )]
	public partial struct sockaddr : IFormattable {
		public ADDRESS_FAMILY Family;

		public void ToString( StringBuilder builder, string format ) {
			switch( Family ) {
				case ADDRESS_FAMILY.AF_INET: bitcast<sockaddr_in*>( &this )->ToString( builder, format ); break;
				case ADDRESS_FAMILY.AF_INET6: bitcast<sockaddr_in6*>( &this )->ToString( builder, format ); break;
				default: builder.Append( Family ); break;
			}
		}
	}

	public partial struct sockaddr_in : IFormattable {
		public sockaddr_in( System.Net.IPv4Address address, ushort port ) {
			Family = ADDRESS_FAMILY.AF_INET;
			Address = address.UIntData;
			Port = port;
		}

		public static explicit operator sockaddr_in( System.Net.IPv4Endpoint endpoint ) {
			return new sockaddr_in {
				Family = ADDRESS_FAMILY.AF_INET,
				Address = endpoint.Address.UIntData,
				Port = endpoint.Port
			};
		}

		public static explicit operator System.Net.IPv4Endpoint( sockaddr_in endpoint ) {
			return new System.Net.IPv4Endpoint {
				Port = endpoint.Port,
				Address = new System.Net.IPv4Address( endpoint.Address )
			};
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Append( ( System.Net.IPv4Endpoint ) this );
		}
	}

	public enum SCOPE_LEVEL : uint {
		ScopeLevelInterface =    1,
		ScopeLevelLink =         2,
		ScopeLevelSubnet =       3,
		ScopeLevelAdmin =        4,
		ScopeLevelSite =         5,
		ScopeLevelOrganization = 8,
		ScopeLevelGlobal =      14,
		ScopeLevelCount =       16,
	}

	[StructLayoutSequential]
	public partial struct sockaddr_in6 : IFormattable {
		public ADDRESS_FAMILY sin6_family;
		public ushort_bigendian sin6_port;
		public uint_bigendian sin6_flowinfo;
		public IPv6Address sin6_addr;
		public uint sin6_scope_id; // not BE

		public static explicit operator sockaddr_in6( System.Net.IPv6Endpoint endpoint ) {
			return new sockaddr_in6 {
				sin6_family = ADDRESS_FAMILY.AF_INET6,
				sin6_addr = endpoint.Address,
				sin6_port = endpoint.Port,
				sin6_flowinfo = 0,
				sin6_scope_id = endpoint.ScopeId
			};
		}

		public static explicit operator System.Net.IPv6Endpoint( sockaddr_in6 endpoint ) {
			return new System.Net.IPv6Endpoint {
				Address = endpoint.sin6_addr,
				Port = endpoint.sin6_port,
				ScopeId = endpoint.sin6_scope_id
			};
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Append( ( System.Net.IPv6Endpoint ) this );
		}
	}

	public struct WSAEVENT : HANDLE {
	}

	public struct WinsockInitializer {
		public WSADATA WSAData;

		public WinsockInitializer() {
			Assert.AreEqual( 0, WinsockApi.WSAStartup( 0x0202, WSAData ) );
			WinsockApi.GetExtensions();
		}

		~WinsockInitializer() {
			Assert.AreEqual( 0, WinsockApi.WSACleanup() );
		}
	}

	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct ip_mreq {
		[ExplicitOffset( Offset = 0 )]
		public IPv4Address imr_multiaddr;
		[ExplicitOffset( Offset = 4 )]
		public IPv4Address imr_interface;
	}
}