//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Net;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Platform {
	[DllImport( Image = "ktmw32.dll" )]
	[CallingConvention( Value = NtApi.DefaultCallingConvention )]
	public static partial struct TransactionApi {
		#region Transaction
		public extern static TransactionHandle CreateTransaction( SECURITY_ATTRIBUTES& attributes, [Unused] Guid& UOW, uint createOptions, [Unused] uint isolationLevel, [Unused] uint isolationFlags, uint timeout, CUtf16String description );
		public extern static TransactionHandle OpenTransaction( TransactionAccessRights desiredAccess, Guid& transactionId );

		public extern static bool CommitTransaction( TransactionHandle transaction );
		public extern static bool CommitTransactionAsync( TransactionHandle transaction );
		public extern static bool RollbackTransaction( TransactionHandle transaction );
		public extern static bool RollbackTransactionAsync( TransactionHandle transaction );

		public extern static bool GetTransactionId( TransactionHandle transaction, Guid& transactionId );

		public extern static bool GetTransactionInformation( TransactionHandle transaction, uint& outcome, [Unused] uint& isolationLevel, [Unused] uint& isolationFlags, uint& timeout, uint bufferLength, char* description );
		public extern static bool SetTransactionInformation( TransactionHandle transaction, [Unused] uint isolationLevel, [Unused] uint isolationFlags, uint timeout, CUtf16String description );

		#endregion

		#region Transaction manager
		public extern static TransactionManagerHandle CreateTransactionManager( SECURITY_ATTRIBUTES& attributes, CUtf16String logFileName, uint createOptions, [Unused] uint commitStrength );
		public extern static TransactionManagerHandle OpenTransactionManager( CUtf16String logFileName, TransactionManagerAccessRights desiredAccess, [Unused] uint openOptions );
		public extern static TransactionManagerHandle OpenTransactionManagerById( Guid& transactionManagerId, TransactionManagerAccessRights desiredAccess, [Unused] uint openOptions );

		public extern static bool GetTransactionManagerId( TransactionManagerHandle transactionManager, [Out] Guid& result );

		public extern static bool RecoverTransactionManager( TransactionManagerHandle transactionManager );

		public extern static bool RenameTransactionManager( CUtf16String logFileName, Guid& existingTransactionManagerGuid );

		public extern static bool GetCurrentClockTransactionManager( TransactionManagerHandle transactionManager, long& tmVirtualClock );

		public extern static bool RollforwardTransactionManager( TransactionManagerHandle transactionManager, long& virtualClock );
		#endregion

		#region Resource manager
		public extern static TransactionResourceManagerHandle CreateResourceManager( SECURITY_ATTRIBUTES& attributes, Guid& resourceManagerID, uint createOptions, TransactionManagerHandle transactionManager, CUtf16String description );
		public extern static TransactionResourceManagerHandle OpenResourceManager( ResourceManagerAccessRights desiredAccess, TransactionManagerHandle transactionManager, Guid& esourceManagerGuid );

		public extern static bool RecoverResourceManager( TransactionResourceManagerHandle resourceManager );

		public extern static bool SetResourceManagerCompletionPort( TransactionResourceManagerHandle resourceManager, IoCompletionPortHandle ioCompletionPort, uintptr completionKey );

		public extern static bool GetNotificationResourceManager( TransactionResourceManagerHandle resourceManager, TRANSACTION_NOTIFICATION* transactionNotification, uint notificationLength, uint milliseconds, uint returnLength );
		public extern static bool GetNotificationResourceManagerAsync( TransactionResourceManagerHandle resourceManager, TRANSACTION_NOTIFICATION* transactionNotification, uint transactionNotificationLength, [Out] uint& returnLength, OVERLAPPED& overlapped );

		#endregion

		#region Enslistment
		public extern static TransactionEnlistmentHandle CreateEnlistment( SECURITY_ATTRIBUTES& attributes, TransactionResourceManagerHandle resourceManager, TransactionHandle TransactionHandle, NOTIFICATION_MASK notificationMask, uint CreateOptions, void* EnlistmentKey );
		public extern static TransactionEnlistmentHandle OpenEnlistment( EnslistmentAccessRights desiredAccess, TransactionResourceManagerHandle resourceManager, Guid& enlistmentId );

		public extern static bool GetEnlistmentId( TransactionEnlistmentHandle enlistment, Guid& result );

		public extern static bool SetEnlistmentRecoveryInformation( TransactionEnlistmentHandle enlistment, uint bufferSize, void* buffer );
		public extern static bool GetEnlistmentRecoveryInformation( TransactionEnlistmentHandle enlistment, uint bufferSize, void* buffer, uint bufferUsed );

		public extern static bool CommitEnlistment( TransactionEnlistmentHandle enlistment, long& virtualClock );
		public extern static bool RollbackEnlistment( TransactionEnlistmentHandle enlistment, long& virtualClock );

		public extern static bool CommitComplete( TransactionEnlistmentHandle enlistmentHandle, long& virtualClock );
		public extern static bool RollbackComplete( TransactionEnlistmentHandle enlistmentHandle, long& virtualClock );

		public extern static bool PrepareComplete( TransactionEnlistmentHandle enlistment, long& virtualClock );
		public extern static bool PrepareEnlistment( TransactionEnlistmentHandle enlistment, long& virtualClock );
		public extern static bool PrePrepareComplete( TransactionEnlistmentHandle enlistment, long& virtualClock );
		public extern static bool PrePrepareEnlistment( TransactionEnlistmentHandle enlistment, long& virtualClock );
		public extern static bool ReadOnlyEnlistment( TransactionEnlistmentHandle enlistment, long& virtualClock );
		public extern static bool RecoverEnlistment( TransactionEnlistmentHandle enlistment, long& virtualClock );

		public extern static bool SinglePhaseReject( TransactionEnlistmentHandle enlistment, long& virtualClock );
		#endregion
	}

	public partial struct TransactionHandle : SystemHandle {
		public new Guid ID { get { Guid result; TransactionApi.GetTransactionId( this, result ); return result; } }

		public void Commit() { TransactionApi.CommitTransaction( this ); }
		public void CommitAsync() { TransactionApi.CommitTransactionAsync( this ); }
		public void Rollback() { TransactionApi.RollbackTransaction( this ); }
		public void RollbackAsync() { TransactionApi.RollbackTransactionAsync( this ); }
	}

	public partial struct TransactionEnlistmentHandle : SystemHandle {
	}

	public partial struct TransactionManagerHandle : SystemHandle {
		public new Guid ID { get { Guid result; TransactionApi.GetTransactionManagerId( this, result ); return result; } }
	}

	public partial struct TransactionResourceManagerHandle : SystemHandle {
	}
}