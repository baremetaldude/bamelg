//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

using Platform;
using Platform.IO;

namespace System.Net {
	public abstract partial class NetworkServer {
		public uint ListeningPipes = 0;
		public uint MaxListeningPipes = 1;

		protected EventLoop _eventLoop;

		protected NetworkServer() {
		}

		public void Attach( EventLoop eventLoop ) {
			Debug.Assert( _eventLoop == null );
			_eventLoop = eventLoop;
		}

		private bool _implListen( ushort port ) {
			// return _implListen( new IPv6Endpoint( IPv6Address.AllInterfaces, port ) ) || _implListen( new IPv4Endpoint( IPv4Address.AllInterfaces, port ) ); TODO dual stack
			return _implListen( new IPv4Endpoint( IPv4Address.AllInterfaces, port ) );
		}

		private bool _implListen( IPv4Endpoint endpoint ) {
			Debug.Assert( _eventLoop != null );

			var localAddress = ( sockaddr_in ) endpoint;

			using( var acceptSocket = new SocketHandleTCP( ADDRESS_FAMILY.AF_INET ) ) {
				if( acceptSocket == SocketHandle.Invalid ) return false;

				if( WinsockApi.bind( acceptSocket, ( sockaddr* ) &localAddress, sizeof( localAddress ) ) != 0 ) return false;
				if( WinsockApi.listen( acceptSocket, ListenBacklog ) != 0 ) return false;

				var acceptEntry = new AcceptSocketTCPEventSink( this, acceptSocket );
				acceptEntry.Register();

				acceptSocket = SocketHandleTCP.Invalid; // dont close 'acceptSocket'
				return true;
			}
		}

		private bool _implListen( IPv6Endpoint endpoint ) {
			Debug.Assert( _eventLoop != null );

			var localAddress = ( sockaddr_in6 ) endpoint;

			using( var acceptSocket = new SocketHandleTCP( ADDRESS_FAMILY.AF_INET6 ) ) {
				if( acceptSocket == SocketHandle.Invalid ) return false;

				if( WinsockApi.bind( acceptSocket, ( sockaddr* ) &localAddress, sizeof( localAddress ) ) != 0 ) return false;
				if( WinsockApi.listen( acceptSocket, ListenBacklog ) != 0 ) return false;

				var acceptEntry = new AcceptSocketTCPEventSink( this, acceptSocket );
				acceptEntry.Register();

				acceptSocket = SocketHandleTCP.Invalid; // dont close 'acceptSocket'
				return true;
			}
		}

		private class AcceptSocketTCPEventSink : EventLoop.SocketEventSink {
			private declaringtype _server;

			public AcceptSocketTCPEventSink( declaringtype server, SocketHandle socket )
				: base( server._eventLoop ) {
				_server = server;
				_socket = socket;

				Subscribe( SocketEvent.FD_ACCEPT );
				TraceAcceptStarted( socket );
			}

			public override void Dispose() {
				_server = null;

				base.Dispose();
			}

			public override void OnEvent( WSANETWORKEVENTS& events ) {
				if( ( events.NetworkEvents & SocketEvent.FD_ACCEPT ) != 0 && events.ErrorCode[3] == 0 ) {
					sockaddr_in clientAddress;
					uint clientAddressLength = sizeof( clientAddress );

					var clientSocket = ( SocketHandleTCP ) WinsockApi.WSAAccept( _socket, ( sockaddr* ) &clientAddress, clientAddressLength, null, 0 );
					if( !clientSocket.IsValid ) return;

					if( _server.MaxSessions > 0 && _server.ActiveSessionCount >= _server.MaxSessions ) {
						TraceConnectionLimitExceeded();
						clientSocket.Close();
						return;
					}

					clientSocket.NoDelay = true;

					TraceClientAccepted( clientSocket );

					var stream = new NetworkStream( clientSocket ) {
					};

					var client = _server.CreateSession( stream );
					stream.ErrorHandler = client.StreamStatus;
					client.StartFiber();
				}

				// if( ( events.NetworkEvents & SocketEvent.FD_CLOSE ) != 0 ) {
				// 	Console.WriteLine( "Listen socket closed" );
				// 	Unregister();
				// }
			}
		}

		private bool _implListen( Utf8String path ) { return _implListen( ( string ) path ); }

		private bool _implListen( string path ) {
			return ListenNamedPipe( path, NamedPipeAccessMode.PIPE_ACCESS_DUPLEX | NamedPipeAccessMode.FILE_FLAG_FIRST_PIPE_INSTANCE, NamedPipeCreateMode.PIPE_ACCEPT_REMOTE_CLIENTS | NamedPipeCreateMode.PIPE_TYPE_MESSAGE | NamedPipeCreateMode.PIPE_READMODE_MESSAGE );
		}

		private bool ListenNamedPipe( string path, NamedPipeAccessMode accessMode, NamedPipeCreateMode createMode ) {
			var pipe = Kernel32Api.CreateNamedPipe( path, accessMode | NamedPipeAccessMode.FILE_FLAG_OVERLAPPED, createMode, 255, 4096, 4096, 0, nullref );
			if( pipe == NamedPipeHandle.Invalid ) return false;

			var acceptEntry = new AcceptNamedPipeEventSink( this, pipe ) {
				Context = path
			};

			if( !acceptEntry.Connect() ) {
				acceptEntry.Dispose();
				return false;
			}

			++ListeningPipes;

			return true;
		}

		internal class AcceptNamedPipeEventSink : EventLoop.NamedPipeEventSink {
			private declaringtype _server;
			public string Context;

			public AcceptNamedPipeEventSink( declaringtype server, NamedPipeHandle pipe )
				: base( server._eventLoop, pipe ) {
				_server = server;
			}

			public override void Dispose() {
				_server = null;

				base.Dispose();
			}

			public override void OnEvent() {
				base.OnEvent();

				if( _server.MaxSessions > 0 && _server.ActiveSessionCount >= _server.MaxSessions ) {
					TraceConnectionLimitExceeded();
					Disconnect();
					Connect();
					return;
				}

				if( !_unregisteredConnect ) Unregister();

				--_server.ListeningPipes;

				TraceClientAccepted( _pipe );

				var stream = new FileStream( _pipe ) {
					Context = Context,
					CloseHandle = false
				};

				if( _server.ListeningPipes == 0 ) {
					var listenResult = _server.ListenNamedPipe( Context, NamedPipeAccessMode.PIPE_ACCESS_DUPLEX, NamedPipeCreateMode.PIPE_ACCEPT_REMOTE_CLIENTS | NamedPipeCreateMode.PIPE_TYPE_MESSAGE | NamedPipeCreateMode.PIPE_READMODE_MESSAGE );
					TraceCreateAdditionalListeningPipe( listenResult );
				}

				var client = _server.CreateSession( stream );
				stream.ErrorHandler = client.StreamStatus;
				client._pipeSink = this;
				client.StartFiber();
			}
		}

		public abstract partial class SessionHandler {
			internal AcceptNamedPipeEventSink _pipeSink;

			internal PlatformErrorHandlerStatus StreamStatus;

			private bool _implStreamError() {
				return StreamStatus.ErrorOccured;
			}

			private void _implOnExit() {
				if( _pipeSink != null ) {
					_pipeSink.Disconnect();

					if( Server.ListeningPipes < Server.MaxListeningPipes ) {
						++Server.ListeningPipes;

						if( _pipeSink.Connect() )
							TraceReuseListeningPipe();
						else {
							TraceUnableReuseListeningPipe();
							_pipeSink.Dispose();
						}
					}
					else
						_pipeSink.Dispose();

					_pipeSink = null;
				}
			}
		}

		#region Tracing

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceAcceptStarted( SocketHandle acceptSocket ) {
			using( Console.AttributedRegion( _traceAttributes ) )
				Trace.Write( "NS: Accepting started on socket:{0}", acceptSocket );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceClientAccepted( SocketHandle clientSocketHandle ) {
			using( Console.AttributedRegion( _traceAttributes ) )
				Trace.Write( "NS: Client accepted to socket '{0}'", clientSocketHandle );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceCreateAdditionalListeningPipe( bool value ) {
			using( Console.AttributedRegion( _traceAttributes ) )
				Trace.Write( "NS: Create additional listening pipe - {0}", value );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceReuseListeningPipe() {
			using( Console.AttributedRegion( _traceAttributes ) )
				Trace.Write( "NS: Reuse named pipe" );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceUnableReuseListeningPipe() {
			using( Console.AttributedRegion( _traceAttributes ) )
				Trace.Write( "NS: Unable reuse named pipe" );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceConnectionLimitExceeded() {
			using( Console.AttributedRegion( _traceAttributes ) )
				Trace.Write( "NS: Connection limit exceeded" );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceClientAccepted( NamedPipeHandle pipe ) {
			using( Console.AttributedRegion( _traceAttributes ) )
				Trace.Write( "NS: Client accepted to pipe '{0}'", pipe );
		}

		#endregion
	}
}