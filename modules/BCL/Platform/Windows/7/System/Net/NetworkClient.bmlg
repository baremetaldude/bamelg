//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

using Platform;
using Platform.IO;

namespace System.Net {
	public partial class NetworkClient {
		private NetworkStream _platformStream;

		private void _implInitialize() {
			_platformStream = new NetworkStream() {
				ErrorHandler = ErrorHandler
			};
		}

		private TimeSpan _implConnectTimeout { get { return _platformStream.ConnectTimeout; } set { _platformStream.ConnectTimeout = value; } }
		private TimeSpan _implReadTimeout { get { return _platformStream.ReadTimeout; } set { _platformStream.ReadTimeout = value; } }
		private TimeSpan _implWriteTimeout { get { return _platformStream.WriteTimeout; } set { _platformStream.WriteTimeout = value; } }
		private bool _implImmediateDelivery { get { return _platformStream.ImmediateDeliveryTCP; } set { _platformStream.ImmediateDeliveryTCP = value; } }

		private bool _implConnect( IPv4Endpoint endpoint, IPv4Address @interface ) {
			if( @interface != IPv4Address.AllInterfaces ) {
				if( !_platformStream.Bind( new IPv4Endpoint( @interface, 0 ) ) ) return false;
			}

			if( _platformStream.Connect( endpoint ) ) {
				_stream = _platformStream;
				return OnConnected();
			}

			return false;
		}

		private bool _implConnect( IPv6Endpoint endpoint, IPv6Address @interface ) {
			if( @interface != IPv6Address.AllInterfaces ) {
				if( !_platformStream.Bind( new IPv6Endpoint( @interface, 0 ) ) ) return false;
			}

			if( _platformStream.Connect( endpoint ) ) {
				_stream = _platformStream;
				return OnConnected();
			}

			return false;
		}

		private bool _implConnectLocal( string endpoint ) {
			var stream = new FileStream() { ErrorHandler = ErrorHandler };

			if( stream.Open( endpoint, FileAccessRights.GENERIC_WRITE | FileAccessRights.GENERIC_READ, FileCreationDisposition.OPEN_EXISTING ) ) {
				_stream = stream;
				return OnConnected();
			}

			return false;
		}

		private bool _implConnectLocal( Utf8String endpoint ) { return _implConnectLocal( ( string ) endpoint ); }

		private bool _implAccept( IPv4Endpoint endpoint ) {
			var localAddress = ( sockaddr_in ) endpoint;
			return _implAcceptTcp( ( sockaddr* ) &localAddress, sizeof( localAddress ) );
		}

		private bool _implAccept( IPv6Endpoint endpoint ) {
			var localAddress = ( sockaddr_in6 ) endpoint;
			return _implAcceptTcp( ( sockaddr* ) &localAddress, sizeof( localAddress ) );
		}

		private bool _implAcceptTcp( sockaddr* localAddress, uint length ) {
			WSAPROTOCOL_INFOW& protocolInfo = nullref;

			if( Fiber.IsFiberExecuting ) {
				using( var serverSocket = new SocketHandleTCP( localAddress->Family ) )
				using( var clientSocket = new SocketHandleTCP( localAddress->Family ) ) {
					if( !serverSocket.IsValid ) return OnError( "WSASocket", *localAddress );
					if( !clientSocket.IsValid ) return OnError( "WSASocket", *localAddress );

					if( !serverSocket.Bind( localAddress, length ) ) return OnError( "Bind", *localAddress );
					if( !serverSocket.Listen( 1 ) ) return OnError( "Listen", *localAddress );

					var connectBuf = stackalloc byte[( length + 16 ) * 2];
					uint bytesReceived;

					using( var eventSelector = bitcast<WSAEVENT>( new AutoResetEventHandle() ) ) {
						var overlapped = default( OVERLAPPED );
						overlapped.Event = eventSelector;

						var acceptResult = WinsockApiEx.AcceptEx( serverSocket, clientSocket, &connectBuf[0], 0U, length + 16U, length + 16U, bytesReceived, overlapped );
						if( acceptResult ) {
						}
						else {
							var lastError = Kernel32Api.LastError;

							switch( lastError ) {
								case SystemErrorCode.ERROR_IO_PENDING: break;
								default: return OnError( "AcceptEx", *localAddress );
							}

							System.IO.Fiber.FiberManager.Wait( eventSelector );
							if( Fiber.IsCancelled ) return false;
						}

						clientSocket.UpdateAcceptContext( serverSocket );
					}

					_stream = new Platform.IO.NetworkStream( clientSocket ) {
						ErrorHandler = ErrorHandler
					};

					clientSocket = SocketHandleTCP.Invalid;
				}
			}
			else {
				using( var serverSocket = new SocketHandleTCP( localAddress->Family ) ) {
					var clientSocket = WinsockApi.accept( serverSocket, localAddress, length );
					if( !clientSocket.IsValid ) return OnError( "accept", *localAddress );

					_stream = new Platform.IO.NetworkStream( clientSocket ) {
						ErrorHandler = ErrorHandler
					};
				}
			}

			return OnConnected();
		}


		private bool _implAcceptLocal( string endpoint ) {
			if( Fiber.IsFiberExecuting ) {
				using( var eventSelector = new AutoResetEventHandle() )
				using( var pipe = Kernel32Api.CreateNamedPipe( endpoint, NamedPipeAccessMode.PIPE_ACCESS_DUPLEX | NamedPipeAccessMode.FILE_FLAG_FIRST_PIPE_INSTANCE | NamedPipeAccessMode.FILE_FLAG_OVERLAPPED, NamedPipeCreateMode.PIPE_ACCEPT_REMOTE_CLIENTS | NamedPipeCreateMode.PIPE_TYPE_MESSAGE | NamedPipeCreateMode.PIPE_READMODE_MESSAGE, 1, 4096, 4096, 0, nullref ) ) {
					if( !pipe.IsValid ) return OnError( "CreateNamedPipe", endpoint );

					var overlapped = default( OVERLAPPED );
					overlapped.Event = eventSelector;

					if( !Kernel32Api.ConnectNamedPipe( pipe, overlapped ) )
						switch( Kernel32Api.LastError ) {
							case SystemErrorCode.ERROR_IO_PENDING: System.IO.Fiber.FiberManager.Wait( eventSelector ); break;
							case SystemErrorCode.ERROR_PIPE_CONNECTED: break;
							default: return OnError( "ConnectNamedPipe", endpoint );
						}

					_stream = new FileStream( pipe ) {
						ErrorHandler = ErrorHandler,
						Context = endpoint
					};

					pipe = NamedPipeHandle.Invalid;
				}
			}
			else {
				using( var pipe = Kernel32Api.CreateNamedPipe( endpoint, NamedPipeAccessMode.PIPE_ACCESS_DUPLEX | NamedPipeAccessMode.FILE_FLAG_FIRST_PIPE_INSTANCE, NamedPipeCreateMode.PIPE_ACCEPT_REMOTE_CLIENTS | NamedPipeCreateMode.PIPE_TYPE_MESSAGE | NamedPipeCreateMode.PIPE_READMODE_MESSAGE, 1, 4096, 4096, 0, nullref ) ) {
					if( !pipe.IsValid ) return OnError( "CreateNamedPipe", endpoint );

					if( !Kernel32Api.ConnectNamedPipe( pipe, nullref ) ) return OnError( "ConnectNamedPipe", endpoint );

					_stream = new FileStream( pipe ) {
						ErrorHandler = ErrorHandler,
						Context = endpoint
					};
				}
			}

			return OnConnected();
		}

		private bool _implAcceptLocal( Utf8String endpoint ) { return _implAcceptLocal( ( string ) endpoint ); }

		private bool OnError( string operation, IFormattable context, SystemErrorCode status ) {
			ErrorHandler.OnError( operation, context, status );
			return false;
		}

		private bool OnError( string operation, IFormattable context ) {
			ErrorHandler.OnError( operation, context, Kernel32Api.LastError );
			return false;
		}

		protected virtual IPlatformErrorHandler ErrorHandler { get { return PlatformErrorHandlerNull.Instance; } }

		public bool _implIsClosed() { return _platformStream.IsClosed(); }

		private void _implEnableKeepAlive( TimeSpan timeout, TimeSpan interval, uint count ) { _platformStream.EnableKeepAlive( timeout, interval ); }
		private void _implDisableKeepAlive() { _platformStream.DisableKeepAlive(); }
	}
}