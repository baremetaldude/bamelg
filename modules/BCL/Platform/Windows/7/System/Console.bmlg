//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;
using System.Text;

using Platform;
using Platform.IO;

namespace System {
	public static partial class Console {
		public const ConsoleEncoding DefaultPlatformConsoleEncoding = ConsoleEncoding.CodePage;

		internal static readonly HANDLE StdOut, StdIn, StdErr;
		internal const Utf8String NewLine = "\n"; // Environment.NewLine

		// console is synced internally, this CS needed only for pretty printing from multiple threads (there is no 'writev' to append newline atomically)
		internal static readonly CRITICAL_SECTION _lock = new CRITICAL_SECTION();

		private static bool _nativeConsole = true;

		static Console() {
			StdOut = Kernel32Api.GetStdHandle( StandartIOHandle.STD_OUTPUT_HANDLE );
			StdIn = Kernel32Api.GetStdHandle( StandartIOHandle.STD_INPUT_HANDLE );
			StdErr = Kernel32Api.GetStdHandle( StandartIOHandle.STD_ERROR_HANDLE );

			uint mode;
			_nativeConsole = Kernel32Api.GetConsoleMode( StdOut, mode );

			IsTerminalSupports16Color = _nativeConsole;
		}

		// static ~Console() {
		// 	StdOut.Close();
		// 	StdIn.Close();
		// 	StdErr.Close();
		// }

		public static void WriteLine() {
			using( _lock.ScopeEnter() )
				WriteLineUnsync();
		}

		private static void WriteLineUnsync() {
			uint written;
			Kernel32Api.WriteFile( StdOut, NewLine.GetChars(), NewLine.ByteLength, written, nullref );
		}

		public static void Clear() {
		}

		private static void PlatformWrite( CStringSpan data, bool appendNewLine ) {
			if( data.IsNullOrEmpty ) {
				if( appendNewLine ) WriteLine();
				return;
			}

			uint written;

			using( _lock.ScopeEnter() ) {
				Kernel32Api.WriteFile( StdOut, data.GetChars(), data.ByteLength, written, nullref );
				if( appendNewLine ) WriteLineUnsync();
			}
		}

		private static void PlatformWrite( CUtf8StringSpan data, bool appendNewLine ) {
			if( data.IsNullOrEmpty ) {
				if( appendNewLine ) WriteLine();
				return;
			}

			uint written;

			using( var page = Memory.CachedPages.PopScoped() ) {
				var buffer = ( byte* ) page.Value;
				var bufferLength = Memory.DefaultPageSize / sizeof( *buffer );

				using( _lock.ScopeEnter() ) {
					foreach( var segment in Unicode.StreamConvertUtf8CharactersToSbcs( Environment.DefaultCodePage, buffer, bufferLength, data.GetChars(), data.ByteLength ) )
						Kernel32Api.WriteFile( StdOut, segment.Start, ( uint ) segment.Count, written, nullref );

					if( appendNewLine ) WriteLineUnsync();
				}
			}
		}

		private static void PlatformWrite( CUtf16StringSpan data, bool appendNewLine ) {
			if( data.IsNullOrEmpty ) {
				if( appendNewLine ) WriteLine();
				return;
			}

			uint written;

			using( _lock.ScopeEnter() ) {
				using( var page = Memory.CachedPages.PopScoped() ) {
					var buffer = ( byte* ) page.Value;
					var bufferLength = Memory.DefaultPageSize;

					foreach( var segment in Unicode.StreamConvertUtf16CharactersToSbcs( Environment.DefaultCodePage, buffer, bufferLength, data.GetChars(), data.Length ) )
						Kernel32Api.WriteFile( StdOut, segment.Start, ( uint ) segment.Count, written, nullref );

					if( appendNewLine ) WriteLineUnsync();
				}
			}
		}

		private static void PlatformWrite( CUtf32StringSpan data, bool appendNewLine ) {
			if( data.IsNullOrEmpty ) {
				if( appendNewLine ) WriteLine();
				return;
			}

			uint written;

			using( var page8 = Memory.CachedPages.PopScoped() )
			using( var page16 = Memory.CachedPages.PopScoped() ) {
				var buffer8 = ( byte* ) page8.Value;
				var buffer8Length = Memory.DefaultPageSize / sizeof( *buffer8 );

				var buffer16 = ( char* ) page16.Value;
				var buffer16Length = Memory.DefaultPageSize / sizeof( *buffer16 );

				using( _lock.ScopeEnter() ) {
					foreach( var segment16 in Unicode.StreamConvertUtf32CharactersToUtf16( buffer16, buffer16Length, data.GetChars(), data.Length ) )
						foreach( var segment8 in Unicode.StreamConvertUtf16CharactersToSbcs( Environment.DefaultCodePage, buffer8, buffer8Length, segment16.Start, ( uint ) segment16.Count ) )
							Kernel32Api.WriteFile( StdOut, segment8.Start, ( uint ) segment8.Count, written, nullref );

					if( appendNewLine ) WriteLineUnsync();
				}
			}
		}

		// private static RgbColor[16] DefaultColors = new RgbColor[16] {
		// 	new RgbColor { R = 0, G = 0, B = 0 },       // 0 - black
		// 	new RgbColor { R = 0, G = 0, B = 128 },     // 1 - dark blue
		// 	new RgbColor { R = 0, G = 128, B = 0 },     // 2 - dark green
		// 	new RgbColor { R = 0, G = 67, B = 67 },     // 3 - dark cyan
		// 	new RgbColor { R = 128, G = 0, B = 0 },     // 4 - dark red
		// 	new RgbColor { R = 128, G = 0, B = 128 },   // 5 - dark magenta
		// 	new RgbColor { R = 128, G = 128, B = 0 },   // 6 - dark yellow
		// 	new RgbColor { R = 192, G = 192, B = 192 }, // 7 - gray
		// 	new RgbColor { R = 128, G = 128, B = 128 }, // 8 - dark gray
		// 	new RgbColor { R = 0, G = 0, B = 255 },     // 9 - blue
		// 	new RgbColor { R = 0, G = 255, B = 0 },     // 10 - green
		// 	new RgbColor { R = 0, G = 255, B = 255 },   // 11 - cyan
		// 	new RgbColor { R = 255, G = 0, B = 0 },     // 12 - red
		// 	new RgbColor { R = 255, G = 0, B = 255 },   // 13 - magenta
		// 	new RgbColor { R = 255, G = 255, B = 0 },   // 14 - yellow
		// 	new RgbColor { R = 255, G = 255, B = 255 }  // 15 - white
		// };

		private static ColorValue.Lab[16] DefaultLabColors = new ColorValue.Lab[16] {
			new ColorValue.Lab { L = -16, A = 68.9655172413793, B = 0 },
			new ColorValue.Lab { L = 12.9753115777165, A = 47.5077653101377, B = -64.7042732458055 },
			new ColorValue.Lab { L = 46.2288178426266, A = -51.6996473280824, B = 49.8979523098384 },
			new ColorValue.Lab { L = 25.0126261361023, A = -18.4086581275992, B = -5.41318689095037 },
			new ColorValue.Lab { L = 25.5307845724162, A = 48.0552360454883, B = 40.323356531254 },
			new ColorValue.Lab { L = 29.7821000920981, A = 58.9398373190421, B = -36.4979299628239 },
			new ColorValue.Lab { L = 51.8683313633482, A = -12.930760098733, B = 56.6772846619415 },
			new ColorValue.Lab { L = 77.7043635899527, A = 0.00424941207544105, B = -0.00840769230232574 },
			new ColorValue.Lab { L = 53.585013452169, A = 0.00315562034797212, B = -0.00624356603624587 },
			new ColorValue.Lab { L = 32.3025866672495, A = 79.1966617893093, B = -107.863681044952 },
			new ColorValue.Lab { L = 87.7370334735442, A = -86.1846364976252, B = 83.1811647477785 },
			new ColorValue.Lab { L = 91.1165211094634, A = -48.0796184662288, B = -14.1381277548461 },
			new ColorValue.Lab { L = 53.2328817858425, A = 80.109309529822, B = 67.2200683102643 },
			new ColorValue.Lab { L = 60.319933664076, A = 98.2542186861611, B = -60.8429842238623 },
			new ColorValue.Lab { L = 97.1382469812973, A = -21.5559083348323, B = 94.4824854464446 },
			new ColorValue.Lab { L = 100, A = 0.00526049995830391, B = -0.0104081845252679 }
		};

		public static void ApplyAttributes( Console.OutputAttributes& attributes ) {
			var foregroundColor = CreateIndexedColor( DefaultLabColors, DefaultLabColors.Length, attributes.ForegroundColor );
			var backgroundColor = CreateIndexedColor( DefaultLabColors, DefaultLabColors.Length, attributes.BackgroundColor );

			Kernel32Api.SetConsoleTextAttribute( StdOut, ( ushort )( ( backgroundColor << 4 ) | foregroundColor ) );
		}

		public static void ResetAttributes() {
			var foregroundColor = 7;
			var backgroundColor = 0;

			Kernel32Api.SetConsoleTextAttribute( StdOut, ( ushort )( ( backgroundColor << 4 ) | foregroundColor ) );
		}

		private static uint GetIndexedColor( RgbColor& color ) {
			if( Console.IsTerminalSupportsRGB ) return uint.MaxValue;

			if( Console.IsTerminalSupports16Color )
				return Console.CreateIndexedColor( Console.DefaultLabColors, DefaultLabColors.Length, color );

			return uint.MaxValue;
		}

		public partial struct OutputAttributes {
			private void OnForegroundColorChanged() { ForegroundColorIndex = Console.GetIndexedColor( ForegroundColor ); }
			private void OnBackgroundColorChanged() { BackgroundColorIndex = Console.GetIndexedColor( BackgroundColor ); }
		}
	}
}