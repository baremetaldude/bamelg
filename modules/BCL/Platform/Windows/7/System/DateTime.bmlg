//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform;

namespace System {
	public partial struct DateTime {
		private const ulong _ticksSince_1_1_1601 = 504911232000000000UL;

		public static DateTime Now {
			get {
				ulong ticks;
				NtApi.NtQuerySystemTime( ticks );
				NtApi.RtlSystemTimeToLocalTime( ticks, ticks );
				return new DateTime( ( long )( ticks + _ticksSince_1_1_1601 ), DateTimeKind.Local );
			}
		}

		public static DateTime UtcNow {
			get {
				ulong ticks;
				NtApi.NtQuerySystemTime( ticks );
				return new DateTime( ( long )( ticks + _ticksSince_1_1_1601 ), DateTimeKind.Utc );
			}
		}

		public static DateTime UnbiasedNow {
			get {
				ulong ticks;
				Kernel32Api.QueryUnbiasedInterruptTime( ticks );
				return new DateTime( ( long ) ticks, DateTimeKind.Unbiased );
			}
		}

		public static TimeSpan GetLocalFromUtcOffset( DateTime time ) {
			ulong ticks = ( ulong ) time.Ticks, localTime;
			NtApi.RtlSystemTimeToLocalTime( ticks, localTime );
			return new TimeSpan( ( long )( localTime - ticks ) );
		}

		public static TimeSpan UtcUnbiasedOffset {
			get {
				var span1 = DateTime.UtcNow.Ticks - DateTime.UnbiasedNow.Ticks; // HACK: there is no way to get both timers atomically
				var span2 = DateTime.UtcNow.Ticks - DateTime.UnbiasedNow.Ticks;

				// if context switch occured between 'DateTime.UtcNow' and 'DateTime.Unbiased'
				// then 'DateTime.Unbiased' will be greater than it can be,
				// so 'DateTime.UtcNow - DateTime.Unbiased' will be less than it can be
				return new TimeSpan( span1 > span2 ? span1 : span2 );
			}
		}

		public DateTime ToLocalTime() {
			switch( Kind ) {
				case DateTimeKind.Unspecified: {
						var result = this;
						result.Kind = DateTimeKind.Local;
						return result;
					}

				case DateTimeKind.Utc: {
						var ticks = Ticks - _ticksSince_1_1_1601;
						NtApi.RtlSystemTimeToLocalTime( ticks, ticks );
						return new DateTime( ( long )( ticks + _ticksSince_1_1_1601 ), DateTimeKind.Local );
					}

				case DateTimeKind.Unbiased: {
						var ticks = ( this + UtcUnbiasedOffset ).Ticks - _ticksSince_1_1_1601;
						NtApi.RtlSystemTimeToLocalTime( ticks, ticks );
						return new DateTime( ( long )( ticks + _ticksSince_1_1_1601 ), DateTimeKind.Local );
					}
			}

			return this;
		}

		public DateTime ToUniversalTime() {
			switch( Kind ) {
				case DateTimeKind.Unspecified: {
						var result = this;
						result.Kind = DateTimeKind.Utc;
						return result;
					}

				case DateTimeKind.Local: {
						var ticks = Ticks - _ticksSince_1_1_1601;
						NtApi.RtlLocalTimeToSystemTime( ticks, ticks );
						return new DateTime( ( long )( ticks + _ticksSince_1_1_1601 ), DateTimeKind.Utc );
					}

				case DateTimeKind.Unbiased: {
						var result = this + UtcUnbiasedOffset;
						result.Kind = DateTimeKind.Utc;

						return result;
					}
			}

			return this;
		}
	}
}