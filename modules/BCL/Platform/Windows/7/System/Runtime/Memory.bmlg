//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using Platform;

namespace System.Runtime {
	public static partial struct Memory {
		private const int PlatformAllocationAlignment = 16;

		private const bool UseProcessHeap = false;

		private static PageProtectionFlags MapProtectionProperties( PageProperties properties ) {
			if( BitOperations.MaskTest( properties, PageProperties.Execute ) ) {
				if( BitOperations.MaskTest( properties, PageProperties.Read | PageProperties.Write ) )
					return PageProtectionFlags.PAGE_EXECUTE_READWRITE;

				if( BitOperations.MaskTest( properties, PageProperties.Read ) )
					return PageProtectionFlags.PAGE_EXECUTE_READ;

				if( BitOperations.MaskTest( properties, PageProperties.Write ) ) // fallback
					return PageProtectionFlags.PAGE_EXECUTE_READWRITE;
			}
			else {
				if( BitOperations.MaskTest( properties, PageProperties.Read | PageProperties.Write ) )
					return PageProtectionFlags.PAGE_READWRITE;

				if( BitOperations.MaskTest( properties, PageProperties.Read ) )
					return PageProtectionFlags.PAGE_READONLY;

				if( BitOperations.MaskTest( properties, PageProperties.Write ) ) // fallback
					return PageProtectionFlags.PAGE_READWRITE;
			}

			return PageProtectionFlags.PAGE_NOACCESS;
		}

		private static void* _implAllocatePages( uint count, PageProperties properties ) {
			var allocationLength = DefaultPageSize * count;

			var result = Kernel32Api.VirtualAlloc( null, PlatformDefaultPageSize * count, VirtualAllocFlags.MEM_COMMIT | VirtualAllocFlags.MEM_RESERVE, MapProtectionProperties( properties ) );
			return result;
		}

		private static void _implModifyPages( void* ptr, uint count, PageProperties properties ) {
			var allocationLength = DefaultPageSize * count;

			PageProtectionFlags oldProperties;
			var result = Kernel32Api.VirtualProtect( ptr, allocationLength, MapProtectionProperties( properties ), oldProperties );
			Assert.IsTrue( result );
		}

		private static void _implFreePages( void* ptr, uint count ) {
			var result = Kernel32Api.VirtualFree( ptr, 0, VirtualFreeType.MEM_RELEASE );
			Assert.IsTrue( result );
		}

		private static void _implDecommitPages( void* ptr, uint count ) {
			var allocationLength = DefaultPageSize * count;

			var result = Kernel32Api.VirtualFree( ptr, allocationLength, VirtualFreeType.MEM_DECOMMIT );
			Assert.IsTrue( result );
		}

		private static void* _implAllocate( uint size ) {
			if( UseProcessHeap ) {
				if( ProcessHeap == HeapHandle.Null ) ProcessHeap = Kernel32Api.GetProcessHeap();
				// return ProcessHeap.Alloc( MultithreadedEnvironment ? HeapAllocFlags.None : HeapAllocFlags.HEAP_NO_SERIALIZE, size );
				return ProcessHeap.Alloc( HeapAllocFlags.None, size );
			}

			return CRuntime.malloc( size );
		}

		private static void* _implAllocateClear( uint size ) {
			if( UseProcessHeap ) {
				if( ProcessHeap == HeapHandle.Null ) ProcessHeap = Kernel32Api.GetProcessHeap();
				// return ProcessHeap.Alloc( ( MultithreadedEnvironment ? HeapAllocFlags.None : HeapAllocFlags.HEAP_NO_SERIALIZE ) | HeapAllocFlags.HEAP_ZERO_MEMORY, size );
				return ProcessHeap.Alloc( HeapAllocFlags.HEAP_ZERO_MEMORY, size );
			}

			return CRuntime.calloc( 1U, size );
		}

		private static void* _implAllocateAligned( uint size, uint align ) {
			return CRuntime._aligned_malloc( size, align );
		}

		private static void* _implAllocateAlignedClear( uint size, uint align ) {
			var result = _implAllocateAligned( size, align );
			Clear( result, size );
			return result;
		}

		private static void _implFree( void* memory ) {
			if( memory == null ) return;

			[DisableWarningUnreachable]
			if( UseProcessHeap ) {
				if( ProcessHeap == HeapHandle.Null ) ProcessHeap = Kernel32Api.GetProcessHeap();
				// ProcessHeap.Free( MultithreadedEnvironment ? HeapSerializationFlags.None : HeapSerializationFlags.HEAP_NO_SERIALIZE, memory );
				ProcessHeap.Free( HeapSerializationFlags.None, memory );
			}
			else CRuntime.free( memory );
		}

		private static void _implFreeAligned( void* memory ) {
			if( memory != null ) CRuntime._aligned_free( memory );
		}

		private static HeapHandle ProcessHeap;
	}
}