//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Execution and context-switch related functionality
//

using System;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

using Platform;

namespace System.IO {
	public partial struct Fiber {
		internal partial struct FiberInfo {
			private _EXCEPTION_REGISTRATION_RECORD* ExceptionList = ( _EXCEPTION_REGISTRATION_RECORD* ) -1;

			private static void PrepareContext( FiberInfo* fiber, void* stack, int stackSize, Functors.Action<void*> function, void* parameter ) {
				ContextSwitch.X86.Windows.PrepareContext_SSE( fiber, stack, stackSize, function, parameter );
			}

			private static void PrepareMainFiberEnvironment( FiberInfo* context ) {
				var& tib = _TEB.Current.NtTib;

				context->_stack = tib.StackLimit;
				context->_stackSize = ( int )( ( byte* ) tib.StackBase - ( byte* ) tib.StackLimit );
				context->ExceptionList = tib.ExceptionList;
			}

			private static void PrepareFiberEnvironment( FiberInfo* context ) {
				var& tib = _TEB.Current.NtTib;

				context->ExceptionList = _EXCEPTION_REGISTRATION_RECORD.EndOfListMark;
			}

			private static void SwitchEnvironment( FiberInfo* context, FiberInfo* newContext ) {
				var& tib = _TEB.Current.NtTib;

				tib.StackLimit = newContext->_stack;
				tib.StackBase = ( byte* ) newContext->_stack + newContext->_stackSize;
				tib.ExceptionList = newContext->ExceptionList;
			}
			
			private static void SwitchCurrentContext( void** oldStack, void* newStack ) {
				ContextSwitch.X86.Windows.SwitchCurrentContext_SSE( oldStack, newStack );
			}			
		}
	}
}