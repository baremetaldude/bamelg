//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Notification functionality
//

using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

using Platform;
using Platform.IO;

namespace System.IO {
	public partial struct Fiber {
		internal partial struct FiberInfo {
			private HANDLE _waitHandle;
			private OVERLAPPED _asyncOperation;
			private SystemErrorCode _asyncErrorCode;
			private uint _asyncTransferred;

			private Dispatcher.AlarmUnbiased* _alarmID;
			
			internal partial class Manager {
				private System.Threading.Mutex _readyListAsyncLock = new System.Threading.Mutex();
				private List<FiberInfo*> _readyListAsync = new List<FiberInfo*>();

				public EventLoop CurrentEventLoop;
				private FiberReadyEventSink _readySink;

				/// @{ EventLoop support
				public void Attach( EventLoop eventLoop ) {
					if( !Assert.IsTrue( CurrentEventLoop == null ) ) return;
					CurrentEventLoop = eventLoop;

					_readySink = new FiberReadyEventSink( eventLoop );
					_readySink.Register();
				}

				public void Detach( EventLoop eventLoop ) {
					if( !Assert.IsTrue( CurrentEventLoop != null ) ) return;

					_readySink.Unregister();
					_readySink = null;

					CurrentEventLoop = null;
				}
				/// @}

				private Dispatcher.AlarmUnbiased* BeginTimeout( TimeSpan interval, Functors.Action<void*> action, void* data ) {
					return CurrentEventLoop.ScheduleUnbiased( interval, action, data );
				}

				private void EndTimeout( Dispatcher.AlarmUnbiased* alarmId ) {
					CurrentEventLoop.RemoveAlarm( alarmId );
				}

				private class FiberReadyEventSink : EventLoop.EventSink {
					private AutoResetEventHandle _readyFibers = new AutoResetEventHandle();

					public override HANDLE EventHandle { get { return _readyFibers; } }

					public FiberReadyEventSink( EventLoop parent )
						: base( parent ) {
					}

					public void Signal() {
						_readyFibers.Set();
					}

					~FiberReadyEventSink() {
						_readyFibers.Close();
					}

					public override void OnEvent() {
						Fiber.FiberManager.EventLoopDispatch();
					}
				}

				private void EventLoopDispatch() {
					Dispatch();

					if( CurrentEventLoop.QuitRequest & FiberCount > 0 )
						CancelAllFibers();
				}

				private void ReadyIO( FiberInfo* fiber ) {
					if( fiber->_isReady | !fiber->_isAlive ) return;

					TraceReady( fiber );

					_readyList.Add( fiber );
					fiber->_isReady = true;
				}

				// MT-unsafe
				public void Ready( FiberInfo* fiber ) {
					if( fiber->_isReady | !fiber->_isAlive ) return;

					TraceReady( fiber );

					_readySink.Signal();

					_readyList.Add( fiber );
					fiber->_isReady = true;
				}

				// MT-safe
				public void ReadyAsync( FiberInfo* fiber ) {
					using( _readyListAsyncLock.LockRegion() )
						_readyListAsync.Add( fiber );

					_readySink.Signal();
				}

				private void OnBeforeDispatch() { }
				private void OnAfterDispatch() { }

				[CallingConvention( Value = NtApi.DefaultCallingConvention )]
				private static void IOCompleted( SystemErrorCode errorCode, uint numberOfBytesTransfered, OVERLAPPED& overlapped ) {
					var fiber = bitcast<FiberInfo*>( overlapped.Event );
					// Console.WriteLine( "IOCompleted: {0} {1} {2} {3}", thismethod, errorCode, numberOfBytesTransfered, *fiber );

					fiber->_asyncErrorCode = errorCode;
					fiber->_asyncTransferred = numberOfBytesTransfered;

					fiber->Ready();
				}

				[CallingConvention( Value = NtApi.DefaultCallingConvention )]
				private static void WsaIOCompleted( SystemErrorCode errorCode, uint numberOfBytesTransfered, WSAOVERLAPPED& overlapped, uint flags ) {
					IOCompleted( errorCode, numberOfBytesTransfered, *( OVERLAPPED* ) &overlapped );
				}

				private SystemErrorCode FiberReadFile( TimeSpan timeout, HANDLE handle, void* buffer, int count, int& totalReceived ) {
					// Console.WriteLine( "{0} count={1}", thismethod, count );

					totalReceived = 0;
					CurrentFiber->_asyncOperation.Event = bitcast<HANDLE>( CurrentFiber );

					if( !Kernel32Api.ReadFileEx( handle, buffer, ( uint ) count, CurrentFiber->_asyncOperation, IOCompleted ) )
						return Kernel32Api.LastError;

					BeginTimeout( timeout );

					Suspend();

					var isTimedOut = EndTimeout( timeout );
					var isCancelled = CurrentFiber->IsCancelled;

					if( isTimedOut | isCancelled ) {
						Kernel32Api.CancelIoEx( handle, CurrentFiber->_asyncOperation );
						if( isTimedOut ) return CurrentFiber->_asyncErrorCode = SystemErrorCode.ERROR_TIMEOUT;
						CurrentFiber->_asyncTransferred = 0;
					}

					totalReceived = ( int ) CurrentFiber->_asyncTransferred;
					return CurrentFiber->_asyncErrorCode;
				}

				private SystemErrorCode FiberWriteFile( TimeSpan timeout, HANDLE handle, void* buffer, int count, int& totalTransmitted ) {
					// Console.WriteLine( "{0} count={1}", thismethod, count );

					totalTransmitted = 0;
					CurrentFiber->_asyncOperation.Event = bitcast<HANDLE>( CurrentFiber );

					if( !Kernel32Api.WriteFileEx( handle, buffer, ( uint ) count, CurrentFiber->_asyncOperation, IOCompleted ) )
						return Kernel32Api.LastError;

					BeginTimeout( timeout );

					Suspend();

					var isTimedOut = EndTimeout( timeout );
					var isCancelled = CurrentFiber->IsCancelled;

					if( isTimedOut | isCancelled ) {
						Kernel32Api.CancelIoEx( handle, CurrentFiber->_asyncOperation );
						if( isTimedOut ) return CurrentFiber->_asyncErrorCode = SystemErrorCode.ERROR_TIMEOUT;
						CurrentFiber->_asyncErrorCode = SystemErrorCode.ERROR_CONNECTION_ABORTED;
					}

					if( CurrentFiber->_asyncErrorCode == SystemErrorCode.NO_ERROR ) totalTransmitted = count;

					return CurrentFiber->_asyncErrorCode;
				}

				private SystemErrorCode FiberSendTo( TimeSpan timeout, SocketHandle handle, void* address, int addressLength, void* buffer, int count, int& totalTransmitted ) {
					// Console.WriteLine( "{0} count={1}", thismethod, count );

					totalTransmitted = 0;
					CurrentFiber->_asyncOperation.Event = bitcast<HANDLE>( CurrentFiber );

					uint written = 0;
					var wsabuf = new WSABUF { Buffer = buffer, Length = ( uint ) count };
					if( WinsockApi.WSASendTo( handle, &wsabuf, 1U, written, 0U, ( sockaddr* ) address, addressLength, *( WSAOVERLAPPED* ) &CurrentFiber->_asyncOperation, WsaIOCompleted ) != 0 ) {
						var status = Kernel32Api.LastError;

						switch( status ) {
							case SystemErrorCode.ERROR_IO_PENDING: break;
							default: return status;
						}

						BeginTimeout( timeout );

						Suspend();

						var isTimedOut = EndTimeout( timeout );
						var isCancelled = CurrentFiber->IsCancelled;

						if( isTimedOut | isCancelled ) {
							Kernel32Api.CancelIoEx( handle, CurrentFiber->_asyncOperation );
							if( isTimedOut ) return CurrentFiber->_asyncErrorCode = SystemErrorCode.ERROR_TIMEOUT;
							CurrentFiber->_asyncErrorCode = SystemErrorCode.ERROR_CONNECTION_ABORTED;
						}

						if( CurrentFiber->_asyncErrorCode == SystemErrorCode.NO_ERROR ) totalTransmitted = count;

						return CurrentFiber->_asyncErrorCode;
					}

					return SystemErrorCode.NO_ERROR;
				}

				private SystemErrorCode FiberReceiveFrom( TimeSpan timeout, SocketHandle handle, void* address, int addressLength, void* buffer, int count, int& totalTransmitted ) {
					// Console.WriteLine( "{0} count={1}", thismethod, count );

					totalTransmitted = 0;
					CurrentFiber->_asyncOperation.Event = bitcast<HANDLE>( CurrentFiber );

					uint written = 0;
					var wsabuf = new WSABUF { Buffer = buffer, Length = ( uint ) count };
					if( WinsockApi.WSARecvFrom( handle, &wsabuf, 1U, written, 0U, ( sockaddr* ) address, addressLength, *( WSAOVERLAPPED* ) &CurrentFiber->_asyncOperation, WsaIOCompleted ) != 0 ) {
						var status = Kernel32Api.LastError;

						switch( status ) {
							case SystemErrorCode.ERROR_IO_PENDING: break;
							default: return status;
						}

						BeginTimeout( timeout );

						Suspend();

						var isTimedOut = EndTimeout( timeout );
						var isCancelled = CurrentFiber->IsCancelled;

						if( isTimedOut | isCancelled ) {
							Kernel32Api.CancelIoEx( handle, CurrentFiber->_asyncOperation );
							if( isTimedOut ) return CurrentFiber->_asyncErrorCode = SystemErrorCode.ERROR_TIMEOUT;
							CurrentFiber->_asyncErrorCode = SystemErrorCode.ERROR_CONNECTION_ABORTED;
						}

						if( CurrentFiber->_asyncErrorCode == SystemErrorCode.NO_ERROR ) totalTransmitted = count;

						return CurrentFiber->_asyncErrorCode;
					}

					return SystemErrorCode.NO_ERROR;
				}

				// Less than 'count' bytes can be received
				public static SystemErrorCode ReadFile( TimeSpan timeout, HANDLE handle, void* buffer, int count, int& totalReceived ) {
					totalReceived = 0;
					if( !Assert.IsTrue( buffer != null && count > 0 ) ) return SystemErrorCode.NO_ERROR;

					if( Fiber.IsFiberExecuting ) {
						return Fiber.FiberManager.FiberReadFile( timeout, handle, buffer, count, totalReceived );
					}
					else {
						uint readen;
						if( Kernel32Api.ReadFile( handle, buffer, ( uint ) count, readen, nullref ) ) {
							totalReceived = ( int ) readen;
							return SystemErrorCode.NO_ERROR;
						}

						totalReceived = ( int ) readen;
						return Kernel32Api.LastError;
					}
				}

				// Less than 'count' bytes can be transmitted
				public static SystemErrorCode WriteFile( TimeSpan timeout, HANDLE handle, void* buffer, int count, int& totalTransmitted ) {
					totalTransmitted = 0;
					if( !Assert.IsTrue( buffer != null && count > 0 ) ) return SystemErrorCode.NO_ERROR;

					if( Fiber.IsFiberExecuting ) {
						return Fiber.FiberManager.FiberWriteFile( timeout, handle, buffer, count, totalTransmitted );
					}
					else {
						uint written;
						if( Kernel32Api.WriteFile( handle, buffer, ( uint ) count, written, nullref ) ) {
							totalTransmitted = ( int ) written;
							return SystemErrorCode.NO_ERROR;
						}

						totalTransmitted = ( int ) written;
						return Kernel32Api.LastError;
					}
				}

				public static SystemErrorCode SendTo( TimeSpan timeout, SocketHandle handle, void* address, int addressLength, void* buffer, int count, int& totalTransmitted ) {
					totalTransmitted = 0;
					if( !Assert.IsTrue( buffer != null && count > 0 ) ) return SystemErrorCode.NO_ERROR;

					if( Fiber.IsFiberExecuting ) {
						return Fiber.FiberManager.FiberSendTo( timeout, handle, address, addressLength, buffer, count, totalTransmitted );
					}
					else {
						var wsabuf = new WSABUF { Buffer = buffer, Length = ( uint ) count };

						uint written;
						if( WinsockApi.WSASendTo( handle, &wsabuf, 1U, written, 0U, ( sockaddr* ) address, addressLength, nullref, null ) == 0 ) {
							totalTransmitted = ( int ) written;
							return SystemErrorCode.NO_ERROR;
						}

						totalTransmitted = ( int ) written;
						return Kernel32Api.LastError;
					}
				}

				public static SystemErrorCode ReceiveFrom( TimeSpan timeout, SocketHandle handle, void* address, int addressLength, void* buffer, int count, int& totalReceived ) {
					totalReceived = 0;
					if( !Assert.IsTrue( buffer != null && count > 0 ) ) return SystemErrorCode.NO_ERROR;

					if( Fiber.IsFiberExecuting ) {
						return Fiber.FiberManager.FiberReceiveFrom( timeout, handle, address, addressLength, buffer, count, totalReceived );
					}
					else {
						var wsabuf = new WSABUF { Buffer = buffer, Length = ( uint ) count };

						uint readen;
						if( WinsockApi.WSARecvFrom( handle, &wsabuf, 1U, readen, 0U, ( sockaddr* ) address, addressLength, nullref, null ) == 0 ) {
							totalReceived = ( int ) readen;
							return SystemErrorCode.NO_ERROR;
						}

						totalReceived = ( int ) readen;
						return Kernel32Api.LastError;
					}
				}

				private static void OnHandleSignalled( void* context, Boolean32 timerOrWaitFired ) {
					var asyncContext = ( Tuple<Manager*, FiberInfo*, Boolean32>* ) context;
					asyncContext->Item3 = timerOrWaitFired;
					asyncContext->Item1->ReadyAsync( asyncContext->Item2 );
				}

				// [Conditional( ConditionString = "DEBUG" )]
				// private static void ApplyDebugTPFlags( RegisterWaitFlags& flags ) {
				// 	flags = RegisterWaitFlags.WT_EXECUTEONLYONCE;
				// }

				public class FiberWaitHandleEventSink : EventLoop.EventSink {
					private HANDLE _handle;
					private FiberInfo* _fiber;

					public override HANDLE EventHandle { get { return _handle; } }

					public FiberWaitHandleEventSink( EventLoop parent, HANDLE handle, FiberInfo* fiber )
						: base( parent ) {
						_handle = handle;
						_fiber = fiber;
					}

					public override void OnEvent() {
						Fiber.FiberManager.Ready( _fiber );
					}
				}

				public void Wait( HANDLE handle ) {
					if( CurrentEventLoop.HasFreeSinks ) {
						var eventSink = new FiberWaitHandleEventSink( CurrentEventLoop, handle, CurrentFiber );
						eventSink.Register();

						Suspend();

						eventSink.Unregister();
					}
					else {
						var asyncContext = new Tuple<Manager*, FiberInfo*, Boolean32> {
							Item1 = &this,
							Item2 = CurrentFiber
						};

						RegisteredWaitHandle waitHandle;

						var flags = RegisterWaitFlags.WT_EXECUTEONLYONCE | RegisterWaitFlags.WT_EXECUTEINWAITTHREAD | RegisterWaitFlags.WT_EXECUTEINPERSISTENTTHREAD;
						// ApplyDebugTPFlags( flags );

						var registered = Kernel32Api.RegisterWaitForSingleObject( waitHandle, handle, OnHandleSignalled, &asyncContext, Kernel32Api.INFINITE, flags );
						Debug.Assert( registered );

						Suspend();

						var unregistered = Kernel32Api.UnregisterWait( waitHandle );
						Debug.Assert( unregistered );
					}
				}


				private SystemErrorCode FiberConnect( SocketHandle socket, void* address, int addressLength ) {
					var socketAddress = ( sockaddr* ) address;

					using( var eventSelector = bitcast<WSAEVENT>( new AutoResetEventHandle() ) ) {
						CurrentFiber->_asyncOperation = default( OVERLAPPED );
						CurrentFiber->_asyncOperation.Event = eventSelector;

					reconnect:
						if( !WinsockApi.ConnectEx( socket, ( sockaddr* ) address, addressLength, null, 0, nullref, CurrentFiber->_asyncOperation ) ) {
							var error = Kernel32Api.LastError;
							// System.Console.WriteLine( "connectEx: {0}", error );

							switch( error ) {
								case SystemErrorCode.ERROR_IO_PENDING: break;
								case SystemErrorCode.WSAEINVAL: // not bound
									if( socketAddress->Family == ADDRESS_FAMILY.AF_INET ) {
										var bindEndpoint = ( sockaddr_in ) new System.Net.IPv4Endpoint( System.Net.IPv4Address.AllInterfaces, 0 );
										if( WinsockApi.bind( socket, ( sockaddr* ) &bindEndpoint, sizeof( bindEndpoint ) ) != 0 ) return Kernel32Api.LastError;
										goto reconnect;
									}
									else if( socketAddress->Family == ADDRESS_FAMILY.AF_INET6 ) {
										var bindEndpoint = ( sockaddr_in6 ) new System.Net.IPv6Endpoint( System.Net.IPv6Address.AllInterfaces, 0 );
										if( WinsockApi.bind( socket, ( sockaddr* ) &bindEndpoint, sizeof( bindEndpoint ) ) != 0 ) return Kernel32Api.LastError;
										goto reconnect;
									}

									return error;

								default: return error;
							}

							FiberManager.Wait( eventSelector );
						}
						else {
							var contextUpdated = socket.UpdateConnectContext();
							// Console.WriteLine( "UpdateConnectContext: {0}", contextUpdated );
						}

						if( WinsockApi.WSAEventSelect( socket, eventSelector, SocketEvent.FD_CONNECT ) != 0 ) return Kernel32Api.LastError;

						FiberManager.Wait( eventSelector );

						var errorCode = SystemErrorCode.WSAETIMEDOUT;

						WSANETWORKEVENTS events;
						if( WinsockApi.WSAEnumNetworkEvents( socket, eventSelector, events ) != 0 ) return Kernel32Api.LastError;
						if( ( events.NetworkEvents & SocketEvent.FD_CONNECT ) != 0 )
							errorCode = ( SystemErrorCode ) events.ErrorCode[4];

						if( WinsockApi.WSAEventSelect( socket, eventSelector, 0 ) != 0 ) return Kernel32Api.LastError;

						return errorCode;
					}

					// Use built-in TP to delegate blocking task
					// using( new AsyncCompletionRegion() ) {
					// 	var code = WinsockApi.connect( socket, ( sockaddr* ) address, addressLength );
					// 	if( code != 0 ) return Kernel32Api.LastError;
					// 	return 0;
					// }
				}

				public static SystemErrorCode Connect( SocketHandle handle, void* address, int addressLength ) {
					if( Fiber.IsFiberExecuting ) {
						return FiberManager.FiberConnect( handle, address, addressLength );

					}
					else {
						var code = WinsockApi.connect( handle, ( sockaddr* ) address, addressLength );
						if( code != 0 ) return Kernel32Api.LastError;
						return 0;
					}
				}

				/// @{ Tracing

				// [Conditional( ConditionString = TraceConditionString )]
				// private static void TraceIONotify( FiberInfo* fiber, epoll_event& @event ) {
				// 	Trace.Write( "Fiber: Event for fiber [{0}]: {1}", fiber->ID, @event );
				// }

				// [Conditional( ConditionString = TraceConditionString )]
				// private void TraceSocketConnect( SocketHandle socket, SystemError errno ) {
				// 	Trace.Write( "Fiber: [{0:D2}] Socket {1} connect: errno={2}", CurrentFiber->ID, socket.ID, errno );
				// }

				// [Conditional( ConditionString = TraceConditionString )]
				// private void TraceNonBlockingWrite( IOHandle socket, SystemError errno, int written, int count, int bytesSended ) {
				// 	Trace.Write( "Fiber: [{0:D2}] Handle {1} write: errno={2} written={3} count={4} total={5}", CurrentFiber->ID, socket.ID, errno, written, count, bytesSended );
				// }

				// [Conditional( ConditionString = TraceConditionString )]
				// private void TraceNonBlockingRead( IOHandle socket, SystemError errno, int readen, int count, int bytesReceived ) {
				// 	Trace.Write( "Fiber: [{0:D2}] Handle {1} read: errno={2} readen={3} count={4} avail={5} total={6}", CurrentFiber->ID, socket.ID, errno, readen, count, socket.AvailableBytes, bytesReceived );
				// }

				/// @}
			}
		}
	}
}