//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime.CompilerServices;

using Platform;

namespace System {
	public static partial struct Environment {
		public static void DefaultEnvironmentVariable( Utf8String variable, Utf8String value ) {
		}

		public static void SetEnvironmentVariable( Utf8String variable, Utf8String value ) {
			Kernel32Api.SetEnvironmentVariable( ( string ) variable, ( string ) value );
		}

		public static Utf8String GetEnvironmentVariable( Utf8String variable ) {
			var variable16 = ( string ) variable;

		restart:
			var lengthNullTerminated = Kernel32Api.GetEnvironmentVariable( variable16, null, 0U );
			if( lengthNullTerminated == 0 ) return null;

			var value = new string.Builder( lengthNullTerminated - 1 );
			var newLength = Kernel32Api.GetEnvironmentVariable( variable16, value.GetChars(), lengthNullTerminated );

			if( newLength + 1 > lengthNullTerminated ) goto restart;

			return ( Utf8String ) value.Detach();
		}

		public static int ExitCode = 0;
		public const string NewLine = "\r\n";

		public static Utf16String[] CommandLine;

		public static int _implProcessorCount() {
			SYSTEM_INFO info;
			Kernel32Api.GetSystemInfo( &info );

			return ( int ) info.dwNumberOfProcessors;
		}

		private static void _implAbort() {
			Runtime.CRuntime._exit( ExitCode );
		}
	}
}