//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Platform {
	[ExplicitSize( Size = 16 )]
	public partial struct WSABUF {
		[ExplicitOffset( Offset = 0 )]
		public uint Length;
		[ExplicitOffset( Offset = 8 )]
		public void* Buffer;
	}
	[ExplicitSize( Size = 408 )]
	public partial struct WSADATA {
	}
	[ExplicitSize( Size = 32 )]
	public partial struct WSAOVERLAPPED {
	}
	[ExplicitSize( Size = 80 )]
	public partial struct QOS {
	}
	[ExplicitSize( Size = 4 )]
	public partial struct GROUP {
	}
	[ExplicitSize( Size = 56 )]
	public partial struct WSAMSG {
	}
	[ExplicitSize( Size = 16 )]
	public partial struct sockaddr_in {
		[ExplicitOffset( Offset = 0 )]
		public ADDRESS_FAMILY Family;
		[ExplicitOffset( Offset = 2 )]
		public ushort_bigendian Port;
		[ExplicitOffset( Offset = 4 )]
		public uint_bigendian Address;
	}
	[ExplicitSize( Size = 44 )]
	public partial struct WSANETWORKEVENTS {
		[ExplicitOffset( Offset = 0 )]
		public int NetworkEvents;
		[ExplicitOffset( Offset = 4 )]
		public int[10] ErrorCode;
	}
	[ExplicitSize( Size = 372 )]
	public partial struct WSAPROTOCOL_INFOA {
		[ExplicitOffset( Offset = 20 )]
		public Guid ProviderId;
		[ExplicitOffset( Offset = 36 )]
		public uint CatalogEntryId;
		[ExplicitOffset( Offset = 72 )]
		public int Version;
		[ExplicitOffset( Offset = 76 )]
		public int AddressFamily;
		[ExplicitOffset( Offset = 80 )]
		public int MaxSockAddr;
		[ExplicitOffset( Offset = 84 )]
		public int MinSockAddr;
		[ExplicitOffset( Offset = 88 )]
		public int SocketType;
		[ExplicitOffset( Offset = 92 )]
		public int Protocol;
		[ExplicitOffset( Offset = 96 )]
		public int ProtocolMaxOffset;
		[ExplicitOffset( Offset = 100 )]
		public int NetworkByteOrder;
		[ExplicitOffset( Offset = 104 )]
		public int SecurityScheme;
		[ExplicitOffset( Offset = 108 )]
		public uint MessageSize;
		[ExplicitOffset( Offset = 116 )]
		public byte[256] ProtocolName;
	}
	[ExplicitSize( Size = 628 )]
	public partial struct WSAPROTOCOL_INFOW {
		[ExplicitOffset( Offset = 20 )]
		public Guid ProviderId;
		[ExplicitOffset( Offset = 36 )]
		public uint CatalogEntryId;
		[ExplicitOffset( Offset = 72 )]
		public int Version;
		[ExplicitOffset( Offset = 76 )]
		public int AddressFamily;
		[ExplicitOffset( Offset = 80 )]
		public int MaxSockAddr;
		[ExplicitOffset( Offset = 84 )]
		public int MinSockAddr;
		[ExplicitOffset( Offset = 88 )]
		public int SocketType;
		[ExplicitOffset( Offset = 92 )]
		public int Protocol;
		[ExplicitOffset( Offset = 96 )]
		public int ProtocolMaxOffset;
		[ExplicitOffset( Offset = 100 )]
		public int NetworkByteOrder;
		[ExplicitOffset( Offset = 104 )]
		public int SecurityScheme;
		[ExplicitOffset( Offset = 108 )]
		public uint MessageSize;
		[ExplicitOffset( Offset = 116 )]
		public char[256] ProtocolName;
	}
	[ExplicitSize( Size = 14 )]
	public partial struct sockaddr_dl {
	}
	[ExplicitSize( Size = 4 )]
	public partial struct linger {
		[ExplicitOffset( Offset = 0 )]
		public ushort l_onoff;
		[ExplicitOffset( Offset = 2 )]
		public ushort l_linger;
	}
	[Flags]
	public enum SocketEvent : uint {
		None =                          0,
		FD_READ =                       1,
		FD_WRITE =                      2,
		FD_OOB =                        4,
		FD_ACCEPT =                     8,
		FD_CONNECT =                   16,
		FD_CLOSE =                     32,
		FD_QOS =                       64,
		FD_GROUP_QOS =                128,
		FD_ROUTING_INTERFACE_CHANGE = 256,
		FD_ADDRESS_LIST_CHANGE =      512,
	}
	public enum SocketGroup : uint {
		None =                   0,
		SG_UNCONSTRAINED_GROUP = 1,
		SG_CONSTRAINED_GROUP =   2,
	}
	public enum SocketOptionLevel : int {
		SOL_SOCKET =    65535,
		IPPROTO_HOPOPTS =   0,
		IPPROTO_ICMP =      1,
		IPPROTO_IGMP =      2,
		IPPROTO_GGP =       3,
		IPPROTO_IPV4 =      4,
		IPPROTO_ST =        5,
		IPPROTO_TCP =       6,
		IPPROTO_CBT =       7,
		IPPROTO_EGP =       8,
		IPPROTO_IGP =       9,
		IPPROTO_PUP =      12,
		IPPROTO_UDP =      17,
		IPPROTO_IDP =      22,
		IPPROTO_RDP =      27,
		IPPROTO_IPV6 =     41,
		IPPROTO_ROUTING =  43,
		IPPROTO_FRAGMENT = 44,
		IPPROTO_ESP =      50,
		IPPROTO_AH =       51,
		IPPROTO_ICMPV6 =   58,
		IPPROTO_NONE =     59,
		IPPROTO_DSTOPTS =  60,
		IPPROTO_ND =       77,
		IPPROTO_ICLFXBM =  78,
		IPPROTO_PIM =     103,
		IPPROTO_PGM =     113,
		IPPROTO_L2TP =    115,
		IPPROTO_SCTP =    132,
		IPPROTO_RAW =     255,
	}
	public enum SocketOption : int {
		SO_DEBUG =                       1,
		SO_ACCEPTCONN =                  2,
		SO_REUSEADDR =                   4,
		SO_KEEPALIVE =                   8,
		SO_DONTROUTE =                  16,
		SO_BROADCAST =                  32,
		SO_USELOOPBACK =                64,
		SO_LINGER =                    128,
		SO_OOBINLINE =                 256,
		SO_DONTLINGER =               -129,
		SO_EXCLUSIVEADDRUSE =           -5,
		SO_SNDBUF =                   4097,
		SO_RCVBUF =                   4098,
		SO_SNDLOWAT =                 4099,
		SO_RCVLOWAT =                 4100,
		SO_SNDTIMEO =                 4101,
		SO_RCVTIMEO =                 4102,
		SO_ERROR =                    4103,
		SO_TYPE =                     4104,
		SO_GROUP_ID =                 8193,
		SO_GROUP_PRIORITY =           8194,
		SO_MAX_MSG_SIZE =             8195,
		SO_PROTOCOL_INFOA =           8196,
		SO_PROTOCOL_INFOW =           8197,
		PVD_CONFIG =                 12289,
		SO_CONDITIONAL_ACCEPT =      12290,
		SO_MAXDG =                  0x7009,
		SO_UPDATE_CONNECT_CONTEXT = 0x7010,
		SO_MAXPATHDG =              0x700A,
		SO_UPDATE_ACCEPT_CONTEXT =  0x700B,
		SO_CONNECT_TIME =           0x700C,
	}
	public enum SocketOptionTCP : int {
		TCP_NODELAY =        1,
		TCP_EXPEDITED_1122 = 2,
	}
	public enum SocketOptionUDP : int {
		UDP_CHECKSUM_COVERAGE = 20,
		UDP_NOCHECKSUM =         1,
	}
	[Flags]
	public enum SocketCreateFlags : uint {
		None =                             0,
		WSA_FLAG_OVERLAPPED =              1,
		WSA_FLAG_MULTIPOINT_C_ROOT =       2,
		WSA_FLAG_MULTIPOINT_C_LEAF =       4,
		WSA_FLAG_MULTIPOINT_D_ROOT =       8,
		WSA_FLAG_MULTIPOINT_D_LEAF =      16,
		WSA_FLAG_ACCESS_SYSTEM_SECURITY = 64,
		WSA_FLAG_NO_HANDLE_INHERIT =     128,
	}
	public enum SocketShutdownOptions : uint {
		SD_RECEIVE = 0,
		SD_SEND =    1,
		SD_BOTH =    2,
	}
	public enum IPPROTO : uint {
		IPPROTO_HOPOPTS =   0,
		IPPROTO_ICMP =      1,
		IPPROTO_IGMP =      2,
		IPPROTO_GGP =       3,
		IPPROTO_IPV4 =      4,
		IPPROTO_ST =        5,
		IPPROTO_TCP =       6,
		IPPROTO_CBT =       7,
		IPPROTO_EGP =       8,
		IPPROTO_IGP =       9,
		IPPROTO_PUP =      12,
		IPPROTO_UDP =      17,
		IPPROTO_IDP =      22,
		IPPROTO_RDP =      27,
		IPPROTO_IPV6 =     41,
		IPPROTO_ROUTING =  43,
		IPPROTO_FRAGMENT = 44,
		IPPROTO_ESP =      50,
		IPPROTO_AH =       51,
		IPPROTO_ICMPV6 =   58,
		IPPROTO_NONE =     59,
		IPPROTO_DSTOPTS =  60,
		IPPROTO_ND =       77,
		IPPROTO_ICLFXBM =  78,
		IPPROTO_PIM =     103,
		IPPROTO_PGM =     113,
		IPPROTO_L2TP =    115,
		IPPROTO_SCTP =    132,
		IPPROTO_RAW =     255,
	}
	public enum SocketType : uint {
		SOCK_STREAM =    1,
		SOCK_DGRAM =     2,
		SOCK_RAW =       3,
		SOCK_RDM =       4,
		SOCK_SEQPACKET = 5,
	}
	public enum SocketCommand : uint {
		FIONBIO =    2147772030,
		FIONREAD =   1074030207,
		SIOCATMARK = 1074033415,
	}
	public enum ADDRESS_FAMILY : ushort {
		AF_UNSPEC =     0,
		AF_UNIX =       1,
		AF_INET =       2,
		AF_IMPLINK =    3,
		AF_PUP =        4,
		AF_CHAOS =      5,
		AF_NS =         6,
		AF_IPX =        6,
		AF_ISO =        7,
		AF_OSI =        7,
		AF_ECMA =       8,
		AF_DATAKIT =    9,
		AF_CCITT =     10,
		AF_SNA =       11,
		AF_DECnet =    12,
		AF_DLI =       13,
		AF_LAT =       14,
		AF_HYLINK =    15,
		AF_APPLETALK = 16,
		AF_NETBIOS =   17,
		AF_VOICEVIEW = 18,
		AF_FIREFOX =   19,
		AF_UNKNOWN1 =  20,
		AF_BAN =       21,
		AF_ATM =       22,
		AF_INET6 =     23,
		AF_CLUSTER =   24,
		AF_12844 =     25,
		AF_IRDA =      26,
		AF_NETDES =    28,
	}
	public enum SocketOptionIpv6 : int {
		IPV6_HOPOPTS =               1,
		IPV6_HDRINCL =               2,
		IPV6_UNICAST_HOPS =          4,
		IPV6_MULTICAST_IF =          9,
		IPV6_MULTICAST_HOPS =       10,
		IPV6_MULTICAST_LOOP =       11,
		IPV6_ADD_MEMBERSHIP =       12,
		IPV6_JOIN_GROUP =           12,
		IPV6_DROP_MEMBERSHIP =      13,
		IPV6_LEAVE_GROUP =          13,
		IPV6_DONTFRAG =             14,
		IPV6_PKTINFO =              19,
		IPV6_HOPLIMIT =             21,
		IPV6_PROTECTION_LEVEL =     23,
		IPV6_RECVIF =               24,
		IPV6_RECVDSTADDR =          25,
		IPV6_CHECKSUM =             26,
		IPV6_V6ONLY =               27,
		IPV6_IFLIST =               28,
		IPV6_ADD_IFLIST =           29,
		IPV6_DEL_IFLIST =           30,
		IPV6_UNICAST_IF =           31,
		IPV6_RTHDR =                32,
		IPV6_RECVRTHDR =            38,
		IPV6_TCLASS =               39,
		IPV6_RECVTCLASS =           40,
		IPV6_ECN =                  50,
		IPV6_PKTINFO_EX =           51,
		IPV6_WFP_REDIRECT_RECORDS = 60,
		IPV6_WFP_REDIRECT_CONTEXT = 70,
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct tcp_keepalive {
		[ExplicitOffset( Offset = 0 )]
		public uint onoff;
		[ExplicitOffset( Offset = 4 )]
		public uint keepalivetime;
		[ExplicitOffset( Offset = 8 )]
		public uint keepaliveinterval;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct addrinfo {
		[ExplicitOffset( Offset = 0 )]
		public int ai_flags;
		[ExplicitOffset( Offset = 4 )]
		public int ai_family;
		[ExplicitOffset( Offset = 8 )]
		public int ai_socktype;
		[ExplicitOffset( Offset = 12 )]
		public int ai_protocol;
		[ExplicitOffset( Offset = 16 )]
		public ulong ai_addrlen;
		[ExplicitOffset( Offset = 24 )]
		public CString ai_canonname;
		[ExplicitOffset( Offset = 32 )]
		public sockaddr* ai_addr;
		[ExplicitOffset( Offset = 40 )]
		public addrinfo* ai_next;
	}
	public enum SocketOptionIp : uint {
		IP_OPTIONS =                 1,
		IP_HDRINCL =                 2,
		IP_TOS =                     3,
		IP_TTL =                     4,
		IP_MULTICAST_IF =            9,
		IP_MULTICAST_TTL =          10,
		IP_MULTICAST_LOOP =         11,
		IP_ADD_MEMBERSHIP =         12,
		IP_DROP_MEMBERSHIP =        13,
		IP_DONTFRAGMENT =           14,
		IP_ADD_SOURCE_MEMBERSHIP =  15,
		IP_DROP_SOURCE_MEMBERSHIP = 16,
		IP_BLOCK_SOURCE =           17,
		IP_UNBLOCK_SOURCE =         18,
		IP_PKTINFO =                19,
		IP_HOPLIMIT =               21,
		IP_RECEIVE_BROADCAST =      22,
		IP_RECVIF =                 24,
		IP_RECVDSTADDR =            25,
		IP_IFLIST =                 28,
		IP_ADD_IFLIST =             29,
		IP_DEL_IFLIST =             30,
		IP_UNICAST_IF =             31,
		IP_RTHDR =                  32,
		IP_RECVRTHDR =              38,
		IP_TCLASS =                 39,
		IP_RECVTCLASS =             40,
		IP_ORIGINAL_ARRIVAL_IF =    47,
		IP_ECN =                    50,
		IP_PKTINFO_EX =             51,
		IP_WFP_REDIRECT_RECORDS =   60,
		IP_WFP_REDIRECT_CONTEXT =   70,
	}
}