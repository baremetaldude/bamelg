//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace System.Runtime {
	[ExternLibrary]
	public static class CRuntime {
		public extern static double sin( double value );
		[BackendHintKeep]
		[BackendSymbol( Name = "sinf" )]
		public static float sinf( float value ) { return ( float ) sin( value ); }

		public extern static double cos( double value );
		[BackendHintKeep]
		[BackendSymbol( Name = "cosf" )]
		public static float cosf( float value ) { return ( float ) cos( value ); }

		public extern static double exp( double value );
		[BackendHintKeep]
		[BackendSymbol( Name = "expf" )]
		public static float expf( float value ) { return ( float ) exp( value ); }

		[BackendHintKeep]
		[BackendSymbol( Name = "exp2" )]
		private static double exp2( double value ) { return pow( 2, value ); }
		[BackendHintKeep]
		[BackendSymbol( Name = "exp2f" )]
		private static float exp2f( double value ) { return ( float ) exp2( value ); }

		public extern static double pow( double @base, double value );
		[BackendHintKeep]
		[BackendSymbol( Name = "powf" )]
		public static float powf( double @base, float value ) { return ( float ) pow( @base, value ); }

		private extern static double log( double value );
		private extern static double log10( double value );
		[BackendSymbol( Name = "log2" )]
		private static double log2( double value ) { return Math.Log( value ) / Math.Log( 2 ); }

		public extern static double asin( double value );
		public static float asinf( float value ) { return ( float ) asin( value ); }

		public extern static double acos( double value );
		public static float acosf( float value ) { return ( float ) acos( value ); }

		public extern static double floor( double value );
		public extern static float floorf( float value );

		public extern static double ceil( double value );
		public extern static float ceilf( float value );

		public extern static double trunc( double value );
		public extern static float truncf( float value );

		public extern static long llroundf( float value );

		public extern static double atan( double value );
		public static float atanf( float value ) { return ( float ) atan( value ); }

		public extern static double atan2( double y, double x );
		public static float atan2f( float y, float x ) { return ( float ) atan2( y, x ); }

		public extern static void puts( byte* value );
		public extern static void putchar( int value );
		public extern static int getchar();

		public extern static void* malloc( uint size );
		public extern static void* calloc( uint elementsCount, uint elementSize );
		public extern static void* realloc( void* memblock, uint size );
		public extern static void* _expand( void* memblock, uint size );
		public extern static uint _msize( void* memblock );

		public extern static void free( void* memory );
		public extern static int fflush( int descriptor );
		public extern static int setbuf( int descriptor, int size );
		public extern static int fread( void* ptr, int size, int n, int descriptor );
		public extern static int fwrite( void* ptr, int size, int n, int descriptor );

		public extern static void* _aligned_malloc( uintptr size, uintptr alignment );
		public extern static void* _aligned_offset_malloc( uintptr size, uintptr alignment, uintptr offset );
		public extern static void _aligned_free( void* memblock );
		public extern static void* _aligned_realloc( void* memblock, uintptr size, uintptr alignment );

		public extern static void exit( int status );
		public extern static void _exit( int status );
	}
}