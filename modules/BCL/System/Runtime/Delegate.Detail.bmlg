//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Reflection;

namespace System.Runtime {
	public sealed partial class Delegate {
		public new Reflection.Type& GetType() {
			return *bitcast<DelegateType*>( _vfTable );
		}

		private DelegateType& _type {
			get { return *bitcast<DelegateType*>( _vfTable ); }
			set { *bitcast<DelegateType**>( &_vfTable ) = &value; }
		}

		public Delegate( Delegate other ) {
			extra {
				return sizeof( InvokationItem ) * ( uint ) other._itemCount;
			}
			body {
				NoVtable = true;
				_type = other._type;

				Memory.Copy( GetItems(), other.GetItems(), ( uint ) _itemCount * sizeof( *GetItems() ) );

				TargetAddWeakReference();
			}
		}

		private InvokationItem* GetItems() { return this != null ? cast<InvokationItem*>( bitcast<byte*>( this ) + sizeof( thistype ) ) : null; }

		private void TargetAddWeakReference() {
			if( this == null || _itemCount == 0 ) return;

			var buffer = GetItems();
			for( var i = 0; i < _itemCount; ++i ) {
				if( buffer[i].TargetType != null && buffer[i].TargetType->IsRuntimeObject ) bitcast<RuntimeObjectBase>( buffer[i].Target ).AddWeakReference();
			}
		}

		private void TargetReleaseWeakReference() {
			if( this == null || _itemCount == 0 ) return;

			var buffer = GetItems();
			for( var i = 0; i < _itemCount; ++i ) {
				if( buffer[i].TargetType != null && buffer[i].TargetType->IsRuntimeObject ) bitcast<RuntimeObjectBase>( buffer[i].Target ).ReleaseWeakReference();
			}
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void EnsureTargetsAlive() {
			if( this == null || _itemCount == 0 ) return;

			var buffer = GetItems();
			for( var i = 0; i < _itemCount; ++i )
				EnsureTargetAlive( buffer + i );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private static void EnsureTargetAlive( InvokationItem* item ) {
			if( item->TargetType != null && item->TargetType->IsRuntimeObject && bitcast<RuntimeObjectBase>( item->Target )._sharedReferenceCount == 0 ) {
				Console.WriteLine( "Delegate: Object {0} with type '{1}' still remains in delegate after have been destroyed", item->Target, item->TargetType );
				Diagnostics.StackTrace.Print();
			}
		}
	}
}