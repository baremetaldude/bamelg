//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Runtime.X86_32 {
	[Flags]
	public enum X87StatusWord : ushort {
		InvalidOperandException =      1 << 0,
		DenormalizedOperandException = 1 << 1,
		ZeroDivideException =          1 << 2,
		OverflowException =            1 << 3,
		UnderflowException =           1 << 4,
		PrecisionException =           1 << 5,

		StackFault =                   1 << 6,
		ExceptionStatus =              1 << 7,

		ConditionalCode0 =             1 << 8,
		ConditionalCode1 =             1 << 9,
		ConditionalCode2 =            1 << 10,

		TopSt1 =                      1 << 11,
		TopSt2 =                      2 << 11,
		TopSt4 =                      4 << 11,

		ConditionalCode4 =            1 << 14,
		FloatingPointUnitBusy =       1 << 15,
	}

	[Flags]
	public enum X87ControlWord : ushort {
		InvalidOperandException =      1 << 0,
		DenormalizedOperandException = 1 << 1,
		ZeroDivideException =          1 << 2,
		OverflowException =            1 << 3,
		UnderflowException =           1 << 4,
		PrecisionException =           1 << 5,

		StackFault =                   1 << 6,
		ExceptionStatus =              1 << 7,

		// SinglePrecision =              0 << 8,
		ReservedPrecision =            1 << 8,
		DoublePrecision =              2 << 8,
		DoubleExtendedPrecision =      3 << 8,

		// RoundToNearest =              0 << 10,
		RoundDown =                   1 << 10,
		RoundUp =                     2 << 10,
		RoundTowardZero =             3 << 10,

		InfinityBit =                 1 << 12,
	}

	public enum X87RoundingMode {
		RoundToNearest =  0,
		RoundDown =       1,
		RoundUp =         2,
		RoundTowardZero = 3,
	}

	public enum X87InternalPrecision {
		SinglePrecision =         0,
		ReservedPrecision =       1,
		DoublePrecision =         2,
		DoubleExtendedPrecision = 3,
	}

	public enum InterruptVectors {
		IntegerDivideByZeroException =       0,
		DebugException =                     1,
		NonMaskableInterrupt =               2,
		BreakpointException =                3,
		OverflowException =                  4,
		BoundRangeException =                5,
		InvalidOpcodeException =             6,
		DeviceNotAvailableException =        7,
		DoubleFaultException =               8,
		CoprocessorSegmentOverrunException = 9,
		InvalidTSSException =               10,
		SegmentNotPresentException =        11,
		StackException =                    12,
		GeneralProtectionException =        13,
		PageFaultException =                14,
		x87FloatingPointException =         16,
		AlignmentCheckException =           17,
		MachineCheckException =             18,
		SIMDFloatingPointException =        19,
	}

	public enum CR0Bits {
		ProtectionEnabled =  1 << 0,
		MonitorCoprocessor = 1 << 1,
		Emulation =          1 << 2,
		TaskSwitched =       1 << 3,
		ExtensionType =      1 << 4,
		NumericError =       1 << 5,
		WriteProtect =      1 << 16,
		AlignmentMask =     1 << 18,
		NotWritethrough =   1 << 29,
		CacheDisable =      1 << 30,
		Paging =            1 << 31,
	}

	public enum CR4Bits {
		Virtual8086ModeExtensions =                1 << 0,
		ProtectedModeVirtualInterrupts =           1 << 1,
		TimeStampDisable =                         1 << 2,
		DebuggingExtensions =                      1 << 3,
		PageSizeExtensions =                       1 << 4,
		PhysicalAddressExtension =                 1 << 5,
		MachineCheckEnable =                       1 << 6,
		PageGlobalEnable =                         1 << 7,
		PerformanceMonitoringCounterEnable =       1 << 8,
		OperatingSystem_FXSAVE_FXRSTOR_Support =   1 << 9,
		OperatingSystemUnmaskedExceptionSupport = 1 << 10,
	}

	public enum FlagsRegister {
		CarryFlag =                1 << 0,
		ParityFlag =               1 << 2,
		AuxiliaryFlag =            1 << 4,
		ZeroFlag =                 1 << 6,
		SignFlag =                 1 << 7,
		TrapFlag =                 1 << 8,
		InterruptFlag =            1 << 9,
		DirectionFlag =           1 << 10,
		OverflowFlag =            1 << 11,
		NestedTask =              1 << 14,
		ResumeFlag =              1 << 16,
		Virtual8086Mode =         1 << 17,
		AlignmentCheck =          1 << 18,
		VirtualInterruptFlag =    1 << 19,
		VirtualInterruptPending = 1 << 20,
		IDFlag =                  1 << 21,
	}

	public enum SSE4RoundingMode : byte {
		RoundToNearest =   0b00, // RoundHalfToEven(...)
		RoundDown =        0b01, // Floor(...)
		RoundUp =          0b10, // Ceiling(...)
		RoundTowardsZero = 0b11, // Truncate(...)

		UseMXCSRMode =        4,
		Indexact =            8,
	}

	// Assume default rounding mode == nearest
	public static struct LowLevel {
		public static X87ControlWord FpuControlWord {
			get asm {
				X86_32 {
					sub esp, 4

					fnstcw word ptr [esp]
					movzx eax, word ptr [esp]

					add esp, 4
					retn
				}
				X86_64 {
					sub rsp, 4

					fnstcw word ptr [rsp]
					movzx rax, word ptr [rsp]

					add rsp, 4
					retn
				}
				default {
					return 0;
				}
			}
		}

		public static X87RoundingMode RoundingMode { get { return ( X87RoundingMode )( ( FpuControlWord >> 10 ) & 3 ); } }
		public static X87InternalPrecision InternalPrecision { get { return ( X87InternalPrecision )( ( FpuControlWord >> 8 ) & 3 ); } }
	}
}