//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace System.Runtime {
	public partial class Binder {
		public Convert.ConversionResult GetValue( void *object, uint index, bool& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, sbyte& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, byte& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, short& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, ushort& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, int& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, uint& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, long& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, ulong& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, float& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, double& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( &value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( &value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( &value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( &value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( &value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( &value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( &value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( &value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( &value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( &value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( &value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( &value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ):return Convert.TryConvert( &value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( &value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( &value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( &value, column->GetValue<long_littleendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( &value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( &value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( &value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( &value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( &value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( &value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( &value, column->GetValue<double_bigendian>( object ) );
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		public Convert.ConversionResult GetValue( void *object, uint index, StringBuilder value, bool& isNull ) {
			isNull = false;

			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();
			var& realType = column->GetDirectType();
			var& enumType = realType.AsEnum;

			value.Clear();

			if( enumType != nullref ) {
				var holderSize = enumType.InstanceSize;
				var typeRef = new TypedReference { Type = realType };

				if( column->Field != null ) {
					typeRef.Address = cast<byte*>( object ) + column->Field->ByteOffset;
				}
				else if( column->Property != null ) {
					typeRef.Address = stackalloc byte[holderSize];
					column->Property->UnsafeGetValue( object, typeRef.Address );
				}

				value.Append( typeRef );
				return Convert.ConversionResult.OK;
			}

			switch( type ) {
				case typeof( SbcsString ): return Convert.TryConvert( value, column->GetValue<SbcsString>( object ) );
				case typeof( Utf8String ): return Convert.TryConvert( value, column->GetValue<Utf8String>( object ) );
				case typeof( Utf16String ): return Convert.TryConvert( value, column->GetValue<Utf16String>( object ) );
				case typeof( Utf32String ): return Convert.TryConvert( value, column->GetValue<Utf32String>( object ) );

				case typeof( bool ): return Convert.TryConvert( value, column->GetValue<bool>( object ) );
				case typeof( sbyte ): return Convert.TryConvert( value, column->GetValue<sbyte>( object ) );
				case typeof( byte ): return Convert.TryConvert( value, column->GetValue<byte>( object ) );

				case typeof( short_littleendian ): return Convert.TryConvert( value, column->GetValue<short_littleendian>( object ) );
				case typeof( short_bigendian ): return Convert.TryConvert( value, column->GetValue<short_bigendian>( object ) );
				case typeof( ushort_littleendian ): return Convert.TryConvert( value, column->GetValue<ushort_littleendian>( object ) );
				case typeof( ushort_bigendian ): return Convert.TryConvert( value, column->GetValue<ushort_bigendian>( object ) );

				case typeof( int_littleendian ): return Convert.TryConvert( value, column->GetValue<int_littleendian>( object ) );
				case typeof( int_bigendian ): return Convert.TryConvert( value, column->GetValue<int_bigendian>( object ) );
				case typeof( uint_littleendian ): return Convert.TryConvert( value, column->GetValue<uint_littleendian>( object ) );
				case typeof( uint_bigendian ): return Convert.TryConvert( value, column->GetValue<uint_bigendian>( object ) );

				case typeof( long_littleendian ): return Convert.TryConvert( value, column->GetValue<long_littleendian>( object ) );
				case typeof( long_bigendian ): return Convert.TryConvert( value, column->GetValue<long_bigendian>( object ) );
				case typeof( ulong_littleendian ): return Convert.TryConvert( value, column->GetValue<ulong_littleendian>( object ) );
				case typeof( ulong_bigendian ): return Convert.TryConvert( value, column->GetValue<ulong_bigendian>( object ) );

				case typeof( float_littleendian ): return Convert.TryConvert( value, column->GetValue<float_littleendian>( object ) );
				case typeof( float_bigendian ): return Convert.TryConvert( value, column->GetValue<float_bigendian>( object ) );
				case typeof( double_littleendian ): return Convert.TryConvert( value, column->GetValue<double_littleendian>( object ) );
				case typeof( double_bigendian ): return Convert.TryConvert( value, column->GetValue<double_bigendian>( object ) );

				case typeof( byte[] ): { var array = column->GetValue<byte[]>( object ); PrimitiveTypesFormatter.FormatMemoryHexUtf16( value, &array[0], array.Length, true ); } return Convert.ConversionResult.OK; 
			}

			return TrySerializeText( object, type, column, value, isNull );
		}

		public Convert.ConversionResult GetValue( void *object, uint index, BinaryWriter writer ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): writer.Write( column->GetValue<SbcsString>( object ) ); return Convert.ConversionResult.OK;
				case typeof( Utf8String ): writer.Write( column->GetValue<Utf8String>( object ) ); return Convert.ConversionResult.OK;
				case typeof( Utf16String ): writer.Write( column->GetValue<Utf16String>( object ) ); return Convert.ConversionResult.OK;
				case typeof( Utf32String ): writer.Write( column->GetValue<Utf32String>( object ) ); return Convert.ConversionResult.OK;

				case typeof( bool ): writer.Write( column->GetValue<bool>( object ) ); return Convert.ConversionResult.OK;
				case typeof( sbyte ): writer.Write( column->GetValue<sbyte>( object ) ); return Convert.ConversionResult.OK;
				case typeof( byte ): writer.Write( column->GetValue<byte>( object ) ); return Convert.ConversionResult.OK;

				case typeof( short_littleendian ): writer.Write( column->GetValue<short_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( ushort_littleendian ): writer.Write( column->GetValue<ushort_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( short_bigendian ): writer.Write( column->GetValue<short_bigendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( ushort_bigendian ): writer.Write( column->GetValue<ushort_bigendian>( object ) ); return Convert.ConversionResult.OK;

				case typeof( int_littleendian ): writer.Write( column->GetValue<int_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( uint_littleendian ): writer.Write( column->GetValue<uint_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( int_bigendian ): writer.Write( column->GetValue<int_bigendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( uint_bigendian ): writer.Write( column->GetValue<uint_bigendian>( object ) ); return Convert.ConversionResult.OK;

				case typeof( long_littleendian ): writer.Write( column->GetValue<long_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( ulong_littleendian ): writer.Write( column->GetValue<ulong_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( long_bigendian ): writer.Write( column->GetValue<long_bigendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( ulong_bigendian ): writer.Write( column->GetValue<ulong_bigendian>( object ) ); return Convert.ConversionResult.OK;

				case typeof( float_littleendian ): writer.Write( column->GetValue<float_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( double_littleendian ): writer.Write( column->GetValue<double_littleendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( float_bigendian ): writer.Write( column->GetValue<float_bigendian>( object ) ); return Convert.ConversionResult.OK;
				case typeof( double_bigendian ): writer.Write( column->GetValue<double_bigendian>( object ) ); return Convert.ConversionResult.OK;

				case typeof( byte[] ): writer.WriteArray( column->GetValue<byte[]>( object ) ); return Convert.ConversionResult.OK;
			}

			return TrySerializeBinary( object, type, column, writer );
		}

		public Convert.ConversionResult GetValue( void *object, uint index, byte[]& value ) {
			var column = GetMapping( index );
			if( column == null ) return Convert.ConversionResult.MissedMapping;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): { var text = column->GetValue<SbcsString>( object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return Convert.ConversionResult.OK;
				case typeof( Utf8String ): { var text = column->GetValue<Utf8String>( object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return Convert.ConversionResult.OK;
				case typeof( Utf16String ): { var text = column->GetValue<Utf16String>( object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return Convert.ConversionResult.OK;
				case typeof( Utf32String ): { var text = column->GetValue<Utf32String>( object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return Convert.ConversionResult.OK;

				case typeof( byte[] ): value = column->GetValue<byte[]>( object ); return Convert.ConversionResult.OK;
			}

			return Convert.ConversionResult.IncompatibleType;
		}
	}
}