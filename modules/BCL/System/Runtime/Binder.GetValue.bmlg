//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace System.Runtime {
	public partial class Binder {
		public void GetValue( Context& context, uint index, bool& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( bool ): value = column->GetValue<bool>( context.Object ); return;
				case typeof( sbyte ): value = column->GetValue<sbyte>( context.Object ) != 0; return;
				case typeof( byte ): value = column->GetValue<byte>( context.Object ) != 0; return;

				case typeof( SbcsString ): if( !bool.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !bool.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !bool.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !bool.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( short_littleendian ): value = column->GetValue<short_littleendian>( context.Object ) != 0; return;
				case typeof( ushort_littleendian ): value = column->GetValue<ushort_littleendian>( context.Object ) != 0; return;
				case typeof( short_bigendian ): value = column->GetValue<short_bigendian>( context.Object ) != 0; return;
				case typeof( ushort_bigendian ): value = column->GetValue<ushort_bigendian>( context.Object ) != 0; return;

				case typeof( int_littleendian ): value = column->GetValue<int_littleendian>( context.Object ) != 0; return;
				case typeof( uint_littleendian ): value = column->GetValue<uint_littleendian>( context.Object ) != 0; return;
				case typeof( int_bigendian ): value = column->GetValue<int_bigendian>( context.Object ) != 0; return;
				case typeof( uint_bigendian ): value = column->GetValue<uint_bigendian>( context.Object ) != 0; return;

				case typeof( long_littleendian ): value = column->GetValue<long_littleendian>( context.Object ) != 0; return;
				case typeof( ulong_littleendian ): value = column->GetValue<ulong_littleendian>( context.Object ) != 0; return;
				case typeof( long_bigendian ): value = column->GetValue<long_bigendian>( context.Object ) != 0; return;
				case typeof( ulong_bigendian ): value = column->GetValue<ulong_bigendian>( context.Object ) != 0; return;

				case typeof( float_littleendian ): value = column->GetValue<float_littleendian>( context.Object ) != 0; return;
				case typeof( double_littleendian ): value = column->GetValue<double_littleendian>( context.Object ) != 0; return;
				case typeof( float_bigendian ): value = column->GetValue<float_bigendian>( context.Object ) != 0; return;
				case typeof( double_bigendian ): value = column->GetValue<double_bigendian>( context.Object ) != 0; return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, sbyte& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !sbyte.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !sbyte.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !sbyte.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !sbyte.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToInt8( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToInt8( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToInt8( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToInt8( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToInt8( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToInt8( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToInt8( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToInt8( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToInt8( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToInt8( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToInt8( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToInt8( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToInt8( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToInt8( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToInt8( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToInt8( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToInt8( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToInt8( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToInt8( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, byte& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !byte.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !byte.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !byte.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !byte.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToUInt8( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToUInt8( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToUInt8( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToUInt8( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToUInt8( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToUInt8( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToUInt8( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToUInt8( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToUInt8( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToUInt8( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToUInt8( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToUInt8( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToUInt8( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToUInt8( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToUInt8( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToUInt8( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToUInt8( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToUInt8( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToUInt8( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, short& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !short.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !short.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !short.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !short.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToInt16( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToInt16( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToInt16( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToInt16( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToInt16( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToInt16( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToInt16( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToInt16( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToInt16( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToInt16( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToInt16( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToInt16( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToInt16( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToInt16( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToInt16( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToInt16( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToInt16( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToInt16( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToInt16( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, ushort& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !ushort.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !ushort.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !ushort.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !ushort.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToUInt16( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToUInt16( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToUInt16( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToUInt16( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToUInt16( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToUInt16( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToUInt16( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToUInt16( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToUInt16( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToUInt16( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToUInt16( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToUInt16( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToUInt16( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToUInt16( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToUInt16( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToUInt16( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToUInt16( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToUInt16( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToUInt16( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, int& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !int.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !int.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !int.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !int.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToInt32( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToInt32( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToInt32( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToInt32( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToInt32( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToInt32( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToInt32( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToInt32( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToInt32( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToInt32( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToInt32( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToInt32( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToInt32( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToInt32( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToInt32( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToInt32( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToInt32( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToInt32( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToInt32( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, uint& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !uint.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !uint.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !uint.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !uint.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToUInt32( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToUInt32( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToUInt32( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToUInt32( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToUInt32( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToUInt32( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToUInt32( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToUInt32( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToUInt32( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToUInt32( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToUInt32( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToUInt32( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToUInt32( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToUInt32( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToUInt32( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToUInt32( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToUInt32( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToUInt32( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToUInt32( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, long& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !long.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !long.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !long.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !long.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToInt64( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToInt64( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToInt64( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToInt64( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToInt64( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToInt64( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToInt64( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToInt64( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToInt64( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToInt64( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToInt64( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToInt64( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToInt64( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToInt64( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToInt64( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToInt64( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToInt64( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToInt64( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToInt64( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, ulong& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !ulong.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !ulong.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !ulong.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !ulong.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = ToUInt64( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value = ToUInt64( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value = ToUInt64( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value = ToUInt64( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value = ToUInt64( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value = ToUInt64( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value = ToUInt64( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value = ToUInt64( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value = ToUInt64( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value = ToUInt64( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value = ToUInt64( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value = ToUInt64( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value = ToUInt64( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value = ToUInt64( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value = ToUInt64( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value = ToUInt64( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value = ToUInt64( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value = ToUInt64( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value = ToUInt64( column->GetValue<double_bigendian>( context.Object ) ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, double& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): if( !double.TryParse( column->GetValue<SbcsString>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf8String ): if( !double.TryParse( column->GetValue<Utf8String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf16String ): if( !double.TryParse( column->GetValue<Utf16String>( context.Object ), value ) ) goto parseError; return;
				case typeof( Utf32String ): if( !double.TryParse( column->GetValue<Utf32String>( context.Object ), value ) ) goto parseError; return;

				case typeof( bool ): value = column->GetValue<bool>( context.Object ) ? 1.0 : 0.0; return;
				case typeof( sbyte ): value = column->GetValue<sbyte>( context.Object ); return;
				case typeof( byte ): value = column->GetValue<byte>( context.Object ); return;

				case typeof( short_littleendian ): value = column->GetValue<short_littleendian>( context.Object ); return;
				case typeof( ushort_littleendian ): value = column->GetValue<ushort_littleendian>( context.Object ); return;
				case typeof( short_bigendian ): value = column->GetValue<short_bigendian>( context.Object ); return;
				case typeof( ushort_bigendian ): value = column->GetValue<ushort_bigendian>( context.Object ); return;

				case typeof( int_littleendian ): value = column->GetValue<int_littleendian>( context.Object ); return;
				case typeof( uint_littleendian ): value = column->GetValue<uint_littleendian>( context.Object ); return;
				case typeof( int_bigendian ): value = column->GetValue<int_bigendian>( context.Object ); return;
				case typeof( uint_bigendian ): value = column->GetValue<uint_bigendian>( context.Object ); return;

				case typeof( long_littleendian ): value = column->GetValue<long_littleendian>( context.Object ); return;
				case typeof( ulong_littleendian ): value = column->GetValue<ulong_littleendian>( context.Object ); return;
				case typeof( long_bigendian ): value = column->GetValue<long_bigendian>( context.Object ); return;
				case typeof( ulong_bigendian ): value = column->GetValue<ulong_bigendian>( context.Object ); return;

				case typeof( float_littleendian ): value = column->GetValue<float_littleendian>( context.Object ); return;
				case typeof( double_littleendian ): value = column->GetValue<double_littleendian>( context.Object ); return;
				case typeof( float_bigendian ): value = column->GetValue<float_bigendian>( context.Object ); return;
				case typeof( double_bigendian ): value = column->GetValue<double_bigendian>( context.Object ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;

		parseError:
			context.BinderEvent.ParseError( column );
			return;
		}

		public void GetValue( Context& context, uint index, StringBuilder value, bool& isNull ) {
			isNull = false;

			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();
			var& realType = column->GetDirectType();
			var& enumType = realType.AsEnum;

			value.Clear();

			if( enumType != nullref ) {
				var holderSize = enumType.InstanceSize;
				var typeRef = new TypedReference { Type = realType };

				if( column->Field != null ) {
					typeRef.Address = cast<byte*>( context.Object ) + column->Field->ByteOffset;
				}
				else if( column->Property != null ) {
					typeRef.Address = stackalloc byte[holderSize];
					column->Property->UnsafeGetValue( context.Object, typeRef.Address );
				}

				value.Append( typeRef );
				return;
			}

			switch( type ) {
				case typeof( SbcsString ): { var p = column->GetValue<SbcsString>( context.Object ); if( p == null ) isNull = true; value.Append( p ); return; }
				case typeof( Utf8String ): { var p = column->GetValue<Utf8String>( context.Object ); if( p == null ) isNull = true; value.Append( p ); return; }
				case typeof( Utf16String ): { var p = column->GetValue<Utf16String>( context.Object ); if( p == null ) isNull = true; value.Append( p ); return; }
				case typeof( Utf32String ): { var p = column->GetValue<Utf32String>( context.Object ); if( p == null ) isNull = true; value.Append( p ); return; }

				case typeof( bool ): value.Append( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): value.Append( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): value.Append( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): value.Append( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): value.Append( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): value.Append( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): value.Append( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): value.Append( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): value.Append( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): value.Append( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): value.Append( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): value.Append( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): value.Append( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): value.Append( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): value.Append( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): value.Append( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): value.Append( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): value.Append( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): value.Append( column->GetValue<double_bigendian>( context.Object ) ); return;

				case typeof( byte[] ): { var array = column->GetValue<byte[]>( context.Object ); PrimitiveTypesFormatter.FormatMemoryHexUtf16( value, &array[0], array.Length, true ); } return;
			}

			if( TrySerializeText( context, type, column, value, isNull ) ) return;

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;
		}

		public void GetValue( Context& context, uint index, BinaryWriter writer ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): writer.Write( column->GetValue<SbcsString>( context.Object ) ); return;
				case typeof( Utf8String ): writer.Write( column->GetValue<Utf8String>( context.Object ) ); return;
				case typeof( Utf16String ): writer.Write( column->GetValue<Utf16String>( context.Object ) ); return;
				case typeof( Utf32String ): writer.Write( column->GetValue<Utf32String>( context.Object ) ); return;

				case typeof( bool ): writer.Write( column->GetValue<bool>( context.Object ) ); return;
				case typeof( sbyte ): writer.Write( column->GetValue<sbyte>( context.Object ) ); return;
				case typeof( byte ): writer.Write( column->GetValue<byte>( context.Object ) ); return;

				case typeof( short_littleendian ): writer.Write( column->GetValue<short_littleendian>( context.Object ) ); return;
				case typeof( ushort_littleendian ): writer.Write( column->GetValue<ushort_littleendian>( context.Object ) ); return;
				case typeof( short_bigendian ): writer.Write( column->GetValue<short_bigendian>( context.Object ) ); return;
				case typeof( ushort_bigendian ): writer.Write( column->GetValue<ushort_bigendian>( context.Object ) ); return;

				case typeof( int_littleendian ): writer.Write( column->GetValue<int_littleendian>( context.Object ) ); return;
				case typeof( uint_littleendian ): writer.Write( column->GetValue<uint_littleendian>( context.Object ) ); return;
				case typeof( int_bigendian ): writer.Write( column->GetValue<int_bigendian>( context.Object ) ); return;
				case typeof( uint_bigendian ): writer.Write( column->GetValue<uint_bigendian>( context.Object ) ); return;

				case typeof( long_littleendian ): writer.Write( column->GetValue<long_littleendian>( context.Object ) ); return;
				case typeof( ulong_littleendian ): writer.Write( column->GetValue<ulong_littleendian>( context.Object ) ); return;
				case typeof( long_bigendian ): writer.Write( column->GetValue<long_bigendian>( context.Object ) ); return;
				case typeof( ulong_bigendian ): writer.Write( column->GetValue<ulong_bigendian>( context.Object ) ); return;

				case typeof( float_littleendian ): writer.Write( column->GetValue<float_littleendian>( context.Object ) ); return;
				case typeof( double_littleendian ): writer.Write( column->GetValue<double_littleendian>( context.Object ) ); return;
				case typeof( float_bigendian ): writer.Write( column->GetValue<float_bigendian>( context.Object ) ); return;
				case typeof( double_bigendian ): writer.Write( column->GetValue<double_bigendian>( context.Object ) ); return;

				case typeof( byte[] ): writer.WriteArray( column->GetValue<byte[]>( context.Object ) ); return;
			}

			if( TrySerializeBinary( context, type, column, writer ) ) return;

			context.BinderEvent.IncompatibleMapping( column, typeof( writer ) );
			return;
		}

		public void GetValue( Context& context, uint index, byte[]& value ) {
			var column = GetMapping( context, index );
			if( column == null ) return;

			var& type = column->GetType();

			switch( type ) {
				case typeof( SbcsString ): { var text = column->GetValue<SbcsString>( context.Object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return;
				case typeof( Utf8String ): { var text = column->GetValue<Utf8String>( context.Object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return;
				case typeof( Utf16String ): { var text = column->GetValue<Utf16String>( context.Object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return;
				case typeof( Utf32String ): { var text = column->GetValue<Utf32String>( context.Object ); value = PrimitiveTypesParser.ParseByteArray( text.GetChars(), text.Length ); } return;

				case typeof( byte[] ): value = column->GetValue<byte[]>( context.Object ); return;
			}

			context.BinderEvent.IncompatibleMapping( column, typeof( value ) );
			return;
		}
	}
}