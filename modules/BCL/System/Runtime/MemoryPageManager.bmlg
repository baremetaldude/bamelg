//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;

namespace System.Runtime {
	public class MemoryPageManager {
		private MemoryManager _manager = new MemoryManager();
		private bool _extendable;

		public MemoryPageManager() {
			_extendable = true;
		}

		public MemoryPageManager( MemorySegment fixedSegment ) {
			_extendable = false;

			_manager.Extend( fixedSegment );
		}

		~MemoryPageManager() {
			if( !_extendable ) return;

			foreach( var segment in _manager.EnumerateFree() )
				Memory.FreePages( ( void* ) segment.Start, ( uint ) segment.Count / Memory.DefaultPageSize );
		}

		public void* AllocatePages( uint count ) {
			var allocationLength = count * Memory.DefaultPageSize;
			var cached = _manager.Allocate( allocationLength );
			if( cached.Start != null ) return cached.Start;

			if( !_extendable ) return null;

			var reserveBlocks = 1 + ( count - 1 ) / Memory.DefaultPageReserveCount;
			var reserveLength = reserveBlocks * Memory.DefaultPageReserveSize;
			var result = ( byte* ) Memory.AllocatePages( reserveBlocks * Memory.DefaultPageReserveCount );
			if( result == null ) return null;

			_manager.Extend( new MemorySegment( result, reserveLength ) );

			cached = _manager.Allocate( allocationLength );
			return cached.Start;
		}

		public void FreePages( void* ptr, uint count ) {
			var allocationLength = ( uintptr )( count * Memory.DefaultPageSize );
			var block = new MemorySegment( ptr, allocationLength );

			_manager.Deallocate( block );
		}

		public void Trim() {
			if( !_extendable ) return;

			foreach( var segment in _manager.GetFree() ) {
				var start = cast<uintptr>( segment.Start ) & ~cast<uintptr>( Memory.DefaultPageReserveSize - 1 );
				var end = cast<uintptr>( segment.EndExclusive ) & ~cast<uintptr>( Memory.DefaultPageReserveSize - 1 );

				if( start < ( uintptr ) segment.Start ) start += Memory.DefaultPageReserveSize;
				if( start >= end ) continue;

				Memory.FreePages( ( void* ) start, ( uint )( ( end - start ) / Memory.DefaultPageSize ) );
				_manager.Deallocate( new MemorySegment( ( void* ) start, end - start ) );
			}
		}
	}
}