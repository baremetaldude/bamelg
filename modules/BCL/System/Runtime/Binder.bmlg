//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Serialization;

namespace System.Runtime {
	public partial class Binder {
		public Mapping[] Mappings = new[0] Mapping;

		public struct Context {
			public void* Object;
			public Binder Binder;
			public IErrorHandler BinderEvent;

			private Convert.ConversionResult CheckResult( Convert.ConversionResult result, uint index ) {
				switch( result ) {
					case Convert.ConversionResult.MissedMapping: BinderEvent.MissedMapping( index ); break;

					case Convert.ConversionResult.Clamped: BinderEvent.Clamped( index ); break;
					case Convert.ConversionResult.IncompatibleType: BinderEvent.IncompatibleType( 0 ); break;
					case Convert.ConversionResult.IncompatibleValue: BinderEvent.IncompatibleValue( 0 ); break;
					case Convert.ConversionResult.EmptyValue: BinderEvent.EmptyValue( 0 ); break;
				}

				return result;
			}

			public Convert.ConversionResult SetValue( uint index, bool value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, sbyte value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, byte value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, short value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, ushort value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, int value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, uint value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, long value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, ulong value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, float value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, double value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, SbcsString value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, Utf8String value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, CUtf16StringSpan value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, string value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, Utf32String value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, DateTime value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, TimeSpan value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, Guid value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, byte[] value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, BinaryReader value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, ITextSerializable value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }
			public Convert.ConversionResult SetValue( uint index, StringBuilder value ) { return CheckResult( Binder.SetValue( Object, index, value ), index ); }

			public Convert.ConversionResult GetValue( uint index, bool& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, sbyte& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, byte& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, short& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, ushort& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, int& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, uint& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, long& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, ulong& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, float& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, double& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
			public Convert.ConversionResult GetValue( uint index, BinaryWriter writer ) { return CheckResult( Binder.GetValue( Object, index, writer ), index ); }
			public Convert.ConversionResult GetValue( uint index, byte[]& value ) { return CheckResult( Binder.GetValue( Object, index, value ), index ); }
		}

		public interface IErrorHandler {
			void MissedMapping( uint mapping );

			void Clamped( uint mapping );
			void IncompatibleType( uint mapping );
			void IncompatibleValue( uint mapping );
			void EmptyValue( uint mapping );
		}

		public struct BinderListenerSilent : IErrorHandler {
			public static readonly BinderListenerSilent Instance;

			public void MissedMapping( uint mapping ) { }

			public void Clamped( uint mapping ) { }
			public void IncompatibleType( uint mapping ) { }
			public void IncompatibleValue( uint mapping ) { }
			public void EmptyValue( uint mapping ) { }
		}

		public struct BinderListenerConsole : IErrorHandler {
			public static readonly BinderListenerConsole Instance;

			public void MissedMapping( uint mapping ) {
				Console.WriteLine( "Binder[{0}]: Not found", mapping );
			}

			public void Clamped( uint mapping ) {
				Console.WriteLine( "Binder[{0}]: Clamped", mapping );
			}

			public void IncompatibleType( uint mapping ) {
				Console.WriteLine( "Binder[{0}]: Incompatible type", mapping );
			}

			public void IncompatibleValue( uint mapping ) {
				Console.WriteLine( "Binder[{0}]: Incompatible value", mapping );
			}

			public void EmptyValue( uint mapping )  {
				Console.WriteLine( "Binder[{0}]: Empty", mapping );
			}
		}

		public Binder() {
		}

		public Context CreateContext( void* object ) { return new Context { Binder = this, Object = object, BinderEvent = BinderListenerConsole.Instance }; }
		public Context CreateContext( RuntimeObjectBase* object ) { return new Context { Binder = this, Object = bitcast<void*>( *object ), BinderEvent = BinderListenerConsole.Instance }; }

		public Context CreateContext( void* object, IErrorHandler binderEvent ) { return new Context { Binder = this, Object = object, BinderEvent = binderEvent }; }
		public Context CreateContext( RuntimeObjectBase* object, IErrorHandler binderEvent ) { return new Context { Binder = this, Object = bitcast<void*>( *object ), BinderEvent = binderEvent }; }

		public Binder( Mapping[] mappings ) {
			Mappings = mappings;
		}

		public struct Mapping : IFormattable {
			public Mapping( UserType.Field& field ) {
				Field = &field;
				Property = null;
			}

			public Mapping( UserType.Property& property ) {
				Property = &property;
				Field = null;
			}

			public UserType.Field* Field;
			public UserType.Property* Property;

			public SbcsString& Name {
				get {
					if( Field != null ) return Field->Name;
					if( Property != null ) return Property->Name;

					return null;
				}
			}

			public Type& GetType() {
				Type* result = null;

				if( Field != null ) result = &Field->FieldType;
				if( Property != null ) result = &Property->PropertyType;

				if( result != null ) {
					var& @enum = result->AsEnum;
					if( @enum != nullref )
						return @enum.ElementType;

					return *result;
				}

				return nullref;
			}

			public Type& GetDirectType() {
				if( Field != null ) return Field->FieldType;
				if( Property != null ) return Property->PropertyType;

				return nullref;
			}

			public T GetValue<T>( void* object ) {
				if( Field != null ) return Field->GetValue<T>( object );
				if( Property != null ) return Property->GetValue<T>( object );

				return default( T );
			}

			public void SetValue<T>( void* object, T value ) {
				if( Field != null ) { Field->SetValue<T>( object, value ); return; }
				if( Property != null ) { Property->SetValue<T>( object, value ); return; }
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.Append( Name );
				builder.Append( "( " );
				builder.Append( GetType() );
				builder.Append( " )" );
			}
		}

		private Mapping* GetMapping( uint index ) {
			if( index >= Mappings.Length ) return null;
			return &Mappings[index];
		}

		public static sbyte ToInt8( bool value ) { return value ? ( sbyte ) 1 : ( sbyte ) 0; }
		public static short ToInt16( bool value ) { return value ? ( short ) 1 : ( short ) 0; }
		public static int ToInt32( bool value ) { return value ? ( int ) 1 : ( int ) 0; }
		public static long ToInt64( bool value ) { return value ? ( long ) 1 : ( long ) 0; }

		public static byte ToUInt8( bool value ) { return value ? ( byte ) 1 : ( byte ) 0; }
		public static ushort ToUInt16( bool value ) { return value ? ( ushort ) 1 : ( ushort ) 0; }
		public static uint ToUInt32( bool value ) { return value ? ( uint ) 1 : ( uint ) 0; }
		public static ulong ToUInt64( bool value ) { return value ? ( ulong ) 1 : ( ulong ) 0; }

		// ===========================================================================================================================================

		public static sbyte ToInt8( float value ) { return ( sbyte ) Math.Clamp( ( float ) sbyte.MinValue, value, ( float ) sbyte.MaxValue ); }
		public static short ToInt16( float value ) { return ( short ) Math.Clamp( ( float ) short.MinValue, value, ( float ) short.MaxValue ); }
		public static int ToInt32( float value ) { return ( int ) Math.Clamp( ( float ) int.MinValue, value, ( float ) int.MaxValue ); }
		public static long ToInt64( float value ) { return ( long ) Math.Clamp( ( float ) long.MinValue, value, ( float ) long.MaxValue ); }

		public static byte ToUInt8( float value ) { return ( byte ) Math.Clamp( ( float ) byte.MinValue, value, ( float ) byte.MaxValue ); }
		public static ushort ToUInt16( float value ) { return ( ushort ) Math.Clamp( ( float ) ushort.MinValue, value, ( float ) ushort.MaxValue ); }
		public static uint ToUInt32( float value ) { return ( uint ) Math.Clamp( ( float ) uint.MinValue, value, ( float ) uint.MaxValue ); }
		public static ulong ToUInt64( float value ) { return ( ulong ) Math.Clamp( ( float ) ulong.MinValue, value, ( float ) ulong.MaxValue ); }

		// ===========================================================================================================================================

		public static sbyte ToInt8( double value ) { return ( sbyte ) Math.Clamp( ( double ) sbyte.MinValue, value, ( double ) sbyte.MaxValue ); }
		public static short ToInt16( double value ) { return ( short ) Math.Clamp( ( double ) short.MinValue, value, ( double ) short.MaxValue ); }
		public static int ToInt32( double value ) { return ( int ) Math.Clamp( ( double ) int.MinValue, value, ( double ) int.MaxValue ); }
		public static long ToInt64( double value ) { return ( long ) Math.Clamp( ( double ) long.MinValue, value, ( double ) long.MaxValue ); }

		public static byte ToUInt8( double value ) { return ( byte ) Math.Clamp( ( double ) byte.MinValue, value, ( double ) byte.MaxValue ); }
		public static ushort ToUInt16( double value ) { return ( ushort ) Math.Clamp( ( double ) ushort.MinValue, value, ( double ) ushort.MaxValue ); }
		public static uint ToUInt32( double value ) { return ( uint ) Math.Clamp( ( double ) uint.MinValue, value, ( double ) uint.MaxValue ); }
		public static ulong ToUInt64( double value ) { return ( ulong ) Math.Clamp( ( double ) ulong.MinValue, value, ( double ) ulong.MaxValue ); }

		// ===========================================================================================================================================

		public static sbyte ToInt8( byte value ) { return value <= ( byte ) sbyte.MaxValue ? ( sbyte ) value : sbyte.MaxValue; }
		public static sbyte ToInt8( ushort value ) { return value <= ( ushort ) sbyte.MaxValue ? ( sbyte ) value : sbyte.MaxValue; }
		public static sbyte ToInt8( uint value ) { return value <= ( uint ) sbyte.MaxValue ? ( sbyte ) value : sbyte.MaxValue; }
		public static sbyte ToInt8( ulong value ) { return value <= ( ulong ) sbyte.MaxValue ? ( sbyte ) value : sbyte.MaxValue; }

		public static short ToInt16( byte value ) { return value; }
		public static short ToInt16( ushort value ) { return value <= ( ushort ) short.MaxValue ? ( short ) value : short.MaxValue; }
		public static short ToInt16( uint value ) { return value <= ( uint ) short.MaxValue ? ( short ) value : short.MaxValue; }
		public static short ToInt16( ulong value ) { return value <= ( ulong ) short.MaxValue ? ( short ) value : short.MaxValue; }

		public static int ToInt32( byte value ) { return value; }
		public static int ToInt32( ushort value ) { return value; }
		public static int ToInt32( uint value ) { return value <= ( uint ) int.MaxValue ? ( int ) value : int.MaxValue; }
		public static int ToInt32( ulong value ) { return value <= ( ulong ) int.MaxValue ? ( int ) value : int.MaxValue; }

		public static long ToInt64( byte value ) { return value; }
		public static long ToInt64( ushort value ) { return value; }
		public static long ToInt64( uint value ) { return value; }
		public static long ToInt64( ulong value ) { return value <= ( ulong ) long.MaxValue ? ( long ) value : long.MaxValue; }

		// ===========================================================================================================================================

		public static sbyte ToInt8( sbyte value ) { return value; }
		public static sbyte ToInt8( short value ) { return ( sbyte ) Math.Clamp( ( short ) sbyte.MinValue, value, ( short ) sbyte.MaxValue ); }
		public static sbyte ToInt8( int value ) { return ( sbyte ) Math.Clamp( ( int ) sbyte.MinValue, value, ( int ) sbyte.MaxValue ); }
		public static sbyte ToInt8( long value ) { return ( sbyte ) Math.Clamp( ( long ) sbyte.MinValue, value, ( long ) sbyte.MaxValue ); }

		public static short ToInt16( sbyte value ) { return value; }
		public static short ToInt16( short value ) { return value; }
		public static short ToInt16( int value ) { return ( short ) Math.Clamp( ( int ) short.MinValue, value, ( int ) short.MaxValue ); }
		public static short ToInt16( long value ) { return ( short ) Math.Clamp( ( long ) short.MinValue, value, ( long ) short.MaxValue ); }

		public static int ToInt32( sbyte value ) { return value; }
		public static int ToInt32( short value ) { return value; }
		public static int ToInt32( int value ) { return value; }
		public static int ToInt32( long value ) { return ( int ) Math.Clamp( ( long ) int.MinValue, value, ( long ) int.MaxValue ); }

		public static long ToInt64( sbyte value ) { return value; }
		public static long ToInt64( short value ) { return value; }
		public static long ToInt64( int value ) { return value; }
		public static long ToInt64( long value ) { return value; }

		// ===========================================================================================================================================

		public static byte ToUInt8( byte value ) { return value; }
		public static byte ToUInt8( ushort value ) { return value <= byte.MaxValue ? ( byte ) value : byte.MaxValue; }
		public static byte ToUInt8( uint value ) { return value <= byte.MaxValue ? ( byte ) value : byte.MaxValue; }
		public static byte ToUInt8( ulong value ) { return value <= byte.MaxValue ? ( byte ) value : byte.MaxValue; }

		public static ushort ToUInt16( byte value ) { return value; }
		public static ushort ToUInt16( ushort value ) { return value; }
		public static ushort ToUInt16( uint value ) { return value <= ushort.MaxValue ? ( ushort ) value : ushort.MaxValue; }
		public static ushort ToUInt16( ulong value ) { return value <= ushort.MaxValue ? ( ushort ) value : ushort.MaxValue; }

		public static uint ToUInt32( byte value ) { return value; }
		public static uint ToUInt32( ushort value ) { return value; }
		public static uint ToUInt32( uint value ) { return value; }
		public static uint ToUInt32( ulong value ) { return value <= uint.MaxValue ? ( uint ) value : uint.MaxValue; }

		public static ulong ToUInt64( byte value ) { return value; }
		public static ulong ToUInt64( ushort value ) { return value; }
		public static ulong ToUInt64( uint value ) { return value; }
		public static ulong ToUInt64( ulong value ) { return value; }

		// ===========================================================================================================================================

		public static byte ToUInt8( sbyte value ) { return value >= 0 ? ( byte ) value : ( byte ) 0; }
		public static byte ToUInt8( short value ) { return value >= 0 ? value < byte.MaxValue ? ( byte ) value : byte.MaxValue : ( byte ) 0; }
		public static byte ToUInt8( int value ) { return value >= 0 ? value < byte.MaxValue ? ( byte ) value : byte.MaxValue : ( byte ) 0; }
		public static byte ToUInt8( long value ) { return value >= 0 ? value < byte.MaxValue ? ( byte ) value : byte.MaxValue : ( byte ) 0; }

		public static ushort ToUInt16( sbyte value ) { return value >= 0 ? ( ushort ) value : ( ushort ) 0; }
		public static ushort ToUInt16( short value ) { return value >= 0 ? ( ushort ) value : ( ushort ) 0; }
		public static ushort ToUInt16( int value ) { return value >= 0 ? value < ushort.MaxValue ? ( ushort ) value : ushort.MaxValue : ( ushort ) 0; }
		public static ushort ToUInt16( long value ) { return value >= 0 ? value < ushort.MaxValue ? ( ushort ) value : ushort.MaxValue : ( ushort ) 0; }

		public static uint ToUInt32( sbyte value ) { return value >= 0 ? ( uint ) value : ( uint ) 0; }
		public static uint ToUInt32( short value ) { return value >= 0 ? ( uint ) value : ( uint ) 0; }
		public static uint ToUInt32( int value ) { return value >= 0 ? ( uint ) value : ( uint ) 0; }
		public static uint ToUInt32( long value ) { return value >= 0 ? value < uint.MaxValue ? ( uint ) value : uint.MaxValue : ( uint ) 0; }

		public static ulong ToUInt64( sbyte value ) { return value >= 0 ? ( ulong ) value : ( ulong ) 0; }
		public static ulong ToUInt64( short value ) { return value >= 0 ? ( ulong ) value : ( ulong ) 0; }
		public static ulong ToUInt64( int value ) { return value >= 0 ? ( ulong ) value : ( ulong ) 0; }
		public static ulong ToUInt64( long value ) { return value >= 0 ? ( ulong ) value : ( ulong ) 0; }

		private static yield<Mapping> EnumerateMappings( UserType& type, bool publicMembersOnly ) {
			for( var @base = &type; @base != null; @base = &@base->BaseType ) {
				if( *@base == typeof( RuntimeObjectBase ) ) break;

				for( var i = 0U; i < @base->FieldCount; ++i ) {
					var& field = @base->FieldsStart[i];

					if( field.IsStatic ) continue;
					if( publicMembersOnly && field.AccessKind != AccessKind.Public ) continue;
					if( field.IsDefined( typeof( NonSerializableAttribute ) ) ) continue;

					yield return new Mapping( field );
				}

				for( var i = 0U; i < @base->PropertyCount; ++i ) {
					var& property = @base->PropertiesStart[i];

					if( property.IsStatic ) continue;
					if( publicMembersOnly && property.AccessKind != AccessKind.Public ) continue;
					if( property.IsDefined( typeof( NonSerializableAttribute ) ) ) continue;
					if( property.GetMethod == nullref | property.SetMethod == nullref ) continue;

					yield return new Mapping( property );
				}
			}
		}

		public struct MapperIndexed {
			private List<Binder.Mapping> _mapping;
			public readonly Binder Binder = new Binder();

			public MapperIndexed() {
				_mapping = new List<Binder.Mapping>();
			}

			public MapperIndexed( UserType& type, bool publicMembersOnly = false )
				: this( 8 ) {
				Add( type, publicMembersOnly );
				Apply();
			}

			public MapperIndexed( uint capacity ) {
				_mapping = new List<Binder.Mapping>( capacity );
			}

			public void Add( UserType& type, bool publicMembersOnly = false ) {
				foreach( var mapping in EnumerateMappings( type, publicMembersOnly ) )
					_mapping.Add( mapping );
			}

			public void Clear() {
				_mapping.Clear();
			}

			public uint Add( UserType.Field& field ) {
				var result = _mapping.Count;
				_mapping.Add( new Binder.Mapping( field ) );
				return result;
			}

			public uint Add( UserType.Property& property ) {
				var result = _mapping.Count;
				_mapping.Add( new Binder.Mapping( property ) );
				return result;
			}

			public void Apply() {
				Binder.Mappings = _mapping.ToArray();
			}
		}

		public struct MapperSbcs {
			private List<Binder.Mapping> _mapping;
			public readonly Dictionary<SbcsString, uint> IdMapping;
			public readonly Binder Binder = new Binder();

			public MapperSbcs() {
				_mapping = new List<Binder.Mapping>();
				IdMapping = new Dictionary<SbcsString, uint>();
			}

			public MapperSbcs( UserType& type, bool publicMembersOnly = false )
				: this( 8 ) {
				Add( type, publicMembersOnly );
				Apply();
			}

			public MapperSbcs( uint capacity ) {
				_mapping = new List<Binder.Mapping>( capacity );
				IdMapping = new Dictionary<SbcsString, uint>( capacity );
			}

			public uint this[SbcsString name] {
				get { uint result; return IdMapping.TryGetValue( name, result ) ? result : uint.MaxValue; }
			}

			public void Add( UserType& type, bool publicMembersOnly = false ) {
				foreach( var mapping in EnumerateMappings( type, publicMembersOnly ) ) {
					if( mapping.Field != null ) Add( *mapping.Field );
					else if( mapping.Property != null ) Add( *mapping.Property );
				}
			}

			public void Clear() {
				_mapping.Clear();
				IdMapping.Clear();
			}

			public uint Add( UserType.Field& field ) {
				var result = _mapping.Count;
				if( IdMapping.Add( field.Name, _mapping.Count ) || IdMapping.Add( field.ToSbcsString(), _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( SbcsString name, UserType.Field& field ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( UserType.Property& property ) {
				var result = _mapping.Count;
				if( IdMapping.Add( property.Name, _mapping.Count ) || IdMapping.Add( property.ToSbcsString(), _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( SbcsString name, UserType.Property& property ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public void Apply() {
				Binder.Mappings = _mapping.ToArray();
			}
		}

		public struct MapperUtf8 {
			private List<Binder.Mapping> _mapping;
			public readonly Dictionary<Utf8String, uint> IdMapping;
			public readonly Binder Binder = new Binder();

			public MapperUtf8() {
				_mapping = new List<Binder.Mapping>();
				IdMapping = new Dictionary<Utf8String, uint>();
			}

			public MapperUtf8( UserType& type, bool publicMembersOnly = false )
				: this( 8 ) {
				Add( type, publicMembersOnly );
				Apply();
			}

			public MapperUtf8( uint capacity ) {
				_mapping = new List<Binder.Mapping>( capacity );
				IdMapping = new Dictionary<Utf8String, uint>( capacity );
			}

			public uint this[Utf8String name] {
				get { uint result; return IdMapping.TryGetValue( name, result ) ? result : uint.MaxValue; }
			}

			public void Add( UserType& type, bool publicMembersOnly = false ) {
				foreach( var mapping in EnumerateMappings( type, publicMembersOnly ) ) {
					if( mapping.Field != null ) Add( *mapping.Field );
					else if( mapping.Property != null ) Add( *mapping.Property );
				}
			}

			public void Clear() {
				_mapping.Clear();
				IdMapping.Clear();
			}

			public uint Add( UserType.Field& field ) {
				var result = _mapping.Count;
				if( IdMapping.Add( ( Utf8String ) field.Name, _mapping.Count ) || IdMapping.Add( field.ToUtf8String(), _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( Utf8String name, UserType.Field& field ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( UserType.Property& property ) {
				var result = _mapping.Count;
				if( IdMapping.Add( ( Utf8String ) property.Name, _mapping.Count ) || IdMapping.Add( property.ToUtf8String(), _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( Utf8String name, UserType.Property& property ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public void Apply() {
				Binder.Mappings = _mapping.ToArray();
			}
		}

		public struct MapperUtf16 {
			private List<Binder.Mapping> _mapping;
			public readonly Dictionary<string, uint> IdMapping;
			public readonly Binder Binder = new Binder();

			public MapperUtf16() {
				_mapping = new List<Binder.Mapping>();
				IdMapping = new Dictionary<string, uint>();
			}

			public MapperUtf16( UserType& type, bool publicMembersOnly = false )
				: this( 8 ) {
				Add( type, publicMembersOnly );
				Apply();
			}

			public MapperUtf16( uint capacity ) {
				_mapping = new List<Binder.Mapping>( capacity );
				IdMapping = new Dictionary<string, uint>( capacity );
			}

			public uint this[string name] {
				get { uint result; return IdMapping.TryGetValue( name, result ) ? result : uint.MaxValue; }
			}

			public void Add( UserType& type, bool publicMembersOnly = false ) {
				foreach( var mapping in EnumerateMappings( type, publicMembersOnly ) ) {
					if( mapping.Field != null ) Add( *mapping.Field );
					else if( mapping.Property != null ) Add( *mapping.Property );
				}
			}

			public void Clear() {
				_mapping.Clear();
				IdMapping.Clear();
			}

			public uint Add( UserType.Field& field ) {
				var result = _mapping.Count;
				if( IdMapping.Add( ( string ) field.Name, result ) || IdMapping.Add( field.ToString(), result ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( string name, UserType.Field& field ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( UserType.Property& property ) {
				var result = _mapping.Count;
				if( IdMapping.Add( ( string ) property.Name, _mapping.Count ) || IdMapping.Add( property.ToString(), _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( string name, UserType.Property& property ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public void Apply() {
				Binder.Mappings = _mapping.ToArray();
			}
		}

		public struct MapperCUtf16Span {
			private List<Binder.Mapping> _mapping;
			public readonly Dictionary<CUtf16StringSpan, uint> IdMapping;
			public readonly Binder Binder = new Binder();
			public HashSet<string> RetainSet = null;

			public MapperCUtf16Span() {
				_mapping = new List<Binder.Mapping>();
				IdMapping = new Dictionary<CUtf16StringSpan, uint>();
			}

			public MapperCUtf16Span( UserType& type, bool publicMembersOnly = false )
				: this( 8 ) {
				Add( type, publicMembersOnly );
				Apply();
			}

			public MapperCUtf16Span( uint capacity ) {
				_mapping = new List<Binder.Mapping>( capacity );
				IdMapping = new Dictionary<CUtf16StringSpan, uint>( capacity );
			}

			public uint this[CUtf16StringSpan name] {
				get { uint result; return IdMapping.TryGetValue( name, result ) ? result : uint.MaxValue; }
			}

			public void Add( UserType& type, bool publicMembersOnly = false ) {
				foreach( var mapping in EnumerateMappings( type, publicMembersOnly ) ) {
					if( mapping.Field != null ) Add( *mapping.Field );
					else if( mapping.Property != null ) Add( *mapping.Property );
				}
			}

			public void Clear() {
				_mapping.Clear();
				IdMapping.Clear();
			}

			public uint Add( UserType.Field& field ) {
				if( RetainSet == null ) RetainSet = new HashSet<string>();

				var name = ( string ) field.Name;
				RetainSet.Add( name );

				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) || IdMapping.Add( field.ToString(), _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( CUtf16StringSpan name, UserType.Field& field ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( field ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( UserType.Property& property ) {
				if( RetainSet == null ) RetainSet = new HashSet<string>();

				var name = ( string ) property.Name;
				RetainSet.Add( name );

				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) || IdMapping.Add( property.ToString(), _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public uint Add( CUtf16StringSpan name, UserType.Property& property ) {
				var result = _mapping.Count;
				if( IdMapping.Add( name, _mapping.Count ) ) {
					_mapping.Add( new Binder.Mapping( property ) );
					return result;
				}

				return uint.MaxValue;
			}

			public void Apply() {
				Binder.Mappings = _mapping.ToArray();
			}
		}

		private Convert.ConversionResult TryDeserializeText( void* object, Type& type, Mapping* column, TypedReference textValue ) {
			if( !type.IsUserType ) return Convert.ConversionResult.IncompatibleType;

			var& userType = type.AsUserType;
			var& field = *column->Field;
			var& property = *column->Property;
			var holderSize = userType.InstanceSize;

			if( type.IsRuntimeObject ) {
				if( field != nullref ) {
					var fieldAddress = cast<byte*>( object ) + field.ByteOffset;
					return DeserializeText( textValue, fieldAddress, *bitcast<void**>( fieldAddress ), type );
				}
				else if( property != nullref ) {
					void* holder = null;

					var result = DeserializeText( textValue, &holder, holder, type );
					if( result )
						property.UnsafeSetValue( object, &holder );

					type.FreeHolder( &holder );
				}
			}
			else if( userType.QueryInterface( typeof( ITextSerializable ) ) != null ) {
				if( field != nullref ) {
					var fieldAddress = cast<byte*>( object ) + field.ByteOffset;
					return DeserializeText( textValue, fieldAddress, fieldAddress, type );
				}
				else if( property != nullref ) {
					var holder = stackalloc byte[holderSize];
					Memory.Clear( holder, ( uint ) holderSize );

					var result = DeserializeText( textValue, holder, holder, type );
					if( result )
						property.UnsafeSetValue( object, holder );

					type.FreeHolder( holder );
				}
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		private Convert.ConversionResult DeserializeText( TypedReference textValue, void* result, void* target, Type& type ) {
			var serializable = type.QueryInterface<ITextSerializable>( target );
			var @interface = bitcast<InterfaceInstance>( serializable );

			if( @interface.Type != null ) {
				using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
					builder.Value.Append( textValue );

					serializable.Deserialize( result, builder.Value, null );
				}

				return Convert.ConversionResult.OK;
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		private Convert.ConversionResult TryDeserializeBinary( void* object, Type& type, Mapping* column, BinaryReader reader ) {
			if( !type.IsUserType ) return Convert.ConversionResult.IncompatibleType;

			var& userType = type.AsUserType;
			var& field = *column->Field;
			var& property = *column->Property;
			var holderSize = userType.InstanceSize;

			if( type.IsRuntimeObject ) {
				if( field != nullref ) {
					var fieldAddress = cast<byte*>( object ) + field.ByteOffset;
					return DeserializeBinary( reader, fieldAddress, *cast<void**>( fieldAddress ), type );
				}
				else if( property != nullref ) {
					void* holder = null;

					var result = DeserializeBinary( reader, &holder, holder, type );
					if( result )
						property.UnsafeSetValue( object, &holder );

					type.FreeHolder( &holder );

					return result;
				}
			}
			else if( userType.QueryInterface( typeof( IBinarySerializable ) ) != null ) {
				if( field != nullref ) {
					var fieldAddress = cast<byte*>( object ) + field.ByteOffset;
					return DeserializeBinary( reader, fieldAddress, fieldAddress, type );
				}
				else if( property != nullref ) {
					var holder = stackalloc byte[holderSize];
					Memory.Clear( holder, ( uint ) holderSize );

					var result = DeserializeBinary( reader, holder, holder, type );
					if( result )
						property.UnsafeSetValue( object, holder );

					type.FreeHolder( holder );
					return result;
				}
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		private Convert.ConversionResult DeserializeBinary( BinaryReader reader, void* result, void* target, Type& type ) {
			var serializable = type.QueryInterface<IBinarySerializable>( target );
			var @interface = bitcast<InterfaceInstance>( serializable );

			if( @interface.Type != null ) {
				serializable.Deserialize( result, reader, null );

				return Convert.ConversionResult.OK;
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		private Convert.ConversionResult TrySerializeText( void* object, Type& type, Mapping* column, StringBuilder textValue, bool& isNull ) {
			if( !type.IsUserType ) return Convert.ConversionResult.IncompatibleType;

			var& userType = type.AsUserType;
			var& field = *column->Field;
			var& property = *column->Property;
			var holderSize = userType.InstanceSize;

			if( type.IsRuntimeObject ) {
				if( field != nullref ) {
					var holder = *cast<void**>( cast<byte*>( object ) + field.ByteOffset );
					isNull = holder == null;
					return SerializeText( textValue, holder, type );
				}
				else if( property != nullref ) {
					void* holder = null;

					property.UnsafeGetValue( object, &holder );
					isNull = holder == null;
					var result = SerializeText( textValue, holder, type );

					type.FreeHolder( &holder );

					return result;
				}
			}
			else if( userType.QueryInterface( typeof( ITextSerializable ) ) != null ) {
				if( field != nullref ) {
					return SerializeText( textValue, cast<byte*>( object ) + field.ByteOffset, type );
				}
				else if( property != nullref ) {
					var holder = stackalloc byte[holderSize];
					Memory.Clear( holder, ( uint ) holderSize );

					property.UnsafeGetValue( object, holder );
					var result = SerializeText( textValue, holder, type );

					type.FreeHolder( holder );

					return result;
				}
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		private Convert.ConversionResult SerializeText( StringBuilder textValue, void* target, Type& type ) {
			var serializable = type.QueryInterface<ITextSerializable>( target );
			var @interface = bitcast<InterfaceInstance>( serializable );

			if( @interface.Type != null ) {
				serializable.Serialize( textValue, "", null );

				return Convert.ConversionResult.OK;
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		private Convert.ConversionResult TrySerializeBinary( void* object, Type& type, Mapping* column, BinaryWriter writer ) {
			if( !type.IsUserType ) return Convert.ConversionResult.IncompatibleType;

			var& userType = type.AsUserType;
			var& field = *column->Field;
			var& property = *column->Property;
			var holderSize = userType.InstanceSize;

			if( type.IsRuntimeObject ) {
				if( field != nullref ) {
					return SerializeBinary( writer, *cast<void**>( cast<byte*>( object ) + field.ByteOffset ), type );
				}
				else if( property != nullref ) {
					void* holder = null;

					property.UnsafeGetValue( object, &holder );
					var result = SerializeBinary( writer, holder, type );

					type.FreeHolder( &holder );

					return result;
				}
			}
			else if( userType.QueryInterface( typeof( IBinarySerializable ) ) != null ) {
				if( field != nullref ) {
					return SerializeBinary( writer, cast<byte*>( object ) + field.ByteOffset, type );
				}
				else if( property != nullref ) {
					var holder = stackalloc byte[holderSize];
					Memory.Clear( holder, ( uint ) holderSize );

					property.UnsafeGetValue( object, holder );
					var result = SerializeBinary( writer, holder, type );

					type.FreeHolder( holder );

					return result;
				}
			}

			return Convert.ConversionResult.IncompatibleType;
		}

		private Convert.ConversionResult SerializeBinary( BinaryWriter writer, void* target, Type& type ) {
			var serializable = type.QueryInterface<IBinarySerializable>( target );
			var @interface = bitcast<InterfaceInstance>( serializable );

			if( @interface.Type != null ) {
				serializable.Serialize( writer, null );

				return Convert.ConversionResult.OK;
			}

			return Convert.ConversionResult.IncompatibleType;
		}
	}
}