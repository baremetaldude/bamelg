//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Windows x64:
//	CallingConvetions:  http://msdn.microsoft.com/en-us/library/ms235286(VS.80).aspx
//	RegisterUsage: http://msdn.microsoft.com/en-us/library/9z1stfyw(VS.80).aspx
//		Parameters: RCX/XMM0, RDX/XMM1, R8/XMM2, R9/XMM3; Shadow space [rsp+0x08]:[rsp+0x20]
//		Return: RAX ; XMM0/YMM0
//		Volatile: RAX, RCX, RDX, R8, R9, R10, R11
//		NonVolatile: RBX, RBP, RDI, RSI, R12, R13, R14, R15
// Linux x64:
//		Parameters: RDI, RSI, RDX, RCX, R8, R9, XMM0-XMM7; Red zone [rsp-0x80]:[rsp-0x08]
//		Return: RAX, RDX ; XMM0/YMM0
//		Volatile: RAX, RCX, RDX, RDI, RSI, R8, R9, R10, R11, XMM0-XMM15
//		NonVolatile: RBX, RBP, R12, R13, R14, R15

using System.Runtime.CompilerServices;
using System.Runtime.CompilerServices.CpuFeatures;

namespace System.Runtime {
	public static partial class Loader {
		static Loader() {
			// Console.WriteLine( "Environment.CurrentCpuFeatures: {0}", bitcast<X86_32>( Environment.CurrentCpuFeatures ).ToString() );
		}

		private static void DetectPlatform() {
			if( !HasCpuid() ) return;

			var features = X86_32.None;
			intptr eax = 0, ebx = 0, ecx = 0, edx = 0;

			x86_cpuid( eax, ebx, ecx, edx );
			var maxBasicInfoLimit = eax;

			// Intel
			if( maxBasicInfoLimit != 0 & ebx == 1970169159 & edx == 1231384169 & ecx == 1818588270 ) {
				TraceCPU( "Intel" );
				x86_cpuid( ( intptr ) 1, ebx, ecx, edx );

				var typedEcx = bitcast<System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEcx>( ( int ) ecx );
				var typedEdx = bitcast<System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEdx>( ( int ) edx );

				if( ( typedEcx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEcx.SSE3 ) != 0 ) features |= X86_32.SSE3;
				if( ( typedEcx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEcx.SSSE3 ) != 0 ) features |= X86_32.SSSE3;
				if( ( typedEcx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEcx.POPCNT ) != 0 ) features |= X86_32.Popcnt;
				if( ( typedEcx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEcx.CMPXCHG16B ) != 0 ) features |= X86_32.Cmpxchg16b;
				if( ( typedEcx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEcx.SSE4_1 ) != 0 ) features |= X86_32.SSE4_1;
				if( ( typedEcx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEcx.SSE4_2 ) != 0 ) features |= X86_32.SSE4_2;

				if( ( typedEdx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEdx.CMOV ) != 0 ) features |= X86_32.CMov;
				if( ( typedEdx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEdx.MMX ) != 0 ) features |= X86_32.MMX;
				if( ( typedEdx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEdx.SSE ) != 0 ) features |= X86_32.SSE1;
				if( ( typedEdx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEdx.SSE2 ) != 0 ) features |= X86_32.SSE2;
				if( ( typedEdx & System.Runtime.X86_32.Intel.CpuidFunction00000001FeaturesEdx.CMPXCHG8B ) != 0 ) features |= X86_32.Cmpxchg8b;

				if( _isCPUInfoTraced ) {
					Console.WriteLine( "CPUID function 0x00000001:" );
					Console.WriteLine( "ecx: {0}", typedEcx );
					Console.WriteLine( "edx: {0}", typedEdx );
				}
			}
			// AMD
			else if( ebx == 1752462657 & edx == 1769238117 & ecx == 1145913699 ) {
				TraceCPU( "AMD" );

				if( eax != 0 ) {
					x86_cpuid( ( intptr ) 1, ebx, ecx, edx );

					var typedEcx = bitcast<System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx>( ( int ) ecx );
					var typedEdx = bitcast<System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEdx>( ( int ) edx );

					if( ( typedEcx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx.SSE3 ) != 0 ) features |= X86_32.SSE3;
					if( ( typedEcx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx.SSSE3 ) != 0 ) features |= X86_32.SSSE3;
					if( ( typedEcx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx.POPCNT ) != 0 ) features |= X86_32.Popcnt;
					if( ( typedEcx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx.LZCNT ) != 0 ) features |= X86_32.Lzcnt;
					if( ( typedEcx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx.CMPXCHG16B ) != 0 ) features |= X86_32.Cmpxchg16b;
					if( ( typedEcx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx.SSE4_1 ) != 0 ) features |= X86_32.SSE4_1;
					if( ( typedEcx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEcx.SSE4_2 ) != 0 ) features |= X86_32.SSE4_2;

					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEdx.CMOV ) != 0 ) features |= X86_32.CMov;
					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEdx.MMX ) != 0 ) features |= X86_32.MMX;
					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEdx.SSE ) != 0 ) features |= X86_32.SSE1;
					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEdx.SSE2 ) != 0 ) features |= X86_32.SSE2;
					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction00000001FeaturesEdx.CMPXCHG8B ) != 0 ) features |= X86_32.Cmpxchg8b;

					if( _isCPUInfoTraced ) {
						Console.WriteLine( "CPUID function 0x00000001:" );
						Console.WriteLine( "\t" + "ecx: {0}", typedEcx );
						Console.WriteLine( "\t" + "edx: {0}", typedEdx );
					}
				}

				eax = ( int ) 0x80000000;
				x86_cpuid( eax, ebx, ecx, edx );

				if( bitcast<uintptr>( eax ) > 0x80000000 ) {
					x86_cpuid( ( intptr ) 0x80000001, ebx, ecx, edx );

					var typedEcx = bitcast<System.Runtime.X86_32.AMD.CpuidFunction80000001FeaturesEcx>( ( int ) ecx );
					var typedEdx = bitcast<System.Runtime.X86_32.AMD.CpuidFunction80000001FeaturesEdx>( ( int ) edx );

					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction80000001FeaturesEdx.MMXExtensions ) != 0 ) features |= X86_32.AMDMMXEx;
					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction80000001FeaturesEdx._3DNowExtensions ) != 0 ) features |= X86_32.AMD3DNowEx;
					if( ( typedEdx & System.Runtime.X86_32.AMD.CpuidFunction80000001FeaturesEdx._3DNow ) != 0 ) features |= X86_32.AMD3DNow;

					if( _isCPUInfoTraced ) {
						Console.WriteLine( "CPUID function 0x80000001:" );
						Console.WriteLine( "\t" + "ecx: {0}", typedEcx );
						Console.WriteLine( "\t" + "edx: {0}", typedEdx );
					}
				}
			}
			// VIA
			else if( ( ebx == 541149526 & edx == 541149526 & ecx == 541149526 ) || ( ebx == 0x746E6543 & edx == 0x48727561 & ecx == 0x736C7561 ) ) {
				TraceCPU( "VIA" );
			}
			else {
				TraceCPU( "Unknown" );
			}

			Environment.CurrentCpuFeatures = features;
		}

		private static bool _isCPUInfoTraced = false;

		[Conditional( ConditionString = "CPU_TRACE" )]
		private static void TraceCPU( string name ) {
			Console.WriteLine( "{0} CPU detected", name );
			_isCPUInfoTraced = true;
		}

		private static bool HasCpuid() asm {
			X86_32 {
				pushfd
				pop eax
				xor eax, const( System.Runtime.X86_32.FlagsRegister.IDFlag )
				push eax
				popfd

				pushfd
				pop ecx
				sub eax, ecx
				sete al

				retn
			}
			X86_64 {
				mov rax, 1
				retn
			}
			default {
				return false;
			}
		}

		private static void x86_cpuid( intptr& eax, intptr& ebx, intptr& ecx, intptr& edx ) asm {
			X86_32 {
				push ebp
				mov ebp, esp

				push ebx
				push ecx
				push edx

				mov eax, [ebp + 8]
				mov eax, [eax]

				cpuid

				push eax
				push ebx
				push ecx
				push edx

				mov eax, [ebp + 8]
				mov ebx, [ebp + 12]
				mov ecx, [ebp + 16]
				mov edx, [ebp + 20]

				pop dword ptr [edx]
				pop dword ptr [ecx]
				pop dword ptr [ebx]
				pop dword ptr [eax]

				pop edx
				pop ecx
				pop ebx

				pop ebp
				retn
			}
			X86_64 {
				if( Environment.CurrentPlatform == PlatformID.Windows ) {
					push rbx

					mov r10, rcx // r10 - &eax
					mov r11, rdx // r11 - &ebx
					// r8 - &ecx
					// r9 - &edx

					mov rax, [rcx]
					mov rbx, [rdx]
					mov rcx, [r8]
					mov rdx, [r9]
				}
				else {
					//  rdi = &eax, rsi = &rbx, rdx = &ecx, rcx = &edx
					mov r9, rbx
					mov r10, rdx
					mov r11, rcx

					mov rax, [rdi]
					mov rbx, [rsi]
					mov rcx, [r10]
					mov rdx, [r11]
				}

				cpuid

				if( Environment.CurrentPlatform == PlatformID.Windows ) {
					mov [r10], rax
					mov [r11], rbx
					mov [r8], rcx
					mov [r9], rdx

					pop rbx
				}
				else {
					mov [rdi], rax
					mov [rsi], rbx
					mov [r10], rcx
					mov [r11], rdx

					mov rbx, r9
				}

				retn
			}
			default {
				eax = ebx = ecx = edx = 0;
			}
		}

		// @{ call constructors/destructors for static fields. No-op when targets supports global constructors/destructors
		internal extern static void OnLoadAssembly();
		internal extern static void OnUnloadAssembly();
		// @}

		// @{ call constructors/destructors for all fields allocated in TLS
		internal extern static void InitializeTls();
		internal extern static void FinalizeTls();
		// @}

		// @{ call constructors/destructors for all fields allocated in FLS
		internal extern static void InitializeFls();
		internal extern static void FinalizeFls();
		// @}

		// @{ readonly TLS initializer segment for targets without proper implicit TLS support
		internal static uint _tlsSnapshotSize, _tlsSnapshotAlignment;
		internal static void* _tlsSnapshotStart;
		// @}

		// @{ readonly FLS initializer segment
		internal static uint _flsSnapshotSize, _flsSnapshotAlignment;
		internal static void* _flsSnapshotStart;
		// @}

		[ThreadStatic]
		internal static void* FlsSegment;

		// Methods marked with [UnitTest] and [EntryPoint]
		internal extern static void EntryPoint();
	}
}