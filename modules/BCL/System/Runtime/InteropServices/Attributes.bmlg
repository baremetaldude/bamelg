//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Runtime.InteropServices {
	/// Available on Windows platform only. Used to import symbols from *.dll
	[AttributeUsage( Targets = AttributeTargets.Class | AttributeTargets.Struct )]
	public struct DllImportAttribute : Attribute {
		/// Full name (with extension) of library to import
		/// Using improper case for DLL name cause link errors with Platform SDK import libraries
		public SbcsString Image;
	}

	/// Available on Windows platform only.
	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct DllExportAttribute : Attribute {
	}

	/// Used to import symbols from *.obj, *.lib, *.o, *.so, *.dylib
	[AttributeUsage( Targets = AttributeTargets.Class | AttributeTargets.Struct )]
	public struct ExternLibraryAttribute : Attribute {
		public Utf8String Image;
	}

	[AttributeUsage( Targets = AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Functor | AttributeTargets.Operator )]
	public struct CallingConventionAttribute : Attribute {
		[StrictField]
		[RequiredField]
		public CallingConvention Value;
	}

	/// Prevent DCE.
	[AttributeUsage( Targets = AttributeTargets.Method | AttributeTargets.Field )]
	public struct BackendHintKeepAttribute : Attribute {
	}

	/// Similar to '__attribute__((pure))'; 'readonly' in LLVM.
	/// Hint for CSE/DCE to eliminate unnecessary calls.
	/// * Return value calculated by accessing parameters and global memory
	/// * Improper use of this attribute can strip necessary method calls
	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct BackendHintReadOnlyAttribute : Attribute {
	}

	/// Similar to '__attribute__((const))' in GNU C++; 'readnone' in LLVM.
	/// Hint for CSE/DCE to eliminate unnecessary calls.
	/// * Return value calculated by accessing parameters only
	/// * Global memory not accessed ( this allows much aggressive CSE than 'BackendHintReadOnly' )
	///  * It can sometimes be used to fool optimizer and force optimization for particular functions
	/// * Improper use of this attribute can strip necessary method calls
	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct BackendHintReadNoneAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct BackendHintWeakAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Parameter )]
	public struct BackendHintNoCaptureAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Parameter | AttributeTargets.Return )]
	public struct BackendHintNoAliasAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct BackendHintPreloadedAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Parameter )]
	public struct SignExtendAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Parameter )]
	public struct ZeroExtendAttribute : Attribute {
	}

	/// Allows to provide custom symbol name [for linker] instead of full qualified name
	[AttributeUsage( Targets = AttributeTargets.Method | AttributeTargets.Field )]
	public struct BackendSymbolAttribute : Attribute {
		[RequiredField]
		public string Name;
	}

	/// Used to specify non-default section name [for linker] for code and static data
	[AttributeUsage( Targets = AttributeTargets.Method | AttributeTargets.Field )]
	public struct BackendSectionAttribute : Attribute {
		[RequiredField]
		public string Name;
	}

	[AttributeUsage( Targets = AttributeTargets.Parameter )]
	public struct OptionalAttribute : Attribute {
		public void* DefaultValue;
	}
}