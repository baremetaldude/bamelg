//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;

namespace System.Runtime {
	public partial class RuntimeObjectBase {
		private const string TraceDefine = "REFCOUNT_TRACE";

		// When set to true - use atomic operations for reference counting
		public bool IsReferenceCounterAtomic { get { return ( _instanceState & StateFlags.AtomicReferenceCounter ) != 0; } set { _instanceState = ( StateFlags ) BitOperations.MaskSet( _instanceState.Value(), StateFlags.AtomicReferenceCounter.Value(), value ); } }

		private static System.Threading.RecursiveMutex _debugMutex = new System.Threading.RecursiveMutex();
		private static HashSet<void*, PointerHashStartegy<void*>> _activeObjects;
		private static volatile bool _disableTracking = false;

		// @{ this staff lives here to maintain proper load/unload order
		[ThreadStatic]
		internal static CachingStack<StringBuilder> _cachedStringBuilders = new CachingStack<StringBuilder>( () => new StringBuilder() { IsReferenceCounterAtomic = false }, x => x.Clear() );

		[ThreadStatic]
		internal static CachingStack<void*> _cachedMemoryPages = new CachingStack<void*>( () => Memory.AllocatePages( 1 ), null, x => Memory.FreePages( x, 1 ) );
		// @}

		public bool ReferenceEquals( thistype left, thistype right ) {
			return left == right;
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void TrackAllocation() {
			using( _debugMutex.LockRegion() ) {
				if( _disableTracking ) return;

				_disableTracking = true;

				if( _activeObjects == null ) _activeObjects = new HashSet<void*, PointerHashStartegy<void*>>();
				_activeObjects.Add( bitcast<void*>( this ) );

				_disableTracking = false;
			}
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void TrackDeallocation() {
			using( _debugMutex.LockRegion() ) {
				if( _disableTracking ) return;

				if( !_activeObjects.Remove( bitcast<void*>( this ) ) )
					Assert.Fail( "Object already deallocated" );
			}
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void TrackAddReference() {
			TraceAddReference();
		}

		[Conditional( ConditionString = TraceDefine )]
		private void TraceAddReference() {
			Console.Write( "++_sharedReferenceCount for " );
			Console.Write( bitcast<void*>( this ) );
			Console.Write( " ( " );
			Console.Write( GetType().FullQualifiedName );
			Console.WriteLine( " ) " );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void TrackReleaseReference() {
			TraceReleaseReference();
		}

		[Conditional( ConditionString = TraceDefine )]
		private void TraceReleaseReference() {
			Console.Write( "--_sharedReferenceCount for " );
			Console.Write( bitcast<void*>( this ) );
			Console.Write( " ( " );
			Console.Write( GetType().FullQualifiedName );
			Console.WriteLine( " ) " );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void TrackAddWeakReference() {
			TraceAddWeakReference();
		}

		[Conditional( ConditionString = TraceDefine )]
		private void TraceAddWeakReference() {
			Console.Write( "++_weakReferenceCount for " );
			Console.Write( bitcast<void*>( this ) );
			Console.Write( " ( " );
			Console.Write( GetType().FullQualifiedName );
			Console.WriteLine( " ) " );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void TrackReleaseWeakReference() {
			TraceReleaseWeakReference();
		}

		[Conditional( ConditionString = TraceDefine )]
		private void TraceReleaseWeakReference() {
			Console.Write( "--_weakReferenceCount for " );
			Console.Write( bitcast<void*>( this ) );
			Console.Write( " ( " );
			Console.Write( GetType().FullQualifiedName );
			Console.WriteLine( " ) " );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void EnsureObjectAlive() {
			if( _sharedReferenceCount == 0 ) {
				Assert.Fail( "++_sharedReferenceCount for dead object" );
				Assert.Fail( string.Format( "Object type is '{0}'", GetType() ) );
			}
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void EnsureObjectAliveWeak() {
			if( _sharedReferenceCount == 0 && _weakReferenceCount == 0 ) {
				Assert.Fail( "++_weakReferenceCount for dead object" );
				Assert.Fail( string.Format( "Object type is '{0}'", GetType() ) );
			}
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void DumpActiveObjects() {
			if( _activeObjects == null ) return;

			_cachedStringBuilders = null;
			_cachedMemoryPages = null;

			_disableTracking = true;

			_cachedStringBuilders = new CachingStack<StringBuilder>( () => new StringBuilder(), x => x.Clear() );
			_cachedMemoryPages = new CachingStack<void*>( () => Memory.AllocatePages( 1 ), null, x => Memory.FreePages( x, 1 ) );

			foreach( var object in _activeObjects ) {
				var& ptr = *bitcast<RuntimeObjectBase*>( &object );

				Console.Write( "Alive object: " );
				Console.Write( object );
				Console.Write( " of type '" );
				Console.Write( ( Utf8String ) ptr.GetType().FullQualifiedName );
				Console.Write( "' Shared=" );
				Console.Write( ptr._sharedReferenceCount.ToString() );
				Console.Write( " Weak=" );
				Console.Write( ptr._weakReferenceCount.ToString() );

				switch( ptr.GetType() ) {
					case typeof( SbcsString ):
						Console.Write( " Content='" );
						Console.Write( ( Utf8String )( ptr as SbcsString ) );
						Console.Write( "'" );
						break;

					case typeof( Utf8String ):
						Console.Write( " Content='" );
						Console.Write( ( Utf8String ) ptr );
						Console.Write( "'" );
						break;

					case typeof( Utf16String ):
						Console.Write( " Content='" );
						Console.Write( ( Utf16String ) ptr );
						Console.Write( "'" );
						break;

					case typeof( StringBuilder ):
						Console.Write( " Content='" );
						Console.Write( ( StringBuilder ) ptr );
						Console.Write( "'" );
						break;

					case typeof( Utf32String ):
						Console.Write( " Content='" );
						Console.Write( ( Utf32String ) ptr );
						Console.Write( "'" );
						break;
				}

				Console.WriteLine();
			}
		}
	}

	public abstract partial class RuntimeUserObjectBase : RuntimeObjectBase, IDisposable {
	}
}