//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace System.Runtime {
	public static partial struct Memory {
		[Flags]
		public enum PageProperties {
			None = 0,

			Read = 1,
			Write,
			Execute,
			Shared,
		}

		// Allocated 'count' private pages of 'DefaultPageSize' size
		public static void* AllocatePages( int count ) { return AllocatePages( count, PageProperties.Read | PageProperties.Write ); }

		public static void* AllocatePages( int count, PageProperties properties ) {
			if( !Assert.IsTrue( count > 0 ) ) return null;

			var result = _implAllocatePages( count, properties );
			if( result != null ) Valgrind.MallocLikeBlock( result, count * DefaultPageSize, 0, true );
			return result;
		}

		public static void FreePages( void* ptr, int count ) {
			if( ptr == null ) return;
			if( !Assert.IsTrue( count > 0 ) ) return;

			_implFreePages( ptr, count );
			Valgrind.FreeLikeBlock( ptr, 0 );
		}

		public static void ModifyPages( void* ptr, int count, PageProperties properties ) {
			if( !Assert.IsTrue( count > 0 ) ) return;

			_implModifyPages( ptr, count, properties );
		}

		public static void DecommitPages( void* ptr, int count ) {
			if( !Assert.IsTrue( count > 0 ) ) return;

			_implDecommitPages( ptr, count );
		}

		public static void* TryAllocate( uint size ) {
			var result = _implAllocate( size );
			TrackAllocation( result, size );
			return result;
		}

		public static void* TryAllocateAligned( uint size, uint align ) {
			var result = _implAllocateAligned( size, align );
			TrackAlignedAllocation( result, size, align );
			return result;
		}

		public static void* TryAllocateClear( uint size ) {
			var result = _implAllocateClear( size );
			TrackAllocation( result, size );
			return result;
		}

		public static void* TryAllocateAlignedClear( uint size, uint align ) {
			var result = _implAllocateAlignedClear( size, align );
			TrackAlignedAllocation( result, size, align );
			return result;
		}
		
		public static void* Allocate( uint size ) {
			var result = _implAllocate( size );
			TrackAllocation( result, size );
			if( result == null ) BclErrorHandler.OutOfMemoryException( size );
			return result;
		}

		public static void* AllocateAligned( uint size, uint align ) {
			var result = _implAllocateAligned( size, align );
			TrackAlignedAllocation( result, size, align );
			if( result == null ) BclErrorHandler.OutOfMemoryException( size );
			return result;
		}

		public static void* AllocateClear( uint size ) {
			var result = _implAllocateClear( size );
			TrackAllocation( result, size );
			if( result == null ) BclErrorHandler.OutOfMemoryException( size );
			return result;
		}

		public static void* AllocateAlignedClear( uint size, uint align ) {
			var result = _implAllocateAlignedClear( size, align );
			TrackAlignedAllocation( result, size, align );
			if( result == null ) BclErrorHandler.OutOfMemoryException( size );
			return result;
		}

		public static void* Allocate( int size ) {
			if( !Assert.IsTrue( size >= 0 ) ) return null;

			return Allocate( ( uint ) size );
		}

		public static void* AllocateClear( int size ) {
			if( !Assert.IsTrue( size >= 0 ) ) return null;

			return AllocateClear( ( uint ) size );
		}

		public static void Deallocate( void* memory ) {
			_implFree( memory );
			TrackDeallocation( memory );
		}

		public static void DeallocateAligned( void* memory ) {
			_implFreeAligned( memory );
			TrackAlignedDeallocation( memory );
		}

		public static void Fill8( void* memory, byte value, uint length ) {
			if( memory == null ) return;

			var ptr = bitcast<byte*>( memory );

			for( var i = 0U; i < length; ++i )
				ptr[i] = value;
		}

		public static void Fill16( void* memory, ushort value, uint length ) {
			if( memory == null ) return;

			var ptr = bitcast<ushort*>( memory );

			for( var i = 0U; i < length; ++i )
				ptr[i] = value;
		}

		public static void Fill32( void* memory, uint value, uint length ) {
			if( memory == null ) return;

			var ptr = bitcast<uint*>( memory );

			for( var i = 0U; i < length; ++i )
				ptr[i] = value;
		}

		public static void Fill64( void* memory, ulong value, uint length ) {
			if( memory == null ) return;

			var ptr = bitcast<ulong*>( memory );

			for( var i = 0U; i < length; ++i )
				ptr[i] = value;
		}

		public static bool Compare8( void* memory, byte value, int length ) {
			if( memory == null ) return false;

			var ptr = bitcast<byte*>( memory );

			for( int i = 0; i < length; ++i )
				if( ptr[i] != value )
					return false;

			return true;
		}

		public static bool Compare16( void* memory, ushort value, int length ) {
			if( memory == null ) return false;

			var ptr = bitcast<ushort*>( memory );

			for( int i = 0; i < length; ++i )
				if( ptr[i] != value )
					return false;

			return true;
		}

		public static bool Compare32( void* memory, uint value, int length ) {
			if( memory == null ) return false;

			var ptr = bitcast<uint*>( memory );

			for( int i = 0; i < length; ++i )
				if( ptr[i] != value )
					return false;

			return true;
		}

		public static bool Compare64( void* memory, ulong value, int length ) {
			if( memory == null ) return false;

			var ptr = bitcast<ulong*>( memory );

			for( int i = 0; i < length; ++i )
				if( ptr[i] != value )
					return false;

			return true;
		}

		public static bool ComparePtr( void* memory, intptr value, int length ) {
			if( memory == null ) return false;

			var ptr = bitcast<intptr*>( memory );

			for( int i = 0; i < length; ++i )
				if( ptr[i] != value )
					return false;

			return true;
		}

		public static bool Compare( void* memory1, void* memory2, int length ) {
			if( memory1 == memory2 ) return true;
			if( memory1 == null ^ memory2 == null ) return false;

			return NativeMethods.memcmp( memory1, memory2, ( uint ) length ) == 0;
		}

		public static uint GetStride( uint size, uint alignment ) {
			if( !Assert.Verify( BitOperations.IsPowerOf2( alignment ) ) ) return size;

			var alignmentMask = alignment - 1;
			return ( size + alignmentMask ) & ~alignmentMask;
		}

		// Padding between 2 elements of fixed/dynamic array of some aligned type. Needed to make next element be aligned
		public static uint GetTailPadding( uint size, uint alignment ) {
			if( !Assert.Verify( BitOperations.IsPowerOf2( alignment ) ) ) return 0;

			return ( alignment - 1 ) & -size;
		}

		public static uint GetTailPadding( void* ptr, uint alignment ) {
			if( !Assert.Verify( BitOperations.IsPowerOf2( alignment ) ) ) return 0;

			return ( alignment - 1 ) & -cast<uint>( ptr );
		}

		/// \return pointer value >= 'value' aligned on 'alignment' boundary
		public static void* AlignPointer( void* value, uint alignment ) {
			if( alignment <= 1 ) return value;
			if( !Assert.Verify( BitOperations.IsPowerOf2( alignment ) ) ) return value;

			var alignmentMask = alignment - 1;
			return cast<byte*>( ( cast<uintptr>( value ) + alignmentMask ) & ~alignmentMask );
		}

		public static void CheckAlignment( void* ptr, int alignment, [In] CallerContext& callercontext = nullref ) {
			if( alignment <= 1 ) return;
			if( !Assert.Verify( BitOperations.IsPowerOf2( alignment ) ) ) return;

			var value = bitcast<intptr>( ptr );
			if( ( value & ( alignment - 1 ) ) != 0 )
				Console.WriteLine( "Expected alignment '{0}' but was '{1}' at row {2}: {3}", alignment, 1 << BitOperations.CountTrailingZeros( value ), callercontext.Row, callercontext.Expression );
		}

		[ForceInline]
		public static void Copy<T>( T* destination, T* source, uintptr length ) { memcpy( destination, source, sizeof( T ) * length, false ); }

		[ForceInline]
		public static void Copy( void* destination, void* source, uintptr length ) { memcpy( destination, source, length, false ); }

		[ForceInline]
		public static void Move( void* destination, void* source, uintptr length ) { memmove( destination, source, length, false ); }

		[ForceInline]
		public static void Clear( void* destination, uintptr length ) { memset( destination, ( byte ) 0, length, false ); }

		[ForceInline]
		public static void Fill( void* destination, byte value, uintptr length ) { memset( destination, value, length, false ); }

		public enum PrefetchAccessType : uint {
			Read,
			Write,
		}

		public enum PrefetchLocality : uint {
			NonTemporal,
			Low,
			Medium,
			High,
		}

		public enum PrefetchCacheType : uint {
			Instruction,
			Data,
		}

		/// http://llvm.org/docs/LangRef.html#int_prefetch
		/// \param start - is the address to be prefetched
		internal extern static void Prefetch( void* start, [EvaluateConstant] [StrictField] PrefetchAccessType accessType, [EvaluateConstant] [StrictField] PrefetchLocality locality, [EvaluateConstant] [StrictField] PrefetchCacheType cacheType );

		/// https://llvm.org/docs/LangRef.html#int-memcpy
		internal extern static void memcpy( void* destination, void* source, uintptr length, [EvaluateConstant] bool isVolatile );

		/// https://llvm.org/docs/LangRef.html#llvm-memmove-intrinsic
		internal extern static void memmove( void* destination, void* source, uintptr length, [EvaluateConstant] bool isVolatile );

		/// https://llvm.org/docs/LangRef.html#llvm-memset-intrinsics
		internal extern static void memset( void* destination, byte value, uintptr length, [EvaluateConstant] bool isVolatile );

		// @{ Support for LLVM atomics
		/// http://llvm.org/docs/LangRef.html#i_fence
		public extern static void Fence( [EvaluateConstant] [StrictField] FenceOrdering ordering = FenceOrdering.SequentiallyConsistent, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );

		public enum FenceOrdering : byte {
			Acquire,
			Release,
			AcquireRelease,
			SequentiallyConsistent,
		}

		// Values used with 'atomic' keyword
		// See	http://llvm.org/docs/Atomics.html
		//		http://gcc.gnu.org/wiki/Atomic/GCCMM/Optimizations
		//		http://gcc.gnu.org/wiki/Atomic/GCCMM/Optimizations/Details
		// Note:
		//		'Release'/'Acquire'/'AcquireRelease' operations ONLY guarantee synchronization directly between 2 threads
		//		'SequentiallyConsistent' enforces a system wide consistency between ALL threads while ( see http://gcc.gnu.org/wiki/Atomic/GCCMM/Optimizations#SEQ_CST )
		public enum AtomicOrdering : byte {
			NotAtomic,              // Default mode for C++ shared variables. see http://llvm.org/docs/Atomics.html#o_notatomic
			Unordered,              // Default mode for Java shared variables. see http://llvm.org/docs/Atomics.html#o_unordered
			Relaxed,                // Corresponds to 'memory_order_relaxed'. see http://llvm.org/docs/Atomics.html#o_monotonic
			Acquire,                // Corresponds to 'memory_order_acquire' and 'memory_order_consume'. see http://llvm.org/docs/Atomics.html#o_acquire
			Release,                // Corresponds to 'memory_order_release'. see http://llvm.org/docs/Atomics.html#o_release
			AcquireRelease,         // Corresponds to 'memory_order_acq_rel'. see http://llvm.org/docs/Atomics.html#o_acqrel
			SequentiallyConsistent, // Default mode for Java volatile fields. Corresponds to 'memory_order_seq_cst'. see http://llvm.org/docs/Atomics.html#o_seqcst
		}

		// Values used with 'atomic' keyword
		public enum SynchronizationScope : byte {
			SingleThread,
			CrossThread,
		}

		// @}

		// @{ Support for LLVM address spaces
		public enum LlvmAddressSpace : uint {
			Default =  0,

			X86_GS = 256,
			X86_FS = 257,
		}

		// @{ advanced load operations
		public extern static byte LoadUInt8( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static ushort LoadUInt16( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static uint LoadUInt32( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static ulong LoadUInt64( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static LittleEndianUInt128 LoadUInt128( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );

		public extern static void* LoadPointer( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		// @}

		// @{ advanced store operations
		public extern static void StoreUInt8( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, byte value, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static void StoreUInt16( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, ushort value, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static void StoreUInt32( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, uint value, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static void StoreUInt64( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, ulong value, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		public extern static void StoreUInt128( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, LittleEndianUInt128 value, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );

		public extern static void StorePointer( [EvaluateConstant] LlvmAddressSpace addressSpace, uintptr offset, void* value, [EvaluateConstant] [StrictField] AtomicOrdering ordering = AtomicOrdering.NotAtomic, [EvaluateConstant] [StrictField] SynchronizationScope scope = SynchronizationScope.CrossThread );
		// @}
		// @}

		public static void PerformXor( void* destination, void* data1, void* data2, uint count ) {
			var dst = ( byte* ) destination;
			var p1 = ( byte* ) data1;
			var p2 = ( byte* ) data2;

			for( var i = 0U; i < count; ++i )
				dst[i] = p1[i] ^ p2[i];
		}

		public static void PerformAnd( void* destination, void* data1, void* data2, uint count ) {
			var dst = ( byte* ) destination;
			var p1 = ( byte* ) data1;
			var p2 = ( byte* ) data2;

			for( var i = 0U; i < count; ++i )
				dst[i] = p1[i] & p2[i];
		}

		public static void PerformOr( void* destination, void* data1, void* data2, uint count ) {
			var dst = ( byte* ) destination;
			var p1 = ( byte* ) data1;
			var p2 = ( byte* ) data2;

			for( var i = 0U; i < count; ++i )
				dst[i] = p1[i] | p2[i];
		}

		public static void PerformAdd( byte* destination, byte* data1, byte* data2, uint count ) {
			for( var i = 0U; i < count; ++i )
				destination[i] = data1[i] + data2[i];
		}

		public static void PerformSub( byte* destination, byte* data1, byte* data2, uint count ) {
			for( var i = 0U; i < count; ++i )
				destination[i] = data1[i] - data2[i];
		}

		public static void PerformBswap2( void* destination, void* data, uint count ) {
			var dest = ( ushort_littleendian* ) destination;
			var src = ( ushort_bigendian* ) data;

			for( var i = 0U; i < count; ++i )
				*dest++ = *src++;
		}

		public static void PerformBswap2( void* destination, uint count ) {
			var dest = ( ushort_littleendian* ) destination;
			var src = ( ushort_bigendian* ) destination;

			for( var i = 0U; i < count; ++i )
				*dest++ = *src++;
		}

		public static void PerformBswap4( void* destination, void* data, uint count ) {
			var dest = ( uint_littleendian* ) destination;
			var src = ( uint_bigendian* ) data;

			for( var i = 0U; i < count; ++i )
				*dest++ = *src++;
		}

		public static void PerformBswap4( void* destination, uint count ) {
			var dest = ( uint_littleendian* ) destination;
			var src = ( uint_bigendian* ) destination;

			for( var i = 0U; i < count; ++i )
				*dest++ = *src++;
		}

		public static void PerformBswap8( void* destination, void* data, uint count ) {
			var dest = ( ulong_littleendian* ) destination;
			var src = ( ulong_bigendian* ) data;

			for( var i = 0U; i < count; ++i )
				*dest++ = *src++;
		}

		public static void PerformBswap8( void* destination, uint count ) {
			var dest = ( ulong_littleendian* ) destination;
			var src = ( ulong_bigendian* ) destination;

			for( var i = 0U; i < count; ++i )
				*dest++ = *src++;
		}

		public static bool IsCleared( void* source, uint count ) {
			var ptr = ( byte* ) source;
			
			while( count-- != 0 ) {
				if( *ptr++ != 0 )
					return false;
			}

			return true;
		}
		
		public functor void MemoryAction( void* object );

		public static void PerformFunctorOnStructArray( void* arrayStart, int elementSize, int elementsCount, MemoryAction @functor ) {
			if( @functor == null ) return;
			var arrayStartPtr = ( byte* ) arrayStart;

			while( elementsCount-- > 0 ) {
				@functor( arrayStartPtr );

				arrayStartPtr += elementSize;
			}
		}

		public static void PerformFunctorOnClassArray( void* arrayStart, int elementsCount, MemoryAction @functor ) {
			if( @functor == null ) return;
			var arrayStartPtr = bitcast<void**>( arrayStart );

			while( --elementsCount >= 0 ) {
				if( *arrayStartPtr != null )
					@functor( *arrayStartPtr );

				++arrayStartPtr;
			}
		}
	}
}