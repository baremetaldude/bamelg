//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;

namespace System.Runtime {
	public class MemoryManager {
		private TrackablePriorityQueue<MemorySegment> Free = new TrackablePriorityQueue<MemorySegment>( ( x, y ) => y.Count.CompareTo( x.Count ) ) {
			FindRanker = ( x, y ) => {
				var lengthCheck = x.Count.CompareTo( y.Count );
				if( lengthCheck < 0 ) return -1;
				if( lengthCheck == 0 ) return ( ( uintptr ) x.Start ).CompareTo( ( uintptr ) y.Start );
				return 1;
			}
		};

		public TrackablePriorityQueue<MemorySegment>.Enumerator EnumerateFree() { return Free.GetEnumerator(); }
		public MemorySegment[] GetFree() { return Free.ToArray(); }

		private Dictionary<intptr, int> _merger = new Dictionary<intptr, int>();

		private HashSet<MemorySegment> _allocated;

		[Conditional( ConditionString = "DEBUG" )]
		private void DebugInitialize() {
			_allocated = new HashSet<MemorySegment>();
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void DebugFinalize() {
			if( _allocated.Count != 0 )
				Assert.Fail( string.Format( "MemoryManager: {0} blocks allocated", _allocated.Count ) );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void DebugAllocate( MemorySegment segment ) {
			if( !_allocated.Add( segment ) )
				Assert.Fail( string.Format( "MemoryManager: block {0} already allocated", segment ) );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void DebugDeallocate( MemorySegment segment ) {
			if( !_allocated.Remove( segment ) )
				Assert.Fail( string.Format( "MemoryManager: block {0} not allocated", segment ) );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void DebugExtend( MemorySegment segment ) {
			foreach( var allocated in _allocated )
				if( segment.IsOverlapping( allocated ) )
					Assert.Fail( string.Format( "MemoryManager: block {0} overlaps with allocated", segment ) );

			foreach( var free in Free )
				if( segment.IsOverlapping( new MemorySegment { Start = ( void* ) free.Start, Count = ( uint ) free.Count } ) )
					Assert.Fail( string.Format( "MemoryManager: block {0} overlaps with free", segment ) );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void DebugCheckFreeIndex( int findIndex ) {
			Debug.Assert( !_merger.ContainsValue( findIndex ) );
			Debug.Assert( !_merger.ContainsValue( findIndex ) );
		}

		public MemoryManager() {
			DebugInitialize();
		}

		public MemorySegment Allocate( int length ) {
			Debug.Assert( length > 0 );

			var findIndex = Free.Find( new MemorySegment { Count = ( uint ) length } );
			if( findIndex == -1 ) return default( MemorySegment );

			var freeBlock = Free.Remove( findIndex );
			int leftFreeIndex, rightFreeIndex;
			if( _merger.TryGetValue( ( intptr ) freeBlock.Start, leftFreeIndex ) ) {
				Debug.Assert( leftFreeIndex == findIndex );
				_merger.Remove( ( intptr ) freeBlock.Start );
			}

			if( _merger.TryGetValue( ( intptr ) freeBlock.EndExclusive, rightFreeIndex ) ) {
				Debug.Assert( rightFreeIndex == findIndex );
				_merger.Remove( ( intptr ) freeBlock.EndExclusive );
			}

			DebugCheckFreeIndex( findIndex );

			if( freeBlock.Count > length ) {
				var segment = new MemorySegment { Start = ( byte* ) freeBlock.Start + length, Count = freeBlock.Count - length };
				var tracking = Free.Enqueue( segment );

				_merger.Add( ( intptr ) segment.Start, tracking );
				_merger.Add( ( intptr ) segment.EndExclusive, tracking );
			}

			var result = new MemorySegment { Start = ( void* ) freeBlock.Start, Count = ( uint ) length };
			DebugAllocate( result );

			return result;
		}

		public void Extend( MemorySegment allocation ) {
			if( allocation.Start == null ) return;
			if( allocation.Count == 0 ) return;

			DebugExtend( allocation );

			NewMemorySegment( allocation );
		}

		public void Deallocate( MemorySegment allocation ) {
			if( allocation.Start == null ) return;
			if( allocation.Count == 0 ) return;

			DebugDeallocate( allocation );

			NewMemorySegment( allocation );
		}

		private void NewMemorySegment( MemorySegment allocation ) {
			var startIndex = ( intptr ) allocation.Start;
			var endIndexExclusive = ( intptr )( startIndex + allocation.Count );

			int leftFreeIndex, rightFreeIndex;
			if( !_merger.TryGetValue( startIndex, leftFreeIndex ) )
				leftFreeIndex = -1;

			if( !_merger.TryGetValue( endIndexExclusive, rightFreeIndex ) )
				rightFreeIndex = -1;

			MemorySegment segment;
			if( leftFreeIndex != -1 && rightFreeIndex != -1 ) {
				var left = Free.Remove( leftFreeIndex );
				var right = Free.Remove( rightFreeIndex );

				_merger.Remove( ( intptr ) left.Start );
				_merger.Remove( ( intptr ) left.EndExclusive );

				_merger.Remove( ( intptr ) right.Start );
				_merger.Remove( ( intptr ) right.EndExclusive );

				segment = new MemorySegment { Start = left.Start, Count = left.Count + allocation.Count + right.Count };
			}
			else if( leftFreeIndex != -1 ) {
				var left = Free.Remove( leftFreeIndex );

				_merger.Remove( ( intptr ) left.Start );
				_merger.Remove( ( intptr ) left.EndExclusive );

				segment = new MemorySegment { Start = left.Start, Count = left.Count + allocation.Count };
			}
			else if( rightFreeIndex != -1 ) {
				var right = Free.Remove( rightFreeIndex );

				_merger.Remove( ( intptr ) right.Start );
				_merger.Remove( ( intptr ) right.EndExclusive );

				segment = new MemorySegment { Start = ( void* ) startIndex, Count = allocation.Count + right.Count };
			}
			else {
				segment = new MemorySegment { Start = ( void* ) startIndex, Count = allocation.Count };
			}

			var tracking = Free.Enqueue( segment );

			_merger.Add( ( intptr ) segment.Start, tracking );
			_merger.Add( ( intptr ) segment.EndExclusive, tracking );
		}

		public int FreeBlockCount { get { return Free.Count; } }
	}
}