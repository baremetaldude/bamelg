//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace System.Runtime {
	// Base class for delegates, dynamic arrays and RuntimeUserObjectBase
	// Contains no virtual methods
	public abstract partial class RuntimeObjectBase {
		static ~RuntimeObjectBase() {
			DumpActiveObjects();
		}

		[Flags]
		internal enum StateFlags {
			None,

			AtomicReferenceCounter,
			Disposed,
			Constant,
			NoVtable,
			AlignedAllocation,
			Destroying,
			DebugDestroying,
		}

		// pointer to vftable for classes
		// pointer to type for dynamic arrays, delegates
		public void** _vfTable;
		internal StateFlags _instanceState;

		internal int _sharedReferenceCount;
		internal int _weakReferenceCount;

		public Reflection.Type& GetType() {
			if( ( _instanceState & StateFlags.NoVtable ) != 0 )
				return *( Reflection.Type* ) _vfTable;

			return *( Reflection.Type* ) _vfTable[0];
		}

		internal bool NoVtable { get { return ( _instanceState & StateFlags.NoVtable ) != 0; } set { _instanceState = ( StateFlags ) BitOperations.MaskSet( _instanceState.Value(), StateFlags.NoVtable.Value(), value ); } }
		internal bool AlignedAllocation { get { return ( _instanceState & StateFlags.AlignedAllocation ) != 0; } set { _instanceState = ( StateFlags ) BitOperations.MaskSet( _instanceState.Value(), StateFlags.AlignedAllocation.Value(), value ); } }

		public bool IsDisposed { get { return ( _instanceState & StateFlags.Disposed ) != 0; } }
		public bool IsConstant { get { return ( _instanceState & StateFlags.Constant ) != 0; } }

		private bool IsConstantOrDestroying { get { return ( _instanceState & ( StateFlags.Constant | StateFlags.Destroying ) ) != 0; } }

		private void InitializeNew( Type* type, uint extraSize ) {
			_instanceState = 0;

			if( IsReferenceCounterAtomic = Memory.MultithreadedEnvironment ) {
				atomic( _sharedReferenceCount = 1 );
				atomic( _weakReferenceCount = 0 );
			}
			else {
				_sharedReferenceCount = 1;
				_weakReferenceCount = 0;
			}

			var& userType = type->AsUserType;
			if( userType != nullref ) {
				// NoVtable = false; already set to 'false'
				_vfTable = userType.VirtualMethods;
			}
			else {
				NoVtable = true;
				_vfTable = bitcast<void**>( type );
			}

			TrackAllocation();
		}

		public void AddReference() {
			if( this == null || IsConstant ) return;

			TrackAddReference();
			EnsureObjectAlive();

			if( IsReferenceCounterAtomic ) atomic( ++_sharedReferenceCount, Relaxed );
			else ++_sharedReferenceCount;
		}

		public void AddWeakReference() {
			if( this == null || IsConstant ) return;

			TrackAddWeakReference();
			EnsureObjectAliveWeak();

			if( IsReferenceCounterAtomic ) atomic( ++_weakReferenceCount, Relaxed );
			else ++_weakReferenceCount;
		}

		public void ReleaseReference() {
			if( this == null || IsConstant ) return;

			TrackReleaseReference();

			var finalSharedRefcount = IsReferenceCounterAtomic ? atomic( --_sharedReferenceCount, Release ) - 1 : --_sharedReferenceCount;

			if( finalSharedRefcount == 0 ) {
				var& type = GetType();

				if( type.Destructor != null ) {
					if( IsReferenceCounterAtomic ) atomic( _sharedReferenceCount += int.MaxValue / 2, Acquire );
					else _sharedReferenceCount += int.MaxValue / 2;

					type.Destructor( bitcast<void*>( this ) ); // invoke Destructor; do not free space

					finalSharedRefcount = IsReferenceCounterAtomic ? atomic( _sharedReferenceCount -= int.MaxValue / 2, Relaxed ) - int.MaxValue / 2 : _sharedReferenceCount -= int.MaxValue / 2;
					Assert.IsTrue( finalSharedRefcount == 0 ); // refcount increased ==> bad destructor code
				}

				var finalWeakRefcount = IsReferenceCounterAtomic ? atomic( _weakReferenceCount, Relaxed ) : _weakReferenceCount;
				if( finalWeakRefcount == 0 ) {
					TrackDeallocation();

					if( AlignedAllocation ) Memory.DeallocateAligned( bitcast<void*>( this ) ); // free space
					else Memory.Deallocate( bitcast<void*>( this ) ); // free space
				}
			}
			else Assert.IsTrue( finalSharedRefcount > 0 );
		}

		public void ReleaseWeakReference() {
			if( this == null || IsConstant ) return;

			TrackReleaseWeakReference();

			var finalWeakRefcount = IsReferenceCounterAtomic ? atomic( --_weakReferenceCount, Relaxed ) - 1 : --_weakReferenceCount;

			if( finalWeakRefcount == 0 ) {
				if( atomic( _sharedReferenceCount, Relaxed ) == 0 ) {
					TrackDeallocation();

					if( AlignedAllocation ) Memory.DeallocateAligned( bitcast<void*>( this ) ); // free space
					else Memory.Deallocate( bitcast<void*>( this ) ); // free space
				}
			}
			else Assert.IsTrue( finalWeakRefcount > 0 );
		}

		public void ReleaseReferenceRelaxed() {
			if( this == null || IsConstant ) return;

			TrackReleaseReference();

			var finalSharedRefcount = IsReferenceCounterAtomic ? atomic( --_sharedReferenceCount, Relaxed ) - 1 : --_sharedReferenceCount;

			if( finalSharedRefcount == 0 ) {
				var& type = GetType();

				if( type.Destructor != null ) {
					if( IsReferenceCounterAtomic ) atomic( _sharedReferenceCount += int.MaxValue / 2, Relaxed );
					else _sharedReferenceCount += int.MaxValue / 2;

					type.Destructor( bitcast<void*>( this ) ); // invoke Destructor; do not free space

					finalSharedRefcount = IsReferenceCounterAtomic ? atomic( _sharedReferenceCount -= int.MaxValue / 2, Relaxed ) - int.MaxValue / 2 : _sharedReferenceCount -= int.MaxValue / 2;
					Assert.IsTrue( finalSharedRefcount == 0 ); // refcount increased ==> bad destructor code
				}

				var finalWeakRefcount = IsReferenceCounterAtomic ? atomic( _weakReferenceCount, Relaxed ) : _weakReferenceCount;
				if( finalWeakRefcount == 0 ) {
					TrackDeallocation();

					if( AlignedAllocation ) Memory.DeallocateAligned( bitcast<void*>( this ) ); // free space
					else Memory.Deallocate( bitcast<void*>( this ) ); // free space
				}
			}
			else Assert.IsTrue( finalSharedRefcount > 0 );
		}

		/// Multi-threaded assignment
		public static void AssignAtomic( RuntimeObjectBase* left, RuntimeObjectBase right ) {
			AtomicOperations.Exchange( left, right );
		}

		/// Single-threaded assignment, e.g. assuming multiple threads will not write to same place at same time
		public static void Assign( RuntimeObjectBase* left, RuntimeObjectBase right ) {
			// eliminate unnecessary bus sync
			if( *left == right ) return;

			right.AddReference();
			left->ReleaseReference();
			*( void** ) left = *( void** ) &right;
		}

		/// Single-threaded assignment where 'left' non-constant and 'right' is constant, e.g. assuming multiple threads will not write to same place at same time
		public static void AssignConstant( RuntimeObjectBase* left, RuntimeObjectBase right ) {
			left->ReleaseReference();
			*( void** ) left = *( void** ) &right;
		}

		private static void EnsureParameterAlive( RuntimeObjectBase parameter, System.Reflection.UserType.Method& method, SbcsString name ) {
			if( _disableTracking ) return;

			if( parameter == null || parameter.IsConstant ) return;
			if( parameter._sharedReferenceCount == 0 )
				Assert.Fail( string.Format( "Parameter '{0}' have been destroyed before exit from '{1}'. See callframes and try to retain it in proper place", name, method ) );
			else
				parameter.ReleaseWeakReference();
		}

		private static void AbstractMetodCallDetected() {
			Assert.Fail( ( Utf8String ) "Abstract method call detected" );
		}

		private static void UninitializedExternMetodCallDetected() {
			Assert.Fail( ( Utf8String ) "Uninitialized extern method call detected" );
		}

		public static void AllocateDynamicArray( Type* element, Type* arrayType, uint elementSize, uint dimensions, uint length, RuntimeObjectBase* ptr, void* initialValue ) {
			var elementAlignment = element->InstanceAlignment;
			var dimensionsSize = sizeof( uint ) * dimensions;
			var elementStride = Memory.GetStride( elementSize, elementAlignment );

			var headerSize = Memory.GetStride( sizeof( Array ) + dimensionsSize, elementAlignment ); // elementAlignment first element
			var contentsSize = elementStride * length;
			var classExtraSize = headerSize + contentsSize - sizeof( Array );

			var oldptr = bitcast<void*>( *ptr );
			var needAlignedAllocation = elementAlignment > Memory.DefaultAllocationAlignment;

			void* objectMemory;
			if( element->Destructor != null | element->IsRuntimeObject | element->IsInterface )
				objectMemory = ( RuntimeObjectBase* )( needAlignedAllocation ? Memory.AllocateAlignedClear( headerSize + contentsSize, elementAlignment ) : Memory.AllocateClear( headerSize + contentsSize ) );
			else
				objectMemory = ( RuntimeObjectBase* )( needAlignedAllocation ? Memory.AllocateAligned( headerSize + contentsSize, elementAlignment ) : Memory.Allocate( headerSize + contentsSize ) );

			*( void** ) ptr = objectMemory;

			if( objectMemory != null ) {
				ptr->InitializeNew( arrayType, classExtraSize );
				ptr->AlignedAllocation = needAlignedAllocation;

				// initialize System.Array readonly fields
				*cast<uint*>( cast<byte*>( objectMemory ) + memberinfo( Array.Length ).ByteOffset ) = length;
				*cast<uint*>( cast<byte*>( objectMemory ) + memberinfo( Array.Dimensions ).ByteOffset ) = dimensions;
				*cast<Type**>( cast<byte*>( objectMemory ) + memberinfo( Array.ElementType ).ByteOffset ) = element;

				if( initialValue != null ) {
					var valuePtr = cast<byte*>( objectMemory ) + headerSize;

					if( element->IsRuntimeObject ) {
						var destination2 = bitcast<void**>( valuePtr );
						var initialValue2 = *bitcast<void**>( initialValue );
						if( initialValue2 != null ) {
							for( var i = 0U; i < length; ++i )
								destination2[i] = initialValue2;

							var initialValueObject = bitcast<RuntimeObjectBase*>( initialValue );
							if( !initialValueObject->IsConstant )
								atomic( initialValueObject->_sharedReferenceCount += ( int ) length );
						}
					}
					else if( element->IsInterface ) {
						var destination2 = bitcast<InterfaceInstance*>( valuePtr );
						var initialValue2 = *bitcast<InterfaceInstance*>( initialValue );
						if( initialValue2.Object != null ) {
							for( var i = 0U; i < length; ++i )
								destination2[i] = initialValue2;

							if( initialValue2.Type != null && !initialValue2.Type->IsStruct ) {
								var initialValueObject = bitcast<RuntimeObjectBase*>( initialValue2.Object );
								atomic( initialValueObject->_sharedReferenceCount += ( int ) length );
							}
						}
					}
					else {
						for( var i = 0U; i < length; ++i, valuePtr += elementStride ) {
							Memory.Copy( valuePtr, initialValue, elementStride );

							if( element->Postblit != null )
								element->Postblit( valuePtr );
						}
					}
				}
			}

			bitcast<RuntimeObjectBase>( oldptr ).ReleaseReference();
		}

		private static void* AsExpression( void* instance, [In] UserType& type ) {
			return bitcast<RuntimeObjectBase>( instance ).GetType().AsUserType.IsSubclassOf( type ) ? instance : null;
		}

		private static void* AsExpression( void* instance, [In] DynamicArrayType& type ) {
			return bitcast<RuntimeObjectBase>( instance ).GetType().AsDynamicArray.HasImplicitReferenceConversion( type ) ? instance : null;
		}

		private static void* AsExpression( void* instance, [In] DelegateType& type ) {
			return bitcast<RuntimeObjectBase>( instance ).GetType().AsDelegate.HasImplicitReferenceConversion( type ) ? instance : null;
		}

		private static bool CreateInterface( [In] InterfaceType& interfaceType, UserType* originalType, void* object, InterfaceInstance* result ) {
			if( originalType == null ) return false;

			var table = originalType->QueryInterface( interfaceType );
			if( table == null ) return false;

			var newInstance = new InterfaceInstance {
				Object = object,
				Type = originalType,
				ImplementedMethodTable = table
			};

			newInstance.AddReference();
			result->ReleaseReference();
			*result = newInstance;
			return true;
		}

		private static void* AsExpressionInterfaceClass( InterfaceInstance* interfaceInstance, [In] UserType& classType ) {
			if( interfaceInstance == null || interfaceInstance->Type == null ) return null;

			return interfaceInstance->Type->AsUserType.IsSubclassOf( classType ) ? interfaceInstance->Object : null;
		}

		public string ToString() {
			var object = this as RuntimeUserObjectBase;
			if( object != null ) return object.ToString();

			return ( string ) GetType().FullQualifiedName;
		}

		public void Dispose() {
			var object = this as RuntimeUserObjectBase;
			if( object != null ) { object.Dispose(); return; }
		}

		public uint GetHashCode() {
			var object = this as RuntimeUserObjectBase;
			if( object != null ) return object.GetHashCode();

			return ( uint ) bitcast<uintptr>( this );
		}

		protected thistype MemberwiseClone() {
			return null;
		}
	}

	/// Base class for all user types (classes with omitted base)
	public abstract partial class RuntimeUserObjectBase : RuntimeObjectBase {
		// Main purpose of 'Dispose' method is to break cyclic references which can prevent destructor being calling and freeng memory.
		// Disposed object can be used again (bad pattern for C#, good in Bamelg), objects in bamelg should be designed with reusability in mind since memory already allocated which is costly operation
		// Resource freeing (raw OS handles, malloc'ed memory) must be performed strictly in destructors since 'Dispose()' maybe called before object lost last reference
		// Avoid calling 'Dispose()' (or other virtual members) in constructors/destructors - it can lead to access fields in derived type after destructor of derived type get called ( read/writes to freed memory )
		public new virtual void Dispose() { }

		// Hash value based on object location by default
		public new virtual uint GetHashCode() { return ( uint ) bitcast<uintptr>( this ); }

		public new Reflection.UserType& GetType() {
			return *( Reflection.UserType* ) _vfTable[0];
		}

		/// Think twice before overriding this method
		/// In most cases it's better (in terms of performance and memory consumption) to implement 'IFormattable' interface
		public new virtual string ToString() {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( this );
				return builder.Value.ToString();
			}
		}
	}
}