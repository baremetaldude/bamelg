//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Reflection;

namespace System.Runtime {
	// Only weak reference count incremented for objects subscribed to event/delegate. All objects must be unsubscribed from delegate/event before it's destructor get called
	[RelaxedRelease]
	public sealed partial class Delegate {
		private uint _itemCount;

		private Delegate( DelegateType& type, uint count ) {
			extra {
				return sizeof( InvokationItem ) * count;
			}
			body {
				NoVtable = true;
				_type = type;

				_itemCount = count;
			}
		}

		public Delegate( DelegateType& type, void* target, Type* targetType, void* methodAddress ) {
			extra {
				return sizeof( InvokationItem );
			}
			body {
				NoVtable = true;
				_type = type;
				_itemCount = 1;

				GetItems()[0] = new InvokationItem { TargetType = targetType, Target = target, MethodAddress = methodAddress };

				TargetAddWeakReference();
			}
		}

		~Delegate() {
			TargetReleaseWeakReference();
		}

		public static bool operator ==( Delegate left, Delegate right ) {
			if( left == null & right == null ) return true;
			if( left == null | right == null ) return false;

			if( left._itemCount != right._itemCount ) return false;
			return CommonCollectionOperations.Compare<InvokationItem>( left.GetItems(), right.GetItems(), left._itemCount );
		}

		public static bool operator !=( Delegate left, Delegate right ) { return !( left == right ); }

		public Delegate Combine( DelegateType& type, void* target, Type* targetType, void* methodAddress ) {
			if( this == null ) return new Delegate( type, target, targetType, methodAddress );

			var result = new Delegate( _type, _itemCount + 1 );
			var newBuffer = result.GetItems();

			Memory.Copy( newBuffer, GetItems(), ( uint ) _itemCount * sizeof( *newBuffer ) );
			newBuffer[_itemCount] = new InvokationItem { TargetType = targetType, Target = target, MethodAddress = methodAddress };

			result.TargetAddWeakReference();
			return result;
		}

		public Delegate Combine( Delegate other ) {
			if( this == null ) return other;
			if( other == null ) return this;

			if( _itemCount == 0 ) return other;
			if( other._itemCount == 0 ) return this;

			var result = new Delegate( _type, _itemCount + other._itemCount );
			var newBuffer = result.GetItems();

			Memory.Copy( newBuffer, GetItems(), ( uint ) _itemCount * sizeof( *newBuffer ) );
			Memory.Copy( newBuffer + _itemCount, other.GetItems(), ( uint ) other._itemCount * sizeof( *newBuffer ) );

			result.TargetAddWeakReference();
			return result;
		}

		public Delegate Remove( Delegate other ) {
			if( this == null ) return null;
			if( other == null ) return this;

			var count = _itemCount;
			var count2 = other._itemCount;

			if( count2 == 0 | count2 > count ) return this;

			var buffer = GetItems();
			var buffer2 = other.GetItems();

			for( var i = count - count2; i != uint.MaxValue; --i ) {
				if( CommonCollectionOperations.Compare<InvokationItem>( buffer + i, buffer2, count2 ) ) {
					if( count == count2 ) return null;

					var result = new Delegate( _type, count - count2 );
					var newBuffer = result.GetItems();

					Memory.Copy( newBuffer, buffer, ( uint ) i * sizeof( *newBuffer ) );
					Memory.Copy( newBuffer + i, buffer + i + 1, ( uint )( count - count2 - i ) * sizeof( *newBuffer ) );

					result.TargetAddWeakReference();
					return result;
				}
			}

			return this;
		}

		public Delegate Remove( void* target, void* methodAddress ) {
			if( this == null ) return null;

			var buffer = GetItems();

			for( var i = _itemCount - 1; i != uint.MaxValue; --i ) {
				if( buffer[i].Target == target && buffer[i].MethodAddress == methodAddress ) {
					if( _itemCount == 1 ) return null;

					var result = new Delegate( _type, _itemCount - 1 );
					var newBuffer = result.GetItems();

					Memory.Copy( newBuffer, buffer, i * sizeof( *newBuffer ) );
					Memory.Copy( newBuffer + i, buffer + i + 1, ( _itemCount - 1 - i ) * sizeof( *newBuffer ) );

					result.TargetAddWeakReference();
					return result;
				}
			}

			return this;
		}

		public struct InvokationItem {
			public Type* TargetType;

			public void* Target;
			public void* MethodAddress;

			public static bool operator ==( InvokationItem& left, InvokationItem& right ) { return left.TargetType == right.TargetType & left.Target == right.Target & left.MethodAddress == right.MethodAddress; }
			public static bool operator !=( InvokationItem& left, InvokationItem& right ) { return left.TargetType != right.TargetType | left.Target != right.Target | left.MethodAddress != right.MethodAddress; }
		}
	}
}