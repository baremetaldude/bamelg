//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Various functions used by backend. Some older or non-*nix platforms may not have them
//

using System.Runtime.InteropServices;

namespace System.Runtime {
	public static partial class Backend {
		/// \return 'value' in power of 'power'
		private static double powidf2( double value, int power ) {
			var reciprocal = power < 0;
			var r = 1.0;

			while( true ) {
				if( ( power & 1 ) == 1 )
					r *= value;

				power /= 2;

				if( power == 0 )
					break;

				value *= value;
			}

			return reciprocal ? 1 / r : r;
		}

		/// \return 'value' in power of 'power'
		private static float powisf2( float value, int power ) {
			var recip = power < 0;
			var r = 1f;

			while( true ) {
				if( ( power & 1 ) == 1 )
					r *= value;

				power /= 2;

				if( power == 0 )
					break;

				value *= value;
			}

			return recip ? 1 / r : r;
		}

		/// '( float value ) => ( ulong ) value'
		/// Rounding toward zero, e.g. Math.Floor( value )
		private static ulong fixunssfdi( float value ) {
			var bits = bitcast<int>( value );
			if( bits < 0 ) return 0;

			var exponent = cast<int>( bits >> float.SignificandBits ) - float.ExponentBias; // masking of sign is unnecessary
			if( exponent < 0 ) return 0;

			var result = ( ulong )( ( bits & float.SignificandMask ) | ( float.SignificandMask + 1 ) );

			if( exponent > float.SignificandBits )
				result <<= exponent - float.SignificandBits;
			else
				result >>= float.SignificandBits - exponent;

			return result;
		}

		/// '( double value ) => ( ulong ) value'
		/// Rounding toward zero, e.g. Math.Floor( value )
		private static ulong fixunsdfdi( double value ) {
			var bits = bitcast<long>( value );
			if( bits < 0 ) return 0;

			var exponent = ( int )( bits >> double.SignificandBits ) - double.ExponentBias; // masking of sign is unnecessary
			if( exponent < 0 ) return 0;

			var result = ( ulong ) bits;
			result &= double.SignificandMask;
			result |= double.SignificandMask + 1;

			if( exponent > double.SignificandBits )
				result <<= exponent - double.SignificandBits;
			else
				result >>= double.SignificandBits - exponent;

			return result;
		}

		/// '( long a, long b ) => { long r; overflow = checkwrap( r = a * b ); return r; }'
		private static long mulodi4( long a, long b, Boolean32& overflow ) {
			var bits = sizeof( long ) * 8;
			var result = a * b;

			if( a == long.MinValue ) {
				overflow = bitcast<ulong>( b ) > 1;
				return result;
			}

			if( b == long.MinValue ) {
				overflow = bitcast<ulong>( a ) > 1;
				return result;
			}

			var abs_a = Math.Abs( a );
			var abs_b = Math.Abs( b );

			if( abs_a <= 1 | abs_b <= 1 ) {
				overflow = false;
				return result;
			}

			if( ( a ^ b ) >= 0 )
				overflow = abs_a > long.MaxValue / abs_b;
			else
				overflow = abs_a > long.MinValue / -abs_b;

			return result;
		}
	}
}