//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System {
	// Holds reference to array
	public struct ArraySegment<T> {
		public ArraySegment( T[] array, uintptr offset, uintptr count ) {
			Array = array;
			Count = count;
			Offset = offset;
		}

		public T[] Array;
		public uintptr Offset, Count;
	}

	// Unsafe counterpart
	public struct MemorySegment<T> {
		public MemorySegment( T[] array )
			: this( &array[0], ( uint ) array.Length ) {
		}

		public MemorySegment( T* start, uintptr count ) {
			Start = start;
			Count = count;
		}

		public T* Start;
		public uintptr Count;
		public uintptr ByteCount { get { return sizeof( T ) * Count; } }

		public static implicit operator MemorySegment<T>( ArraySegment<T>& value ) {
			return new MemorySegment<T>( &value.Array[value.Offset], value.Count );
		}

		public static explicit operator MemorySegment( MemorySegment<T>& @this ) {
			return new MemorySegment( @this.Start, @this.ByteCount );
		}
	}

	public struct MemorySegment : IFormattable {
		public MemorySegment( void* start, uintptr count ) {
			Start = start;
			Count = count;
		}

		public MemorySegment( byte[] array ) {
			Start = &array[0];
			Count = ( uintptr ) array.Length;
		}

		public void* Start;
		public uintptr Count;

		public void* EndInclusive { get { return ( byte* ) Start + Count - 1; } }
		public void* EndExclusive { get { return ( byte* ) Start + Count; } }

		public bool IsOverlapping( MemorySegment& other ) {
			var end1 = ( byte* ) Start + Count;
			var end2 = ( byte* ) other.Start + other.Count;

			var p1 = ( byte* ) other.Start >= ( byte* ) Start & ( byte* ) other.Start < end1;
			var p2 = ( byte* ) other.Start < ( byte* ) Start & end2 > ( byte* ) Start;

			return p1 | p2;
		}

		public uint GetHashCode() { return BitOperations.CombineHashCodes( cast<uintptr>( Start ).GetHashCode(), Count.GetHashCode() ); }

		public static bool operator ==( MemorySegment& first, MemorySegment& second ) { return first.Start == second.Start && first.Count == second.Count; }
		public static bool operator !=( MemorySegment& first, MemorySegment& second ) { return !( first == second ); }

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "Start='", Start, "' Count='", Count, '\'' );
		}
	}
}