//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Reflection;
using System.Runtime;

using Platform.IO;

namespace System {
	/// Provides unbuffered output to terminal for debugging purposes only. Most of methods should never allocate memory to simplify memory debugging.
	/// For high-performance IO you may use classes from 'System.IO' namespace
	public static partial class Console {
		public static ConsoleEncoding DefaultConsoleEncoding = DefaultPlatformConsoleEncoding;

		public enum ConsoleEncoding {
			CodePage,
			Utf8,
			Utf16,
			Utf32,
		}

		public static void Write( Reflection.Type& value ) { if( value == nullref ) return; Write( value.FullQualifiedName ); }
		public static void WriteLine( Reflection.Type& value ) { if( value == nullref ) return; WriteLine( value.FullQualifiedName ); }

		public static void Write( char value ) { PlatformWrite( new CUtf16StringSpan( &value, 1 ), false ); }
		public static void WriteLine( char value ) { PlatformWrite( new CUtf16StringSpan( &value, 1 ), true ); }

		public static void WriteLine( void* value ) { Write( value ); WriteLine(); }

		private static void WriteFormatted( bool addNewLine, [VerifyFormatString] string format, vararg TypedReference parameters ) {
			if( format == null ) return;

			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.AppendFormat( format, vararg( parameters, parameters.Length ) );
				PlatformWrite( builder.Value.GetTextSpan(), addNewLine );
			}
		}

		public static void Write( TypedReference parameter ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( parameter );
				PlatformWrite( builder.Value.GetTextSpan(), false );
			}
		}

		public static void WriteLine( TypedReference parameter ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( parameter );
				PlatformWrite( builder.Value.GetTextSpan(), true );
			}
		}

		public static void Write( TypedReference parameter, string format ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( parameter, format );
				PlatformWrite( builder.Value.GetTextSpan(), false );
			}
		}

		public static void WriteLine( TypedReference parameter, string format ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( parameter, format );
				PlatformWrite( builder.Value.GetTextSpan(), true );
			}
		}

		public static void Write( [VerifyFormatString] string format, string parameter ) { WriteFormatted( false, format, parameter ); }
		public static void WriteLine( [VerifyFormatString] string format, string parameter ) { WriteFormatted( true, format, parameter ); }

		public static void Write( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			WriteFormatted( false, format, vararg( parameters, parameters.Length ) );
		}

		public static void WriteLine( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			WriteFormatted( true, format, vararg( parameters, parameters.Length ) );
		}

		public static void WriteConcat( vararg TypedReference parameters ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Concat( vararg( parameters, parameters.Length ) );
				PlatformWrite( builder.Value.GetTextSpan(), false );
			}
		}

		public static void WriteConcatLine( vararg TypedReference parameters ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Concat( vararg( parameters, parameters.Length ) );
				PlatformWrite( builder.Value.GetTextSpan(), true );
			}
		}

		public static void Write( CString value ) { PlatformWrite( value, false ); }
		public static void Write( CStringSpan value ) { PlatformWrite( value, false ); }
		public static void Write( SbcsString value ) { PlatformWrite( value, false ); }
		public static void Write( CUtf8String value ) { PlatformWrite( value, false ); }
		public static void Write( CUtf8StringSpan value ) { PlatformWrite( value, false ); }
		public static void Write( Utf8String value ) { PlatformWrite( value, false ); }
		public static void Write( CUtf16String value ) { PlatformWrite( value, false ); }
		public static void Write( CUtf16StringSpan value ) { PlatformWrite( value, false ); }
		public static void Write( Utf16String value ) { PlatformWrite( value, false ); }
		public static void Write( CUtf32String value ) { PlatformWrite( value, false ); }
		public static void Write( CUtf32StringSpan value ) { PlatformWrite( value, false ); }
		public static void Write( Utf32String value ) { PlatformWrite( value, false ); }

		public static void WriteLine( CString value ) { PlatformWrite( value, true ); }
		public static void WriteLine( CStringSpan value ) { PlatformWrite( value, true ); }
		public static void WriteLine( SbcsString value ) { PlatformWrite( value, true ); }
		public static void WriteLine( CUtf8String value ) { PlatformWrite( value, true ); }
		public static void WriteLine( CUtf8StringSpan value ) { PlatformWrite( value, true ); }
		public static void WriteLine( Utf8String value ) { PlatformWrite( value, true ); }
		public static void WriteLine( CUtf16String value ) { PlatformWrite( value, true ); }
		public static void WriteLine( CUtf16StringSpan value ) { PlatformWrite( value, true ); }
		public static void WriteLine( Utf16String value ) { PlatformWrite( value, true ); }
		public static void WriteLine( CUtf32String value ) { PlatformWrite( value, true ); }
		public static void WriteLine( CUtf32StringSpan value ) { PlatformWrite( value, true ); }
		public static void WriteLine( Utf32String value ) { PlatformWrite( value, true ); }

		public static void Write( StringBuilder value ) { if( value == null || value.Length == 0 ) { WriteLine(); return; } PlatformWrite( value.GetTextSpan(), false ); }
		public static void WriteLine( StringBuilder value ) { if( value == null || value.Length == 0 ) { WriteLine(); return; } PlatformWrite( value.GetTextSpan(), true ); }

		public static void Write( bool value ) { Write( value ? ( Utf8String ) "true" : ( Utf8String ) "false" ); }
		public static void WriteLine( bool value ) { WriteLine( value ? ( Utf8String ) "true" : ( Utf8String ) "false" ); }

		public static void Write( DateTime value ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( value );
				PlatformWrite( builder.Value.GetTextSpan(), false );
			}
		}

		public static void WriteLine( DateTime value ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( value );
				PlatformWrite( builder.Value.GetTextSpan(), true );
			}
		}

		public static void Write( TimeSpan value ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( value );
				PlatformWrite( builder.Value.GetTextSpan(), false );
			}
		}

		public static void WriteLine( TimeSpan value ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( value );
				PlatformWrite( builder.Value.GetTextSpan(), true );
			}
		}

		public static void Write( void* value ) {
			WriteHex( ( intptr ) value );
		}

		public static void Write( sbyte value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt8( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void Write( byte value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt8( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void WriteLine( sbyte value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt8( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void WriteLine( byte value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt8( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void Write( short value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt16( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void Write( ushort value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt16( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void WriteLine( short value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt16( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void WriteLine( ushort value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt16( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void Write( int value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt32( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void Write( uint value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt32( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void WriteLine( int value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt32( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void WriteLine( uint value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt32( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void Write( long value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt64( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void Write( ulong value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt64( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void WriteLine( long value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatInt64( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void WriteLine( ulong value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatUInt64( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void Write( float value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatSingleIEEE754( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void Write( double value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatDoubleIEEE754( value ); Write( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void WriteLine( float value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatSingleIEEE754( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }
		public static void WriteLine( double value ) { PrimitiveTypesFormatter.Instance.Init(); PrimitiveTypesFormatter.Instance.FormatDoubleIEEE754( value ); WriteLine( PrimitiveTypesFormatter.Instance.GetTextBuffer() ); }

		public static void WriteHex( TypedReference value ) { WriteHex( value.Address, value.Type.InstanceSize ); }
		public static void WriteHexLine( TypedReference value ) { WriteHexLine( value.Address, value.Type.InstanceSize ); }

		public static void WriteHex( CStringSpan value ) { WriteHex( value.Location, value.Length ); }
		public static void WriteHexLine( CStringSpan value ) { WriteHexLine( value.Location, value.Length ); }

		public static void WriteHex( SbcsString value ) { WriteHex( value.GetChars(), value.Length ); }
		public static void WriteHexLine( SbcsString value ) { WriteHexLine( value.GetChars(), value.Length ); }

		public static void WriteHex( byte[] value ) { if( value == null ) return; WriteHex( &value[0], value.Length ); }
		public static void WriteHexLine( byte[] value ) { if( value == null ) return; WriteHexLine( &value[0], value.Length ); }

		public static void WriteHex( sbyte[] value ) { if( value == null ) return; WriteHex( &value[0], value.Length ); }
		public static void WriteHexLine( sbyte[] value ) { if( value == null ) return; WriteHexLine( &value[0], value.Length ); }

		public static void WriteHex( ArraySegment<byte>& value ) { WriteHex( &value.Array[value.Offset], value.Count ); }
		public static void WriteHexLine( ArraySegment<byte>& value ) { WriteHexLine( &value.Array[value.Offset], value.Count ); }

		public static void WriteHex( ArraySegment<sbyte>& value ) { WriteHex( &value.Array[value.Offset], value.Count ); }
		public static void WriteHexLine( ArraySegment<sbyte>& value ) { WriteHexLine( &value.Array[value.Offset], value.Count ); }

		public static void WriteHex( void* memory, uintptr length ) {
			if( length == 0 ) return;

			using( var page = Memory.CachedPages.PopScoped() ) {
				var buffer = ( byte* ) page.Value;
				var bufferLength = Memory.DefaultPageSize;

				switch( DefaultConsoleEncoding ) {
					case ConsoleEncoding.CodePage: {
							foreach( var segment in PrimitiveTypesFormatter.StreamFormatMemoryHexUtf8( &buffer[0], bufferLength, memory, length, true ) ) {
								Write( new CUtf8StringSpan( segment.Start, ( uint ) segment.Count ) );
							}
						} break;

					case ConsoleEncoding.Utf8: {
							foreach( var segment in PrimitiveTypesFormatter.StreamFormatMemoryHexUtf8( &buffer[0], bufferLength, memory, length, true ) ) {
								Write( new CUtf8StringSpan( segment.Start, ( uint ) segment.Count ) );
							}
						} break;

					case ConsoleEncoding.Utf16: {
							foreach( var segment in PrimitiveTypesFormatter.StreamFormatMemoryHexUtf16( &buffer[0], bufferLength, memory, length, true ) ) {
								Write( new CUtf16StringSpan( segment.Start, ( uint ) segment.Count ) );
							}
						} break;

					case ConsoleEncoding.Utf32: {
							foreach( var segment in PrimitiveTypesFormatter.StreamFormatMemoryHexUtf32( &buffer[0], bufferLength, memory, length, true ) ) {
								Write( new CUtf32StringSpan( segment.Start, ( uint ) segment.Count ) );
							}
						} break;

					default:
						Assert.NotImplemented();
						break;
				}
			}
		}

		public static void WriteHexLine( void* memory, uintptr length ) { WriteHex( memory, length ); WriteLine(); }

		private static void WriteHex<T>( T value, bool newLine ) {
			var buffer = stackalloc byte[2 + sizeof( T ) * 2]; var data = buffer;

			*data++ = ( byte ) '0';
			*data++ = ( byte ) 'x';

			for( var i = 0U; i < sizeof( T ) * 2; ++i )
				*data++ = PrimitiveTypesFormatter.HexDigitsUpper[cast<int>( value <<<= 4 ) & 0xF];

			PlatformWrite( new CUtf8StringSpan( buffer, 2U + ( uint ) sizeof( T ) * 2U ), newLine );
		}

		public static void WriteHex( byte value ) { WriteHex<byte>( value, false ); }
		public static void WriteHex( ushort value ) { WriteHex<ushort>( value, false ); }
		public static void WriteHex( uint value ) { WriteHex<uint>( value, false ); }
		public static void WriteHex( ulong value ) { WriteHex<ulong>( value, false ); }

		public static void WriteHexLine( byte value ) { WriteHex<byte>( value, true ); }
		public static void WriteHexLine( ushort value ) { WriteHex<ushort>( value, true ); }
		public static void WriteHexLine( uint value ) { WriteHex<uint>( value, true ); }
		public static void WriteHexLine( ulong value ) { WriteHex<ulong>( value, true ); }

		public static void WriteHex( sbyte value ) { WriteHex( ( byte ) value ); }
		public static void WriteHex( short value ) { WriteHex( ( ushort ) value ); }
		public static void WriteHex( int value ) { WriteHex( ( uint ) value ); }
		public static void WriteHex( long value ) { WriteHex( ( ulong ) value ); }
		public static void WriteHex( float value ) { WriteHex( bitcast<uint>( value ) ); }
		public static void WriteHex( double value ) { WriteHex( bitcast<ulong>( value ) ); }

		public static void WriteHexLine( sbyte value ) { WriteHexLine( ( byte ) value ); }
		public static void WriteHexLine( short value ) { WriteHexLine( ( ushort ) value ); }
		public static void WriteHexLine( int value ) { WriteHexLine( ( uint ) value ); }
		public static void WriteHexLine( long value ) { WriteHexLine( ( ulong ) value ); }
		public static void WriteHexLine( float value ) { WriteHexLine( bitcast<uint>( value ) ); }
		public static void WriteHexLine( double value ) { WriteHexLine( bitcast<ulong>( value ) ); }

		internal static MemorySegment _newlineUtf8 = new MemorySegment( cast<Utf8String>( Environment.NewLine ).GetChars(), ( ( Utf8String ) Environment.NewLine ).ByteLength );
		internal static MemorySegment _newlineUtf16 = new MemorySegment( cast<Utf16String>( Environment.NewLine ).GetChars(), ( ( Utf16String ) Environment.NewLine ).ByteLength );
		internal static MemorySegment _newlineUtf32 = new MemorySegment( cast<Utf32String>( Environment.NewLine ).GetChars(), ( ( Utf32String ) Environment.NewLine ).ByteLength );

		public struct OutputAttributesScope : IDisposable {
			private Console.OutputAttributes _attrbutes;

			public OutputAttributesScope( Console.OutputAttributes& attrbutes ) { _attrbutes = attrbutes; _attrbutes.Apply(); }
			public void Dispose() { _attrbutes.Reset(); }
		}

		public static OutputAttributesScope AttributedRegion( RgbColor foregroundColor ) { return new OutputAttributesScope( new Console.OutputAttributes() { ForegroundColor = foregroundColor } ); }
		public static OutputAttributesScope AttributedRegion( Console.OutputAttributes& attrbutes ) { return new OutputAttributesScope( attrbutes ); }

		internal static uint CreateIndexedColor( ColorValue.Lab* colors, uint count, RgbColor& color ) {
			var labColor = ( ColorValue.Lab ) ( ColorValue.Xyz ) ( ColorValue.Rgb ) color;

			double delta = double.MaxValue;
			uint result = 0;

			for( var i = 0U; i < count; ++i ) {
				var currentDelta = Math.Abs( ColorValue.Lab.DiffCIE94( colors[i], labColor ) );
				if( currentDelta < delta ) {
					delta = currentDelta;
					result = i;
				}
			}

			return result;
		}

		public static bool IsTerminalSupportsRGB { get; set; }
		public static bool IsTerminalSupports256Color { get; set; }
		public static bool IsTerminalSupports16Color { get; set; }

		public partial struct OutputAttributes {
			public OutputAttributes() {
				Bold = Thin = Italic = Underline = Strikeout = Blink = false;

				DefaultForegroundColor = true;
				DefaultBackgroundColor = true;
			}

			public bool Bold { get; set; }
			public bool Thin { get; set; }
			public bool Italic { get; set; }
			public bool Underline { get; set; }
			public bool Strikeout { get; set; }
			public bool Blink { get; set; }

			private RgbColor _foregroundColor = RgbColor.White;
			private RgbColor _backgroundColor = RgbColor.Black;

			public RgbColor ForegroundColor { get { return _foregroundColor; } set { _foregroundColor = value; DefaultForegroundColor = false; ForegroundColorIndex = uint.MaxValue; } }
			public RgbColor BackgroundColor { get { return _backgroundColor; } set { _backgroundColor = value; DefaultBackgroundColor = false; BackgroundColorIndex = uint.MaxValue; } }

			public uint ForegroundColorIndex = uint.MaxValue;
			public uint BackgroundColorIndex = uint.MaxValue;

			public bool DefaultForegroundColor { get; set; }
			public bool DefaultBackgroundColor { get; set; }

			public void Apply() { Console.ApplyAttributes( this ); }
			public void Reset() { Console.ResetAttributes(); }
		}

		public struct ConsoleWriter : System.IO.ITextWriter {
			public void Flush( System.IO.FlushKind flushKind = System.IO.FlushKind.DeepWrite ) { }

			public void WriteLine() { Console.WriteLine(); }

			public void Write( bool value ) { Console.Write( value ); }
			public void WriteLine( bool value ) { Console.WriteLine( value ); }

			public void Write( char value ) { Console.Write( value ); }
			public void WriteLine( char value ) { Console.WriteLine( value ); }

			public void Write( sbyte value ) { Console.Write( value ); }
			public void WriteLine( sbyte value ) { Console.WriteLine( value ); }

			public void Write( byte value ) { Console.Write( value ); }
			public void WriteLine( byte value ) { Console.WriteLine( value ); }

			public void Write( short value ) { Console.Write( value ); }
			public void WriteLine( short value ) { Console.WriteLine( value ); }

			public void Write( ushort value ) { Console.Write( value ); }
			public void WriteLine( ushort value ) { Console.WriteLine( value ); }

			public void Write( int value ) { Console.Write( value ); }
			public void WriteLine( int value ) { Console.WriteLine( value ); }

			public void Write( uint value ) { Console.Write( value ); }
			public void WriteLine( uint value ) { Console.WriteLine( value ); }

			public void Write( long value ) { Console.Write( value ); }
			public void WriteLine( long value ) { Console.WriteLine( value ); }

			public void Write( ulong value ) { Console.Write( value ); }
			public void WriteLine( ulong value ) { Console.WriteLine( value ); }

			public void Write( float value ) { Console.Write( value ); }
			public void WriteLine( float value ) { Console.WriteLine( value ); }

			public void Write( double value ) { Console.Write( value ); }
			public void WriteLine( double value ) { Console.WriteLine( value ); }

			public void Write( TypedReference value ) { Console.Write( value ); }
			public void WriteLine( TypedReference value ) { Console.WriteLine( value ); }

			public void Write( SbcsString value ) { Console.Write( value ); }
			public void WriteLine( SbcsString value ) { Console.WriteLine( value ); }

			public void Write( CString value ) { Console.Write( value ); }
			public void WriteLine( CString value ) { Console.WriteLine( value ); }

			public void Write( CStringSpan value ) { Console.Write( value ); }
			public void WriteLine( CStringSpan value ) { Console.WriteLine( value ); }

			public void Write( Utf8String value ) { Console.Write( value ); }
			public void WriteLine( Utf8String value ) { Console.WriteLine( value ); }

			public void Write( CUtf8String value ) { Console.Write( value ); }
			public void WriteLine( CUtf8String value ) { Console.WriteLine( value ); }

			public void Write( CUtf8StringSpan value ) { Console.Write( value ); }
			public void WriteLine( CUtf8StringSpan value ) { Console.WriteLine( value ); }

			public void Write( Utf16String value ) { Console.Write( value ); }
			public void WriteLine( Utf16String value ) { Console.WriteLine( value ); }

			public void Write( CUtf16String value ) { Console.Write( value ); }
			public void WriteLine( CUtf16String value ) { Console.WriteLine( value ); }

			public void Write( CUtf16StringSpan value ) { Console.Write( value ); }
			public void WriteLine( CUtf16StringSpan value ) { Console.WriteLine( value ); }

			public void Write( Utf32String value ) { Console.Write( value ); }
			public void WriteLine( Utf32String value ) { Console.WriteLine( value ); }

			public void Write( CUtf32String value ) { Console.Write( value ); }
			public void WriteLine( CUtf32String value ) { Console.WriteLine( value ); }

			public void Write( CUtf32StringSpan value ) { Console.Write( value ); }
			public void WriteLine( CUtf32StringSpan value ) { Console.WriteLine( value ); }

			public void Write( StringBuilder value ) { Console.Write( value ); }
			public void WriteLine( StringBuilder value ) { Console.WriteLine( value ); }

			public void Write( [VerifyFormatString] string str, vararg TypedReference parameters ) { Console.Write( str, vararg( parameters, parameters.Length ) ); }
			public void WriteLine( [VerifyFormatString] string str, vararg TypedReference parameters ) { Console.WriteLine( str, vararg( parameters, parameters.Length ) ); }
		}

		public static readonly ConsoleWriter Out;
	}
}