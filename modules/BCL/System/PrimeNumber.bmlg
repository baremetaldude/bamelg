//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;

namespace System {
	public static class PrimeNumber {
		private static readonly uint[1024] _precomputedSieve = { 0x64B4CB6F, 0x816D129A, 0x864A4C32, 0x2196820D, 0x5A0434C9, 0xA4896120, 0x29861144, 0x4A2882D1, 0x32424030, 0x8349921, 0x4225064B, 0x148A4884, 0x6C304205, 0xB40B408, 0x125108A0, 0x65048928, 0x804C3098, 0x80124496, 0x41124221, 0xC02104C9, 0x982D32, 0x8044900, 0x82689681, 0x220825B0, 0x40A28948, 0x90042659, 0x30434006, 0x69009244, 0x8088210, 0x12410DA4, 0x2400C060, 0x86122D2, 0x821B0484, 0x110D301, 0xC044A002, 0x14916022, 0x4A6400C, 0x92094D2, 0x522094, 0x4CA21008, 0x51018200, 0xA48B0810, 0x44309A25, 0x34C1081, 0x80522502, 0x20844908, 0x18003250, 0x241140A2, 0x1840128, 0xA41A001, 0x36004512, 0x29260008, 0xC0618283, 0x10100480, 0x4822006D, 0xC20C2658, 0x24894810, 0x45205820, 0x19002488, 0x10C02502, 0x1140868, 0x802832CA, 0x264B0400, 0x60901300, 0xD0258082, 0x32100100, 0x2186430C, 0x43080011, 0x10480424, 0x92900C, 0x2D2043, 0x24880906, 0x932C040, 0x53008209, 0x96800880, 0x40008141, 0x8481048, 0x20584896, 0x2080C329, 0x92609402, 0x22812000, 0x5A01044, 0x49019040, 0xA0420, 0x48348924, 0xC02C8013, 0x24002982, 0x8000845, 0x52043698, 0x4D00484, 0x44908A00, 0x18653282, 0x20A0090, 0x28024001, 0x9204A440, 0x86110430, 0x2C004208, 0xC9080452, 0x12486084, 0x44249909, 0x3002400, 0x10002114, 0x5321A01, 0x40402088, 0x84C30906, 0x60300140, 0x11680218, 0xA2020C90, 0x29860004, 0x82241489, 0x80084102, 0x8801904, 0x42681210, 0x20004A4, 0xC061061, 0x12010010, 0x94032010, 0x65124221, 0xA0C9418, 0x14012804, 0x40A40A29, 0x14000D0, 0x20410490, 0x4882402D, 0x100020C1, 0x24080130, 0x24845904, 0x82290200, 0x2586100, 0x48168148, 0x11210010, 0xA0CA0006, 0x4000240, 0x4200B091, 0x6810C04, 0x25144809, 0x11252092, 0x860A00A0, 0x4802C10C, 0x8452000, 0x6980032, 0x221304, 0x81480482, 0x12824414, 0x40101824, 0xD0288043, 0x24812004, 0x2C00D864, 0x41081209, 0x20000A2, 0x4120CA41, 0x180110C0, 0xA41804A4, 0x20941220, 0x240A083, 0x4804432, 0xC001800, 0x8A608640, 0x12886400, 0x820105, 0xC101A24A, 0x4096110, 0x60008801, 0x840B401, 0x80030106, 0x4944008, 0x8029208A, 0x2520C02, 0x844201, 0x2648480, 0x30004832, 0x21224044, 0xC3080200, 0x20D004A0, 0x40161840, 0x52280040, 0x14820890, 0x8101801, 0xA408209, 0x809320A0, 0x2000C008, 0x1050052, 0x6114010, 0x820C, 0x9A44904B, 0x90802800, 0x9064A04, 0x280243, 0x180134, 0x44800965, 0x2240003, 0x14486182, 0x28120041, 0x51083400, 0x90120504, 0x60848928, 0x10491012, 0x82494026, 0x1109100, 0x8840240A, 0x4104C10, 0x2CA25000, 0xA489040, 0x125001B0, 0x4A40008, 0x9228A009, 0x10430002, 0x41200221, 0x8003281, 0x520C04, 0x20844921, 0x81010210, 0x22404810, 0x69840101, 0xC80130C1, 0x884402, 0x2D02010C, 0x6112C0, 0x30C000A0, 0x8120140, 0x8000200B, 0x84014094, 0x320040, 0xB008410, 0x6010024, 0x41848A29, 0x8081080, 0x80034C94, 0x40964001, 0x50202041, 0xA2892522, 0x20A44040, 0x1288602, 0x104A2120, 0x8140008, 0x42250440, 0x10432102, 0x21009204, 0x184CA011, 0x84030922, 0x4108941, 0x1242282, 0x84080814, 0x900C108, 0x8A41B042, 0x36800002, 0x24A04904, 0x2000091, 0x2924194, 0x8060801, 0xD0010009, 0x80892816, 0x68000060, 0x500C9001, 0x80400120, 0x41304240, 0x81252000, 0x494006, 0x49120108, 0x1820A000, 0xA6010530, 0x28241000, 0xC8200200, 0x12880020, 0x92900C, 0x42012602, 0x4004916, 0x1024224, 0x1A0C8088, 0x100880, 0x44940260, 0x11690088, 0xA0120830, 0x841324, 0xC0650082, 0x30002810, 0x1200304, 0xC8010611, 0x20C20080, 0xC821008, 0x520C0213, 0xB0004006, 0x1104061, 0x10048698, 0x14920884, 0x41804160, 0x8104101A, 0x20414022, 0x41005229, 0x10603408, 0x10012800, 0x8840040, 0x48209042, 0x2520404, 0x4200800, 0xD8200, 0x10024082, 0x40204805, 0x1000099, 0xC02406, 0x21048268, 0x8441012, 0xA6400004, 0x916D020, 0x24124C9, 0x92090C20, 0x1240, 0x43090040, 0x2982084, 0x241101, 0x3002443, 0x30410890, 0x4C205824, 0x10088280, 0x6812524, 0x20100941, 0x80441018, 0x244A0010, 0x2894010D, 0xC0003080, 0x84106002, 0x900020C, 0x8018202, 0x20C20410, 0x4060968, 0x11000018, 0x100B0890, 0xC028221, 0x8B610, 0x2410026, 0x21244A01, 0x8024201A, 0x24400, 0x2402D, 0x1020948B, 0xA6902000, 0x2C001340, 0x1618611, 0x2104180, 0x48308104, 0x50282048, 0x108A2180, 0x9100804, 0x42481010, 0x92820CA0, 0x520C060, 0x14020D2, 0x82080400, 0x2822D, 0x48418048, 0x4910010, 0x840304, 0x6804C2, 0x22C06400, 0x44320840, 0x91008609, 0x12802, 0x24004864, 0x43009010, 0x86522100, 0x20908B41, 0x88082040, 0x20134404, 0x60840200, 0x40249081, 0x10080030, 0x1020808, 0x43200410, 0x129040B4, 0x4C800168, 0xC0080018, 0x10404912, 0x41001A24, 0x104C2489, 0x10520400, 0x41204A09, 0x11692248, 0x6100814, 0x28848024, 0x40001000, 0x26080110, 0x28064808, 0x42011400, 0x200A0484, 0x8820100, 0x12248200, 0xA0404004, 0x4109040, 0x10402290, 0x10802C20, 0x4004328, 0x81010058, 0x20094810, 0x48321, 0x44A442, 0xA0106C00, 0x804844, 0xC9488083, 0x2000000, 0x4B01005, 0x10290413, 0x4084092, 0x228244, 0x19002019, 0x90810120, 0x41008A60, 0x104502C0, 0xA2020004, 0x21104009, 0x42012049, 0x14002C30, 0x4220144, 0x89089202, 0x10802104, 0x40200105, 0x48041, 0xB0400912, 0x1325864, 0x41009008, 0x80C10904, 0x900861, 0x124009A, 0x26020812, 0x8068205, 0x48200008, 0x24180020, 0x20348, 0x90011, 0x104A0184, 0x4009801, 0xC0008618, 0x80812000, 0x5301004, 0x4A0CB400, 0x2912982, 0x44200028, 0x912C00C0, 0xA2014080, 0x9041200, 0x80020C3, 0x22100C02, 0x2C000004, 0xC0008611, 0x32120000, 0x40808940, 0x50050240, 0xA4826086, 0x4D120A60, 0x12089080, 0x14020980, 0x20240148, 0x9044008A, 0x2010404, 0x12D100, 0x40040A, 0x24812132, 0x20841908, 0x89080402, 0x2022480, 0x44821868, 0x40210042, 0x80012800, 0x40208245, 0x20C8011, 0x90402400, 0x20204001, 0x19282050, 0x20094000, 0x60048008, 0x8208040, 0x34094930, 0x24241100, 0xC2410082, 0x2920400, 0xC008024, 0x100A002, 0x4416006, 0x100D021, 0x12480001, 0x12910484, 0x44240008, 0x18411200, 0x80410C26, 0x20045200, 0x90240009, 0x2184820, 0x9A20300, 0x8A0014D0, 0x4A2584, 0x40149820, 0x5A200, 0x14400000, 0x2C205801, 0x9008480, 0x2912020, 0x41B00208, 0x9003008, 0x2180010, 0x20221, 0x8442400, 0xB2006012, 0xC021244, 0xC84080C0, 0x20500420, 0x4B00005, 0x5329040B, 0x30486100, 0x29208200, 0x53001600, 0x10432022, 0x4800048, 0x4000D2, 0x800344A2, 0x8040029, 0x406404C0, 0x84092830, 0x21805044, 0xC0009202, 0x22886010, 0x8008, 0x83048418, 0x20810096, 0x45000205, 0x51008488, 0x86512020, 0x944B41, 0x11080080, 0x80584C20, 0x20060304, 0x8050089, 0x900522, 0x9820040, 0x50, 0x20C241A0, 0x8160008, 0xD0212640, 0x90810890, 0x44020041, 0xA0C1008, 0x4900986, 0x4A0C800, 0x89203008, 0x22110084, 0x800402C, 0x4801B002, 0x20090102, 0x40304, 0x42600280, 0x104A2130, 0x20944, 0x12002401, 0xA4802182, 0x4021020, 0x1840A091, 0x6020004, 0x5000969, 0x10258, 0x4800, 0x20920300, 0xC8013400, 0x30084820, 0x20804208, 0x1689091, 0x2124004, 0x8120061, 0x1100A001, 0x4482104, 0xC009224, 0x48401, 0x96120100, 0x41A00140, 0x88282288, 0x80424400, 0x1141224, 0x1A609042, 0x10810410, 0x29060848, 0x2400283, 0x10806424, 0x40108005, 0x42080202, 0x20090184, 0x60005004, 0x13403011, 0x810402, 0x45200809, 0x9061104A, 0x2080C26, 0x60009121, 0x2000402, 0x6080C00, 0x8844808, 0x80000211, 0x205A00A4, 0x4048800, 0x90002, 0x14490814, 0x400C820, 0x5940A091, 0x10120080, 0x65808000, 0x40000, 0x194080, 0x60840321, 0x1A2404C0, 0x80806112, 0x9040208, 0x8201242, 0x20900434, 0xA00101, 0x9108000B, 0x34024092, 0x61108840, 0x40000219, 0x80C02504, 0x21040868, 0x42280, 0x84010CA0, 0x8004120, 0x8A20008A, 0x4884800, 0x8821104, 0x49098640, 0x100040A4, 0x4A20101, 0x800C8050, 0xA0824800, 0x41121801, 0x41480401, 0x12400, 0x148800, 0x1680002, 0x224A0820, 0x808308, 0xC2010489, 0x34000000, 0x28820004, 0x4A410202, 0x2820590, 0x4248009, 0x92010041, 0x14012880, 0x4C205000, 0x4304B010, 0x49021A4, 0x44000201, 0x8640048, 0x20420006, 0x1920208, 0x5020004A, 0x22902532, 0x8000904, 0x1218011, 0x32000510, 0x8948808, 0xC10D2408, 0x200B4080, 0x4121840, 0x10402200, 0x82C10526, 0x24300100, 0x8412202, 0x1A4824, 0x2812D225, 0x40040042, 0x2004130, 0x24201300, 0x890884D1, 0x520480, 0xA41844, 0x91200600, 0x20420910, 0x28304024, 0x40408400, 0x4100880, 0x40040809, 0x19002208, 0x80000002, 0x2102022C, 0x40209001, 0x34000C00, 0x1205848, 0x80200443, 0x900014, 0x116D, 0x3002040, 0x30884010, 0x65004A05, 0x18082410, 0x80032884, 0x40B04220, 0x19691000, 0x80000004, 0x4C204, 0x50001, 0x96082522, 0x220204, 0x12910D0, 0x100860A0, 0x44160104, 0x2280210, 0x84404882, 0x28229020, 0x40000480, 0x80002404, 0x60100329, 0x81000048, 0x205100A0, 0x100D10C, 0x92042041, 0x92100000, 0x5044200, 0x80408601, 0x20522010, 0x48100021, 0xD000020A, 0x80484112, 0x48000004, 0x42209, 0x10430024, 0x44000A60, 0x82C2012, 0x84004420, 0x8064009, 0x804000C1, 0x12980020, 0x20A21048, 0xC0488400, 0x12902010, 0x829808, 0x304A00A, 0xC32800, 0x4104244, 0x400408, 0x100500, 0x4800321, 0x10691288, 0x4080400, 0x48840204, 0x18200449, 0x30806402, 0x20108, 0x8491252, 0x10884120, 0x340848, 0xD0058601, 0x84830000, 0x41024021, 0x40488010, 0x5120A2, 0x1004900, 0x18402090, 0x22024002, 0x8804005, 0x18201082, 0x82010500, 0x4005840, 0x1299081, 0x220064A0, 0xA20140, 0xD0418, 0x94806000, 0xD108260, 0x120C3080, 0x12000020, 0x2120C040, 0x10410258, 0x2034480, 0x29901304, 0xC0440008, 0x26002100, 0x1801A00, 0xA201413, 0x32002014, 0x40000861, 0x80092042, 0x80810106, 0x68004260, 0x42088290, 0x80020480, 0x40B09, 0x810C0098, 0x84484406, 0x920328, 0xA408001, 0x2810C00, 0x28045108, 0x9200290, 0x6010, 0xCA08109, 0x9A400, 0x20802802, 0x4020200, 0x41481, 0x12110904, 0x1204060, 0x11403048, 0x860A0800, 0x60040000, 0xD0010481, 0x90184102, 0x200A00, 0x80106C1, 0x10CA6480, 0x48809904, 0x50208201, 0x84804890, 0x229020, 0x18040019, 0x86102420, 0x2400C240, 0x441012, 0x24100816, 0x1061200, 0x12009008, 0x80104D02, 0x225040, 0x11043, 0xA2130, 0x140100, 0xC1048410, 0xA2910, 0x20008A01, 0x490C1201, 0x810420, 0x60040148, 0x80C1280, 0x44A4810, 0x28001028, 0x50458440, 0x6106010, 0x9800144, 0x42018600, 0x9000A0, 0x40229005, 0x80080041, 0xC00802, 0x49305801, 0x41001409, 0x80020C02, 0x24008940, 0x90051008, 0x820A4032, 0x61120008, 0x210400, 0x24100422, 0x1040A08, 0x40200010, 0x22880484, 0x129020, 0x1240653, 0x140B4004, 0xD028260, 0x80C9010, 0x14000920, 0x24808009, 0x1400082, 0x20014402, 0x4084400C, 0x41100A, 0x80090530, 0x20200844, 0x43490002, 0x20002120, 0x8B60100, 0x2080440, 0x80410180, 0x24100840, 0x12042000, 0x12C00986, 0x4148121, 0x89200200, 0x801244B4, 0x6900D100, 0x42008040, 0x4180012, 0x21064900, 0x2280402, 0x10C00184, 0x8200068, 0x91080040, 0x24810110, 0x4C10D204, 0x10008688, 0x14020C80, 0x40908A00, 0x80212018, 0x245800A4, 0x60101020, 0x484130C1, 0x94802, 0x5020940, 0x4A208211, 0x2182420, 0xC22100C, 0x300040A, 0x4484806, 0x21000204, 0x18008480, 0x12020C00, 0x5140001, 0x89411082, 0xA4400812, 0x48840121, 0x40601002, 0x14002802, 0x20A04008, 0xC2001251, 0x301A0100, 0x4C128940, 0x8002, 0xA0010114, 0x21221821, 0x1400618, 0x4900080, 0x4300248, 0x88050008, 0x4480824, 0x60224, 0x80, 0x90116510, 0x4820A00, 0x486004C3, 0x2920424, 0x40808844, 0x80290618, 0x110, 0x2110C844, 0x4B003089, 0x141001A0, 0x40940200, 0x652000, 0x22400CA2, 0x20128120, 0x10010482, 0x880800, 0x4801100, 0x41408042, 0x32400014, 0x424802C, 0x91000019, 0x832000, 0x9204005, 0x40408401, 0x112020, 0x20904140, 0x90400000, 0x6184892, 0x48808108, 0x10243401, 0x20000420, 0x2D061804, 0x11090, 0x220A0090, 0x220001, 0x1018411, 0x882000, 0x1220044, 0x240A600, 0x112006, 0x4A0C801, 0x1928008A, 0xA0520080, 0x9121224, 0x48012408, 0x24000400, 0x8840240, 0x40480400, 0x220A6090, 0x8148801, 0xD3080201, 0x90C02000, 0x1024, 0xA08B001, 0x8000A0, 0x20000901, 0x250252, 0x84020424, 0x40921024, 0x40A002, 0x4110822, 0x220108, 0x9001442, 0x30002190, 0xC00006C, 0x90092200, 0x402810, 0x20C020, 0x1400090, 0x12120582, 0x6104C109, 0x81280280, 0x4490024, 0x29861008, 0xA218041, 0x90884930, 0x29044100, 0x9418081, 0x10124000, 0x40100040, 0x80050248, 0x20402102, 0x60205800, 0x489000, 0x80C02880, 0x44000048, 0x9000280, 0x2120006, 0x8100001, 0x12451083, 0x4082C00, 0x20200044, 0x12010C0, 0x20C80500, 0x8109804, 0x2240010, 0x884016, 0x24128861, 0x4200A680, 0x6100800, 0xA04048, 0x81042050, 0x1840A4, 0x1801008 };
		private static readonly BitArrayAccessor _sieve = new BitArrayAccessor { Start = _precomputedSieve, Count = 32768 };
		private const int _maxPrecomputedSieveLength = 65535;
		private const int _maxPrecomputedPrime = 65521;

		public static bool IsPrime( uint value ) {
			if( ( value & 1 ) == 0 )
				return value == 2;

			return IsPrimeNon2( value );
		}

		private static bool IsPrimeNon2( uint candidate ) {
			if( candidate < _maxPrecomputedPrime )
				return _sieve[( candidate - 1 ) / 2];

			var maxFactor = ( uint ) Math.Sqrt( ( double ) candidate );
			for( var factor = 3U; factor <= maxFactor; ) {
				if( ( candidate % factor ) == 0 )
					return false;

				factor += 2; // get next
				if( factor <= _maxPrecomputedPrime ) {
					for( uint k = ( factor - 1 ) / 2, j = factor; j < _maxPrecomputedPrime; ++k, j += 2 ) {
						if( _sieve[k] ) {
							factor = j;
							break;
						}
					}
				}
			}

			return true;
		}

		public static uint GetClosestPrime( uint min ) {
			if( min <= 3 ) return min;
			min |= 1;

			for( uint k = ( min - 1 ) / 2, j = min; j < _maxPrecomputedPrime; ++k, j += 2 )
				if( _sieve[k] )
					return j;

			for( var j = min; j < 0x7FFFFFFF; j += 2 )
				if( IsPrimeNon2( j ) )
					return j;

			return min;
		}
	}
}