//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

namespace System {
	public sealed partial class Utf16String : IBinarySerializable, ITextSerializable, IFormattable {
		void IBinarySerializable.Serialize( BinaryWriter stream, SerializerContext context ) { stream.Write( this ); }
		void IBinarySerializable.Deserialize( void* object, BinaryReader stream, SerializerContext context ) { *( thistype* ) object = stream.ReadUtf16String(); }

		void ITextSerializable.Serialize( StringBuilder builder, string format, SerializerContext context ) { builder.Append( this ); }
		void ITextSerializable.Deserialize( void* object, StringBuilder builder, SerializerContext context ) { *( thistype* ) object = builder.ToString(); }

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.Append( this ); }

		public struct Builder {
			private declaringtype _result;

			private bool _hashSet { get; set; }
			public uint Hash {
				get { return _result.Hash; }
				set {
					Debug.Assert( !_detached );
					*cast<uint*>( bitcast<byte*>( _result ) + memberinfo( declaringtype.Hash ).ByteOffset ) = value;
					_hashSet = true;
				}
			}

			public uint Length { get { return _result.Length; } }
			public uint ByteLength { get { return _result.ByteLength; } }

			public char* GetChars() {
				Debug.Assert( !_detached );
				return _result.GetChars();
			}

			public Builder( uint length ) {
				_result = new declaringtype( length );
			}

			private bool _detached { get; set; }
			public declaringtype Detach() {
				Debug.Assert( !_detached );
				_result.GetChars()[_result.Length] = '\0';
				if( !_hashSet ) _result.UpdateHash();
				_detached = true;

				return _result;
			}
		}

		[UnitTest]
		private static void UnitTest() {
			Assert.AreEqual( 1, "12321".IndexOf( '2' ) );
			Assert.AreEqual( 3, "12321".LastIndexOf( '2' ) );

			Assert.AreEqual( 3, "12321".IndexOf( '2', 2 ) );
			Assert.AreEqual( 1, "12321".LastIndexOf( '2', 2 ) );

			Assert.AreEqual( -1, "12321".IndexOf( 'y' ) );
			Assert.AreEqual( -1, "12321".LastIndexOf( 'y' ) );
		}
	}

	public partial struct CUtf16String : IFormattable {
		void IFormattable.ToString( StringBuilder builder, string format ) { builder.Append( this ); }

		public static void MakeLower( char* location, uint length ) {
			if( location == null || length == 0 ) return;

			for( var i = 0U; i < length; ++i )
				location[i] = char.ToLower( location[i] );
		}

		public static void MakeUpper( char* location, uint length ) {
			if( location == null || length == 0 ) return;

			for( var i = 0U; i < length; ++i )
				location[i] = char.ToUpper( location[i] );
		}
	}

	public partial struct CUtf16StringSpan : IFormattable {
		void IFormattable.ToString( StringBuilder builder, string format ) { builder.Append( this ); }

		public void MakeLower() { CUtf16String.MakeLower( Location, Length ); }
		public void MakeUpper() { CUtf16String.MakeUpper( Location, Length ); }
	}
}