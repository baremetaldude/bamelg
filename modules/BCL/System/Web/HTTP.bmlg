//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Text;

namespace System.Web {
	public struct HttpRequestParser {
		public enum State : byte {
			Start,
			Uri,
			Version,
			VersionMajor,
			VersionMinor,
			Header,
			HeaderValue,
			Finished,
			Error,
		}

		public enum ParsingResult {
			Error,        // incorrect response
			NeedMoreData, // GE
			RequestReady, // GET /resource HTTP/1.1 parsed
			Finished,     // request line and headers parsed
		}

		public interface StreamListener {
			void Header( CStringSpan& header, CStringSpan& value );
		}

		// @{ State
		private bool _trimSpaces { get; set; }
		public State _state = State.Start;

		public HttpMethod _method;
		public int VersionMajor, VersionMinor;

		// public ushort _uriPercentGap;
		public byte* _current, _end;
		public byte* _uriStart, _uriEnd, _queryStart, _fragmentStart;
		public byte* _headerStart, _headerEnd, _valueStart;
		// @}

		public byte* _resourceStart { get { return _uriStart; } }
		public byte* _resourceEnd { get { return _queryStart != null ? _queryStart - 1 : _fragmentStart != null ? _fragmentStart - 1 : _uriEnd; } }

		public byte* _queryEnd { get { return _queryStart != null ? _fragmentStart != null ? _fragmentStart - 1 : _uriEnd : null; } }
		public byte* _fragmentEnd { get { return _fragmentStart != null ? _uriEnd : null; } }

		public CStringSpan Resource { get { return new CStringSpan( _resourceStart, ( uint )( _resourceEnd - _resourceStart ) ); } }
		public CStringSpan Uri { get { return new CStringSpan( _uriStart, ( uint )( _uriEnd - _uriStart ) ); } }

		public HttpRequestParser() {
		}

		public void Rebase( byte* start ) {
			if( _current == null ) return;
			var diff = start - _current;
			if( diff == 0 ) return;

			_current += diff;

			if( _end != null ) _end += diff;
			if( _uriStart != null ) _uriStart += diff;
			if( _uriEnd != null ) _uriEnd += diff;
			if( _queryStart != null ) _queryStart += diff;
			if( _fragmentStart != null ) _fragmentStart += diff;
			if( _headerStart != null ) _headerStart += diff;
			if( _headerEnd != null ) _headerEnd += diff;
			if( _valueStart != null ) _valueStart += diff;
		}

		public void Reset() {
			_state = State.Start;

			_current = _end = null;
			_method = HttpMethod.Invalid;
			VersionMajor = VersionMinor = 0;

			_uriStart = _uriEnd = _queryStart = _fragmentStart = null;
		}

		public void SetInput( void* start, uint length ) {
			_state = State.Start;

			_current = ( byte* ) start;
			_end = _current + length;
			_method = HttpMethod.Invalid;
			VersionMajor = VersionMinor = 0;

			_uriStart = _uriEnd = _queryStart = _fragmentStart = null;
		}

		public void SetInput( SbcsString request ) {
			SetInput( request.GetChars(), request.Length );
		}

		private bool CheckMethod( bool& needMoreData, HttpMethod method, SbcsString value ) {
			if( needMoreData = ( uintptr )( _end - _current ) < value.Length ) return true;

			if( new CStringSpan( _current, value.Length ) == ( CStringSpan ) value ) {
				_method = method;
				_current += value.Length;
				return true;
			}

			return false;
		}

		public ParsingResult MoveNext( StreamListener listener ) {
			var needMoreData = false;

			switch( _state ) {
				case State.Start:
					if( _end - _current < 4 ) return ParsingResult.NeedMoreData;

					switch( _current[0] ) {
						case ( byte ) 'C':
							if( CheckMethod( needMoreData, HttpMethod.Options, "CONNECT " ) ) break;
							goto default;

						case ( byte ) 'D':
							if( CheckMethod( needMoreData, HttpMethod.Delete, "DELETE " ) ) break;
							goto default;

						case ( byte ) 'G':
							if( CheckMethod( needMoreData, HttpMethod.Get, "GET " ) ) break;
							goto default;

						case ( byte ) 'H':
							if( CheckMethod( needMoreData, HttpMethod.Head, "HEAD " ) ) break;
							goto default;

						case ( byte ) 'O':
							if( CheckMethod( needMoreData, HttpMethod.Options, "OPTIONS " ) ) break;
							goto default;

						case ( byte ) 'P':
							if( CheckMethod( needMoreData, HttpMethod.Put, "PUT " ) ) break;
							if( CheckMethod( needMoreData, HttpMethod.Post, "POST " ) ) break;
							goto default;

						case ( byte ) 'T':
							if( CheckMethod( needMoreData, HttpMethod.Trace, "TRACE " ) ) break;
							goto default;

						default:
							if( needMoreData ) break;

							_state = State.Error;
							return ParsingResult.Error;
					}

					if( needMoreData ) return ParsingResult.NeedMoreData;

					_trimSpaces = true;

					_state = State.Uri;
					goto case State.Uri;

				case State.Uri: {
						var inUri = true;
						var newline = false;

						if( _trimSpaces ) {
							while( _end - _current >= 1 && _current[0] == ' ' )
								++_current;

							if( _end - _current >= 1 ) _trimSpaces = false;
						}

						_uriStart = _current;

						while( inUri ) {
							if( _end - _current < 1 ) return ParsingResult.NeedMoreData;

							switch( ( char ) _current[0] ) {
								// case '%': // %69
								// 	if( _end - _current < 3 ) return ParsingResult.NeedMoreData;

								// 	byte ch;
								// 	if( PrimitiveTypesParser.TryParseHexUInt8( _current + 1, 2, ch ) ) {
								// 		*_current = ch;
								// 		_uriPercentGap += 2;
								// 		_current += 3;
								// 		break;
								// 	}
								// 	else { _state = State.Error; return ParsingResult.Error; }

								case '\r': // CR
									_uriEnd = _current;
									if( _end - _current < 2 ) return ParsingResult.NeedMoreData;

									if( _current[1] == '\n' ) {
										inUri = false;
										newline = true;
										++_current;
										break;
									}
									else { _state = State.Error; return ParsingResult.Error; }

								case '\n': // LF
									_uriEnd = _current;
									inUri = false;
									newline = true;
									break;

								case ' ':
									_uriEnd = _current;
									inUri = false;
									break;

								case '?':
									if( _queryStart == null ) _queryStart = _current + 1;
									else { _state = State.Error; return ParsingResult.Error; }

									break;

								case '#':
									if( _fragmentStart == null ) _fragmentStart = _current + 1;
									else { _state = State.Error; return ParsingResult.Error; }

									break;
							}

							++_current;
						}

						_trimSpaces = true;

						if( newline ) {
							_state = State.Header;
							return ParsingResult.RequestReady;
						}

						_state = State.Version;
						goto case State.Version;
					}

				case State.Version:
					if( _trimSpaces ) {
						while( _end - _current >= 1 && _current[0] == ' ' )
							++_current;

						if( _end - _current >= 1 ) _trimSpaces = false;
					}

					if( needMoreData = _end - _current < 8 ) return ParsingResult.NeedMoreData;

					if( new CStringSpan( _current, 5 ) != ( CStringSpan ) ( SbcsString ) "HTTP/" ) {
						_state = State.Error;
						return ParsingResult.Error;
					}

					_current += 5;

					_state = State.VersionMajor;
					goto case State.VersionMajor;

				case State.VersionMajor: {
						var current = _current;
						VersionMajor = 0;

						while( true ) {
							if( _end - current < 1 ) return ParsingResult.NeedMoreData;

							if( *current < '0' || *current > '9' ) {
								if( current != _current ) {
									if( *current == '.' ) {
										_current = current + 1;
										_state = State.VersionMinor;
										goto case State.VersionMinor;
									}
								}

								_state = State.Error;
								return ParsingResult.Error;
							}

							// checked { VersionMajor *= 10; }
							if( checkwrap( VersionMinor *= 10 ) ) { _state = State.Error; return ParsingResult.Error; }

							VersionMajor += *current - ( byte ) '0';

							++current;
						}
					}

				case State.VersionMinor: {
						var current = _current;
						VersionMinor = 0;

						while( true ) {
							if( _end - current < 1 ) return ParsingResult.NeedMoreData;

							if( *current < '0' || *current > '9' ) {
								if( current != _current ) {
									if( *current == '\r' ) {
										if( _end - current < 4 ) return ParsingResult.NeedMoreData;

										if( current[1] == '\n' ) {
											_current = current + 2;

											_headerStart = _current;
											_state = State.Header;
											return ParsingResult.RequestReady;
										}
									}
								}

								_state = State.Error;
								return ParsingResult.Error;
							}

							// checked { VersionMinor *= 10; }
							if( checkwrap( VersionMinor *= 10 ) ) { _state = State.Error; return ParsingResult.Error; }

							VersionMinor += *current - ( byte ) '0';

							++current;
						}
					}

				case State.Header: {
						if( _end - _current < 2 ) return ParsingResult.NeedMoreData;
						if( _current[0] == '\r' ) {
							if( _current[1] == '\n' ) {
								_current += 2;
								_state = State.Finished;
								goto case State.Finished;
							}

							_state = State.Error;
							goto case State.Error;
						}

						while( true ) {
							if( _end - _current < 1 ) return ParsingResult.NeedMoreData;

							if( _current[0] == ':' ) {
								_headerEnd = _current;

								++_current;
								_valueStart = _current;
								_state = State.HeaderValue;
								_trimSpaces = true;
								goto case State.HeaderValue;
							}

							if( _current[0] == '\r' ) { _state = State.Error; return ParsingResult.Error; }

							++_current;
						}
					}

				case State.HeaderValue: {
						if( _trimSpaces ) {
							while( _end - _current >= 1 && _current[0] == ' ' )
								++_current;

							_valueStart = _current;
							if( _end - _current >= 1 ) _trimSpaces = false;
						}

						while( true ) {
							if( _end - _current < 1 ) return ParsingResult.NeedMoreData;

							if( _current[0] == '\r' ) {
								if( _end - _current < 4 ) return ParsingResult.NeedMoreData;

								if( _current[1] == '\n' ) {
									var nullForHeader = *_headerEnd; *_headerEnd = 0; // modify source data
									var nullForValue = *_current; *_current = 0;
									listener.Header( new CStringSpan( _headerStart, _headerEnd ), new CStringSpan( _valueStart, _current ) );
									*_headerEnd = nullForHeader;
									*_current = nullForValue;

									_current += 2;
									_headerStart = _current;
									_state = State.Header;
									goto case State.Header;
								}
								else { _state = State.Error; return ParsingResult.Error; }
							}

							++_current;
						}
					}

				case State.Finished: return ParsingResult.Finished;
				case State.Error: return ParsingResult.Error;
			}

			return ParsingResult.Finished;
		}
	}

	public struct HttpResponseParser {
		public enum State : byte {
			Version,
			VersionMajor,
			VersionMinor,
			Status,
			Header,
			HeaderValue,
			Finished,
			Error,
		}

		public enum ParsingResult {
			Error,        // incorrect response
			NeedMoreData, // HTT
			Finished,     // request line and headers parsed
		}

		public interface StreamListener {
			void Header( CStringSpan& header, CStringSpan& value );
		}

		// @{ State
		public HttpStatusCode _statusCode = 0;

		private bool _trimSpaces { get; set; }
		public State _state = State.Version;

		public int VersionMajor, VersionMinor;

		public byte* _current, _end;
		public byte* _headerStart, _headerEnd, _valueStart;
		// @}

		public HttpResponseParser() {
		}

		public void Rebase( byte* start ) {
			if( _current == null ) return;
			var diff = start - _current;
			if( diff == 0 ) return;

			_current += diff;

			if( _end != null ) _end += diff;
			if( _headerStart != null ) _headerStart += diff;
			if( _headerEnd != null ) _headerEnd += diff;
			if( _valueStart != null ) _valueStart += diff;
		}

		public void Reset() {
			_state = State.Version;

			_current = _end = null;
			_statusCode = 0;
			VersionMajor = VersionMinor = 0;
		}

		public void SetInput( void* start, uint length ) {
			_state = State.Version;

			_current = ( byte* ) start;
			_end = _current + length;
			VersionMajor = VersionMinor = 0;
		}

		public void SetInput( SbcsString request ) {
			SetInput( request.GetChars(), request.Length );
		}

		private static bool charseq( byte* ptr, char p0 ) { return ptr[0] == p0; }
		private static bool charseq( byte* ptr, char p0, char p1 ) { return ptr[0] == p0 && ptr[1] == p1; }
		private static bool charseq( byte* ptr, char p0, char p1, char p2 ) { return ptr[0] == p0 && ptr[1] == p1 && ptr[2] == p2; }
		private static bool charseq( byte* ptr, char p0, char p1, char p2, char p3 ) { return ptr[0] == p0 && ptr[1] == p1 && ptr[2] == p2 && ptr[3] == p3; }
		private static bool charseq( byte* ptr, char p0, char p1, char p2, char p3, char p4 ) { return ptr[0] == p0 && ptr[1] == p1 && ptr[2] == p2 && ptr[3] == p3 && ptr[4] == p4; }
		private static bool charseq( byte* ptr, char p0, char p1, char p2, char p3, char p4, char p5 ) { return ptr[0] == p0 && ptr[1] == p1 && ptr[2] == p2 && ptr[3] == p3 && ptr[4] == p4 && ptr[5] == p5; }

		public ParsingResult MoveNext( StreamListener listener ) {
			var needMoreData = false;

			switch( _state ) {
				case State.Version:
					if( needMoreData = _end - _current < 12 ) return ParsingResult.NeedMoreData;

					if( !charseq( _current, 'H', 'T', 'T', 'P', '/' ) ) {
						_state = State.Error;
						return ParsingResult.Error;
					}

					_current += 5;

					_state = State.VersionMajor;
					goto case State.VersionMajor;

				case State.VersionMajor: {
						var current = _current;
						VersionMajor = 0;

						while( true ) {
							if( _end - current < 4 ) return ParsingResult.NeedMoreData;

							if( *current < '0' || *current > '9' ) {
								if( current != _current ) {
									if( *current == '.' ) {
										_current = current + 1;
										_state = State.VersionMinor;
										goto case State.VersionMinor;

									}
								}

								_state = State.Error;
								return ParsingResult.Error;
							}

							// checked { VersionMajor *= 10; }
							if( checkwrap( VersionMinor *= 10 ) ) { _state = State.Error; return ParsingResult.Error; }

							VersionMajor += *current - ( byte ) '0';

							++current;
						}
					}

				case State.VersionMinor: {
						var current = _current;
						VersionMinor = 0;

						while( true ) {
							if( _end - current < 4 ) return ParsingResult.NeedMoreData;

							if( *current < '0' || *current > '9' ) {
								if( current != _current ) {
									if( *current == ' ' ) {
										_current = current + 1;
										_state = State.Status;
										goto case State.Status;
									}
								}

								_state = State.Error;
								return ParsingResult.Error;
							}

							// checked { VersionMinor *= 10; };
							if( checkwrap( VersionMinor *= 10 ) ) { _state = State.Error; return ParsingResult.Error; }

							VersionMinor += *current - ( byte ) '0';

							++current;
						}
					}

				case State.Status: {
						var current = _current;
						var statusCode = 0;

						_statusCode = 0;

						while( true ) {
							if( _end - current < 4 ) return ParsingResult.NeedMoreData;

							if( *current < '0' || *current > '9' ) {
								if( current != _current ) {
									for( ; current < _end; ++current ) {
										if( *current == '\r' ) {
											if( current[1] == '\n' ) {
												_current = current + 2;
												_statusCode = ( HttpStatusCode ) statusCode;

												_headerStart = _current;
												_state = State.Header;
												goto case State.Header;
											}

											_state = State.Error;
											goto case State.Error;
										}
									}
								}

								return ParsingResult.NeedMoreData;
							}

							// checked { statusCode *= 10; }
							if( checkwrap( statusCode *= 10 ) ) { _state = State.Error; return ParsingResult.Error; }

							statusCode += *current - ( byte ) '0';

							++current;
						}
					}

				case State.Header: {
						if( _end - _current < 2 ) return ParsingResult.NeedMoreData;
						if( _current[0] == '\r' ) {
							if( _current[1] == '\n' ) {
								_current += 2;
								_state = State.Finished;
								goto case State.Finished;
							}

							_state = State.Error;
							goto case State.Error;
						}

						while( true ) {
							if( _end - _current < 1 ) return ParsingResult.NeedMoreData;

							if( _current[0] == ':' ) {
								_headerEnd = _current;

								++_current;
								_valueStart = _current;
								_state = State.HeaderValue;
								_trimSpaces = true;
								goto case State.HeaderValue;
							}

							if( _current[0] == '\r' ) { _state = State.Error; return ParsingResult.Error; }

							++_current;
						}
					}

				case State.HeaderValue: {
						if( _trimSpaces ) {
							while( _end - _current >= 1 && _current[0] == ' ' )
								++_current;

							_valueStart = _current;
							if( _end - _current >= 1 ) _trimSpaces = false;
						}

						while( true ) {
							if( _end - _current < 1 ) return ParsingResult.NeedMoreData;

							if( _current[0] == '\r' ) {
								if( _end - _current < 4 ) return ParsingResult.NeedMoreData;

								if( _current[1] == '\n' ) {
									var nullForHeader = *_headerEnd; *_headerEnd = 0; // modify source data
									var nullForValue = *_current; *_current = 0;
									listener.Header( new CStringSpan( _headerStart, _headerEnd ), new CStringSpan( _valueStart, _current ) );
									*_headerEnd = nullForHeader;
									*_current = nullForValue;

									_current += 2;
									_headerStart = _current;
									_state = State.Header;
									goto case State.Header;
								}
								else { _state = State.Error; return ParsingResult.Error; }
							}

							++_current;
						}
					}

				case State.Finished: return ParsingResult.Finished;
				case State.Error: return ParsingResult.Error;
			}

			return ParsingResult.Finished;
		}
	}

	public class HttpFormatter {
		public static bool TryParseAcceptEncoding( byte* parsePosition, uint remaining, DecompressionMethods& result ) {
			if( remaining >= 13 && new CStringSpan( parsePosition, 13 ) == ( CStringSpan ) ( SbcsString ) "gzip, deflate" )
				result = DecompressionMethods.GZip | DecompressionMethods.Deflate;

			return false;
		}

		public static bool TryParseDateTime( byte* parsePosition, uint remaining, DateTime& result ) {
			result = DateTime.MinValue;

			// parsing of RFC 1123 format
			if( remaining < 26 ) return false;

			switch( new CStringSpan( parsePosition, 5 ) ) {
				case "Mon, ":
				case "Tue, ":
				case "Wed, ":
				case "Thu, ":
				case "Fri, ":
				case "Sat, ":
				case "Sun, ":
					break;

				default:
					return false;
			}
			parsePosition += 5;
			remaining -= 5;

			// do not check DayOfWeek

			int day;
			if( !int.TryFetch( parsePosition, remaining, day ) || remaining == 0 ) return false;

			int month;
			switch( new CStringSpan( parsePosition, 3 ) ) {
				case "Jan": month = 1; break;
				case "Feb": month = 2; break;
				case "Mar": month = 3; break;
				case "Apr": month = 4; break;
				case "May": month = 5; break;
				case "Jun": month = 6; break;
				case "Jul": month = 7; break;
				case "Aug": month = 8; break;
				case "Sep": month = 9; break;
				case "Oct": month = 10; break;
				case "Nov": month = 11; break;
				case "Dec": month = 12; break;
					break;

				default:
					return false;
			}
			parsePosition += 3;
			remaining -= 3;

			int year;
			if( !int.TryFetch( parsePosition, remaining, year ) || remaining == 0 ) return false;

			int hour;
			if( !int.TryFetch( parsePosition, remaining, hour ) || remaining == 0 ) return false;
			if( *parsePosition++ != ':' || --remaining == 0 ) return false;

			int minute;
			if( !int.TryFetch( parsePosition, remaining, minute ) || remaining == 0 ) return false;
			if( *parsePosition++ != ':' || --remaining == 0 ) return false;

			int second;
			if( !int.TryFetch( parsePosition, remaining, second ) || remaining == 0 ) return false;

			if( remaining < 3 ) return false;

			switch( new CStringSpan( parsePosition, 3 ) ) {
				case "GMT": break;
				default: return false;
			}

			result = new DateTime( year, month, day, hour, minute, second, DateTimeKind.Utc );
			return true;
		}

		// Format DateTime to something like that 'Wed, 21 Jan 2004 19:51:30 GMT'
		public static void FormatDateTime( StringBuilder builder, DateTime value ) {
			int year, dayOfYear, month, day;
			DayOfWeek dayOfWeek;

			value.GetDateValues( year, dayOfYear, month, day, dayOfWeek );

			var hour = value.Hour;
			var minute = value.Minute;
			var second = value.Second;

			string dayOfWeekName;
			switch( dayOfWeek ) {
				case DayOfWeek.Monday: dayOfWeekName = "Mon"; break;
				case DayOfWeek.Tuesday: dayOfWeekName = "Tue"; break;
				case DayOfWeek.Wednesday: dayOfWeekName = "Wed"; break;
				case DayOfWeek.Thursday: dayOfWeekName = "Thu"; break;
				case DayOfWeek.Friday: dayOfWeekName = "Fri"; break;
				case DayOfWeek.Saturday: dayOfWeekName = "Sat"; break;
				case DayOfWeek.Sunday: dayOfWeekName = "Sun"; break;
			}

			string monthName;
			switch( month ) {
				case 1: monthName = "Jan"; break;
				case 2: monthName = "Feb"; break;
				case 3: monthName = "Mar"; break;
				case 4: monthName = "Apr"; break;
				case 5: monthName = "May"; break;
				case 6: monthName = "Jun"; break;
				case 7: monthName = "Jul"; break;
				case 8: monthName = "Aug"; break;
				case 9: monthName = "Sep"; break;
				case 10: monthName = "Oct"; break;
				case 11: monthName = "Nov"; break;
				case 12: monthName = "Dec"; break;
			}

			builder.Append( dayOfWeekName );
			builder.Append( ", " );
			builder.Append( day );
			builder.Append( ' ' );
			builder.Append( monthName );
			builder.Append( ' ' );
			builder.Append( year );
			builder.Append( ' ' );
			builder.Append( hour, "D2" );
			builder.Append( ':' );
			builder.Append( minute, "D2" );
			builder.Append( ':' );
			builder.Append( second, "D2" );
			builder.Append( " GMT" );
		}

		/// See header description at http://en.wikipedia.org/wiki/List_of_HTTP_header_fields

		public static void HeaderDate( StringBuilder result, DateTime time ) { HeaderDate( result, time, "Date" ); }
		public static void HeaderExpires( StringBuilder result, DateTime time ) { HeaderDate( result, time, "Expires" ); }
		public static void HeaderLastModified( StringBuilder result, DateTime time ) { HeaderDate( result, time, "Last-Modified" ); }

		public static void StatusCode( StringBuilder result, HttpStatusCode statusCode ) {
			result.Append( "HTTP/1.1 " );
			result.Append( ( int ) statusCode );
			result.Append( ' ' );
			result.Append( statusCode );
			result.AppendLine();
		}

		public static void HeaderDate( StringBuilder result, DateTime time, vararg string dateName ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				var dateBuilder = builder.Value;
				FormatDateTime( dateBuilder, time );

				foreach( var item in dateName ) {
					result.Append( item );
					result.Append( ": " );
					result.Append( dateBuilder );
					result.AppendLine();
				}
			}
		}

		public static void HeaderKeepAlive( StringBuilder result, bool keepAlive ) {
			if( keepAlive ) result.AppendLine( "Connection: Keep-Alive" );
			else result.AppendLine( "Connection: Close" );
		}

		public static void HeaderContentEncoding( StringBuilder result, DecompressionMethods value ) {
			result.Append( "Content-Encoding: " );
			switch( value ) {
				case DecompressionMethods.GZip: result.Append( "gzip" ); break;
				case DecompressionMethods.Deflate: result.Append( "deflate" ); break;
				case DecompressionMethods.Brotli: result.Append( "br" ); break;
			}
			result.AppendLine();
		}

		public static void HeaderContentLength( StringBuilder result, long length ) {
			result.Append( "Content-Length: " );
			result.Append( length );
			result.AppendLine();
		}

		public static void HeaderServer( StringBuilder result, string server ) {
			result.Append( "Server: " );
			result.Append( server );
			result.AppendLine();
		}

		public static void HeaderRetryAfter( StringBuilder result, int seconds ) {
			result.Append( "Retry-After: " );
			result.Append( seconds );
			result.AppendLine();
		}

		public static void HeaderSetCookie( StringBuilder result, string value ) {
			result.Append( "Set-Cookie: " );
			result.Append( value );
			result.AppendLine();
		}

		public static void HeaderRefresh( StringBuilder result, int seconds, string url = null ) {
			result.Append( "Refresh: " );
			result.Append( seconds );

			if( url != null ) {
				result.Append( "; url=" );
				result.Append( url );
			}

			result.AppendLine();
		}

		public static void HeaderDNT( StringBuilder result, bool value ) {
			result.Append( "DNT: " );
			result.Append( value ? 1 : 0 );
			result.AppendLine();
		}

		public static void HeaderAccessControl( StringBuilder result, string action ) {
			result.Append( "Access-Control: " );
			result.AppendLine( action );
		}

		/// http://wiki.nginx.org/X-accel#X-Accel-Redirect
		public static void HeaderXAccelBuffering( StringBuilder result, string url ) {
			result.Append( "X-Accel-Redirect: " );
			result.AppendLine( url );
		}

		/// http://wiki.nginx.org/X-accel#X-Accel-Buffering
		public static void HeaderXAccelBuffering( StringBuilder result, bool allow ) {
			result.Append( "X-Accel-Buffering: " );
			result.AppendLine( allow ? "yes" : "no" );
		}

		/// http://wiki.nginx.org/X-accel#X-Accel-Expires
		public static void HeaderXAccelExpires( StringBuilder result, int seconds ) {
			result.Append( "X-Accel-Expires: " );
			result.Append( seconds );
			result.AppendLine();
		}

		/// http://wiki.nginx.org/X-accel#X-Accel-Limit-Rate
		/// http://nginx.org/en/docs/http/ngx_http_core_module.html#limit_rate
		public static void HeaderXAccelLimitRate( StringBuilder result, int bytes ) {
			result.Append( "X-Accel-Limit-Rate: " );
			result.Append( bytes );
			result.AppendLine();
		}

		public static void HeaderAccessControlAllowOrigin( StringBuilder result, string origin ) {
			result.Append( "Access-Control-Allow-Origin: " );
			result.AppendLine( origin );
		}

		public static void HeaderXPoweredBy( StringBuilder result, string server ) {
			result.Append( "X-Powered-By: " );
			result.AppendLine( server );
		}

		public static void HeaderXFrameOptions( StringBuilder result, bool allow ) {
			result.Append( "X-Frame-Options: " );
			result.AppendLine( allow ? "SAMEORIGIN" : "DENY" );
		}

		public static void HeaderContentType( StringBuilder result, string contentType ) {
			result.Append( "Content-Type: " );
			result.Append( contentType );
			result.AppendLine();
		}

		public static void HeaderContentType( StringBuilder result, string contentType, TextEncodingKind textEncodingKind, CodePageID codePageID = Environment.DefaultCodePage ) {
			result.Append( "Content-Type: " );
			result.Append( contentType );
			result.Append( "; charset=" );

			switch( textEncodingKind ) {
				case TextEncodingKind.CodePage:
					switch( codePageID ) {
						case CodePageID._866: result.AppendLine( "cp866" ); break;
						case CodePageID._20866: result.AppendLine( "koi8-r" ); break;
						case CodePageID._21866: result.AppendLine( "koi8-u" ); break;
						// case CodePageID._1250: result.AppendLine( "windows-1250" ); break;
						case CodePageID._1251: result.AppendLine( "windows-1251" ); break;
						// case CodePageID._1252: result.AppendLine( "windows-1252" ); break;
						// case CodePageID._1255: result.AppendLine( "windows-1255" ); break;
						// case CodePageID._1256: result.AppendLine( "windows-1256" ); break;
						default: result.AppendLine( "none" ); break;
					}
					break;

				case TextEncodingKind.Utf8:
					result.AppendLine( "utf-8" );
					break;

				case TextEncodingKind.Utf16:
					result.AppendLine( "utf-16le" );
					break;

				case TextEncodingKind.Utf32:
					result.AppendLine( "utf-32le" );
					break;
			}
		}
	}

	public enum HttpRequestHeader {
		CacheControl,
		Connection,
		Date,
		KeepAlive,
		Pragma,
		Trailer,
		TransferEncoding,
		Upgrade,
		Via,
		Warning,
		Allow,
		ContentLength,
		ContentType,
		ContentEncoding,
		ContentLanguage,
		ContentLocation,
		ContentMd5,
		ContentRange,
		Expires,
		LastModified,
		Accept,
		AcceptCharset,
		AcceptEncoding,
		AcceptLanguage,
		Authorization,
		Cookie,
		Expect,
		From,
		Host,
		IfMatch,
		IfModifiedSince,
		IfNoneMatch,
		IfRange,
		IfUnmodifiedSince,
		MaxForwards,
		ProxyAuthorization,
		Referer,
		Range,
		Te,
		Translate,
		UserAgent,
	}

	public enum HttpResponseHeader {
		CacheControl,
		Connection,
		Date,
		KeepAlive,
		Pragma,
		Trailer,
		TransferEncoding,
		Upgrade,
		Via,
		Warning,
		Allow,
		ContentLength,
		ContentType,
		ContentEncoding,
		ContentLanguage,
		ContentLocation,
		ContentMd5,
		ContentRange,
		Expires,
		LastModified,
		AcceptRanges,
		Age,
		ETag,
		Location,
		ProxyAuthenticate,
		RetryAfter,
		Server,
		SetCookie,
		Vary,
		WwwAuthenticate,
	}

	public enum HttpStatusCode {
		Continue =                     100,
		SwitchingProtocols =           101,
		OK =                           200,
		Created =                      201,
		Accepted =                     202,
		NonAuthoritativeInformation =  203,
		NoContent =                    204,
		ResetContent =                 205,
		PartialContent =               206,
		MultipleChoices =              300,
		Ambiguous =                    300,
		MovedPermanently =             301,
		Moved =                        301,
		Found =                        302,
		Redirect =                     302,
		SeeOther =                     303,
		RedirectMethod =               303,
		NotModified =                  304,
		UseProxy =                     305,
		Unused =                       306,
		TemporaryRedirect =            307,
		RedirectKeepVerb =             307,
		BadRequest =                   400,
		Unauthorized =                 401,
		PaymentRequired =              402,
		Forbidden =                    403,
		NotFound =                     404,
		MethodNotAllowed =             405,
		NotAcceptable =                406,
		ProxyAuthenticationRequired =  407,
		RequestTimeout =               408,
		Conflict =                     409,
		Gone =                         410,
		LengthRequired =               411,
		PreconditionFailed =           412,
		RequestEntityTooLarge =        413,
		RequestUriTooLong =            414,
		UnsupportedMediaType =         415,
		RequestedRangeNotSatisfiable = 416,
		ExpectationFailed =            417,
		Teapot =                       418,
		InternalServerError =          500,
		NotImplemented =               501,
		BadGateway =                   502,
		ServiceUnavailable =           503,
		GatewayTimeout =               504,
		HttpVersionNotSupported =      505,
	}

	[Flags]
	public enum AuthenticationSchemes {
		None =                            0,
		Digest =                          1,
		Negotiate =                       2,
		Ntlm =                            4,
		IntegratedWindowsAuthentication = 6,
		Basic =                           8,
		Anonymous =                  0x8000,
	}

	[Flags]
	public enum DecompressionMethods {
		None,
		GZip,
		Deflate,
		Brotli,
	}

	public enum HttpMethod {
		Invalid,

		Head,
		Get,
		Post,
		Put,
		Delete,
		Options,
		Trace,
		Connect,
	}
}