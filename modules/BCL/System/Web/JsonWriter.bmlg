//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Web {
	public class JsonWriter {
		protected StringBuilder _result;

		public JsonWriter( StringBuilder result ) {
			_result = result;
		}

		protected void TryInsertComma() {
			if( _result.Length > 0 )
				switch( _result[_result.Length - 1] ) {
					case '{':
					case '[':
					case ',':
					case ':':
						break;

					default:
						_result.Append( ',' );
						break;
				}
		}

		public void ArrayStart() { TryInsertComma(); _result.Append( '[' ); }
		public void ArrayEnd() { _result.Append( ']' ); }

		public void ObjectStart() { TryInsertComma(); _result.Append( '{' ); }
		public void ObjectEnd() { _result.Append( '}' ); }

		public void PropertyStart( string name ) {
			TryInsertComma();
			Value( name );
			_result.Append( ':' );
		}

		public void Property( string name, bool value ) { PropertyStart( name ); Value( value ); }
		public void Property( string name, int value ) { PropertyStart( name ); Value( value ); }
		public void Property( string name, uint value ) { PropertyStart( name ); Value( value ); }
		public void Property( string name, long value ) { PropertyStart( name ); Value( value ); }
		public void Property( string name, ulong value ) { PropertyStart( name ); Value( value ); }
		public void Property( string name, double value ) { PropertyStart( name ); Value( value ); }
		public void Property( string name, string value ) { PropertyStart( name ); Value( value ); }
		public void Property( string name, string format, vararg TypedReference parameters ) { PropertyStart( name ); Value( format, vararg( parameters, parameters.Length ) ); }
		public void Property( string name, TypedReference value, string format = "" ) { PropertyStart( name ); Value( value, format ); }

		public void Value( bool value ) { TryInsertComma(); _result.Append( value ); }
		public void Value( int value ) { TryInsertComma(); _result.Append( value ); }
		public void Value( long value ) { TryInsertComma(); _result.Append( value ); }
		public void Value( uint value ) { TryInsertComma(); _result.Append( value ); }
		public void Value( ulong value ) { TryInsertComma(); _result.Append( value ); }

		public void Null() { TryInsertComma(); _result.Append( "null" ); }

		public void Value( double value ) {
			TryInsertComma();

			var quoting = value.IsNaN | value.IsInfinity;

			if( quoting ) _result.Append( '"' );
			_result.Append( value );
			if( quoting ) _result.Append( '"' );
		}

		public void Value( char* value, uint length ) {
			TryInsertComma();
			_result.EnsureCapacity( length + 2 );
			_result.Append( '"' );

			for( var i = 0U; i < length; ++i ) {
				var ch = value[i];

				switch( ch ) {
					case '"': _result.Append( @"\""" ); break;
					case '\\': _result.Append( @"\\" ); break;
					case '\b': _result.Append( @"\b" ); break;
					case '\f': _result.Append( @"\f" ); break;
					case '\n': _result.Append( @"\n" ); break;
					case '\r': _result.Append( @"\r" ); break;
					case '\t': _result.Append( @"\t" ); break;

					default:
						if( ch <= ( char ) 0x1F ) { _result.Append( @"\u" ); _result.Append( ( ushort ) ch, "X4" ); }
						else _result.Append( ch );
						break;
				}
			}

			_result.Append( '"' );
		}

		public void Value( string value ) {
			if( value == null ) Null();
			else Value( value.GetChars(), value.Length );
		}

		public void Value( string format, vararg TypedReference parameters ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.AppendFormat( format, vararg( parameters, parameters.Length ) );
				Value( builder.Value.GetChars(), builder.Value.Length );
			}
		}

		public void ValueConcat( vararg TypedReference parameters ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Concat( vararg( parameters, parameters.Length ) );
				Value( builder.Value.GetChars(), builder.Value.Length );
			}
		}

		public void Value( TypedReference value, string customFormat = "" ) {
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				builder.Value.Append( value, customFormat );
				Value( builder.Value.GetChars(), builder.Value.Length );
			}
		}

		/// Usage:
		/// using( writer.Object( "obj" ) ) writer.Property( "p", "value" );
		public ObjectScope Object() { return new ObjectScope( this ); }
		public ObjectScope Object( string property ) { PropertyStart( property ); return new ObjectScope( this ); }

		public struct ObjectScope : IDisposable {
			private declaringtype _parent;

			public ObjectScope( declaringtype parent ) {
				_parent = parent;
				_parent.ObjectStart();
			}

			public void Dispose() {
				_parent.ObjectEnd();
			}
		}

		/// Usage:
		/// using( writer.Array( "arr" ) ) { writer.Value( "v1" ); writer.Value( "v2" ); }
		public ArrayScope Array() { return new ArrayScope( this ); }
		public ArrayScope Array( string property ) { PropertyStart( property ); return new ArrayScope( this ); }

		public struct ArrayScope : IDisposable {
			private declaringtype _parent;

			public ArrayScope( declaringtype parent ) {
				_parent = parent;
				_parent.ArrayStart();
			}

			public void Dispose() {
				_parent.ArrayEnd();
			}
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Append( _result );
		}
	}
}