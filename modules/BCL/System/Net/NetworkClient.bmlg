//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

namespace System.Net {
	public abstract partial class NetworkClient {
		public TimeSpan ConnectTimeout { get { return _implConnectTimeout; } set { _implConnectTimeout = value; } }
		public TimeSpan ReadTimeout { get { return _implReadTimeout; } set { _implReadTimeout = value; } }
		public TimeSpan WriteTimeout { get { return _implWriteTimeout; } set { _implWriteTimeout = value; } }
		public bool ImmediateDelivery { get { return _implImmediateDelivery; } set { _implImmediateDelivery = value; } }

		protected IStream _stream;

		protected NetworkClient() { _implInitialize(); }

		/// @{ Connect to TCP server
		public bool Connect( IPv4Endpoint endpoint ) { return _implConnect( endpoint, IPv4Address.AllInterfaces ); }
		public bool Connect( IPv6Endpoint endpoint ) { return _implConnect( endpoint, IPv6Address.AllInterfaces ); }

		public bool Connect( IPv4Endpoint endpoint, IPv4Address @interface ) { return _implConnect( endpoint, @interface ); }
		public bool Connect( IPv6Endpoint endpoint, IPv6Address @interface ) { return _implConnect( endpoint, @interface ); }
		/// @}

		/// @{ Connect to named pipe on Windows ( \\.\pipe\LocalPipe, \\RemoteServer\pipe\RemotePipe ) or to unix domain socket ( /run/server.socket )
		public bool ConnectLocal( string endpoint ) { return _implConnectLocal( endpoint ); }
		public bool ConnectLocal( Utf8String endpoint ) { return _implConnectLocal( endpoint ); }
		/// @}

		/// @{ Single client accept methods. To accept multiple clients use NetworkServer
		public bool Accept( IPv4Endpoint endpoint ) { return _implAccept( endpoint ); }
		public bool Accept( IPv6Endpoint endpoint ) { return _implAccept( endpoint ); }

		public bool AcceptLocal( string endpoint ) { return _implAcceptLocal( endpoint ); }
		public bool AcceptLocal( Utf8String endpoint ) { return _implAcceptLocal( endpoint ); }
		/// @}

		/// @{ Use existing stream (for example PipeStream)
		public bool Connect( IStream stream ) {
			_stream = stream;
			return OnConnected();
		}
		/// @}

		protected virtual bool OnConnected() { return true; }
	}
}