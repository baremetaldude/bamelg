//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net.Mime;
using System.Runtime;
using System.Text;
using System.Web;

namespace System.Net {
	/// Simple non-caching embedded HTTP server
	/// Must be covered by nginx if you plan to expose it to internet (caching, load-balancing etc)
	/// Use UTF-16 encoding to output dynamic HTML (conversion can be performed on front-end(nginx) to offload WEB-server )
	/// Use local domain sockets for nginx's upstream
	/// Override 'CreateHandler' to provide appropriate handlers for URLs
	public partial class HttpServer : NetworkServer {
		// @{ stats
		public int ValidRequestCount = 0, InvalidRequestCount = 0; // how many valid requests arrived
		public int ActiveHandlerCount = 0, PeakHandlerCount = 0;
		// @}

		// @{ Shared resources for accepted clients
		protected CachingStack<StringBuilder> _headerBuilders = new CachingStack<StringBuilder>( () => new StringBuilder() { NewLine = "\r\n" }, x => x.Clear() );
		protected CachingStack<StringBuilder> _responseBuilders = new CachingStack<StringBuilder>( () => new StringBuilder() { NewLine = "\r\n" }, x => x.Clear() );

		public int CachedHeaderBuilders { get { return _headerBuilders.Count; } }
		public int CachedResponseBuilders { get { return _responseBuilders.Count; } }
		// @}

		public bool SendServerTokens { get; set; } = true;

		[ReflectionMetadata( Mask = ReflectionMetadata.PublicFields | ReflectionMetadata.NonPublicFields )]
		public struct ServerStats {
			public int ValidRequestCount;
			public int InvalidRequestCount;
			public int CachedHeaderBuilders;
			public int CachedResponseBuilders;
			public int ActiveSessionCount;
			public int TotalAcceptedClientCount;
			public bool ReusePort;
			public bool DefferedAccept;
			public int ListenBacklog;
			public int ClientFiberStackPages;
			public int MaxClientRequestLength;
			public int ResponseBufferLength;
			public int MaxSessions;
			public int PeakActiveSessionCount;
			public int ActiveHandlerCount;
			public int PeakHandlerCount;

			public ServerStats() {
			}
		}

		public ServerStats GetStats() {
			var stats = new ServerStats {
				ValidRequestCount = ValidRequestCount,
				InvalidRequestCount = InvalidRequestCount,
				CachedHeaderBuilders = CachedHeaderBuilders,
				CachedResponseBuilders = CachedResponseBuilders,

				ActiveSessionCount = ActiveSessionCount,
				PeakActiveSessionCount = PeakActiveSessionCount,
				ActiveHandlerCount = ActiveHandlerCount,
				PeakHandlerCount = PeakHandlerCount,
				TotalAcceptedClientCount = TotalAcceptedClientCount,
				ReusePort = ReusePort,
				DefferedAccept = DefferedAccept,
				ListenBacklog = ListenBacklog,
				ClientFiberStackPages = ClientFiberStackPages,
				MaxClientRequestLength = MaxClientRequestLength,
				ResponseBufferLength = ResponseBufferLength,
				MaxSessions = MaxSessions
			};

			return stats;
		}

		public HttpServer() {
		}

		protected override NetworkServer.SessionHandler CreateSession( IStream stream ) {
			return new SessionHandler( this, stream );
		}

		public partial class SessionHandler : basetype.SessionHandler, HttpRequestParser.StreamListener {
			[Overlapped( Offset = memberinfo( basetype.Server ).ByteOffset )]
			public new declaringtype Server;

			internal HttpRequestParser _parser = new HttpRequestParser(); // streaming HTTP parser

			internal RequestHandler Handler;

			public bool IsKeepAliveRequest { get; set; } // dont close connection after response sent
			internal bool Quit { get; set; }

			public DateTime _if_modified_since;
			public long _contentLength;
			public bool _needToParseFormData;

			public CStringSpan Resource { get { return _parser._resource; } }

			public SessionHandler( declaringtype parent, IStream stream )
				: base( parent, stream ) {
			}

			private void Reset() {
				_contentLength = -1;
				_if_modified_since = DateTime.MinValue;
				_needToParseFormData = false;
			}

			protected override void Worker() {
				Reset();
				var requestBuffer = ReadStream.BufferInfo;

				while( !Quit ) {
					int readen = requestBuffer->AvailableToRead;
					if( readen == 0 ) WriteStream.Flush( FlushKind.SynchronizeWrite ); // try to flush multiple responses

					using( new Fiber.CancellationRegion() ) {
						ReadStream.Flush( FlushKind.Read );

						if( Fiber.IsCancelled ) return;
					}

					readen = requestBuffer->AvailableToRead - readen;

					if( readen == 0 | Quit ) return;
					var bufferLimitReached = requestBuffer->Capacity == requestBuffer->AvailableToRead;

					if( _parser._current == null ) // first run
						_parser.SetInput( requestBuffer->ReadBufferStart, requestBuffer->AvailableToRead );
					else
						_parser.Rebase( requestBuffer->ReadBufferStart );

				parseNext:
					var parseResult = _parser.MoveNext( this );

					[CheckAllEnumValues]
					switch( parseResult ) {
						case HttpRequestParser.ParsingResult.Error:
							Handler = null; // close connection
							++Server.InvalidRequestCount;
							return;

						case HttpRequestParser.ParsingResult.NeedMoreData:
							if( bufferLimitReached ) {
								Handler = null; // close connection
								return;
							}

							continue; // wait more data

						case HttpRequestParser.ParsingResult.RequestReady: {
								++Server.ValidRequestCount;

								*_parser._resourceEnd = 0;
								if( _parser._queryEnd != null ) *_parser._queryEnd = 0;
								if( _parser._fragmentEnd != null ) *_parser._fragmentEnd = 0;
								TraceClientRequest( this );

								Handler = Server.CreateHandler( this );
								if( Handler == null ) {
									SendStatus( HttpStatusCode.NotFound );
									goto parseNext;
								}

								++Server.ActiveHandlerCount;
								if( Server.ActiveHandlerCount > Server.PeakHandlerCount ) Server.PeakHandlerCount = Server.ActiveHandlerCount;

								goto parseNext;
							}

						case HttpRequestParser.ParsingResult.Finished: {
								var bytesToTrim = ( int )( _parser._current - requestBuffer->ReadBufferStart );
								requestBuffer->OnReadPerformed( bytesToTrim );

								if( Handler != null ) {
									if( _if_modified_since != DateTime.MinValue && !Handler.CheckModifiedSince( _if_modified_since ) ) {
										SendStatus( HttpStatusCode.NotModified );
									}
									else {
										if( _contentLength > 0 )
											Handler.BeginRequestParsing( new ReadSubStream( ReadStream, _contentLength ) );

										Handler.BeginOutput();
									}

									Handler = null;
								}

								if( IsKeepAliveRequest ) { // wait for new request
									TraceClientWaitNewRequest( this );

									_parser.Reset();
									Reset();

									if( requestBuffer->AvailableToRead > 0 ) {
										_parser.SetInput( requestBuffer->ReadBufferStart, requestBuffer->AvailableToRead );
										goto parseNext; // try parse buffered data, before touching socket
									}

									continue;
								}

								Handler = null; // close connection
								return;
							}
					}
				}
			}

			public void SendStatus( HttpStatusCode code ) {
				TraceResponseStatus( this, code );

				var formatter = new PrimitiveTypesFormatter.FormattingHelper();
				formatter.Append( "HTTP/1.1 " );
				formatter.FormatInt32( code.Value() );
				formatter.Append( "\r\nServer: bamelg" );
				if( Server.SendServerTokens ) formatter.Append( "\r\nX-Powered-By: bamelg" );
				formatter.Append( "\r\nContent-Length: 0\r\n\r\n" );

				var codeBuffer = formatter.Buffer;

				Stream.Write( codeBuffer.GetChars(), ( int ) codeBuffer.Length );
			}

			#region HttpRequestParser.StreamListener implementation
			void HttpRequestParser.StreamListener.Header( CStringSpan& header, CStringSpan& value ) {
				CString.MakeLower( header.Location, header.Length ); // in-place modification

				TraceRequestHeader( this, header, value );

				switch( header ) {
					case "connection":
						CString.MakeLower( value.Location, value.Length ); // in-place modification
						IsKeepAliveRequest = value == ( SbcsString ) "keep-alive";
						break;

					case "if-modified-since":
						HttpFormatter.TryParseDateTime( value.Location, value.Length, _if_modified_since );
						break;

					case "content-length":
						long.TryParse( value, _contentLength );
						if( _contentLength <= 0 ) _contentLength = -1;
						break;

					case "content-type":
						if( value.StartsWith( "application/x-www-form-urlencoded" ) )
							_needToParseFormData = true;
						break;
				}

				if( Handler != null ) Handler.OnHeaderParsed( header, value );
			}
			#endregion
		}

		public abstract class RequestHandler {
			protected SessionHandler Session;

			public long RequestLength { get { return Session._contentLength; } }
			public HttpMethod Method { get { return Session._parser._method; } }

			public RequestHandler( SessionHandler session ) {
				Session = session;
			}

			~RequestHandler() {
				--Session.Server.ActiveHandlerCount;
			}

			public virtual void OnHeaderParsed( CStringSpan& header, CStringSpan& value ) {
			}

			public abstract void BeginOutput();

			public virtual void BeginRequestParsing( IStream requestStream ) {
				if( Session._needToParseFormData ) ParsePostParameters( requestStream );
			}

			public virtual void OnPostParameterParsed( CUtf16StringSpan name, CUtf16StringSpan value ) { }

			protected void ParsePostParameters( IStream requestStream ) {
				using( var nameBuilder = StringBuilder.CachedBuilders.PopScoped() )
				using( var valueBuilder = StringBuilder.CachedBuilders.PopScoped() ) {
					var requestBuffer = requestStream.BufferInfo;

					var name = nameBuilder.Value;
					var value = valueBuilder.Value;
					var current = name;

					var escapedState = -1;
					byte[2] escaped;

					for( var total = RequestLength; total > 0; ) {
						int readen = requestBuffer->AvailableToRead;
						if( readen == 0 )
							using( new Fiber.CancellationRegion() ) {
								requestStream.Flush( FlushKind.Read );
								readen = requestBuffer->AvailableToRead;
								if( Fiber.IsCancelled ) return;
							}

						if( readen == 0 ) return;

						var buffer = requestBuffer->ReadBufferStart;
						total -= readen;

						for( var i = 0; i < readen; ++i ) {
							switch( buffer[i] ) {
								case '%':
									if( escapedState != -1 ) return; // bad input
									escapedState = 0;
									break;

								case '=':
									if( escapedState != -1 ) return; // bad input
									if( current != name ) return; // bad input
									current = value;
									break;

								case '&':
									if( escapedState != -1 ) return; // bad input

									OnPostParameterParsed( name.GetTextSpan(), value.GetTextSpan() );
									name.Clear();
									value.Clear();
									current = name;
									break;

								default:
									switch( escapedState ) {
										case -1:
											current.Append( ( char ) buffer[i] );
											break;

										case 0:
											escaped[0] = buffer[i];
											escapedState = 1;
											break;

										case 1: {
												escaped[1] = buffer[i];
												escapedState = -1;

												byte escapedChar;
												if( PrimitiveTypesParser.TryParseHexUInt8( &escaped[0], 2, escapedChar ) )
													current.Append( ( char ) escapedChar );
											} break;
									}

									break;
							}
						}

						requestBuffer->OnReadPerformed( readen );
					}

					if( name.Length > 0 ) OnPostParameterParsed( name.GetTextSpan(), value.GetTextSpan() );
				}
			}

			public virtual bool CheckModifiedSince( DateTime date ) { return true; }

			public override void Dispose() {
				Session = null;
				base.Dispose();
			}
		}

		// Designed for ease of use, not for streaming
		public abstract class PageHandler : RequestHandler {
			public PageHandler( SessionHandler session, string mediaType = "text/html" )
				: base( session ) {
				Headers = Session.Server._headerBuilders.Pop();
				Response = Session.Server._responseBuilders.Pop();

				MediaType = mediaType;
			}

			~PageHandler() {
				Session.Server._headerBuilders.Push( Headers );
				Session.Server._responseBuilders.Push( Response );
			}

			public StringBuilder Headers, Response; // Do not capture these fields; them cached and shared between requests

			public abstract void OnRender(); // Fill 'Response' with text

			public TextEncodingKind TextEncodingKind = TextEncodingKind.Utf16;
			public CodePageID TextEncodingCodepage = Environment.DefaultCodePage;
			public HttpStatusCode StatusCode = HttpStatusCode.OK;

			public int CacheTimeout = 0;

			public string MediaType;

			protected virtual void AddCustomHeaders() {
				AddHeaderContentType( MediaType );
				// AddHeaderDate( Fiber.UtcNow );
				AddHeaderCache();
				AddHeaderServer();
				HttpFormatter.HeaderXFrameOptions( Headers, false );
			}

			protected void AddHeaderCache() {
				if( CacheTimeout <= 0 ) {
					AddHeaderNoCache();
				}
				else {
					Headers.Concat( "Cache-Control: max-age=", CacheTimeout ); Headers.AppendLine();
					// HttpFormatter.HeaderXAccelExpires( Headers, CacheTimeout );
				}
			}

			protected void AddHeaderDate( DateTime time ) {
				if( CacheTimeout <= 0 )
					HttpFormatter.HeaderDate( Headers, time, "Date", "Expires", "Last-Modified" );
				else {
					HttpFormatter.HeaderDate( Headers, time, "Date", "Last-Modified" );
					HttpFormatter.HeaderDate( Headers, time + TimeSpan.FromSeconds( CacheTimeout ), "Expires" );
				}
			}

			protected void AddHeaderServer() {
				if( !Session.Server.SendServerTokens ) return;

				HttpFormatter.HeaderServer( Headers, "bamelg" );
				HttpFormatter.HeaderXPoweredBy( Headers, "bamelg" );
			}

			protected void AddHeaderNoCache() {
				Headers.AppendLine( "Pragma: no-cache" );
				Headers.AppendLine( "Cache-Control: no-store,no-cache,max-age=0,must-revalidate" );
			}

			protected void AddHeaderContentType( string contentType ) {
				HttpFormatter.HeaderContentType( Headers, contentType, TextEncodingKind, TextEncodingCodepage );
			}

			public override void BeginOutput() {
				OnRender();

				var contentLength = Response.Length;
				switch( TextEncodingKind ) {
					case TextEncodingKind.CodePage:
						break;

					case TextEncodingKind.Utf8: {
							uint characterCount16;
							uint bytesCount;
							Unicode.GetUtf16ByteCountInUtf8( Response.GetChars(), ( uint ) Response.Length, characterCount16, bytesCount );
							contentLength = ( int ) bytesCount;
						} break;

					case TextEncodingKind.Utf16:
						contentLength *= sizeof( char );
						break;

					case TextEncodingKind.Utf32:
						contentLength *= sizeof( uint );
						break;
				}

				// @{ headers
				HttpFormatter.StatusCode( Headers, StatusCode );

				// @{ auto-headers
				HttpFormatter.HeaderContentLength( Headers, contentLength );
				HttpFormatter.HeaderKeepAlive( Headers, Session.IsKeepAliveRequest );
				// @}

				AddCustomHeaders(); // custom headers

				Headers.AppendLine(); // end of headers
				// @}

				StreamWriter.WriteEncodedBytes( Session.Stream, Headers.GetChars(), ( uint ) Headers.Length, TextEncodingKind.CodePage, Environment.DefaultCodePage );
				StreamWriter.WriteEncodedBytes( Session.Stream, Response.GetChars(), ( uint ) Response.Length, TextEncodingKind, TextEncodingCodepage );
			}
		}

		// Example of how to send embedded data
		public class EmbeddedResourceHandler : RequestHandler {
			public EmbeddedResourceHandler( SessionHandler session, MemorySegment data )
				: base( session ) {
				Headers = Session.Server._headerBuilders.Pop();
				MediaType = Mime.MediaTypeNames.Application.OctetStream;
				_data = data;
			}

			public EmbeddedResourceHandler( SessionHandler parent, string mediaType, MemorySegment data )
				: base( parent ) {
				Headers = Session.Server._headerBuilders.Pop();
				MediaType = mediaType;
				_data = data;
			}

			~EmbeddedResourceHandler() {
				Session.Server._headerBuilders.Push( Headers );
			}

			public StringBuilder Headers;
			private MemorySegment _data;

			public string MediaType;

			public DateTime LastModified = System.Runtime.CompilerServices.CompilerInfo.BuildDate;

			public override bool CheckModifiedSince( DateTime date ) {
				return LastModified > date;
			}

			protected virtual void AddCustomHeaders() {
				HttpFormatter.HeaderDate( Headers, Fiber.UtcNow );
				HttpFormatter.HeaderLastModified( Headers, LastModified );

				HttpFormatter.HeaderContentType( Headers, MediaType );

				if( Session.Server.SendServerTokens ) {
					HttpFormatter.HeaderServer( Headers, "bamelg" );
					HttpFormatter.HeaderXPoweredBy( Headers, "bamelg" );
				}

				HttpFormatter.HeaderXFrameOptions( Headers, false );
			}

			public override void BeginOutput() {
				var time = Fiber.Now.ToUniversalTime();

				// @{ headers
				HttpFormatter.StatusCode( Headers, HttpStatusCode.OK );

				// @{ auto-headers
				HttpFormatter.HeaderKeepAlive( Headers, Session.IsKeepAliveRequest );
				HttpFormatter.HeaderContentLength( Headers, ( long ) _data.Count );
				// @}

				AddCustomHeaders();

				Headers.AppendLine();
				// @}

				StreamWriter.WriteEncodedBytes( Session.Stream, Headers.GetChars(), ( uint ) Headers.Length, TextEncodingKind.CodePage, Environment.DefaultCodePage );
				Session.Stream.Write( _data );
			}
		}

		public class WelcomePageHandler : PageHandler {
			public WelcomePageHandler( SessionHandler session )
				: base( session ) {
			}

			public override void OnRender() {
				Response.AppendLine( "<html>" );
				{
					Response.AppendLine( "<head>" );
					{
						Response.AppendLine( @"<title>Bamelg server</title>" );
					}
					Response.AppendLine( "</head>" );

					Response.AppendLine( "<body>" );
					{
						Response.AppendLine( "<p>Welcome to Bamelg server!</p>" );
					}
					Response.AppendLine( "</body>" );
				}
				Response.AppendLine( "</html>" );
			}
		}

		public abstract class JsonHandler : PageHandler {
			protected JsonWriter _writer;

			public JsonHandler( SessionHandler session )
				: base( session, MediaTypeNames.Application.Json ) {
				TextEncodingKind = TextEncodingKind.Utf8;
				_writer = new JsonWriter( Response );
			}

			protected override void AddCustomHeaders() {
				base.AddCustomHeaders();

				AddCrossDomainAccess();
			}

			protected void AddCrossDomainAccess() {
				// @{ allow cross-domain ajax
				HttpFormatter.HeaderAccessControl( Headers, "allow" ); // for some OLD browsers
				HttpFormatter.HeaderAccessControlAllowOrigin( Headers, "*" );
				// @}
			}
		}

		public class HttpStatisticPageHandler : JsonHandler {
			public HttpStatisticPageHandler( SessionHandler session )
				: base( session ) {
			}

			public override void OnRender() {
				var stats = Session.Server.GetStats();
				System.Serialization.JsonSerializer<ServerStats>.Serialize( stats, Response );
			}
		}

		public class HttpStatisticTextPageHandler : PageHandler {
			public HttpStatisticTextPageHandler( SessionHandler session )
				: base( session ) {
				MediaType = System.Net.Mime.MediaTypeNames.Text.Plain;
				TextEncodingKind = System.Text.TextEncodingKind.Utf8;
			}

			public override void OnRender() {
				var stats = Session.Server.GetStats();
				System.Serialization.IniSerializer<ServerStats>.Serialize( stats, Response );
			}

			protected override void AddCustomHeaders() {
				AddHeaderContentType( MediaType );
			}
		}

		// First candidate to override
		protected virtual RequestHandler CreateHandler( SessionHandler session ) {
			switch( session.Resource ) {
				case "/": return new WelcomePageHandler( session );
				case "/stat.json": return new HttpStatisticPageHandler( session );
			}

			return null;
		}

		/// @{ Tracing
		private const string TraceConditionString = "TRACE_HTTP_SERVER";

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceClientWaitNewRequest( SessionHandler session ) {
			Trace.Write( new Console.OutputAttributes() {
				ForegroundColor = ConsoleColor.Green,
				Bold = true
			}, "HTTP: Client {0} wait for new request", bitcast<void*>( session ) );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceClientEvent( SessionHandler session ) {
			Trace.Write( "HTTP: Event handler='{0}'", session.Handler != null ? session.Handler.GetType().ToString() : "" );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceClientTerminateSession( SessionHandler session ) {
			Trace.Write( new Console.OutputAttributes() {
				ForegroundColor = ConsoleColor.Red
			}, "HTTP: Client {0} closed connection", bitcast<void*>( session ) );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceClientBrokenConnection( SessionHandler session ) {
			Trace.Write( new Console.OutputAttributes() {
				ForegroundColor = ConsoleColor.Red
			}, "HTTP: Client {0} has broken connection", bitcast<void*>( session ) );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceClientRequest( SessionHandler session ) {
			Trace.Write( new Console.OutputAttributes() {
				ForegroundColor = ConsoleColor.Green,
				Bold = true
			}, "HTTP: Client {0} requested: '{1}'. HTTP {2}.{3}", bitcast<void*>( session ), session._parser.Uri, session._parser.VersionMajor, session._parser.VersionMinor );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceResponseStatus( SessionHandler session, HttpStatusCode code ) {
			Trace.Write( new Console.OutputAttributes() {
				ForegroundColor = ConsoleColor.Green,
				Bold = true
			}, "HTTP: Send status {1}({2}) to client {0}", bitcast<void*>( session ), code, code.Value() );
		}

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceRequestHeader( SessionHandler session, CStringSpan& header, CStringSpan& value ) {
			Trace.Write( new Console.OutputAttributes() {
				ForegroundColor = ConsoleColor.DarkYellow
			}, "HTTP: Client {0} got header: '{1}':'{2}'", bitcast<void*>( session ), header, value );
		}

		/// @}
	}
}

/// @{ Code snippets

/// @{ refresh page HTML
// responseBuilder.AppendLine( @"<meta http-equiv=""refresh"" content=""2"" />" );
/// @}

/// @{ refresh page JS
// responseBuilder.AppendLine( @"<script type=""text/JavaScript""><!--" );
// responseBuilder.AppendLine( "function timedRefresh( timeoutPeriod ) { setTimeout( 'location.reload(true);', timeoutPeriod ); }" );
// responseBuilder.AppendLine( "timedRefresh( 1000 );" );
// responseBuilder.AppendLine( "// --></script>" );
/// @}

/// @}