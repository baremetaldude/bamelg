//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.IO;
using System.Runtime;
using System.Text;
using System.Web;

namespace System.Net {
	public class HttpClient : HttpResponseParser.StreamListener {
		public static struct UserAgents {
			public const string Win7x64IE9x64 = "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)";
			public const string Win7x64IE9x86 = "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)";
			public const string Win7x64Chromex86 = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/537.4";
		}

		private IStream _stream;

		private IStream _responseStream;
		private StreamingBufferInfo* _responseStreamBuffer;

		private HttpResponseParser _parser = new HttpResponseParser();

		public bool SendHeaderUserAgent = true;
		public string HeaderUserAgent = UserAgents.Win7x64IE9x64;

		public bool SendHeaderAccept = true;
		public string HeaderAccept = "text/html, application/xhtml+xml, */*";

		public bool SendHeaderAcceptEncoding = false;
		public string HeaderAcceptEncoding = "gzip, deflate";

		public bool SendHeaderAcceptLanguage = true;
		public string HeaderAcceptLanguage = "ru-RU";

		public bool SendHeaderCPU = true;
		public string HeaderCPU = "AMD64";

		private ulong _contentLength;

		private bool _isKeepAliveResponse = false;

		public bool FollowRedirects = true;
		public string RedirectedTo;
		public int RedirectLimit = 10;

		public HttpClient( IStream stream ) {
			_stream = stream;
			_responseStream = _stream.GetBufferedReadStream( _responseStreamBuffer );
		}

		void HttpResponseParser.StreamListener.Header( CStringSpan& header, CStringSpan& value ) {
			CString.MakeLower( header.Location, header.Length ); // in-place modification
			// Console.WriteLine( "HTTP Client: header parsed: {0}={1}", header, value );

			switch( header ) {
				case "location":
					if( _parser._statusCode == HttpStatusCode.Moved ) {
						RedirectedTo = Utf16String.FromSBCS( value );
					}
					break;

				case "connection":
					CString.MakeLower( value.Location, value.Length ); // in-place modification
					_isKeepAliveResponse = value == ( SbcsString ) "keep-alive";
					break;

				case "content-length": {
						if( !ulong.TryParse( value, _contentLength ) )
							_contentLength = 0;
					} break;
			}
		}

		private ReadSubStream _lastSubStream;

		private void FinalizePendingStreams() {
			if( _lastSubStream == null ) return;

			_lastSubStream.Dispose();
			_lastSubStream = null;
		}

		public byte[] DownloadData( string host, string path ) {
			var stream = DownloadStream( host, path );
			if( stream == null || _contentLength == 0 ) return null;

			var result = new[( int ) _contentLength] byte;
			stream.Read( result );
			return result;
		}

		public IStream DownloadStream( string host, string path ) {
			FinalizePendingStreams();
			RedirectedTo = null;
			_contentLength = 0;

			var redirectsRemaining = RedirectLimit;

			var builder = new StringBuilder();
			builder.NewLine = "\r\n";

		restart:
			// Console.WriteLine( "fetch: {0}", RedirectedTo ?? path );
			builder.Clear();

			// @{ GET / HTTP/1.1
			builder.Append( "GET " );
			builder.Append( RedirectedTo ?? path );
			builder.Append( " HTTP/1.1" );
			builder.AppendLine();
			// @}

			// @{ Host: example.bamelg.com
			builder.Append( "Host: " );
			builder.Append( host );
			builder.AppendLine();
			// @}

			if( SendHeaderAccept ) {
				builder.Append( "Accept: " );
				builder.Append( HeaderAccept );
				builder.AppendLine();
			}

			if( SendHeaderAcceptLanguage ) {
				builder.Append( "Accept-Language: " );
				builder.Append( HeaderAcceptLanguage );
				builder.AppendLine();
			}

			if( SendHeaderUserAgent ) {
				builder.Append( "User-Agent: " );
				builder.Append( HeaderUserAgent );
				builder.AppendLine();
			}

			if( SendHeaderCPU ) {
				builder.Append( "UA-CPU: " );
				builder.Append( HeaderCPU );
				builder.AppendLine();
			}

			builder.AppendLine( "Connection: Keep-Alive" );

			if( SendHeaderAcceptEncoding ) {
				builder.Append( "Accept-Encoding: " );
				builder.Append( HeaderAcceptEncoding );
				builder.AppendLine();
			}

			// builder.Append( "Connection: Close" );
			builder.AppendLine();

			using( var headersBuffer = Memory.GetTemporary( builder.Length ) ) {
				var headerSegment = new MemorySegment( headersBuffer.Location, headersBuffer.Length );
				Encoding.GetBytes( Environment.DefaultCodePage, builder.GetChars(), builder.Length, ( byte* ) headersBuffer.Location, headersBuffer.Length );
				_stream.Write( headerSegment );
			}

			while( true ) {
				var readen = _responseStreamBuffer->AvailableToRead;
				_responseStream.Flush( FlushKind.Read );
				readen = _responseStreamBuffer->AvailableToRead - readen;

				if( readen == 0 ) return null;
				var bufferLimitReached = _responseStreamBuffer->Capacity == _responseStreamBuffer->AvailableToRead;

				if( _parser._current == null ) // first run
					_parser.SetInput( _responseStreamBuffer->ReadBufferStart, _responseStreamBuffer->AvailableToRead );
				else
					_parser.Rebase( _responseStreamBuffer->ReadBufferStart );

			parseNext:
				var parseResult = _parser.MoveNext( this );
				// Console.WriteLine( parseResult );

				[CheckAllEnumValues]
				switch( parseResult ) {
					case HttpResponseParser.ParsingResult.Error:
						// Handler = null; // close connection
						return null;

					case HttpResponseParser.ParsingResult.NeedMoreData:
						if( bufferLimitReached ) {
							// Handler = null; // close connection
							return null;
						}

						continue; // wait more data

					case HttpResponseParser.ParsingResult.Finished: {
							var bytesToTrim = ( uint )( _parser._current - _responseStreamBuffer->ReadBufferStart );
							_responseStreamBuffer->OnReadPerformed( bytesToTrim );
							_parser._current = null;

							if( _parser._statusCode == HttpStatusCode.Moved ) {
								if( RedirectedTo.IsNullOrEmpty ) return null;
								if( redirectsRemaining-- == 0 ) return null;

								goto restart;
							}

							if( _contentLength == 0 ) {
								return _responseStream;
							}

							_lastSubStream = new ReadSubStream( _responseStream, _contentLength );
							return _lastSubStream;
						}
				}
			}

			return null;
		}
	}
}