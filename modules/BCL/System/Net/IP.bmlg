//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

namespace System.Net {
	public struct IPv4PacketHeader : IFormattable {
		public byte VersionHeaderLength;
		public byte TypeOfService;
		public ushort Length;
		public ushort Identifier;
		public byte Flag;
		public ushort Offset;
		public byte TTL;
		public InternetProtocol Protocol;
		public ushort Checksum;
		public IPv4Address SourceAddress;
		public IPv4Address DestinationAddress;

		public byte Version { get { return VersionHeaderLength >> 4; } }
		public byte HeaderLength { get { return ( VersionHeaderLength & 0xF ) << 2; } }

		public static ushort ComputeChecksum( void* data, int length ) {
			var buffer = ( ushort* ) data;
			length /= 2;

			uint result = 0;
			for( ; length > 0; length-- )
				result += *buffer++;

			result = ( result >> 16 ) + ( result & 0xFFFF );
			result += result >> 16;

			return ( ushort ) ~result;
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "VersionHeaderLength='", VersionHeaderLength, "' TypeOfService='", TypeOfService, "' Length='", Length, "' Identifier='", Identifier, "' Flag='", Flag, "' Offset='", Offset, "' TTL='", TTL, "' Protocol='", Protocol, "' Checksum='", Checksum, "' SourceAddress='", SourceAddress, "' DestinationAddress='", DestinationAddress, "' Version='", Version, "' HeaderLength='", HeaderLength, '\'' );
		}
	}

	/// See http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xml
	public enum InternetProtocol : byte {
		ICMP =               1,
		IGMP =               2,
		GGP =                3,
		IPv4Encapsulation =  4,
		Stream =             5,
		TCP =                6,
		CBT =                7,
		EGP =                8,
		IGP =                9,
		UDP =               17,
		IPv6Encapsulation = 41,
		GRE =               47,
		SCTP =             132,
		UDPLite =          136,
	}

	public struct IPv4Address : IFormattable, ITextSerializable, IBinarySerializable {
		public static readonly IPv4Address Loopback = new IPv4Address { Data = new byte[4] { 127, 0, 0, 1 } };
		public static readonly IPv4Address AllInterfaces = new IPv4Address { Data = new byte[4] { 0, 0, 0, 0 } };

		public byte[4] Data;
		public uint_bigendian UIntData { get { return *( uint_bigendian* ) &Data[0]; } set { *( uint_bigendian* ) &Data[0] = value; } }

		public IPv4Address( uint address ) {
			UIntData = address;
		}

		public IPv4Address( byte num1, byte num2, byte num3, byte num4 ) {
			Data[0] = num1;
			Data[1] = num2;
			Data[2] = num3;
			Data[3] = num4;
		}

		public bool IsMulticast { get { return ( Data[0] & 0b11100000 ) == 0b11100000; } }

		private static TextParseStatus TryFetch<TElement>( TElement* text, uint length, thistype& result, uint& readen = nullref, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) {
			byte[4] values;

			var parsePosition = text;
			var remaining = length;

			if( trimLeadingWhitespace ) PrimitiveTypesParser.TryFetchWhitespace( parsePosition, remaining );

			for( var i = 0; i < values.Length - 1; ++i ) {
				if( !byte.TryFetch( parsePosition, remaining, values[i], false, false ) ) return TextParseStatus.Format;
				if( !PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, '.' ) ) return TextParseStatus.Format;
			}

			if( !byte.TryFetch( parsePosition, remaining, values[3], false, trimTrailingWhitespace ) ) return TextParseStatus.Format;

			result = new IPv4Address( values[0], values[1], values[2], values[3] );

			if( readen != nullref ) readen = length - remaining;
			else if( remaining != 0 ) return TextParseStatus.Format;

			return TextParseStatus.OK;
		}

		public static TextParseStatus TryParse( SbcsString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( Utf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CStringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8StringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16StringSpan text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32StringSpan text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static thistype Parse( SbcsString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CStringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static bool TryFetch( byte*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<byte>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( char*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<char>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( uint*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<uint>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }

		public void ToString( StringBuilder builder, string format ) {
			builder.Append( Data[0] );

			for( var i = 1; i < Data.Length; ++i ) {
				builder.Append( '.' );
				builder.Append( Data[i] );
			}
		}

		void IBinarySerializable.Serialize( BinaryWriter stream, SerializerContext context ) { stream.Write( Data, Data.Length ); }
		void IBinarySerializable.Deserialize( void* object, BinaryReader stream, SerializerContext context ) { stream.Read( Data, Data.Length ); }

		void ITextSerializable.Serialize( StringBuilder builder, string format, SerializerContext context ) { builder.Append( this, format ); }
		void ITextSerializable.Deserialize( void* result, StringBuilder builder, SerializerContext context ) { TryParse( builder.GetTextSpan(), *( thistype* ) result ); }
	}

	public struct IPv4Endpoint : IFormattable, ITextSerializable, IBinarySerializable {
		public IPv4Endpoint( IPv4Address address, ushort port ) {
			Address = address;
			Port = port;
		}

		public IPv4Endpoint( byte num1, byte num2, byte num3, byte num4, ushort port ) {
			Address = new IPv4Address( num1, num2, num3, num4 );
			Port = port;
		}

		public IPv4Address Address;
		public ushort Port;

		public void ToString( StringBuilder builder, string format ) {
			Address.ToString( builder, format );
			builder.Append( ':' );
			builder.Append( Port );
		}

		private static TextParseStatus TryFetch<TElement>( TElement* text, uint length, thistype& result, uint& readen = nullref, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) {
			IPv4Address address;
			ushort port;

			var parsePosition = text;
			var remaining = length;

			if( !IPv4Address.TryFetch( parsePosition, remaining, address, trimLeadingWhitespace, false ) ) return TextParseStatus.Format;
			if( !PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, ':' ) ) return TextParseStatus.Format;
			if( !ushort.TryFetch( parsePosition, remaining, port, false, trimTrailingWhitespace ) ) return TextParseStatus.Format;

			if( readen != nullref ) readen = length - remaining;
			else if( remaining != 0 ) return TextParseStatus.Format;

			result = new IPv4Endpoint( address, port );
			return TextParseStatus.OK;
		}

		public static TextParseStatus TryParse( SbcsString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( Utf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CStringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8StringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16StringSpan text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32StringSpan text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static thistype Parse( SbcsString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CStringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static bool TryFetch( byte*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<byte>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( char*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<char>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( uint*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<uint>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }

		void IBinarySerializable.Serialize( BinaryWriter stream, SerializerContext context ) { stream.Write( Address, context ); stream.Write( Port ); }
		void IBinarySerializable.Deserialize( void* object, BinaryReader stream, SerializerContext context ) { stream.Read( Address, context ); stream.Read( Port ); }

		void ITextSerializable.Serialize( StringBuilder builder, string format, SerializerContext context ) { builder.Append( this, format ); }
		void ITextSerializable.Deserialize( void* result, StringBuilder builder, SerializerContext context ) { TryParse( builder.GetTextSpan(), *( thistype* ) result ); }
	}

	public struct IPv6Address : IFormattable, ITextSerializable, IBinarySerializable {
		public static readonly IPv6Address Loopback = new IPv6Address { Data = new byte[16] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 } };
		public static readonly IPv6Address AllInterfaces = new IPv6Address { Data = new byte[16] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };

		public byte[16] Data;

		public IPv6Address( [In] byte[16]& address ) {
			Data = address;
		}

		public IPv6Address( [In] ushort[8]& address ) {
			var data = ( ushort_bigendian* ) &Data[0];
			for( var i = 0; i < 8; ++i )
				data[i] = address[i];
		}

		public bool IsLinkLocal { get { return Data[0] == 0xfe && ( Data[1] & 0xc0 ) == 0x80; } }
		public bool IsSiteLocal { get { return Data[0] == 0xfe && ( Data[1] & 0xc0 ) == 0xc0; } }
		public bool IsGlobal { get { return ( Data[0] & 0xf0 ) != 0 && ( Data[0] & 0xf0 ) != 0xf0; } }
		public bool IsMappedIpv4 { get { return Data[0] == 0 && Data[1] == 0 && Data[2] == 0 && Data[3] == 0 && Data[4] == 0 && Data[5] == 0 && Data[6] == 0 && Data[7] == 0 && Data[8] == 0 && Data[9] == 0 && Data[10] == 0xff && Data[11] == 0xff; } }
		public bool IsTranslatedIpv4 { get { return Data[0] == 0 && Data[1] == 0 && Data[2] == 0 && Data[3] == 0 && Data[4] == 0 && Data[5] == 0 && Data[6] == 0 && Data[7] == 0xff && Data[8] == 0xff && Data[9] == 0xff && Data[10] == 0 && Data[11] == 0; } }

		private static TextParseStatus TryFetch<TElement>( TElement* text, uint length, thistype& result, uint& readen = nullref, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) {
			ushort[8] values;

			var parsePosition = text;
			var remaining = length;

			if( trimLeadingWhitespace ) PrimitiveTypesParser.TryFetchWhitespace( parsePosition, remaining );

			for( var i = 0; i < values.Length; ++i ) {
				var groupParsed = PrimitiveTypesParser.TryFetchHexUInt16( parsePosition, remaining, values[i], false, false );
				if( i > 0 && !groupParsed ) return TextParseStatus.Format;

				if( i < values.Length - 1 ) {
					if( i == 0 && !groupParsed ) --i;

					if( !PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, ':' ) ) return TextParseStatus.Format;
					if( PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, ':' ) ) {
						var trailingCount = 0;

						for( var j = i + 1; j < values.Length; ++j ) {
							if( j > i + 1 && !PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, ':' ) ) {
								if( j == i + 1 ) return TextParseStatus.Format;
								break;
							}

							if( !PrimitiveTypesParser.TryFetchHexUInt16( parsePosition, remaining, values[j], false, false ) ) return TextParseStatus.Format;

							++trailingCount;
						}

						System.Runtime.Memory.Move( &values[values.Length - trailingCount], &values[i + 1], ( uint )( trailingCount * sizeof( values[0] ) ) );
						for( var j = i + 1; j < values.Length - trailingCount; ++j )
							values[j] = 0;

						break;
					}

					if( !groupParsed ) return TextParseStatus.Format;
				}
			}

			if( trimTrailingWhitespace ) PrimitiveTypesParser.TryFetchWhitespace( parsePosition, remaining );

			result = new thistype( values );

			if( readen != nullref ) readen = length - remaining;
			else if( remaining != 0 ) return TextParseStatus.Format;

			return TextParseStatus.OK;
		}

		public static TextParseStatus TryParse( SbcsString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( Utf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CStringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8StringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16StringSpan text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32StringSpan text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static thistype Parse( SbcsString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CStringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static bool TryFetch( byte*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<byte>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( char*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<char>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( uint*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<uint>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }

		public void ToString( StringBuilder builder, string format ) {
			var data = ( ushort_bigendian* ) &Data[0];

			if( format.IsNullOrEmpty ) {
				var nullsStarted = data[0] == 0 && data[1] == 0;
				var nullsEnded = false;

				if( !nullsStarted ) builder.Append( data[0], "x" );

				for( var i = 1; i < 8; ++i ) {
					if( !nullsEnded )
						if( nullsStarted ) {
							if( data[i] == 0 ) continue;

							nullsEnded = true;
							builder.Append( ':' );
						}
						else if( ( nullsStarted = i < 7 && data[i] == 0 && data[i + 1] == 0 ) ) continue;

					builder.Append( ':' );
					builder.Append( data[i], "x" );
				}

				if( nullsStarted && !nullsEnded )
					builder.Append( "::0" );
			}
			else if( format == "f" ) { // full
				builder.Append( data[0], "x" );

				for( var i = 1; i < 8; ++i ) {
					builder.Append( ':' );
					builder.Append( data[i], "x" );
				}
			}
		}

		void IBinarySerializable.Serialize( BinaryWriter stream, SerializerContext context ) { stream.Write( Data, Data.Length ); }
		void IBinarySerializable.Deserialize( void* object, BinaryReader stream, SerializerContext context ) { stream.Read( Data, Data.Length ); }

		void ITextSerializable.Serialize( StringBuilder builder, string format, SerializerContext context ) { builder.Append( this, format ); }
		void ITextSerializable.Deserialize( void* result, StringBuilder builder, SerializerContext context ) { TryParse( builder.GetTextSpan(), *( thistype* ) result ); }
	}

	public struct IPv6Endpoint : IFormattable, ITextSerializable, IBinarySerializable {
		public IPv6Endpoint( IPv6Address address, ushort port ) {
			Address = address;
			Port = port;
			ScopeId = 0;
		}

		public IPv6Address Address;
		public uint ScopeId;
		public ushort Port;

		public void ToString( StringBuilder builder, string format ) {
			builder.Append( '[' );
			Address.ToString( builder, format );
			if( ScopeId != 0 ) {
				builder.Append( '%' );
				builder.Append( ScopeId );
			}
			builder.Append( ']' );
			builder.Append( ':' );
			builder.Append( Port );
		}

		private static TextParseStatus TryFetch<TElement>( TElement* text, uint length, thistype& result, uint& readen = nullref, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) {
			IPv6Address address;
			ushort port;
			uint scope = 0;

			var parsePosition = text;
			var remaining = length;

			if( trimLeadingWhitespace ) PrimitiveTypesParser.TryFetchWhitespace( parsePosition, remaining );

			if( !PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, '[' ) ) return TextParseStatus.Format;
			if( !IPv6Address.TryFetch( parsePosition, remaining, address, false, false ) ) return TextParseStatus.Format;

			if( PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, '%' ) ) {
				if( !uint.TryFetch( parsePosition, remaining, scope, false, trimTrailingWhitespace ) ) return TextParseStatus.Format;
			}

			if( !PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, ']' ) ) return TextParseStatus.Format;
			if( !PrimitiveTypesParser.TryFetchSpecificChar( parsePosition, remaining, ':' ) ) return TextParseStatus.Format;
			if( !ushort.TryFetch( parsePosition, remaining, port, false, trimTrailingWhitespace ) ) return TextParseStatus.Format;

			if( readen != nullref ) readen = length - remaining;
			else if( remaining != 0 ) return TextParseStatus.Format;

			result = new IPv6Endpoint( address, port ) { ScopeId = scope };
			return TextParseStatus.OK;
		}

		public static TextParseStatus TryParse( SbcsString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( Utf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( Utf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CString text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8String text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16String text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32String text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static TextParseStatus TryParse( CStringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf8StringSpan text, thistype& result ) { return TryFetch<byte>( text.GetChars(), text.ByteLength, result ); }
		public static TextParseStatus TryParse( CUtf16StringSpan text, thistype& result ) { return TryFetch<char>( text.GetChars(), text.Length, result ); }
		public static TextParseStatus TryParse( CUtf32StringSpan text, thistype& result ) { return TryFetch<uint>( text.GetChars(), text.Length, result ); }

		public static thistype Parse( SbcsString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( Utf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CString text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32String text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static thistype Parse( CStringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf8StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf16StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }
		public static thistype Parse( CUtf32StringSpan text ) { thistype parsedResult; var status = TryParse( text, parsedResult ); if( !status ) throw new FormatException( status ); return parsedResult; }

		public static bool TryFetch( byte*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<byte>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( char*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<char>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }
		public static bool TryFetch( uint*& buffer, uint& remaining, thistype& parsedResult, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { uint readen; var result = TryFetch<uint>( buffer, remaining, parsedResult, readen, trimLeadingWhitespace, trimTrailingWhitespace ); if( result ) { buffer += readen; remaining -= readen; } return result; }

		void IBinarySerializable.Serialize( BinaryWriter stream, SerializerContext context ) { stream.Write( Address, context ); stream.Write( Port ); }
		void IBinarySerializable.Deserialize( void* object, BinaryReader stream, SerializerContext context ) { stream.Read( Address, context ); stream.Read( Port ); }

		void ITextSerializable.Serialize( StringBuilder builder, string format, SerializerContext context ) { builder.Append( this, format ); }
		void ITextSerializable.Deserialize( void* result, StringBuilder builder, SerializerContext context ) { TryParse( builder.GetTextSpan(), *( thistype* ) result ); }
	}
}