//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Serialization.Thrift;
using System.Web;

namespace System.Net {
	public partial class ThriftServer : NetworkServer {
		#region config
		public bool Framed = true; ///< TFramedTransport
		public bool StrictRead = false, StrictWrite = true;
		#endregion

		private IRequestHandler _requestHandler;
		public IExceptionHandler ExceptionHandler;

		public ThriftServer( IRequestHandler requestHandler ) {
			_requestHandler = requestHandler;
		}

		protected override NetworkServer.SessionHandler CreateSession( IStream stream ) {
			return new SessionHandler( this, stream );
		}

		public class SessionHandler : basetype.SessionHandler {
			[Overlapped( Offset = memberinfo( basetype.Server ).ByteOffset )]
			public new declaringtype Server;

			private ProtocolCodec _codec;

			public SessionHandler( declaringtype parent, IStream stream )
				: base( parent, stream ) {
				_codec = new BinaryProtocolCodec( ReadStream, WriteStream, parent.Framed, parent.StrictRead, parent.StrictWrite );
				if( parent.ExceptionHandler != null ) _codec.ExceptionHandler = parent.ExceptionHandler;
			}

			protected override void Worker() {
				var requestBuffer = ReadStream.BufferInfo;

				while( !Fiber.IsCancelled ) {
					if( requestBuffer->AvailableToRead == 0 ) {
						WriteStream.Flush( FlushKind.DeepWrite ); // for corking

						using( Fiber.CancellationRegion() )
							if( !ReadStream.EnsureReadable( 1 ) )
								break;
					}

					if( !Server._requestHandler.Process( _codec, _codec ) ) break;

					if( _codec.IsStreamBroken ) break;
				}

				_codec.Dispose();
			}
		}
	}
}