//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Serialization;

namespace System.Net {
	public abstract partial class NetworkServer {
		// @{ config
		public string ClientFiberName = null;
		public uint ClientFiberStackPages = 2;
		public uint MaxClientRequestLength = 16384;
		public uint ResponseBufferLength = 16384;
		public uint MaxSessions = 0; // 0 - unlimited

		public uint ListenBacklog = 128;
		public bool DefferedAccept = true;

		public bool ReusePort = false;                     // for multithreaded accept

		public uint MaximumSegmentSize = 0;                 // 0 - use system default, for debug-purpose only since it interface-specific setting
		public TimeSpan RetransmitTimeout = TimeSpan.Zero; // TimeSpan.Zero - use system default
		// @}

		// @{ stats
		public uint ActiveSessionCount = 0;                 // active clients (keepalive and not)
		public uint PeakActiveSessionCount = 0;
		public uint TotalAcceptedClientCount = 0; // total accepted clients
		protected HashSet<SessionHandler> ActiveSessions;
		/// @}

		protected abstract SessionHandler CreateSession( IStream stream );

		public void CancelAllSessions() {
			if( ActiveSessions == null ) return;

			foreach( var session in ActiveSessions )
				session.DispatchingFiber.Cancel();
		}

		/// @{ listen on TCP port
		public bool Listen( IPv4Endpoint endpoint ) { return _implListen( endpoint ); }
		public bool Listen( IPv6Endpoint endpoint ) { return _implListen( endpoint ); }
		public bool Listen( ushort port ) { return _implListen( port ); } // bind both TCPv6 and TCPv4
		/// @}

		/// @{ listen unix socket or named pipe
		public bool Listen( Utf8String path ) { return _implListen( path ); }
		public bool Listen( string path ) { return _implListen( path ); }
		/// @}

		/// @{ create session on SerialPort
		public SessionHandler Listen( IStream stream ) {
			if( MaxSessions > 0 && ActiveSessionCount >= MaxSessions ) return null;

			var client = CreateSession( stream );
			client.StartFiber();
			return client;
		}
		/// @}

		public const string TraceConditionString = "TRACE_NETWORK_SERVER";
		private static Console.OutputAttributes TraceStyleNormal = new Console.OutputAttributes() { BackgroundColor = ConsoleColor.Green };

		public abstract partial class SessionHandler {
			public declaringtype Server;

			public bool StreamError { get { return _implStreamError(); } }

			/// Unbuffered read-write stream
			public IStream Stream;

			/// Buffered read stream
			public IStream ReadStream;
			/// Buffered write stream
			public IStream WriteStream;

			public StreamingBufferInfo* ReadStreamBuffer, WriteStreamBuffer;

			public Fiber DispatchingFiber;

			public SessionHandler( declaringtype parent, IStream stream ) {
				Server = parent;

				Stream = stream;
				ReadStream = Stream.GetBufferedReadStream( ReadStreamBuffer, parent.MaxClientRequestLength );
				WriteStream = Stream.GetBufferedWriteStream( WriteStreamBuffer, parent.ResponseBufferLength );
			}

			public void StartFiber() {
				DispatchingFiber = Fiber.Start( Server.ClientFiberStackPages, data => {
					var& @this = *bitcast<thistype*>( &data );

					@this.Worker();
					@this.OnExit();

					@this.Server.ActiveSessions?.Remove( @this );

					--@this.Server.ActiveSessionCount;
					@this.ReleaseReference();
				}, bitcast<void*>( this ), Server.ClientFiberName );

				if( DispatchingFiber.IsValid ) {
					Server.ActiveSessions?.Add( this );

					++Server.TotalAcceptedClientCount;
					++Server.ActiveSessionCount;
					if( Server.ActiveSessionCount > Server.PeakActiveSessionCount ) Server.PeakActiveSessionCount = Server.ActiveSessionCount;
					AddReference();
				}
				else
					OnExit();
			}

			protected abstract void Worker();

			public void OnExit() { _implOnExit(); }
		}

		private static Console.OutputAttributes _traceAttributes = new Console.OutputAttributes() { BackgroundColor = RgbColor.Green, Bold = true };
	}
}