//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

namespace System.Net {
	public abstract partial class NetworkServer {
		// @{ config
		public int ClientFiberStackPages = 2;
		public int MaxClientRequestLength = 16384;
		public int ResponseBufferLength = 16384;
		public int MaxSessions = 0; // 0 - unlimited

		public int ListenBacklog = 128;
		public bool DefferedAccept = true;
		public const string TraceConditionString = "TRACE_NETWORK_SERVER";

		public bool ReusePort = false;     // for multithreaded accept
		// @}

		// @{ stats
		public int ActiveSessionCount = 0; // active clients (keepalive and not)
		public int PeakActiveSessionCount = 0;
		public int TotalAcceptedClientCount = 0; // total accepted clients
		/// @}

		protected abstract SessionHandler CreateSession( IStream stream );

		/// @{ listen on TCP port
		public bool Listen( IPv4Endpoint endpoint ) { return _implListen( endpoint ); }
		public bool Listen( IPv6Endpoint endpoint ) { return _implListen( endpoint ); }
		public bool Listen( ushort port ) { return _implListen( port ); } // bind both TCPv6 and TCPv4
		/// @}

		/// @{ listen unix socket or named pipe
		public bool Listen( Utf8String path ) { return _implListen( path ); }
		public bool Listen( string path ) { return _implListen( path ); }
		/// @}

		public abstract partial class SessionHandler {
			public declaringtype _parent;

			public IStream _stream, _readStream, _writeStream;
			public StreamingBufferInfo* _readStreamBuffer, _writeStreamBuffer;

			public SessionHandler( declaringtype parent, IStream stream ) {
				_parent = parent;

				_stream = stream;
				_readStream = _stream.GetBufferedReadStream( _readStreamBuffer, parent.MaxClientRequestLength );
				_writeStream = _stream.GetBufferedWriteStream( _writeStreamBuffer, parent.ResponseBufferLength );
			}

			public void StartFiber() {
				var worker = Fiber.Start( _parent.ClientFiberStackPages, data => {
					var& @this = *bitcast<thistype*>( &data );

					@this.Worker();
					@this.OnExit();

					--@this._parent.ActiveSessionCount;
					@this.ReleaseReference();
				}, bitcast<void*>( this ) );

				if( worker.IsValid ) {
					++_parent.TotalAcceptedClientCount;
					++_parent.ActiveSessionCount;
					if( _parent.ActiveSessionCount > _parent.PeakActiveSessionCount ) _parent.PeakActiveSessionCount = _parent.ActiveSessionCount;
					AddReference();
				}
				else
					OnExit();
			}

			protected abstract void Worker();

			public void OnExit() { _implOnExit(); }
		}

		private static Console.OutputAttributes _traceAttributes = new Console.OutputAttributes() { BackgroundColor = RgbColor.Green, Bold = true };
	}
}