//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Random {
	public struct CRandom {
		public long Seed;
		private const double IntReciprocal = 1.0 / int.MaxValue;

		public CRandom() {
			Seed = ( long ) Environment.CpuTickCount;
		}

		public CRandom( long seed ) {
			Seed = seed;
		}

		[ForceInline]
		private void UpdateSeed() {
			Seed = Seed * 214013L + 2531011L;
		}

		[Inline]
		public uint NextUInt() {
			UpdateSeed();
			return cast<uint>( Seed >> 16 ) & uint.MaxValue;
		}

		[ForceInline]
		public int NextInt() {
			UpdateSeed();
			return cast<int>( Seed >> 16 ) & int.MaxValue;
		}

		[ForceInline]
		public int NextInt( int maxValueExclusive ) { return NextInt() % maxValueExclusive; }

		[ForceInline]
		public int NextInt( int minValue, int maxValueInclusive ) { return NextInt() % ( maxValueInclusive - minValue + 1 ) + minValue; }

		[Inline]
		public ushort NextUShort() {
			UpdateSeed();
			return cast<ushort>( Seed >> 16 ) & ushort.MaxValue;
		}

		[ForceInline]
		public short NextShort() { return ( short ) NextUShort(); }

		[Inline]
		public byte NextByte() {
			UpdateSeed();
			return cast<byte>( Seed >> 16 ) & byte.MaxValue;
		}

		[ForceInline]
		public sbyte NextSByte() { return ( sbyte ) NextUShort(); }

		[Inline]
		public double NextDouble() {
			UpdateSeed();
			return ( cast<int>( Seed >> 16 ) & int.MaxValue ) * IntReciprocal;
		}

		[Inline]
		public double NextDouble( double min, double max ) {
			UpdateSeed();
			return ( cast<int>( Seed >> 16 ) & int.MaxValue ) * ( max - min ) * IntReciprocal + min;
		}

		public void Fill( byte* start, int count ) {
			while( count >= 4 ) { unaligned( *( uint* ) start ) = NextUInt(); start += 4; count -= 4; }
			while( count >= 2 ) { unaligned( *( ushort* ) start ) = NextUShort(); start += 2; count -= 2; }
			while( count >= 1 ) { unaligned( *( byte* ) start ) = NextByte(); start += 1; count -= 1; }
		}
	}
}