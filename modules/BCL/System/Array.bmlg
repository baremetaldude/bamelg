//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Runtime;

namespace System {
	// Dynamic array internal representation:
	// 0: header
	// ...
	// 16: dimension length 1
	// 20: dimension length 2
	// 24: dimension length 3
	// 28: element1
	public class Array {
		public readonly uint Length;
		public readonly Reflection.Type& ElementType;
		public readonly uint Dimensions;

		~Array() {
			var align = ElementType.InstanceAlignment;
			var dimensionsSize = sizeof( uint ) * Dimensions;
			var elementSize = Memory.GetStride( ElementType.InstanceSize, align );
			var headerSize = Memory.GetStride( sizeof( Array ) + dimensionsSize, align ); // align first element

			if( ElementType.IsClass | ElementType.IsDynamicArray | ElementType.IsDelegate )
				Memory.PerformFunctorOnClassArray( bitcast<byte*>( this ) + headerSize, Length, bitcast<Functors.Action<void*>>( new Functors.Action<RuntimeObjectBase>( RuntimeObjectBase.ReleaseReference ) ) );
			else if( ElementType.IsStruct )
				Memory.PerformFunctorOnStructArray( bitcast<byte*>( this ) + headerSize, elementSize, Length, ElementType.Destructor );
			else if( ElementType.IsInterface )
				Memory.PerformFunctorOnStructArray( bitcast<byte*>( this ) + headerSize, elementSize, Length, bitcast<Functors.Action<void*>>( new Functors.Action<InterfaceInstance&>( InterfaceInstance.ReleaseReference ) ) );
		}

		public uint GetLength( uint dimension ) {
			Debug.Assert( dimension < Dimensions );

			return cast<uint*>( bitcast<byte*>( this ) + sizeof( Array ) )[dimension];
		}

		public new Reflection.Type& GetType() {
			return *bitcast<Reflection.Type*>( _vfTable );
		}

		public void* GetData() {
			var align = ElementType.InstanceAlignment;
			var dimensionsSize = sizeof( uint ) * Dimensions;
			var elementSize = Memory.GetStride( ElementType.InstanceSize, align );
			var headerSize = Memory.GetStride( sizeof( Array ) + dimensionsSize, align ); // align first element

			return bitcast<byte*>( this ) + headerSize;
		}
	}
}