//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime;
using System.Text;

namespace System {
	public sealed partial class StringBuilder {
		private char[] _text;
		public string NewLine = Environment.NewLine;

		private uint _length;
		public uint Length {
			get { return _length; }
			set {
				if( _length == value ) return;

				if( value > _text.Length )
					ResizeBuffer( value );
				else
					_length = value;
			}
		}

		public StringBuilder( uint capacity = 64 ) {
			if( capacity == 0 ) capacity = 64;

			_text = new[capacity] char;
		}

		public StringBuilder( string value ) {
			uint capacity = 64;
			if( !value.IsNullOrEmpty ) capacity = Math.Max( capacity, value.Length );

			_text = new[capacity] char;
			Append( value );
		}

		public char this[int index] {
			get { System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _length, index ) ); return _text[index]; }
			set { System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _length, index ) ); _text[index] = value; }
		}

		public char this[uint index] {
			get { System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _length, index ) ); return _text[index]; }
			set { System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _length, index ) ); _text[index] = value; }
		}

		public void AppendLine() { Append( NewLine ); }

		public void Append( void* value ) { PrimitiveTypesFormatter.FormatInteger( this, ( uintptr ) value, "X" + ( sizeof( void* ) * 2 ) ); }
		public void Append( void* value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, ( uintptr ) value, format ?? "X" + ( sizeof( void* ) * 2 ) ); }

		public void Append( TimeSpan value ) { PrimitiveTypesFormatter.FormatTimeSpan( this, value, "c" ); }
		public void Append( DateTime value ) { PrimitiveTypesFormatter.FormatDateTime( this, value, "G" ); }

		public void Append( sbyte value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( byte value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( short value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( ushort value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( int value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( uint value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( long value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( ulong value ) { PrimitiveTypesFormatter.FormatInteger( this, value, "D" ); }
		public void Append( float value ) { PrimitiveTypesFormatter.FormatFloatingPoint( this, value, "G" ); }
		public void Append( double value ) { PrimitiveTypesFormatter.FormatFloatingPoint( this, value, "G" ); }

		public void Append( sbyte value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( byte value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( short value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( ushort value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( int value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( uint value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( long value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( ulong value, string format ) { PrimitiveTypesFormatter.FormatInteger( this, value, format ?? "D" ); }
		public void Append( float value, string format ) { PrimitiveTypesFormatter.FormatFloatingPoint( this, value, format ?? "G" ); }
		public void Append( double value, string format ) { PrimitiveTypesFormatter.FormatFloatingPoint( this, value, format ?? "G" ); }

		public void Append( TimeSpan value, string format ) { PrimitiveTypesFormatter.FormatTimeSpan( this, value, format ?? "c" ); }
		public void Append( DateTime value, string format ) { PrimitiveTypesFormatter.FormatDateTime( this, value, format ?? "G" ); }

		public void Append( Guid value ) { value.ToString( this, "" ); }
		public void Append( Guid value, string format ) { value.ToString( this, format ?? "" ); }

		public void Append( char @char ) {
			EnsureCapacity( 1 );
			_text[_length] = @char;
			++_length;
		}

		public void Append( char char1, char char2 ) {
			EnsureCapacity( 2 );
			_text[_length] = char1;
			_text[_length + 1] = char2;
			_length += 2;
		}

		public void Append( char char1, char char2, char char3 ) {
			EnsureCapacity( 3 );
			_text[_length] = char1;
			_text[_length + 1] = char2;
			_text[_length + 2] = char3;
			_length += 3;
		}

		public void Append( char char1, char char2, char char3, char char4 ) {
			EnsureCapacity( 4 );
			_text[_length] = char1;
			_text[_length + 1] = char2;
			_text[_length + 2] = char3;
			_text[_length + 3] = char4;
			_length += 4;
		}

		public void Append( bool value ) { Append( value ? "true" : "false" ); }

		public void Append( char @char, uint count ) {
			EnsureCapacity( count );

			for( var i = 0U; i < count; ++i )
				_text[_length + i] = @char;

			_length += count;
		}

		public void AppendAscii( byte* text, uint length ) {
			EnsureCapacity( length );
			for( var i = 0U; i < length; ++i )
				_text[_length + i] = ( char ) text[i];

			_length += length;
		}

		public void AppendSBCS( CodePageID codepage, byte* text, uint length ) {
			EnsureCapacity( length );

			Encoding.GetChars( codepage, &_text[_length], length, text, length );

			_length += length;
		}

		public void AppendUtf8( byte* text, uint byteLength ) {
			uint encodedCharsCount, realCharsCount;
			Unicode.GetUtf8ByteCountInUtf16( text, byteLength, realCharsCount, encodedCharsCount );

			EnsureCapacity( encodedCharsCount );

			Unicode.ConvertUtf8CharactersToUtf16( &_text[_length], text, byteLength );

			_length += encodedCharsCount;
		}

		public void Append( char* text, uint length ) {
			EnsureCapacity( length );
			Memory.Copy( &_text[_length], text, ( uint )( sizeof( _text[0] ) * length ) );
			_length += length;
		}

		public void AppendUtf32( uint* text, uint count ) {
			uint charsCount16;
			Unicode.GetUtf32ByteCountInUtf16( text, count, charsCount16 );

			EnsureCapacity( charsCount16 );

			Unicode.ConvertUtf32CharactersToUtf16( &_text[_length], text, charsCount16 );

			_length += ( int ) charsCount16;
		}

		public void Append( SbcsString value ) { if( value.IsNullOrEmpty ) return; AppendSBCS( value.CodePage, value.GetChars(), value.Length ); }
		public void Append( CString value ) { if( value.IsNullOrEmpty ) return; AppendSBCS( Environment.DefaultCodePage, value.GetChars(), value.Length ); }
		public void Append( CStringSpan value ) { if( value.IsNullOrEmpty ) return; AppendSBCS( Environment.DefaultCodePage, value.GetChars(), value.Length ); }

		// Valid until next resize/Append
		public char* ProvideAppendLocation( uint length ) {
			if( length <= 0 ) return null;

			EnsureCapacity( length );

			var result = &_text[_length];
			_length += length;

			return result;
		}

		public void Append( Utf8String value ) {
			if( value.IsNullOrEmpty ) return;
			EnsureCapacity( value.Length );

			Unicode.ConvertUtf8CharactersToUtf16( &_text[_length], value.GetChars(), value.ByteLength );

			_length += ( int ) value.Length;
		}

		public void Append( CUtf8String value ) { if( value.IsNullOrEmpty ) return; AppendUtf8( value.GetChars(), 0 ); }
		public void Append( CUtf8StringSpan value ) { if( value.IsNullOrEmpty ) return; AppendUtf8( value.GetChars(), value.ByteLength ); }

		public void Append( Utf16String value ) { if( value.IsNullOrEmpty ) return; Append( value.GetChars(), value.Length ); }
		public void Append( CUtf16String value ) { if( value.IsNullOrEmpty ) return; Append( value.GetChars(), value.Length ); }
		public void Append( CUtf16StringSpan value ) { if( value.IsNullOrEmpty ) return; Append( value.GetChars(), value.Length ); }

		public void Append( Utf32String value ) { if( value.IsNullOrEmpty ) return; AppendUtf32( value.GetChars(), value.Length ); }
		public void Append( CUtf32String value ) { if( value.IsNullOrEmpty ) return; AppendUtf32( value.GetChars(), value.Length ); }
		public void Append( CUtf32StringSpan value ) { if( value.IsNullOrEmpty ) return; AppendUtf32( value.GetChars(), value.Length ); }

		public void Append( StringBuilder value ) {
			if( value == null || value._length == 0 ) return;
			EnsureCapacity( value._length ); // Resize before accessing _text - for self append
			Append( value._text, value._length );
		}

		private uint GetNextBufferSize( uint minSize ) {
			return BitOperations.NextPowerOf2( minSize );
		}

		private void ResizeBuffer( uint newSize ) {
			var newBuffer = new[GetNextBufferSize( newSize )] char;
			Memory.Copy( &newBuffer[0], &_text[0], ( uint )( sizeof( _text[0] ) * Length ) );
			_text = newBuffer;
		}

		public void EnsureCapacity( uint newChars ) {
			if( _length + newChars > _text.Length )
				ResizeBuffer( Length + newChars );
		}

		public bool EndsWith( char value ) {
			return _length > 0 && _text[_length - 1] == value;
		}

		public void AppendLine( string text ) {
			Append( text );
			AppendLine();
		}

		public void AppendLine( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			AppendFormat( format, vararg( parameters, parameters.Length ) );
			AppendLine();
		}

		public void AppendFormat( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			var parsingPosition = 0U;
			var currentChar = '\0';
			var formatChars = format.GetChars();

			while( true ) {
				var startFormatParsingIndex = parsingPosition;
				var textStart = uint.MaxValue;
				var textEnd = uint.MaxValue;

				while( parsingPosition < format.Length ) {
					currentChar = formatChars[parsingPosition];

					if( currentChar == '}' ) {
						if( parsingPosition + 1 < format.Length && formatChars[parsingPosition + 1] == '}' ) {
							++parsingPosition;

							if( textStart != uint.MaxValue ) {
								Append( formatChars + textStart, textEnd - textStart + 1 );
								textEnd = textStart = uint.MaxValue;
							}
						}
						else
							goto incorrect_format;
					}

					if( currentChar == '{' ) {
						if( parsingPosition + 1 < format.Length && formatChars[parsingPosition + 1] == '{' ) {
							++parsingPosition;

							if( textStart != uint.MaxValue ) {
								Append( formatChars + textStart, textEnd - textStart + 1 );
								textEnd = textStart = uint.MaxValue;
							}
						}
						else {
							break;
						}
					}

					if( textStart == uint.MaxValue ) textStart = parsingPosition;
					textEnd = parsingPosition;
					++parsingPosition;
				}

				if( textStart != uint.MaxValue )
					Append( formatChars + textStart, textEnd - textStart + 1 );

				if( parsingPosition == format.Length )
					break;

				++parsingPosition;
				currentChar = formatChars[parsingPosition];
				if( currentChar < '0' || currentChar > '9' ) goto incorrect_format;

				var index = 0U;
				do {
					index = index * 10 + currentChar - '0';
					if( index < 0 ) {
						BclErrorHandler.ParserException( TextParsingStatus.FormatArgumentIndex );
						return;
					}

					++parsingPosition;

					if( parsingPosition == format.Length )
						goto incorrect_format;

					currentChar = formatChars[parsingPosition];
				} while( currentChar >= '0' && currentChar <= '9' );

				if( index >= parameters.Length ) {
					BclErrorHandler.ParserException( TextParsingStatus.FormatArgumentIndex );
					return;
				}

				while( parsingPosition < format.Length && ( currentChar = formatChars[parsingPosition] ) == ' ' )
					++parsingPosition;

				bool justifyToLeft = false;
				int width = 0;
				if( currentChar == ',' ) {
					++parsingPosition;
					while( parsingPosition < format.Length && formatChars[parsingPosition] == ' ' )
						++parsingPosition;

					if( parsingPosition == format.Length )
						goto incorrect_format;

					currentChar = formatChars[parsingPosition];
					if( currentChar == '-' ) {
						justifyToLeft = true;
						++parsingPosition;
						if( parsingPosition == format.Length )
							goto incorrect_format;

						currentChar = formatChars[parsingPosition];
					}

					if( currentChar < '0' || currentChar > '9' )
						goto incorrect_format;

					do {
						width = width * 10 + currentChar - '0';
						++parsingPosition;
						if( parsingPosition == format.Length )
							goto incorrect_format;
						currentChar = formatChars[parsingPosition];
					} while( currentChar >= '0' && currentChar <= '9' && width < 1000000 );
				}

				while( parsingPosition < format.Length && ( currentChar = formatChars[parsingPosition] ) == ' ' )
					++parsingPosition;

				Utf16String customFormat = null;
				if( currentChar == ':' ) {
					++parsingPosition;
					startFormatParsingIndex = parsingPosition;

					var customFormatStart = uint.MaxValue;
					var customFormatEnd = uint.MaxValue;

					while( true ) {
						if( parsingPosition == format.Length ) goto incorrect_format;

						var currentCharPos = parsingPosition;
						currentChar = formatChars[currentCharPos];
						++parsingPosition;

						if( currentChar == '{' ) {
							if( parsingPosition < format.Length && formatChars[parsingPosition] == '{' )
								++parsingPosition;
							else
								goto incorrect_format;
						}
						else if( currentChar == '}' ) {
							if( parsingPosition < format.Length && formatChars[parsingPosition] == '}' )
								++parsingPosition;
							else {
								--parsingPosition;
								break;
							}
						}

						if( customFormatStart == uint.MaxValue ) customFormatStart = currentCharPos;
						customFormatEnd = currentCharPos;
					}

					if( customFormatStart != uint.MaxValue )
						customFormat = string.FromUtf16( formatChars + customFormatStart, customFormatEnd - customFormatStart + 1 );
				}

				if( currentChar != '}' )
					goto incorrect_format;

				++parsingPosition;

				if( width != 0 )
					using( var auxBuilder = StringBuilder.CachedBuilders.PopScoped() ) {
						auxBuilder.Value.Append( parameters[index], customFormat ?? "" );

						var justifyPositions = width - auxBuilder.Value.Length;
						if( !justifyToLeft && ( int ) justifyPositions > 0 )
							Append( ' ', justifyPositions );

						Append( auxBuilder.Value );

						if( justifyToLeft && ( int ) justifyPositions > 0 )
							Append( ' ', justifyPositions );
					}
				else {
					Append( parameters[index], customFormat ?? "" );
				}
			}

			return;

		incorrect_format:
			BclErrorHandler.ParserException( TextParsingStatus.Format );
			return;
		}

		public void Append( TypedReference& ref ) {
			Append( ref, "" );
		}

		public void Append( TypedReference& ref, string customFormat ) {
			if( ref.Address == null ) return;

			if( ref.Type != nullref && ref.Type.FullQualifiedName != null ) {
				switch( ref.Type ) {
					// Do not use QueryInterface for widely used types
					case typeof( bool ): Append( *bitcast<bool*>( ref.Address ) ); break;

					case typeof( CString ): Append( *bitcast<CString*>( ref.Address ) ); break;
					case typeof( CUtf8String ): Append( *bitcast<CUtf8String*>( ref.Address ) ); break;
					case typeof( CUtf16String ): Append( *bitcast<CUtf16String*>( ref.Address ) ); break;
					case typeof( CUtf32String ): Append( *bitcast<CUtf32String*>( ref.Address ) ); break;

					case typeof( CStringSpan ): Append( *bitcast<CStringSpan*>( ref.Address ) ); break;
					case typeof( CUtf8StringSpan ): Append( *bitcast<CUtf8StringSpan*>( ref.Address ) ); break;
					case typeof( CUtf16StringSpan ): Append( *bitcast<CUtf16StringSpan*>( ref.Address ) ); break;
					case typeof( CUtf32StringSpan ): Append( *bitcast<CUtf32StringSpan*>( ref.Address ) ); break;

					case typeof( SbcsString ): Append( bitcast<SbcsString>( ref.Address ) ); break;
					case typeof( Utf8String ): Append( bitcast<Utf8String>( ref.Address ) ); break;
					case typeof( Utf16String ): Append( bitcast<Utf16String>( ref.Address ) ); break;
					case typeof( Utf32String ): Append( bitcast<Utf32String>( ref.Address ) ); break;

					case typeof( DateTime ): Append( *bitcast<DateTime*>( ref.Address ), customFormat ); break;
					case typeof( TimeSpan ): Append( *bitcast<TimeSpan*>( ref.Address ), customFormat ); break;

					case typeof( sbyte ): Append( *bitcast<sbyte*>( ref.Address ), customFormat ); break;
					case typeof( byte ): Append( *bitcast<byte*>( ref.Address ), customFormat ); break;

					case typeof( char_bigendian ): Append( ( char ) *cast<char_bigendian*>( ref.Address ) ); break;
					case typeof( char_littleendian ): Append( ( char ) *cast<char_littleendian*>( ref.Address ) ); break;
					case typeof( short_bigendian ): Append( ( short ) *cast<short_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( short_littleendian ): Append( ( short ) *cast<short_littleendian*>( ref.Address ), customFormat ); break;
					case typeof( ushort_bigendian ): Append( ( ushort ) *cast<ushort_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( ushort_littleendian ): Append( ( ushort ) *cast<ushort_littleendian*>( ref.Address ), customFormat ); break;

					case typeof( int_bigendian ): Append( ( int ) *cast<int_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( int_littleendian ): Append( ( int ) *cast<int_littleendian*>( ref.Address ), customFormat ); break;
					case typeof( uint_bigendian ): Append( ( uint ) *cast<uint_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( uint_littleendian ): Append( ( uint ) *cast<uint_littleendian*>( ref.Address ), customFormat ); break;

					case typeof( long_bigendian ): Append( ( long ) *cast<long_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( long_littleendian ): Append( ( long ) *cast<long_littleendian*>( ref.Address ), customFormat ); break;
					case typeof( ulong_bigendian ): Append( ( ulong ) *cast<ulong_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( ulong_littleendian ): Append( ( ulong ) *cast<ulong_littleendian*>( ref.Address ), customFormat ); break;

					case typeof( float_bigendian ): Append( *cast<float_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( float_littleendian ): Append( *cast<float_littleendian*>( ref.Address ), customFormat ); break;
					case typeof( double_bigendian ): Append( *cast<double_bigendian*>( ref.Address ), customFormat ); break;
					case typeof( double_littleendian ): Append( *cast<double_littleendian*>( ref.Address ), customFormat ); break;

					case typeof( Guid ): Append( *cast<Guid*>( ref.Address ), customFormat ); break;

					case typeof( StringBuilder ): Append( bitcast<StringBuilder>( ref.Address ) ); break;

					default:
						if( ref.Type.IsPointer | ref.Type.IsFunctor )
							Append( *cast<void**>( ref.Address ) );
						else if( ref.Type.IsEnum ) {
							var& enumType = *( EnumType* ) &ref.Type;

							enumType.ToString( this, ref.Address );
						}
						else if( ref.Type.IsUserType | ref.Type.IsInterface ) {
							var formattable = ref.QueryInterface<IFormattable>();
							if( formattable != null )
								formattable.ToString( this, customFormat );
							else {
								if( ref.Type.IsRuntimeObject )
									AppendFormat( "{{ Address={0} Type={1} _sharedReferenceCount={2} _weakReferenceCount={3} }}", ref.Address, ref.Type, bitcast<RuntimeObjectBase>( ref.Address )._sharedReferenceCount, bitcast<RuntimeObjectBase>( ref.Address )._weakReferenceCount );
								else
									AppendFormat( "{{ Address={0} Type={1} }}", ref.Address, ref.Type );
							}
						}
						else if( ref.Type.IsFixedArray ) {
							FormatFixedArray( ref, customFormat );
						}
						else if( ref.Type.IsDynamicArray ) {
							FormatDynamicArray( ref, customFormat );
						}
						break;
				}
			}
			else
				Append( "<!type info missed!>" );
		}

		private void FormatFixedArray( TypedReference& ref, string customFormat ) {
			var& arrayType = *( FixedArrayType* ) &ref.Type;
			var elementCount = arrayType.ElementCount;
			var elementPtr = ( byte* ) ref.Address;
			var elementStride = Memory.GetStride( arrayType.ElementType.InstanceSize, arrayType.ElementType.InstanceAlignment );
			var isObjects = ( arrayType.ElementType.Flags & ( Type.TypeFlags.Class | Type.TypeFlags.Delegate | Type.TypeFlags.DynamicArray ) ) != 0;

			Append( '{', arrayType.Dimensions );

			var dims = stackalloc uint[arrayType.Dimensions];
			for( var i = 0U; i < arrayType.Dimensions; ++i ) dims[i] = 0;

			var needComma = false;
			for( var i = 0U; i < elementCount; ++i ) {
				if( needComma ) Append( ',' );
				else needComma = true;

				if( isObjects )
					Append( new TypedReference { Type = arrayType.ElementType, Address = *( ( byte** ) elementPtr + i ) }, customFormat );
				else
					Append( new TypedReference { Type = arrayType.ElementType, Address = elementPtr + i * elementStride }, customFormat );

				if( ++dims[arrayType.Dimensions - 1] >= arrayType.Lengths[arrayType.Dimensions - 1] )
					for( var j = arrayType.Dimensions - 1; j != uint.MaxValue; --j ) {
						if( dims[j] >= arrayType.Lengths[j] ) {
							dims[j] = 0;

							if( j > 0 ) ++dims[j - 1];

							Append( '}' );

							if( j > 0 && dims[j - 1] < arrayType.Lengths[j - 1] ) {
								if( needComma ) Append( ',' );
								needComma = false;

								Append( '{', arrayType.Dimensions - j );
							}
						}
					}
			}
		}

		private void FormatDynamicArray( TypedReference& ref, string customFormat ) {
			var& arrayType = *( DynamicArrayType* ) &ref.Type;
			var& array = *( Array* ) &ref.Address;
			var elementCount = array.Length;
			var elementPtr = ( byte* ) array.GetData();
			var elementStride = ( int ) Memory.GetStride( ( uint ) arrayType.ElementType.InstanceSize, arrayType.ElementType.InstanceAlignment );
			var isObjects = ( arrayType.ElementType.Flags & ( Type.TypeFlags.Class | Type.TypeFlags.Delegate | Type.TypeFlags.DynamicArray ) ) != 0;

			Append( '{', arrayType.Dimensions );

			var dims = stackalloc uint[arrayType.Dimensions];
			for( var i = 0U; i < arrayType.Dimensions; ++i ) dims[i] = 0;

			var needComma = false;
			for( var i = 0U; i < elementCount; ++i ) {
				if( needComma ) Append( ',' );
				else needComma = true;

				if( isObjects )
					Append( new TypedReference { Type = arrayType.ElementType, Address = *( ( byte** ) elementPtr + i ) }, customFormat );
				else
					Append( new TypedReference { Type = arrayType.ElementType, Address = elementPtr + i * elementStride }, customFormat );

				if( ++dims[arrayType.Dimensions - 1] >= array.GetLength( arrayType.Dimensions - 1 ) )
					for( var j = arrayType.Dimensions - 1; j != uint.MaxValue; --j ) {
						if( dims[j] >= array.GetLength( j ) ) {
							dims[j] = 0;

							if( j > 0 ) ++dims[j - 1];

							Append( '}' );

							if( j > 0 && dims[j - 1] < array.GetLength( j - 1 ) ) {
								if( needComma ) Append( ',' );
								needComma = false;

								Append( '{', arrayType.Dimensions - j );
							}
						}
					}
			}
		}

		public bool IsNullOrEmpty { get { return this == null || Length == 0; } }

		public void Clear() { _length = 0; }

		public char* GetChars() { return &_text[0]; }
		public CUtf16StringSpan GetTextSpan() { return new CUtf16StringSpan( &_text[0], Length ); }

		// Buffer remains null-terminating until any modification
		public CUtf16String GetNullTerminatingBuffer() { EnsureCapacity( 1 ); _text[Length] = '\0'; return new CUtf16String( &_text[0] ); }

		public SbcsString ToSbcsString() { return ToSbcsString( Environment.DefaultCodePage ); }

		public SbcsString ToSbcsString( CodePageID codepage ) {
			return SbcsString.FromUtf16( codepage, &_text[0], _length );
		}

		public Utf8String ToUtf8String() {
			if( _length == 0 ) return "";
			return Utf8String.FromUtf16( &_text[0], _length );
		}

		public Utf16String ToUtf16String() { return ToString(); }

		public override Utf16String ToString() {
			if( _length == 0 ) return "";
			return Utf16String.FromUtf16( &_text[0], _length );
		}

		public Utf32String ToUtf32String() {
			if( _length == 0 ) return "";
			return Utf32String.FromUtf16( &_text[0], _length );
		}

		private List<uint> _copyInterval = null;

		public void Replace( string find, string replace ) {
			if( find.IsNullOrEmpty ) return;

			_copyInterval = _copyInterval ?? new List<uint>();
			_copyInterval.Clear();

			char* chars = &_text[0], findChars = find.GetChars(), replaceChars = replace.GetChars();
			var lastPosition = 0U;
			var copyLastCharacters = 0U;

			for( var i = 0U; i < _length; ++i ) {
				if( chars[i] == findChars[0] && i <= _length - find.Length ) {
					for( var j = 1U; j < find.Length; ++j ) {
						if( chars[i + j] != findChars[j] )
							goto next_char;
					}

					_copyInterval.Add( lastPosition == 0 ? i : i + 1 - lastPosition - find.Length );
					lastPosition = i + 1;

					i += find.Length - 1;
				}
				else if( i + 1 == _length ) {
					copyLastCharacters = _length - lastPosition - find.Length + 1;
				}

			next_char:
				continue;
			}

			if( _copyInterval.Count == 0 ) return;

			var resultLength = _length + ( ( int ) replace.Length - ( int ) find.Length ) * _copyInterval.Count;

			if( resultLength > _text.Length ) { // relocation with replace
				var newBuffer = new[GetNextBufferSize( resultLength )] char;
				var result = &newBuffer[0];
				var destinationPos = 0U;
				var sourcePos = 0U;

				foreach( var interval in _copyInterval ) {
					Memory.Copy( result + destinationPos, chars + sourcePos, interval * sizeof( char ) );
					Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

					destinationPos += interval + replace.Length;
					sourcePos += interval + find.Length;
				}

				Memory.Copy( result + destinationPos, chars + sourcePos, copyLastCharacters * sizeof( char ) );
				_text = newBuffer;
			}
			else {
				var result = &_text[0];
				var destinationPos = 0U;
				var sourcePos = 0U;

				if( find.Length == replace.Length ) { // "ab" --> "cd"
					foreach( var interval in _copyInterval ) {
						Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

						destinationPos += interval + replace.Length;
					}
				}
				else if( find.Length < replace.Length ) { // "ac" --> "cdefgh"
					destinationPos = resultLength - copyLastCharacters;
					sourcePos = Length - copyLastCharacters;

					Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, copyLastCharacters * sizeof( char ) );

					for( var i = _copyInterval.Count - 1; i != uint.MaxValue; --i ) {
						var interval = _copyInterval[i];

						destinationPos -= interval + replace.Length;
						sourcePos -= interval + find.Length;

						Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, interval * sizeof( char ) );
					}

					destinationPos = 0U;

					foreach( var interval in _copyInterval ) {
						Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

						destinationPos += interval + replace.Length;
					}
				}
				else if( find.Length > replace.Length ) { // "abcdefg" --> "hi"
					foreach( var interval in _copyInterval ) {
						Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, interval * sizeof( char ) );
						Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

						destinationPos += interval + replace.Length;
						sourcePos += interval + find.Length;
					}

					Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, copyLastCharacters * sizeof( char ) );
				}
			}

			Length = resultLength;
		}

		public void Replace( string find, StringBuilder replace ) {
			if( find.IsNullOrEmpty ) return;

			_copyInterval = _copyInterval ?? new List<uint>();
			_copyInterval.Clear();

			char* chars = &_text[0], findChars = find.GetChars(), replaceChars = replace.GetChars();
			var lastPosition = 0U;
			var copyLastCharacters = 0U;

			for( var i = 0U; i < _length; ++i ) {
				if( chars[i] == findChars[0] && i <= _length - find.Length ) {
					for( var j = 1U; j < find.Length; ++j ) {
						if( chars[i + j] != findChars[j] )
							goto next_char;
					}

					_copyInterval.Add( lastPosition == 0 ? i : i + 1 - lastPosition - find.Length );
					lastPosition = i + 1;

					i += find.Length - 1;
				}
				else if( i + 1 == _length ) {
					copyLastCharacters = _length - lastPosition - find.Length + 1;
				}

			next_char:
				continue;
			}

			if( _copyInterval.Count == 0 ) return;

			var resultLength = _length + ( replace.Length - find.Length ) * _copyInterval.Count;

			if( resultLength > _text.Length ) { // relocation with replace
				var newBuffer = new[GetNextBufferSize( resultLength )] char;
				var result = &newBuffer[0];
				var destinationPos = 0U;
				var sourcePos = 0U;

				foreach( var interval in _copyInterval ) {
					Memory.Copy( result + destinationPos, chars + sourcePos, interval * sizeof( char ) );
					Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

					destinationPos += interval + replace.Length;
					sourcePos += interval + find.Length;
				}

				Memory.Copy( result + destinationPos, chars + sourcePos, copyLastCharacters * sizeof( char ) );
				_text = newBuffer;
			}
			else {
				var result = &_text[0];
				var destinationPos = 0U;
				var sourcePos = 0U;

				if( find.Length == replace.Length ) { // "yo" --> "11"
					foreach( var interval in _copyInterval ) {
						Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

						destinationPos += interval + replace.Length;
					}
				}
				else if( find.Length < replace.Length ) { // "yo" --> "trollolo"
					destinationPos = resultLength - copyLastCharacters;
					sourcePos = Length - copyLastCharacters;

					Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, copyLastCharacters * sizeof( char ) );

					for( var i = _copyInterval.Count - 1; i != uint.MaxValue; --i ) {
						var interval = _copyInterval[i];

						destinationPos -= interval + replace.Length;
						sourcePos -= interval + find.Length;

						Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, interval * sizeof( char ) );
					}

					destinationPos = 0U;

					foreach( var interval in _copyInterval ) {
						Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

						destinationPos += interval + replace.Length;
					}
				}
				else if( find.Length > replace.Length ) { // "ZZZzzzZZZ" --> "z!"
					foreach( var interval in _copyInterval ) {
						Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, interval * sizeof( char ) );
						Memory.Copy( result + destinationPos + interval, replaceChars, replace.Length * sizeof( char ) );

						destinationPos += interval + replace.Length;
						sourcePos += interval + find.Length;
					}

					Memory.CopyOverlapped( result + destinationPos, chars + sourcePos, copyLastCharacters * sizeof( char ) );
				}
			}

			Length = resultLength;
		}

		public void ToLower() {
			var chars = GetChars();
			var length = Length;

			for( var i = 0U; i < length; ++i )
				chars[i] = char.ToLower( chars[i] );
		}

		public void ToUpper() {
			var chars = GetChars();
			var length = Length;

			for( var i = 0U; i < length; ++i )
				chars[i] = char.ToUpper( chars[i] );
		}

		public void Trim() {
			if( _length == 0 ) return;

			var startIndex = _length;
			for( var i = 0U; i < _length; ++i ) {
				if( _text[i].IsWhiteSpace ) continue;
				startIndex = i;
				break;
			}

			if( startIndex == _length ) {
				_length = 0;
				return;
			}

			var endIndex = startIndex;
			for( var i = _length - 1; i > startIndex; --i ) {
				if( _text[i].IsWhiteSpace ) continue;
				endIndex = i;
				break;
			}

			_length = endIndex - startIndex + 1;
			if( startIndex != 0 ) Memory.CopyOverlapped( &_text[0], &_text[startIndex], _length * sizeof( _text[0] ) );
		}

		public void TrimStart() {
			if( _length == 0 ) return;
			uint startIndex = _length;

			for( var i = 0U; i < _length; ++i ) {
				if( _text[i].IsWhiteSpace ) continue;
				startIndex = i;
				break;
			}

			if( startIndex == _length ) { _length = 0; return; }
			_length -= startIndex;
			if( startIndex != 0 ) Memory.CopyOverlapped( &_text[0], &_text[startIndex], _length * sizeof( _text[0] ) );
		}

		public void TrimEnd() {
			if( _length == 0 ) return;
			var endIndex = uint.MaxValue;

			for( var i = _length - 1; i != uint.MaxValue; --i ) {
				if( _text[i].IsWhiteSpace ) continue;
				endIndex = i;
				break;
			}

			if( endIndex == uint.MaxValue ) { _length = 0; return; }
			_length = endIndex + 1;
		}

		public bool StartsWith( char value ) {
			if( _length < 1 ) return false;

			return _text[0] == value;
		}

		public uint IndexOf( char value ) {
			for( var i = 0U; i < _length; ++i )
				if( _text[i] == value ) return i;

			return uint.MaxValue;
		}

		public uint IndexOf( char value, uint startIndex ) {
			for( var i = startIndex; i < _length; ++i )
				if( _text[i] == value ) return i;

			return uint.MaxValue;
		}

		public string Substring( uint startIndex ) {
			return Substring( startIndex, _length - startIndex );
		}

		public string Substring( uint startIndex, uint length ) {
			if( !Assert.Verify( startIndex <= _length ) ) return "";
			if( !Assert.Verify( startIndex <= _length - length ) ) return "";

			return string.FromUtf16( &_text[startIndex], length );
		}

		public void Insert( uint startIndex, string value, uint count = 1 ) {
			if( !Assert.Verify( startIndex <= _length ) ) return;
			if( !Assert.Verify( count > 0 ) ) return;

			EnsureCapacity( value.Length * count );

			if( startIndex < _length )
				Memory.CopyOverlapped( &_text[startIndex + count], &_text[startIndex], _length - startIndex - count + 1 );

			for( var i = 0U; i < count; ++i )
				Memory.Copy( &_text[startIndex + value.Length * i], value.GetChars(), value.ByteLength );
		}

		public void Remove( uint startIndex, uint length ) {
			if( !Assert.Verify( startIndex <= _length ) ) return;
			if( !Assert.Verify( length <= _length ) ) return;
			if( !Assert.Verify( startIndex <= _length - length ) ) return;

			Memory.CopyOverlapped( &_text[startIndex], &_text[startIndex + length], ( _length - length - startIndex ) * sizeof( char ) );
			_length -= length;
		}

		public void Concat( vararg TypedReference values ) {
			foreach( var item in values )
				Append( item );
		}

		// Ready-to-use instances of StringBuilder with non-atomic reference counter
		public static CachingStack<StringBuilder> CachedBuilders { get { return RuntimeObjectBase._cachedStringBuilders; } }
	}

	// implement IFormattable to use these nice extensions
	public static class ToStringExtensions {
		public static SbcsString ToSbcsString( this IFormattable @this, CodePageID codepage, string format = "" ) { if( @this == null ) return ""; using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { @this.ToString( builder.Value, format ); return builder.Value.ToSbcsString( codepage ); } }
		public static SbcsString ToSbcsString( this IFormattable @this, string format = "" ) { if( @this == null ) return ""; using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { @this.ToString( builder.Value, format ); return builder.Value.ToSbcsString(); } }
		public static Utf8String ToUtf8String( this IFormattable @this, string format = "" ) { if( @this == null ) return ""; using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { @this.ToString( builder.Value, format ); return builder.Value.ToUtf8String(); } }
		public static Utf16String ToString( this IFormattable @this, string format = "" ) { if( @this == null ) return ""; using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { @this.ToString( builder.Value, format ); return builder.Value.ToString(); } }
		public static Utf32String ToUtf32String( this IFormattable @this, string format = "" ) { if( @this == null ) return ""; using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { @this.ToString( builder.Value, format ); return builder.Value.ToUtf32String(); } }
	}
}