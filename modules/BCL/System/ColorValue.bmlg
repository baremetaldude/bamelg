//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System {
	public static struct ColorValue {
		public struct Rgb : IFormattable {
			public double R, G, B;

			public Rgb() { }

			public Rgb( double r, double g, double b ) {
				R = r;
				G = g;
				B = b;
			}

			public bool IsValid { get { return R >= 0 && G >= 0 && B >= 0 && R <= 1 && G <= 1 && B <= 1; } }

			public static explicit operator Rgb( RgbColor value ) { return new Rgb { R = value.R * ( 1 / 255.0 ), G = value.G * ( 1 / 255.0 ), B = value.B * ( 1 / 255.0 ) }; }
			public static explicit operator Rgb( RgbaColor value ) { return new Rgb { R = value.R * ( 1 / 255.0 ), G = value.G * ( 1 / 255.0 ), B = value.B * ( 1 / 255.0 ) }; }

			public void ToString( StringBuilder builder, string format ) {
				switch( format ) {
					case "w":
						builder.Append( '#' );
						builder.Append( Math.RoundToInt32( R * 255 ), "X2" );
						builder.Append( Math.RoundToInt32( G * 255 ), "X2" );
						builder.Append( Math.RoundToInt32( B * 255 ), "X2" );
						break;

					default:
						builder.AppendFormat( "{{ R={0} G={1} B={2} }}", R, G, B );
						break;
				}
			}

			public static double Diff( Rgb& v1, Rgb& v2 ) {
				return 0.3 * ( v1.R - v2.R ) + 0.59 * ( v1.G - v2.G ) + 0.11 * ( v1.B - v2.B );
			}
		}

		public struct Hsv : IFormattable {
			public double H, S, V;

			public Hsv() { }

			public Hsv( double h, double s, double v ) {
				H = h;
				S = s;
				V = v;
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.AppendFormat( "{{ H={0} S={1} V={2} }}", H, S, V );
			}

			public static explicit operator Hsv( Rgb value ) {
				var min = Math.Min( Math.Min( value.R, value.G ), value.B );
				var max = Math.Max( Math.Max( value.R, value.G ), value.B );
				var range = max - min;

				double h, s;
				var v = max;

				if( range == 0 ) {
					h = 0;
					s = 0;
				}
				else {
					s = range / max;

					var r = ( max - value.R ) / 6 / range + 0.5;
					var g = ( max - value.G ) / 6 / range + 0.5;
					var b = ( max - value.B ) / 6 / range + 0.5;

					if( value.R == max ) h = b - g;
					else if( value.G == max ) h = ( 1.0 / 3 ) + r - b;
					else h = ( 2.0 / 3 ) + g - r; // value.B == max
				}

				return new Hsv {
					H = h < 0 ? h + 1 : h > 1 ? h - 1 : h,
					S = s,
					V = v
				};
			}

			public static explicit operator Rgb( Hsv value ) {
				if( value.S == 0 )
					return new Rgb {
						R = value.V,
						G = value.V,
						B = value.V
					};

				var h = value.H * 6;
				if( h == 6 ) h = 0;

				var i = ( int ) h;
				var v1 = value.V * ( 1 - value.S );
				var v2 = value.V * ( 1 - value.S * ( h - i ) );
				var v3 = value.V * ( 1 - value.S * ( 1 - ( h - i ) ) );

				double r, g, b;

				switch( i ) {
					case 0: r = value.V; g = v3; b = v1; break;
					case 1: r = v2; g = value.V; b = v1; break;
					case 2: r = v1; g = value.V; b = v3; break;
					case 3: r = v1; g = v2; b = value.V; break;
					case 4: r = v3; g = v1; b = value.V; break;
					default: r = value.V; g = v1; b = v2; break;
				}

				return new Rgb {
					R = Math.Clamp( 0, r, 1 ),
					G = Math.Clamp( 0, g, 1 ),
					B = Math.Clamp( 0, b, 1 )
				};
			}
		}

		public struct Hsl : IFormattable {
			public double H, S, L;

			public Hsl() { }

			public Hsl( double h, double s, double l ) {
				H = h;
				S = s;
				L = l;
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.AppendFormat( "{{ H={0} S={1} L={2} }}", H, S, L );
			}

			public static explicit operator Hsl( Rgb value ) {
				var min = Math.Min( Math.Min( value.R, value.G ), value.B );
				var max = Math.Max( Math.Max( value.R, value.G ), value.B );
				var range = max - min;

				double h, s;
				var l = ( max + min ) * 0.5;

				if( range == 0 ) {
					h = 0;
					s = 0;
				}
				else {
					s = l < 0.5 ? range / ( max + min ) : range / ( 2 - max - min );

					var r = ( max - value.R ) / ( 6 * range ) + 0.5;
					var g = ( max - value.G ) / ( 6 * range ) + 0.5;
					var b = ( max - value.B ) / ( 6 * range ) + 0.5;

					if( value.R == max ) h = b - g;
					else if( value.G == max ) h = ( 1.0 / 3 ) + r - b;
					else h = ( 2.0 / 3 ) + g - r; // value.B == max
				}

				return new Hsl {
					H = h < 0 ? h + 1 : h > 1 ? h - 1 : h,
					S = s,
					L = l
				};
			}

			public static double HueToRgb( double v1, double v2, double vH ) {
				if( vH < 0 ) vH += 1;
				if( vH > 1 ) vH -= 1;
				if( 6 * vH < 1 ) return v1 + ( v2 - v1 ) * 6 * vH;
				if( 2 * vH < 1 ) return v2;
				if( 3 * vH < 2 ) return v1 + ( v2 - v1 ) * ( ( 2.0 / 3 ) - vH ) * 6;

				return v1;
			}

			public static explicit operator Rgb( Hsl value ) {
				if( value.S == 0 )
					return new Rgb {
						R = value.L,
						G = value.L,
						B = value.L
					};

				var v2 = value.L < 0.5 ? value.L * ( 1 + value.S ) : value.L + value.S - value.S * value.L;
				var v1 = 2 * value.L - v2;

				var r = HueToRgb( v1, v2, value.H + 1.0 / 3 );
				var g = HueToRgb( v1, v2, value.H );
				var b = HueToRgb( v1, v2, value.H - 1.0 / 3 );

				return new Rgb {
					R = Math.Clamp( 0, r, 1 ),
					G = Math.Clamp( 0, g, 1 ),
					B = Math.Clamp( 0, b, 1 )
				};
			}
		}

		public struct Xyz : IFormattable {
			public double X, Y, Z;

			public Xyz() { }

			public Xyz( double x, double y, double z ) {
				X = x;
				Y = y;
				Z = z;
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.AppendFormat( "{{ X={0} Y={1} Z={2} }}", X, Y, Z );
			}

			public static explicit operator Xyz( Rgb value ) {
				var r = value.R > 0.04045 ? Math.Pow( ( ( value.R + 0.055 ) / 1.055 ), 2.4 ) : value.R / 12.92;
				var g = value.G > 0.04045 ? Math.Pow( ( ( value.G + 0.055 ) / 1.055 ), 2.4 ) : value.G / 12.92;
				var b = value.B > 0.04045 ? Math.Pow( ( ( value.B + 0.055 ) / 1.055 ), 2.4 ) : value.B / 12.92;

				return new Xyz {
					X = r * 41.24 + g * 35.76 + b * 18.05,
					Y = r * 21.26 + g * 71.52 + b * 7.22,
					Z = r * 1.93 + g * 11.92 + b * 95.05
				};
			}

			public static explicit operator Rgb( Xyz value ) {
				var x = value.X / 100;
				var y = value.Y / 100;
				var z = value.Z / 100;

				var r = x * 3.2406 + y * -1.5372 + z * -0.4986;
				var g = x * -0.9689 + y * 1.8758 + z * 0.0415;
				var b = x * 0.0557 + y * -0.204 + z * 1.057;

				r = r > 0.0031308 ? 1.055 * Math.Pow( r, 1 / 2.4 ) - 0.055 : 12.92 * r;
				g = g > 0.0031308 ? 1.055 * Math.Pow( g, 1 / 2.4 ) - 0.055 : 12.92 * g;
				b = b > 0.0031308 ? 1.055 * Math.Pow( b, 1 / 2.4 ) - 0.055 : 12.92 * b;

				return new Rgb {
					R = Math.Clamp( 0, r, 1 ),
					G = Math.Clamp( 0, g, 1 ),
					B = Math.Clamp( 0, b, 1 )
				};
			}
		}

		public struct Lab : IFormattable {
			public double L, A, B;

			public Lab() { }

			public Lab( double l, double a, double b ) {
				L = l;
				A = a;
				B = b;
			}

			public void ToString( StringBuilder builder, string format ) {
				builder.AppendFormat( "{{ L={0} A={1} B={2} }}", L, A, B );
			}

			public static explicit operator Lab( Xyz value ) {
				var x = value.X / 95.047;
				var y = value.Y / 100.0;
				var z = value.Z / 108.883;

				x = x > 0.008856 ? Math.Pow( x, 1 / 3.0 ) : ( 7.787 * x ) + ( 16 / 116.0 );
				y = x > 0.008856 ? Math.Pow( y, 1 / 3.0 ) : ( 7.787 * y ) + ( 16 / 116.0 );
				z = x > 0.008856 ? Math.Pow( z, 1 / 3.0 ) : ( 7.787 * z ) + ( 16 / 116.0 );

				var l = 116 * y - 16;
				var a = 500 * ( x - y );
				var b = 200 * ( y - z );

				return new Lab {
					L = l,
					A = a,
					B = b
				};
			}

			public static explicit operator Xyz( Lab value ) {
				var y = ( value.L + 16 ) / 116;
				var x = value.A / 500 + y;
				var z = y - value.B / 200;

				var y3 = Math.Pow( y, 3 );
				var x3 = Math.Pow( x, 3 );
				var z3 = Math.Pow( z, 3 );

				y = y3 > 0.008856 ? y3 : ( y - 16 / 116 ) / 7.787;
				x = x3 > 0.008856 ? x3 : ( x - 16 / 116 ) / 7.787;
				z = z3 > 0.008856 ? z3 : ( z - 16 / 116 ) / 7.787;

				return new Xyz {
					X = 95.047 * x,
					Y = 100 * y,
					Z = 108.883 * z
				};
			}

			public static double Diff1( Lab v1, Lab v2 ) {
				return Math.Sqrt( v2.A * v2.A + v2.B * v2.B ) - Math.Sqrt( v1.A * v1.A + v1.B * v1.B );
			}

			public static double Diff2( Lab v1, Lab v2 ) {
				var v = Math.Sqrt( v2.A * v2.A + v2.B * v2.B ) - Math.Sqrt( v1.A * v1.A + v1.B * v1.B );

				return Math.Sqrt( Math.Pow( v2.A - v1.A, 2 ) + Math.Pow( v2.B - v1.B, 2 ) - Math.Pow( v, 2 ) );
			}

			public static double DiffCIE76( Lab v1, Lab v2 ) {
				return Math.Sqrt( Math.Pow( v1.L - v2.L, 2 ) + Math.Pow( v1.A - v2.A, 2 ) + Math.Pow( v1.B - v2.B, 2 ) );
			}

			public struct DiffConstantsCIE94 {
				public double K, K1, K2;

				public static DiffConstantsCIE94 Graphics = new DiffConstantsCIE94 { K = 1, K1 = 0.045, K2 = 0.015 };
				public static DiffConstantsCIE94 Textiles = new DiffConstantsCIE94 { K = 2, K1 = 0.048, K2 = 0.014 };
			}

			public static double DiffCIE94( Lab& v1, Lab& v2 ) {
				return DiffCIE94( v1, v2, DiffConstantsCIE94.Graphics );
			}

			public static double DiffCIE94( Lab& v1, Lab& v2, DiffConstantsCIE94& constants ) {
				var dl = v1.L - v2.L;
				var da = v1.A - v2.A;
				var db = v1.B - v2.B;

				var c1 = Math.Sqrt( v1.A * v1.A + v1.B * v1.B );
				var c2 = Math.Sqrt( v2.A * v2.A + v2.B * v2.B );
				var dc = c1 - c2;

				var dh = da * da + db * db - dc * dc;
				dh = dh < 0 ? 0 : Math.Sqrt( dh );

				var sc = 1.0 + constants.K1 * c1;
				var sh = 1.0 + constants.K2 * c1;

				return Math.Sqrt( Math.Pow( dl / constants.K, 2 ) + Math.Pow( dc / sc, 2 ) + Math.Pow( dh / sh, 2 ) );
			}

			public static double DiffCIE2000( Lab v1, Lab v2 ) {
				var lm = ( v1.L + v2.L ) * 0.5;

				var c1 = Math.Sqrt( v1.A * v1.A + v1.B * v1.B );
				var c2 = Math.Sqrt( v2.A * v2.A + v2.B * v2.B );
				var cm = ( c1 + c2 ) * 0.5;

				var cm7 = Math.Pow( cm, 7 );
				var g = ( 3 - Math.Sqrt( cm7 / ( cm7 + 6103515625 ) ) ) * 0.5;
				var a1 = v1.A * g;
				var a2 = v2.A * g;

				var C1 = Math.Sqrt( a1 * a1 + v1.B * v1.B );
				var C2 = Math.Sqrt( a2 * a2 + v2.B * v2.B );
				var CM = ( C1 + C2 ) / 2.0;

				var h1 = Math.Atan2( v1.B, a1 );
				var h2 = Math.Atan2( v2.B, a2 );
				var hr = Math.Abs( h1 - h2 );

				double dh;
				if( hr <= Math.DegreesToRadians( 180 ) )
					dh = h2 - h1;
				else if( hr > Math.DegreesToRadians( 180 ) && h2 <= h1 )
					dh = h2 - h1 + Math.DegreesToRadians( 360 );
				else
					dh = h2 - h1 - Math.DegreesToRadians( 360 );

				var dl = v2.L - v1.L;
				var dc = C2 - C1;
				var dH = 2 * Math.Sqrt( C1 * C2 ) * Math.Sin( dh / 2.0 );

				var H = hr > Math.DegreesToRadians( 180 ) ? ( h1 + h2 + Math.DegreesToRadians( 360 ) ) / 2.0 : ( h1 + h2 ) / 2.0;
				var t = 1 - 0.17 * Math.Cos( H - Math.DegreesToRadians( 30 ) ) + 0.24 * Math.Cos( 2 * H ) + 0.32 * Math.Cos( 3 * H + Math.DegreesToRadians( 6 ) ) - 0.2 * Math.Cos( 4 * H - Math.DegreesToRadians( 63 ) );

				var lm2 = Math.Pow( lm - 50, 2 );
				var sl = 1 + ( 0.015 * lm2 ) / Math.Sqrt( 20 + lm2 );
				var sc = 1 + 0.045 * CM;
				var sh = 1 + 0.015 * CM * t;

				var CM7 = Math.Pow( CM, 7 );
				var rt = -2 * Math.Sqrt( CM7 / ( CM7 + 6103515625 ) ) * Math.Sin( Math.DegreesToRadians( 60 * Math.Exp( -Math.RadiansToDegrees( ( H - 275 ) / 25 ) ) ) );

				return Math.Sqrt( Math.Pow( dl / sl, 2 ) + Math.Pow( dc / sc, 2 ) + Math.Pow( dH / sh, 2 ) + rt * dc * dH / ( sc * sh ) );
			}

			public struct DiffConstantsCMC {
				public double Lightness, Chroma;

				public static DiffConstantsCMC Default = new DiffConstantsCMC { Lightness = 2, Chroma = 1 };
			}

			public static double DiffCMC( Lab v1, Lab v2 ) {
				return DiffCMC( v1, v2, DiffConstantsCMC.Default );
			}

			public static double DiffCMC( Lab v1, Lab v2, DiffConstantsCMC& constants ) {
				var dl = v1.L - v2.L;
				var h = Math.Atan2( v1.B, v1.A );
				if( h < 0 ) h += Math.Pi * 2;

				var c1 = Math.Sqrt( v1.A * v1.A + v1.B * v1.B );
				var c2 = Math.Sqrt( v2.A * v2.A + v2.B * v2.B );
				var dc = c1 - c2;

				var dh = Math.Sqrt( Math.Pow( v1.A - v2.A, 2 ) + Math.Pow( v1.B - v2.B, 2 ) - dc * dc );

				var c4 = Math.Pow( c1, 4 );
				var t = h >= Math.DegreesToRadians( 164 ) && h <= Math.DegreesToRadians( 345 ) ? 0.56 + Math.Abs( 0.2 * Math.Cos( h + Math.DegreesToRadians( 168 ) ) ) : 0.36 + Math.Abs( 0.4 * Math.Cos( h + Math.DegreesToRadians( 35 ) ) );
				var f = Math.Sqrt( c4 / ( c4 + 1900 ) );

				var sl = v1.L < 16 ? 0.511 : 0.040975 * v1.L / ( 1.0 + 0.01765 * v1.L );
				var sc = ( 0.0638 * c1 ) / ( 1 + 0.0131 * c1 ) + 0.638;
				var sh = sc * ( f * t + 1 - f );

				return Math.Sqrt( Math.Pow( dl / ( constants.Lightness * sl ), 2 ) + Math.Pow( dc / ( constants.Chroma * sc ), 2 ) + Math.Pow( dh / sh, 2 ) );
			}

		}
	}
}