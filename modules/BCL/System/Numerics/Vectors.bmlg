//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime.InteropServices;

namespace System.Numerics {
	public struct Vector2f : IFormattable {
		public float X, Y;

		public Vector2f() { }
		public Vector2f( float x, float y ) { X = x; Y = y; }

		public thistype operator -() { return new thistype( -X, -Y ); }

		public static thistype operator +( thistype& left, thistype& right ) { return new thistype( left.X + right.X, left.Y + right.Y ); }
		public static thistype operator -( thistype& left, thistype& right ) { return new thistype( left.X - right.X, left.Y - right.Y ); }
		public static thistype operator *( thistype& left, float right ) { return new thistype( left.X * right, left.Y * right ); }
		public static thistype operator /( thistype& left, float right ) { return new thistype( left.X / right, left.Y / right ); }
		public static thistype operator *( float left, thistype& right ) { return new thistype( left * right.X, left * right.Y ); }

		public static float operator *( thistype& left, thistype& right ) { return left.X * right.X + left.Y * right.Y; }
		public static float operator ^( thistype& left, thistype& right ) { return left.X * right.Y - left.Y * right.X; }

		public float Length { get { return Math.Sqrt( LengthSquared ); } }
		public float LengthSquared { get { return X * X + Y * Y; } }

		public static thistype FromAngleRadians( double angle ) { return new thistype( ( float )( Math.Cos( angle ) ), ( float )( Math.Sin( angle ) ) ); }
		public static thistype FromAngleDegrees( double angle ) { angle = Math.DegreesToRadians( angle ); return new thistype( ( float )( Math.Cos( angle ) ), ( float )( Math.Sin( angle ) ) ); }

		public static thistype FromAngleRadians( double angle, double length ) { return new thistype( ( float )( Math.Cos( angle ) * length ), ( float )( Math.Sin( angle ) * length ) ); }
		public static thistype FromAngleDegrees( double angle, double length ) { angle = Math.DegreesToRadians( angle ); return new thistype( ( float )( Math.Cos( angle ) * length ), ( float )( Math.Sin( angle ) * length ) ); }

		public double PolarAngle { get { return Math.Atan2( Y, X ); } }

		public double GetAngle( thistype vector ) { return Math.Acos( Math.Clamp( -1.0, ( double )( this * vector ) / ( Length * vector.Length ), 1.0 ) ); }
		public double GetAngleNormalized( thistype vector ) { return Math.Acos( Math.Clamp( -1.0, ( double )( this * vector ), 1.0 ) ); }

		public thistype Normalized {
			get {
				var inversedLength = 1f / Length;
				return new thistype( X * inversedLength, Y * inversedLength );
			}
		}

		public thistype& Normalize() {
			var inversedLength = 1f / Length;
			X *= inversedLength;
			Y *= inversedLength;
			return this;
		}

		public static bool operator ==( thistype& left, thistype& right ) { return left.X == right.X & left.Y == right.Y; }
		public static bool operator !=( thistype& left, thistype& right ) { return left.X != right.X | left.Y != right.Y; }

		public bool Equals( thistype& other, int tolerance ) { return float.AreEqual( X, other.X, tolerance ) && float.AreEqual( Y, other.Y, tolerance ); }

		public static explicit operator thistype( Vector2d& value ) { return new Vector2f( ( float ) value.X, ( float ) value.Y ); }
		public static explicit operator thistype( Vector2i& value ) { return new Vector2f( value.X, value.Y ); }
		public static explicit operator thistype( Vector2l& value ) { return new Vector2f( value.X, value.Y ); }

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.AppendFormat( "({0};{1})", X, Y ); }
	}

	public struct Vector2d : IFormattable {
		public double X, Y;

		public Vector2d() { }
		public Vector2d( double x, double y ) { X = x; Y = y; }

		public thistype operator -() { return new thistype( -X, -Y ); }

		public static thistype operator +( thistype& left, thistype& right ) { return new thistype( left.X + right.X, left.Y + right.Y ); }
		public static thistype operator -( thistype& left, thistype& right ) { return new thistype( left.X - right.X, left.Y - right.Y ); }
		public static thistype operator *( thistype& left, double right ) { return new thistype( left.X * right, left.Y * right ); }
		public static thistype operator /( thistype& left, double right ) { return new thistype( left.X / right, left.Y / right ); }
		public static thistype operator *( double left, thistype& right ) { return new thistype( left * right.X, left * right.Y ); }

		public static double operator *( thistype& left, thistype& right ) { return left.X * right.X + left.Y * right.Y; }
		public static double operator ^( thistype& left, thistype& right ) { return left.X * right.Y - left.Y * right.X; }

		public double Length { get { return Math.Sqrt( LengthSquared ); } }
		public double LengthSquared { get { return X * X + Y * Y; } }

		public static thistype FromAngleRadians( double angle ) { return new thistype( Math.Cos( angle ), Math.Sin( angle ) ); }
		public static thistype FromAngleDegrees( double angle ) { angle = Math.DegreesToRadians( angle ); return new thistype( Math.Cos( angle ), Math.Sin( angle ) ); }

		public static thistype FromAngleRadians( double angle, double length ) { return new thistype( Math.Cos( angle ) * length, Math.Sin( angle ) * length ); }
		public static thistype FromAngleDegrees( double angle, double length ) { angle = Math.DegreesToRadians( angle ); return new thistype( Math.Cos( angle ) * length, Math.Sin( angle ) * length ); }

		public double PolarAngle { get { return Math.Atan2( Y, X ); } }

		public double GetAngle( thistype vector ) { return Math.Acos( Math.Clamp( -1.0, ( double )( this * vector ) / ( Length * vector.Length ), 1.0 ) ); }
		public double GetAngleNormalized( thistype vector ) { return Math.Acos( Math.Clamp( -1.0, ( double )( this * vector ), 1.0 ) ); }

		public thistype Normalized {
			get {
				var inversedLength = 1.0 / Length;
				return new thistype( X * inversedLength, Y * inversedLength );
			}
		}

		public thistype& Normalize() {
			var inversedLength = 1.0 / Length;

			X *= inversedLength;
			Y *= inversedLength;

			return this;
		}

		public static bool operator ==( thistype& left, thistype& right ) { return left.X == right.X & left.Y == right.Y; }
		public static bool operator !=( thistype& left, thistype& right ) { return left.X != right.X | left.Y != right.Y; }

		public bool Equals( thistype& other, int tolerance ) { return double.AreEqual( X, other.X, tolerance ) && double.AreEqual( Y, other.Y, tolerance ); }

		public static implicit operator thistype( Vector2f& value ) { return new Vector2d( value.X, value.Y ); }
		public static explicit operator thistype( Vector2i& value ) { return new Vector2d( value.X, value.Y ); }
		public static explicit operator thistype( Vector2l& value ) { return new Vector2d( value.X, value.Y ); }

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.AppendFormat( "({0};{1})", X, Y ); }
	}

	public struct Vector2i : IFormattable {
		public int X, Y;

		public Vector2i() { }
		public Vector2i( int x, int y ) { X = x; Y = y; }

		public thistype operator -() { return new thistype( -X, -Y ); }

		public static thistype operator +( thistype& left, thistype& right ) { return new thistype( left.X + right.X, left.Y + right.Y ); }
		public static thistype operator -( thistype& left, thistype& right ) { return new thistype( left.X - right.X, left.Y - right.Y ); }
		public static thistype operator *( thistype& left, int right ) { return new thistype( left.X * right, left.Y * right ); }
		public static thistype operator /( thistype& left, int right ) { return new thistype( left.X / right, left.Y / right ); }
		public static thistype operator *( int left, thistype& right ) { return new thistype( left * right.X, left * right.Y ); }

		public static double operator *( thistype& left, thistype& right ) { return left.X * right.X + left.Y * right.Y; }
		public static double operator ^( thistype& left, thistype& right ) { return left.X * right.Y - left.Y * right.X; }

		public static bool operator ==( thistype& left, thistype& right ) { return left.X == right.X & left.Y == right.Y; }
		public static bool operator !=( thistype& left, thistype& right ) { return left.X != right.X | left.Y != right.Y; }

		public static explicit operator thistype( Vector2f& value ) { return new Vector2i( Math.RoundToInt32( value.X ), Math.RoundToInt32( value.Y ) ); }
		public static explicit operator thistype( Vector2d& value ) { return new Vector2i( Math.RoundToInt32( value.X ), Math.RoundToInt32( value.Y ) ); }
		public static explicit operator thistype( Vector2l& value ) { return new Vector2i( ( int ) value.X, ( int ) value.Y ); }

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.AppendFormat( "({0};{1})", X, Y ); }
	}

	public struct Vector2l : IFormattable {
		public long X, Y;

		public Vector2l() { }
		public Vector2l( long x, long y ) { X = x; Y = y; }

		public thistype operator -() { return new thistype( -X, -Y ); }

		public static thistype operator +( thistype& left, thistype& right ) { return new thistype( left.X + right.X, left.Y + right.Y ); }
		public static thistype operator -( thistype& left, thistype& right ) { return new thistype( left.X - right.X, left.Y - right.Y ); }
		public static thistype operator *( thistype& left, long right ) { return new thistype( left.X * right, left.Y * right ); }
		public static thistype operator /( thistype& left, long right ) { return new thistype( left.X / right, left.Y / right ); }
		public static thistype operator *( int left, thistype& right ) { return new thistype( left * right.X, left * right.Y ); }

		public static double operator *( thistype& left, thistype& right ) { return left.X * right.X + left.Y * right.Y; }
		public static double operator ^( thistype& left, thistype& right ) { return left.X * right.Y - left.Y * right.X; }

		public static bool operator ==( thistype& left, thistype& right ) { return left.X == right.X & left.Y == right.Y; }
		public static bool operator !=( thistype& left, thistype& right ) { return left.X != right.X | left.Y != right.Y; }

		public static explicit operator thistype( Vector2f& value ) { return new Vector2l( Math.RoundToInt64( value.X ), Math.RoundToInt64( value.Y ) ); }
		public static explicit operator thistype( Vector2d& value ) { return new Vector2l( Math.RoundToInt64( value.X ), Math.RoundToInt64( value.Y ) ); }
		public static implicit operator thistype( Vector2i& value ) { return new Vector2l( value.X, value.Y ); }

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.AppendFormat( "({0};{1})", X, Y ); }
	}

	public struct Vector3 : IFormattable {
		public float X, Y, Z;

		public Vector3() { }
		public Vector3( float x, float y, float z ) { X = x; Y = y; Z = z; }

		public thistype operator -() { return new thistype( -X, -Y, -Z ); }

		public static thistype operator +( thistype& left, thistype& right ) { return new thistype( left.X + right.X, left.Y + right.Y, left.Z + right.Z ); }
		public static thistype operator -( thistype& left, thistype& right ) { return new thistype( left.X - right.X, left.Y - right.Y, left.Z - right.Z ); }
		public static thistype operator *( thistype& left, float right ) { return new thistype( left.X * right, left.Y * right, left.Z * right ); }
		public static thistype operator /( thistype& left, float right ) { return new thistype( left.X / right, left.Y / right, left.Z / right ); }
		public static thistype operator *( float left, thistype& right ) { return new thistype( left * right.X, left * right.Y, left * right.Z ); }

		public static float operator *( thistype& left, thistype& right ) { return left.X * right.X + left.Y * right.Y + left.Z * right.Z; }
		public static thistype operator ^( thistype& left, thistype& right ) { return new thistype( left.Y * right.Z - left.Z * right.Y, left.Z * right.X - left.X * right.Z, left.X * right.Y - left.Y * right.X ); }

		public float Length { get { return Math.Sqrt( LengthSquared ); } }
		public float LengthSquared { get { return X * X + Y * Y + Z * Z; } }

		public thistype Normalized {
			get {
				var inversedLength = 1f / Length;
				return new thistype( X * inversedLength, Y * inversedLength, Z * inversedLength );
			}
		}

		public thistype& Normalize() {
			var inversedLength = 1f / Length;
			X *= inversedLength;
			Y *= inversedLength;
			Z *= inversedLength;
			return this;
		}

		public static bool operator ==( thistype& left, thistype& right ) { return left.X == right.X & left.Y == right.Y & left.Z == right.Z; }
		public static bool operator !=( thistype& left, thistype& right ) { return left.X != right.X | left.Y != right.Y | left.Z != right.Z; }

		public static explicit operator thistype( Vector2f& value ) { return new thistype( value.X, value.Y, 0 ); }

		public bool Equals( thistype& other, int tolerance ) { return float.AreEqual( X, other.X, tolerance ) && float.AreEqual( Y, other.Y, tolerance ) && float.AreEqual( Z, other.Z, tolerance ); }

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.AppendFormat( "({0};{1};{2})", X, Y, Z ); }
	}

	public struct Vector4 : IFormattable {
		public float X, Y, Z, W;

		public Vector4() { }
		public Vector4( float x, float y, float z, float w ) { X = x; Y = y; Z = z; W = w; }

		public thistype operator -() { return new thistype( -X, -Y, -Z, -W ); }

		public static thistype operator +( thistype& left, thistype& right ) { return new thistype( left.X + right.X, left.Y + right.Y, left.Z + right.Z, left.W + right.W ); }
		public static thistype operator -( thistype& left, thistype& right ) { return new thistype( left.X - right.X, left.Y - right.Y, left.Z - right.Z, left.W - right.W ); }
		public static thistype operator *( thistype& left, float right ) { return new thistype( left.X * right, left.Y * right, left.Z * right, left.W * right ); }
		public static thistype operator /( thistype& left, float right ) { return new thistype( left.X / right, left.Y / right, left.Z / right, left.W / right ); }
		public static thistype operator *( float left, thistype& right ) { return new thistype( left * right.X, left * right.Y, left * right.Z, left * right.W ); }

		public static float operator *( thistype& left, thistype& right ) { return left.X * right.X + left.Y * right.Y + left.Z * right.Z + left.W * right.W; }
		public static Vector3 operator ^( thistype& left, thistype& right ) { return left.Homogenized3D ^ right.Homogenized3D; }

		public float Length { get { return Math.Sqrt( LengthSquared ); } }
		public float LengthSquared { get { return X * X + Y * Y + Z * Z + W * W; } }

		public thistype Normalized {
			get {
				var inversedLength = 1f / Length;
				return new thistype( X * inversedLength, Y * inversedLength, Z * inversedLength, W * inversedLength );
			}
		}

		public thistype& Normalize() {
			var inversedLength = 1f / Length;
			X *= inversedLength;
			Y *= inversedLength;
			Z *= inversedLength;
			W *= inversedLength;
			return this;
		}

		public thistype Homogenized {
			get {
				var inversedW = 1f / W;
				return new thistype( X * inversedW, Y * inversedW, Z * inversedW, 1f );
			}
		}

		public Vector3 Homogenized3D {
			get {
				var inversedW = 1f / W;
				return new Vector3( X * inversedW, Y * inversedW, Z * inversedW );
			}
		}

		public thistype& Homogenize() {
			var inversedW = 1f / W;
			X *= inversedW;
			Y *= inversedW;
			Z *= inversedW;
			W = 1f;
			return this;
		}

		public static bool operator ==( thistype& left, thistype& right ) { return left.X == right.X & left.Y == right.Y & left.Z == right.Z & left.W == right.W; }
		public static bool operator !=( thistype& left, thistype& right ) { return left.X != right.X | left.Y != right.Y | left.Z != right.Z | left.W != right.W; }

		public static explicit operator thistype( Vector3& value ) { return new thistype( value.X, value.Y, value.Z, 1f ); }

		private static uint _mnull = 0x80000001;
		private static int _minus1 = -1;

		public bool Equals( thistype& other, int tolerance ) asm {
			X86_32 {
				feature( SSSE3 ) {
					if( thismethod.CallingConvention == CallingConvention.FastCallX86 ) {
						// ecx - this
						// edx - other
						movss xmm5, [esp + 4] // tolerance
					}
					else {
						mov ecx, [esp + 4]     // this
						mov edx, [esp + 8]     // other
						movss xmm5, [esp + 12] // tolerance
					}

					movss xmm6, [[_mnull]]
					movss xmm7, [[_minus1]]
					movaps xmm0, [ecx]
					movaps xmm1, [edx]

					pshufd xmm5, xmm5, 0b0000000
					pshufd xmm6, xmm6, 0b0000000
					pshufd xmm7, xmm7, 0b0000000

					movaps xmm2, xmm0
					movaps xmm3, xmm1
					movaps xmm4, xmm6

					pcmpgtd xmm2, xmm7
					pcmpgtd xmm3, xmm7

					pxor xmm2, xmm3
					pand xmm4, xmm2
					pxor xmm0, xmm2
					paddd xmm0, xmm4

					psubd xmm0, xmm1
					pabsd xmm0, xmm0
					pcmpgtd xmm0, xmm5

					movmskps eax, xmm0
					test eax, eax
					setz al

					retn
				}
			}
			default {
				return float.AreEqual( X, other.X, tolerance ) && float.AreEqual( Y, other.Y, tolerance ) && float.AreEqual( Z, other.Z, tolerance ) && float.AreEqual( W, other.W, tolerance );
			}
		}

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.AppendFormat( "({0};{1};{2};{3})", X, Y, Z, W ); }
	}
}