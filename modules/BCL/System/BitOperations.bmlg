//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System {
	public static struct BitOperations {
		[ForceInline]
		public static bool IsPowerOf2( sbyte value ) { return ( value & ( value - 1 ) ) == 0; }
		[ForceInline]
		public static bool IsPowerOf2( byte value ) { return ( value & ( value - 1 ) ) == 0; }
		[ForceInline]
		public static bool IsPowerOf2( short value ) { return ( value & ( value - 1 ) ) == 0; }
		[ForceInline]
		public static bool IsPowerOf2( ushort value ) { return ( value & ( value - 1 ) ) == 0; }
		[ForceInline]
		public static bool IsPowerOf2( int value ) { return ( value & ( value - 1 ) ) == 0; }
		[ForceInline]
		public static bool IsPowerOf2( uint value ) { return ( value & ( value - 1 ) ) == 0; }
		[ForceInline]
		public static bool IsPowerOf2( long value ) { return ( value & ( value - 1 ) ) == 0; }
		[ForceInline]
		public static bool IsPowerOf2( ulong value ) { return ( value & ( value - 1 ) ) == 0; }

		public extern static short ByteSwap( short number );
		public extern static ushort ByteSwap( ushort number );
		public extern static int ByteSwap( int number );
		public extern static uint ByteSwap( uint number );
		public extern static long ByteSwap( long number );
		public extern static ulong ByteSwap( ulong number );

		public extern static sbyte ReverseBits( sbyte number );
		public extern static byte ReverseBits( byte number );
		public extern static short ReverseBits( short number );
		public extern static ushort ReverseBits( ushort number );
		public extern static int ReverseBits( int number );
		public extern static uint ReverseBits( uint number );
		public extern static long ReverseBits( long number );
		public extern static ulong ReverseBits( ulong number );

		public extern static sbyte PopulationCount( sbyte number );
		public extern static sbyte PopulationCount( byte number );
		public extern static short PopulationCount( short number );
		public extern static short PopulationCount( ushort number );
		public extern static int PopulationCount( int number );
		public extern static int PopulationCount( uint number );
		public extern static long PopulationCount( long number );
		public extern static long PopulationCount( ulong number );

		// @{ CountLeadingZeros
		public static sbyte CountLeadingZeros( sbyte number ) { return CountLeadingZeros( number, false ); }
		public static sbyte CountLeadingZeros( byte number ) { return CountLeadingZeros( number, false ); }
		public static short CountLeadingZeros( short number ) { return CountLeadingZeros( number, false ); }
		public static short CountLeadingZeros( ushort number ) { return CountLeadingZeros( number, false ); }
		public static int CountLeadingZeros( int number ) { return CountLeadingZeros( number, false ); }
		public static int CountLeadingZeros( uint number ) { return CountLeadingZeros( number, false ); }
		public static long CountLeadingZeros( long number ) { return CountLeadingZeros( number, false ); }
		public static long CountLeadingZeros( ulong number ) { return CountLeadingZeros( number, false ); }

		public extern static sbyte CountLeadingZeros( sbyte number, [EvaluateConstant] bool isZeroUndefined );
		public extern static sbyte CountLeadingZeros( byte number, [EvaluateConstant] bool isZeroUndefined );
		public extern static short CountLeadingZeros( short number, [EvaluateConstant] bool isZeroUndefined );
		public extern static short CountLeadingZeros( ushort number, [EvaluateConstant] bool isZeroUndefined );
		public extern static int CountLeadingZeros( int number, [EvaluateConstant] bool isZeroUndefined );
		public extern static int CountLeadingZeros( uint number, [EvaluateConstant] bool isZeroUndefined );
		public extern static long CountLeadingZeros( long number, [EvaluateConstant] bool isZeroUndefined );
		public extern static long CountLeadingZeros( ulong number, [EvaluateConstant] bool isZeroUndefined );
		// @}

		// @{ CountLeadingZeros
		public static sbyte CountTrailingZeros( sbyte number ) { return CountTrailingZeros( number, false ); }
		public static sbyte CountTrailingZeros( byte number ) { return CountTrailingZeros( number, false ); }
		public static short CountTrailingZeros( short number ) { return CountTrailingZeros( number, false ); }
		public static short CountTrailingZeros( ushort number ) { return CountTrailingZeros( number, false ); }
		public static int CountTrailingZeros( int number ) { return CountTrailingZeros( number, false ); }
		public static int CountTrailingZeros( uint number ) { return CountTrailingZeros( number, false ); }
		public static long CountTrailingZeros( long number ) { return CountTrailingZeros( number, false ); }
		public static long CountTrailingZeros( ulong number ) { return CountTrailingZeros( number, false ); }

		public extern static sbyte CountTrailingZeros( sbyte number, [EvaluateConstant] bool isZeroUndefined );
		public extern static sbyte CountTrailingZeros( byte number, [EvaluateConstant] bool isZeroUndefined );
		public extern static short CountTrailingZeros( short number, [EvaluateConstant] bool isZeroUndefined );
		public extern static short CountTrailingZeros( ushort number, [EvaluateConstant] bool isZeroUndefined );
		public extern static int CountTrailingZeros( int number, [EvaluateConstant] bool isZeroUndefined );
		public extern static int CountTrailingZeros( uint number, [EvaluateConstant] bool isZeroUndefined );
		public extern static long CountTrailingZeros( long number, [EvaluateConstant] bool isZeroUndefined );
		public extern static long CountTrailingZeros( ulong number, [EvaluateConstant] bool isZeroUndefined );
		// @}

		public static int Log2( sbyte value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }
		public static int Log2( short value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }
		public static int Log2( int value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }
		public static long Log2( long value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }

		public static int Log2( byte value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }
		public static int Log2( ushort value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }
		public static int Log2( uint value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }
		public static long Log2( ulong value ) { return CountTrailingZeros( IsPowerOf2( value ) ? value : NextPowerOf2( value ) ); }

		[ForceInline]
		public static sbyte NextPowerOf2( sbyte x ) { return ( sbyte ) NextPowerOf2( ( byte ) x ); }

		[ForceInline]
		public static byte NextPowerOf2( byte x ) {
			x |= x >> 1;
			x |= x >> 2;
			x |= x >> 4;

			return x + 1;
		}

		[ForceInline]
		public static short NextPowerOf2( short x ) { return ( short ) NextPowerOf2( ( ushort ) x ); }

		[ForceInline]
		public static ushort NextPowerOf2( ushort x ) {
			x |= x >> 1;
			x |= x >> 2;
			x |= x >> 4;
			x |= x >> 8;

			return x + 1;
		}

		[ForceInline]
		public static int NextPowerOf2( int x ) { return ( int ) NextPowerOf2( ( uint ) x ); }

		[ForceInline]
		public static uint NextPowerOf2( uint x ) {
			x |= x >> 1;
			x |= x >> 2;
			x |= x >> 4;
			x |= x >> 8;
			x |= x >> 16;

			return x + 1;
		}

		[ForceInline]
		public static long NextPowerOf2( long x ) { return ( long ) NextPowerOf2( ( ulong ) x ); }

		[ForceInline]
		public static ulong NextPowerOf2( ulong x ) {
			x |= x >> 1;
			x |= x >> 2;
			x |= x >> 4;
			x |= x >> 8;
			x |= x >> 16;
			x |= x >> 32;

			return x + 1;
		}

		[ForceInline]
		public static byte NextPermutation( byte x ) {
			var t = x | ( x - 1 );
			return ( t + 1 ) | ( ( ( ~t & ( t + 1 ) ) - 1 ) >> ( CountTrailingZeros( x ) + 1 ) );
		}

		[ForceInline]
		public static ushort NextPermutation( ushort x ) {
			var t = x | ( x - 1 );
			return ( t + 1 ) | ( ( ( ~t & ( t + 1 ) ) - 1 ) >> ( CountTrailingZeros( x ) + 1 ) );
		}

		[ForceInline]
		public static uint NextPermutation( uint x ) {
			var t = x | ( x - 1 );
			return ( t + 1 ) | ( ( ( ~t & ( t + 1 ) ) - 1 ) >> ( CountTrailingZeros( x ) + 1 ) );
		}

		[ForceInline]
		public static ulong NextPermutation( ulong x ) {
			var t = x | ( x - 1 );
			return ( t + 1 ) | ( ( ( ~t & ( t + 1 ) ) - 1 ) >> ( CountTrailingZeros( x ) + 1 ) );
		}

		[ForceInline]
		public static bool ComputeParity( sbyte x ) { return ComputeParity( bitcast<byte>( x ) ); }

		[ForceInline]
		public static bool ComputeParity( byte x ) {
			x ^= x >> 4;
			return ( bool )( ( 0x6996 >> ( x & 0xF ) ) & 1 );
		}

		[ForceInline]
		public static bool ComputeParity( short x ) { return ComputeParity( bitcast<ushort>( x ) ); }

		[ForceInline]
		public static bool ComputeParity( ushort x ) {
			x ^= x >> 4;
			x ^= x >> 8;
			return ( bool )( ( 0x6996 >> ( x & 0xF ) ) & 1 );
		}

		[ForceInline]
		public static bool ComputeParity( int x ) { return ComputeParity( bitcast<uint>( x ) ); }

		[ForceInline]
		public static bool ComputeParity( uint x ) {
			x ^= x >> 16;
			x ^= x >> 8;
			x ^= x >> 4;
			return ( bool )( ( 0x6996 >> ( x & 0xF ) ) & 1 );
		}

		[ForceInline]
		public static bool ComputeParity( long x ) { return ComputeParity( bitcast<ulong>( x ) ); }

		[ForceInline]
		public static bool ComputeParity( ulong x ) {
			x ^= x >> 32;
			x ^= x >> 16;
			x ^= x >> 8;
			x ^= x >> 4;
			return ( bool )( ( 0x6996 >> ( x & 0xF ) ) & 1 );
		}

		[ForceInline]
		public static bool BitTest( byte x, byte index ) { return ( x & ( 1 << index ) ) != 0; }
		[ForceInline]
		public static bool BitTest( sbyte x, sbyte index ) { return ( x & ( 1 << index ) ) != 0; }
		[ForceInline]
		public static bool BitTest( short x, short index ) { return ( x & ( 1 << index ) ) != 0; }
		[ForceInline]
		public static bool BitTest( ushort x, ushort index ) { return ( x & ( 1 << index ) ) != 0; }
		[ForceInline]
		public static bool BitTest( int x, int index ) { return ( x & ( 1 << index ) ) != 0; }
		[ForceInline]
		public static bool BitTest( uint x, uint index ) { return ( x & ( 1 << index ) ) != 0; }
		[ForceInline]
		public static bool BitTest( long x, long index ) { return ( x & ( 1 << index ) ) != 0; }
		[ForceInline]
		public static bool BitTest( ulong x, ulong index ) { return ( x & ( 1 << index ) ) != 0; }

		[ForceInline]
		public static bool MaskTest( byte x, byte mask ) { return ( x & mask ) == mask; }
		[ForceInline]
		public static bool MaskTest( sbyte x, sbyte mask ) { return ( x & mask ) == mask; }
		[ForceInline]
		public static bool MaskTest( short x, short mask ) { return ( x & mask ) == mask; }
		[ForceInline]
		public static bool MaskTest( ushort x, ushort mask ) { return ( x & mask ) == mask; }
		[ForceInline]
		public static bool MaskTest( int x, int mask ) { return ( x & mask ) == mask; }
		[ForceInline]
		public static bool MaskTest( uint x, uint mask ) { return ( x & mask ) == mask; }
		[ForceInline]
		public static bool MaskTest( long x, long mask ) { return ( x & mask ) == mask; }
		[ForceInline]
		public static bool MaskTest( ulong x, ulong mask ) { return ( x & mask ) == mask; }

		[ForceInline]
		public static sbyte BitSet( sbyte x, sbyte index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( sbyte ) flag & mask ); }
		[ForceInline]
		public static byte BitSet( byte x, byte index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( sbyte ) flag & mask ); }
		[ForceInline]
		public static short BitSet( short x, short index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( short ) flag & mask ); }
		[ForceInline]
		public static ushort BitSet( ushort x, ushort index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( short ) flag & mask ); }
		[ForceInline]
		public static int BitSet( int x, int index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( int ) flag & mask ); }
		[ForceInline]
		public static uint BitSet( uint x, uint index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( int ) flag & mask ); }
		[ForceInline]
		public static long BitSet( long x, long index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( long ) flag & mask ); }
		[ForceInline]
		public static ulong BitSet( ulong x, ulong index, bool flag ) { var mask = 1 << index; return ( x & ~mask ) | ( -( long ) flag & mask ); }

		[ForceInline]
		public static sbyte MaskSet( sbyte x, sbyte mask, bool flag ) { return ( x & ~mask ) | ( -( sbyte ) flag & mask ); }
		[ForceInline]
		public static byte MaskSet( byte x, byte mask, bool flag ) { return ( x & ~mask ) | ( -( sbyte ) flag & mask ); }
		[ForceInline]
		public static short MaskSet( short x, short mask, bool flag ) { return ( x & ~mask ) | ( -( short ) flag & mask ); }
		[ForceInline]
		public static ushort MaskSet( ushort x, ushort mask, bool flag ) { return ( x & ~mask ) | ( -( short ) flag & mask ); }
		[ForceInline]
		public static int MaskSet( int x, int mask, bool flag ) { return ( x & ~mask ) | ( -( int ) flag & mask ); }
		[ForceInline]
		public static uint MaskSet( uint x, uint mask, bool flag ) { return ( x & ~mask ) | ( -( int ) flag & mask ); }
		[ForceInline]
		public static long MaskSet( long x, long mask, bool flag ) { return ( x & ~mask ) | ( -( long ) flag & mask ); }
		[ForceInline]
		public static ulong MaskSet( ulong x, ulong mask, bool flag ) { return ( x & ~mask ) | ( -( long ) flag & mask ); }


		/// /return ( x & ~mask ) | ( y & mask )
		[ForceInline]
		public static sbyte MergeBits( sbyte x, sbyte y, sbyte mask ) { return x ^ ( ( x ^ y ) & mask ); }
		[ForceInline]
		public static byte MergeBits( byte x, byte y, byte mask ) { return x ^ ( ( x ^ y ) & mask ); }
		[ForceInline]
		public static short MergeBits( short x, short y, short mask ) { return x ^ ( ( x ^ y ) & mask ); }
		[ForceInline]
		public static ushort MergeBits( ushort x, ushort y, ushort mask ) { return x ^ ( ( x ^ y ) & mask ); }
		[ForceInline]
		public static int MergeBits( int x, int y, int mask ) { return x ^ ( ( x ^ y ) & mask ); }
		[ForceInline]
		public static uint MergeBits( uint x, uint y, uint mask ) { return x ^ ( ( x ^ y ) & mask ); }
		[ForceInline]
		public static long MergeBits( long x, long y, long mask ) { return x ^ ( ( x ^ y ) & mask ); }
		[ForceInline]
		public static ulong MergeBits( ulong x, ulong y, ulong mask ) { return x ^ ( ( x ^ y ) & mask ); }

		public extern static byte SignedShiftRight( byte value, byte bitsCount );
		public extern static sbyte SignedShiftRight( sbyte value, sbyte bitsCount );
		public extern static short SignedShiftRight( short value, short bitsCount );
		public extern static ushort SignedShiftRight( ushort value, ushort bitsCount );
		public extern static int SignedShiftRight( int value, int bitsCount );
		public extern static uint SignedShiftRight( uint value, uint bitsCount );
		public extern static long SignedShiftRight( long value, long bitsCount );
		public extern static ulong SignedShiftRight( ulong value, ulong bitsCount );

		[ForceInline]
		public static bool HasZeroByte( ushort value ) { return ( ( value - ( ushort ) 0x0101U ) & ~value & ( ushort ) 0x8080U ) != 0; }
		[ForceInline]
		public static bool HasZeroByte( uint value ) { return ( ( value - 0x01010101U ) & ~value & 0x80808080U ) != 0; }
		[ForceInline]
		public static bool HasZeroByte( ulong value ) { return ( ( value - 0x0101010101010101U ) & ~value & 0x8080808080808080U ) != 0; }

		[ForceInline]
		public static bool HasZeroByte( short value ) { return HasZeroByte( ( ushort ) value ); }
		[ForceInline]
		public static bool HasZeroByte( int value ) { return HasZeroByte( ( uint ) value ); }
		[ForceInline]
		public static bool HasZeroByte( long value ) { return HasZeroByte( ( ulong ) value ); }

		[ForceInline]
		public static uint CombineHashCodes( uint hash1, uint hash2 ) { return ( ( ( hash1 <<< 5 ) + hash1 ) ^ hash2 ); }
		[ForceInline]
		public static uint CombineHashCodes( uint hash1, uint hash2, uint hash3 ) { return CombineHashCodes( CombineHashCodes( hash1, hash2 ), hash3 ); }
		[ForceInline]
		public static uint CombineHashCodes( uint hash1, uint hash2, uint hash3, uint hash4 ) { return CombineHashCodes( CombineHashCodes( CombineHashCodes( hash1, hash2 ), hash3 ), hash4 ); }

		public static uint CombineHashCodes( vararg uint hash ) {
			if( hash.Length == 0 ) return 0;
			if( hash.Length == 1 ) return hash[0];
			var result = CombineHashCodes( hash[0], hash[1] );

			for( var i = 2U; i < hash.Length; ++i )
				result = CombineHashCodes( result, hash[i] );

			return result;
		}
	}
}