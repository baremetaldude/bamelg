//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Bit twiddling hacks come from http://graphics.stanford.edu/~seander/bithacks.html
//

using System;
using System.Reflection;
using System.Runtime;

namespace System {
	public static partial struct Math {
		[ForceInline]
		private static T SaturatedAdd<T>( T a, T b ) {
			T result;
			return checkwrap( result = a + b ) ? ( a >= 0 ? T.MaxValue : T.MinValue ) : result;
		}

		[ForceInline]
		private static T SaturatedSub<T>( T a, T b ) {
			T result;
			return checkwrap( result = a - b ) ? ( a >= 0 ? T.MaxValue : T.MinValue ) : result;
		}

		private static partial struct Impl {
			private static float _0_5f = 0.5f;
			private static float _m0_5f = -0.5f;

			private static double _0_5 = 0.5;
			private static double _m0_5 = -0.5;

			public static long RoundHalfToEvenInt64( double value ) asm {
				X86_32 {
					fld qword ptr [esp + 4]
					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					retn
				}
				X86_64 {
					feature( SSE4_1 ) {
						roundsd xmm1, xmm0, const( System.Runtime.X86_32.SSE4RoundingMode.RoundToNearest )
						cvttsd2si rax, xmm1

						retn
					}
					default {
						movq qword ptr [rsp - 8], xmm0
						fld qword ptr [rsp - 8]
						fistp qword ptr [rsp - 8]
						mov rax, qword ptr [rsp - 8]

						retn
					}
				}
				default {
					return Fallback.RoundHalfToEvenInt64( value );
				}
			}

			public static long RoundHalfTowardsPositiveInfinityToInt64( double value ) asm {
				X86_32 {
					fld qword ptr [esp + 4]
					fadd st0, st0
					fadd dword ptr [[_0_5f]]

					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					sar edx, 1
					rcr eax, 1

					retn
				}
				default {
					return BitOperations.SignedShiftRight( RoundHalfToEvenInt64( value + value + 0.5 ), 1 );
				}
			}

			public static long RoundHalfTowardsNegativeInfinityToInt64( double value ) asm {
				X86_32 {
					fld qword ptr [esp + 4]
					fadd st0, st0
					fsubr dword ptr [[_0_5f]]

					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					sar edx, 1
					rcr eax, 1

					not eax
					not edx

					add eax, 1
					adc edx, 0

					retn
				}
				default {
					return -BitOperations.SignedShiftRight( RoundHalfToEvenInt64( 0.5 - value - value ), 1 );
				}
			}

			public static long RoundHalfAwayFromZeroToInt64( double value ) asm {
				X86_32 {
					// xor eax, eax
					// mov edx, dword ptr [esp + 8]

					// and edx, 0x7FFFFFFF
					// cmp edx, 0x000FFFFF
					// setg al

					add dword ptr [esp + 4], 1
					adc dword ptr [esp + 8], 0

					fld qword ptr [esp + 4]
					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					retn
				}
				default {
					return RoundHalfToEvenInt64( bitcast<double>( bitcast<ulong>( value ) + 1 ) );
				}
			}

			public static long RoundHalfTowardsZeroToInt64( double value ) asm {
				X86_32 {
					xor eax, eax
					mov edx, dword ptr [esp + 8]

					and edx, 0x7FFFFFFF
					cmp edx, 0x000FFFFF
					setg al

					sub dword ptr [esp + 4], eax
					sbb dword ptr [esp + 8], 0

					fld qword ptr [esp + 4]
					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					retn
				}
				default {
					return RoundHalfToEvenInt64( value.IsDenormalizedOrZero ? value : bitcast<double>( bitcast<ulong>( value ) - 1 ) );
				}
			}

			// aka 'floor'/'round down'
			public static long RoundTowardsMinusInfinityInt64( double value ) asm {
				X86_32 {
					fld qword ptr [esp + 4]
					fadd st0, st0
					fsub dword ptr [[_0_5f]]

					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					sar edx, 1
					rcr eax, 1

					retn
				}
				default {
					return BitOperations.SignedShiftRight( RoundHalfToEvenInt64( value + value - 0.5 ), 1 );
				}
			}

			// aka 'ceil'/'round up'
			public static long RoundTowardsPlusInfinityInt64( double value ) asm {
				X86_32 {
					fld qword ptr [esp + 4]
					fadd st0, st0
					fsubr dword ptr [[_m0_5f]]

					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					sar edx, 1
					rcr eax, 1

					not eax
					not edx

					add eax, 1
					adc edx, 0

					retn
				}
				default {
					return -BitOperations.SignedShiftRight( RoundHalfToEvenInt64( -0.5 - value - value ), 1 );
				}
			}

			public static long TruncateToInt64( float value ) { return TruncateToInt64( ( double ) value ); }

			// 'ceil' for negative numbers
			// 'floor' for positive numbers
			public static long TruncateToInt64( double value ) asm {
				// X86_32 {
				// 	test byte ptr [esp + 11], 0x80
				// 	jnz negative

				// 	fld qword ptr [esp + 4]
				// 	fadd st0, st0
				// 	fsub dword ptr [[_0_5f]]

				// 	fistp qword ptr [esp + 4]

				// 	mov eax, dword ptr [esp + 4]
				// 	mov edx, dword ptr [esp + 8]

				// 	sar edx, 1
				// 	rcr eax, 1

				// 	retn

				// negative:
				// 	fld qword ptr [esp + 4]
				// 	fadd st0, st0
				// 	fsubr dword ptr [[_m0_5f]]

				// 	fistp qword ptr [esp + 4]

				// 	mov eax, dword ptr [esp + 4]
				// 	mov edx, dword ptr [esp + 8]

				// 	sar edx, 1
				// 	rcr eax, 1

				// 	not eax
				// 	not edx

				// 	add eax, 1
				// 	adc edx, 0

				// 	retn
				// }
				// X86_64 {
				// 	cvttsd2si rax, xmm0

				// 	retn
				// }
				default {
					return ( long ) value;
				}
			}

			public static long RoundAwayFromZeroToInt64( float value ) { return RoundAwayFromZeroToInt64( ( double ) value ); }

			// 'floor' for negative numbers
			// 'ceil' for positive numbers
			public static long RoundAwayFromZeroToInt64( double value ) asm {
				X86_32 {
					test byte ptr [esp + 11], 0x80
					jnz negative

					fld qword ptr [esp + 4]
					fadd st0, st0
					fsubr dword ptr [[_m0_5f]]

					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					sar edx, 1
					rcr eax, 1

					not eax
					not edx

					add eax, 1
					adc edx, 0

					retn

				negative:
					fld qword ptr [esp + 4]
					fadd st0, st0
					fsub dword ptr [[_0_5f]]

					fistp qword ptr [esp + 4]

					mov eax, dword ptr [esp + 4]
					mov edx, dword ptr [esp + 8]

					sar edx, 1
					rcr eax, 1

					retn
				}
				X86_64 {
					feature( SSE4_1 ) {
						xorpd xmm1, xmm1

						comisd xmm0, xmm1
						jb negative

						roundsd xmm1, xmm0, const( System.Runtime.X86_32.SSE4RoundingMode.RoundUp )
						cvttsd2si rax, xmm1
						retn

					negative:
						roundsd xmm1, xmm0, const( System.Runtime.X86_32.SSE4RoundingMode.RoundDown )
						cvttsd2si rax, xmm1
						retn
					}
				}
				default {
					return value < 0 ? RoundTowardsMinusInfinityInt64( value ) : RoundTowardsPlusInfinityInt64( value );
				}
			}
		}
	}
}