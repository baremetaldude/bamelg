//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// See more on http://en.wikipedia.org/wiki/BLAKE_(hash_function)
// Code derived from their official site
//

using System.Runtime;

namespace System.Hash {
	public struct BLAKE_512 : IFormattable {
		public byte[64] Hash;

		public BLAKE_512() {
		}

		public BLAKE_512( vararg MemorySegment segments ) {
			var evaluator = new Evaluator();

			foreach( var segment in segments )
				evaluator.Process( segment.Start,  ( uint ) segment.Count );

			this = evaluator.Finish();
		}

		public BLAKE_512( SbcsString value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public BLAKE_512( Utf8String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public BLAKE_512( Utf16String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public BLAKE_512( Utf32String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}

		void IFormattable.ToString( StringBuilder builder, string format ) {
			PrimitiveTypesFormatter.FormatMemoryHexUtf16( builder, &Hash[0], Hash.Length, true );
		}

		public struct Evaluator {
			private ulong[8] _h;
			private ulong[4] _s;
			private ulong[2] _t;

			private uint _bitsCount;
			private bool nullt;
			private byte[128] _buffer;

			private static byte[16, 16] _sigma = {
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },
				{ 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 },
				{ 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4 },
				{ 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8 },
				{ 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13 },
				{ 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9 },
				{ 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11 },
				{ 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10 },
				{ 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5 },
				{ 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },
				{ 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 },
				{ 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4 },
				{ 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8 },
				{ 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13 },
				{ 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9 }
			};

			private static ulong[16] _cst = {
				0x243F6A8885A308D3UL, 0x13198A2E03707344UL, 0xA4093822299F31D0UL, 0x082EFA98EC4E6C89UL,
				0x452821E638D01377UL, 0xBE5466CF34E90C6CUL, 0xC0AC29B7C97C50DDUL, 0x3F84D5B5B5470917UL,
				0x9216D5D98979FB1BUL, 0xD1310BA698DFB5ACUL, 0x2FFD72DBD01ADFB7UL, 0xB8E1AFED6A267E96UL,
				0xBA7C9045F12C7F99UL, 0x24A19947B3916CF7UL, 0x0801F2E2858EFC16UL, 0x636920D871574E69UL
			};

			private static byte[129] _padding = {
				0x80,
				   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			};

			public Evaluator() {
				ResetState();
			}

			private void ResetState() {
				_h[0] = 0x6A09E667F3BCC908UL;
				_h[1] = 0xBB67AE8584CAA73BUL;
				_h[2] = 0x3C6EF372FE94F82BUL;
				_h[3] = 0xA54FF53A5F1D36F1UL;
				_h[4] = 0x510E527FADE682D1UL;
				_h[5] = 0x9B05688C2B3E6C1FUL;
				_h[6] = 0x1F83D9ABFB41BD6BUL;
				_h[7] = 0x5BE0CD19137E2179UL;
				_t[0] = _t[1] = 0;
				_s[0] = _s[1] = _s[2] = _s[3] = 0;

				_bitsCount = 0U;
				nullt = false;
			}

			[ForceInline]
			private static void G( ulong* m, ulong* v, int i, int a, int b, int c, int d, int e ) {
				v[a] += ( m[_sigma[i, e]] ^ _cst[_sigma[i, e + 1]] ) + v[b];
				v[d] = ( v[d] ^ v[a] ) >>> 32;
				v[c] += v[d];
				v[b] = ( v[b] ^ v[c] ) >>> 25;
				v[a] += ( m[_sigma[i, e + 1]] ^ _cst[_sigma[i, e]] ) + v[b];
				v[d] = ( v[d] ^ v[a] ) >>> 16;
				v[c] += v[d];
				v[b] = ( v[b] ^ v[c] ) >>> 11;
			}

			private void ProcessBlock( void* block ) {
				ulong[16] v, m;

				var block64BE = cast<ulong_bigendian*>( block );
				for( var i = 0; i < 16; ++i ) m[i] = block64BE[i];
				for( var i = 0; i < 8; ++i ) v[i] = _h[i];

				v[8] = _s[0] ^ 0x243F6A8885A308D3UL;
				v[9] = _s[1] ^ 0x13198A2E03707344UL;
				v[10] = _s[2] ^ 0xA4093822299F31D0UL;
				v[11] = _s[3] ^ 0x082EFA98EC4E6C89UL;
				v[12] = 0x452821E638D01377UL;
				v[13] = 0xBE5466CF34E90C6CUL;
				v[14] = 0xC0AC29B7C97C50DDUL;
				v[15] = 0x3F84D5B5B5470917UL;

				if( !nullt ) {
					v[12] ^= _t[0];
					v[13] ^= _t[0];
					v[14] ^= _t[1];
					v[15] ^= _t[1];
				}

				for( var i = 0; i < 16; ++i ) {
					G( m, v, i, 0, 4, 8, 12, 0 );
					G( m, v, i, 1, 5, 9, 13, 2 );
					G( m, v, i, 2, 6, 10, 14, 4 );
					G( m, v, i, 3, 7, 11, 15, 6 );
					G( m, v, i, 3, 4, 9, 14, 14 );
					G( m, v, i, 2, 7, 8, 13, 12 );
					G( m, v, i, 0, 5, 10, 15, 8 );
					G( m, v, i, 1, 6, 11, 12, 10 );
				}

				for( var i = 0; i < 16; ++i ) _h[i % 8] ^= v[i];
				for( var i = 0; i < 8; ++i ) _h[i] ^= _s[i % 4];
			}

			public void Process( void* data, uint length ) {
				ProcessBits( data, length * 8 );
			}

			private void ProcessBits( void* data, uint length ) {
				var left = _bitsCount >> 3;
				var fill = 128 - left;

				if( left != 0 && ( ( ( length >> 3 ) & 0x7F ) >= fill ) ) {
					Memory.Copy( &_buffer[left], data, fill );
					_t[0] += 1024;
					ProcessBlock( _buffer );
					data = cast<byte*>( data ) + fill;
					length -= fill << 3;
					left = 0;
				}

				while( length >= 1024 ) {
					_t[0] += 1024;
					ProcessBlock( data );
					data = cast<byte*>( data ) + 128;
					length -= 1024;
				}

				if( length > 0 ) {
					Memory.Copy( &_buffer[left], data, ( length >> 3 ) & 0x7F );
					_bitsCount = ( left << 3 ) + length;
				}
				else
					_bitsCount = 0;
			}

			public BLAKE_512 Finish() {
				ulong_bigendian[2] msglen;
				byte zo = 0x01, oo = 0x81;
				ulong lo = _t[0] + _bitsCount, hi = _t[1];

				if( lo < _bitsCount ) hi++;

				msglen[0] = hi;
				msglen[1] = lo;

				if( _bitsCount == 888 ) { // one padding byte
					_t[0] -= 8;
					ProcessBits( &oo, 8 );
				}
				else {
					if( _bitsCount < 888 ) { // enough space to fill the block
						nullt |= _bitsCount == 0;
						_t[0] -= 888 - _bitsCount;
						ProcessBits( &_padding[0], 888 - _bitsCount );
					}
					else { // NOT enough space, need 2 compressions
						_t[0] -= 1024 - _bitsCount;
						ProcessBits( &_padding[0], 1024 - _bitsCount );
						_t[0] -= 888;
						ProcessBits( &_padding[1], 888 );
						nullt = true;
					}

					ProcessBits( &zo, 8 );
					_t[0] -= 8;
				}

				_t[0] -= 128;
				ProcessBits( &msglen[0], 128 );

				BLAKE_512 result;
				var resultPtr = ( ulong_bigendian* ) &result;

				for( var i = 0U; i < _h.Length; ++i )
					resultPtr[i] = _h[i];

				return result;
			}
		}
	}
}