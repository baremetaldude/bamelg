//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;

namespace System.Hash {
	public struct MD5 : IFormattable {
		public byte[16] Hash;

		public MD5() {
		}

		public MD5( vararg MemorySegment segments ) {
			var evaluator = new Evaluator();

			foreach( var segment in segments )
				evaluator.Process( segment.Start, segment.Count );

			this = evaluator.Finish();
		}

		public MD5( SbcsString value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public MD5( Utf8String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public MD5( Utf16String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public MD5( Utf32String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}

		void IFormattable.ToString( StringBuilder builder, string format ) {
			PrimitiveTypesFormatter.FormatMemoryHexUtf16( builder, &Hash[0], Hash.Length, true );
		}

		public struct Evaluator {
			private ulong BytesCount;

			private uint[4] State;
			private byte[BlockSize] Buffer;

			private const uint BlockSize = 1U << 6;
			private const uint BlockMask = BlockSize - 1;

			private static byte[64] PaddingBytes = {
				0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			};

			/// Constants for MD5Transform routine.
			private enum RotateConstant : uint {
				S11 = 7, S12 = 12, S13 = 17, S14 = 22,
				S21 = 5, S22 =  9, S23 = 14, S24 = 20,
				S31 = 4, S32 = 11, S33 = 16, S34 = 23,
				S41 = 6, S42 = 10, S43 = 15, S44 = 21,
			}

			[ForceInline]
			private static void Round1( uint& a, uint b, uint c, uint d, uint x, RotateConstant s, uint ac ) {
				a = ( ( a + ( b & c | ~b & d ) + x + ac ) <<< s ) + b;
			}

			[ForceInline]
			private static void Round2( uint& a, uint b, uint c, uint d, uint x, RotateConstant s, uint ac ) {
				a = ( ( a + ( b & d | c & ~d ) + x + ac ) <<< s ) + b;
			}

			[ForceInline]
			private static void Round3( uint& a, uint b, uint c, uint d, uint x, RotateConstant s, uint ac ) {
				a = ( ( a + ( b ^ c ^ d ) + x + ac ) <<< s ) + b;
			}

			[ForceInline]
			private static void Round4( uint& a, uint b, uint c, uint d, uint x, RotateConstant s, uint ac ) {
				a = ( ( a + ( c ^ ( b | ~d ) ) + x + ac ) <<< s ) + b;
			}

			public Evaluator() {
				ResetState();
			}

			private void ResetState() {
				BytesCount = 0;
				State[0] = 0x67452301;
				State[1] = 0xEFCDAB89;
				State[2] = 0x98BADCFE;
				State[3] = 0x10325476;

				Memory.Clear( Buffer, sizeof( Buffer ) );
			}

			public MD5 Finish() {
				ulong_littleendian bitsCount = BytesCount << 3;

				var bufferIndex = cast<uint>( BytesCount ) & BlockMask;
				Process( PaddingBytes, bufferIndex < 56 ? 56 - bufferIndex : ( 64 + 56 ) - bufferIndex );
				Process( &bitsCount, sizeof( bitsCount ) );

				MD5 result;
				var hashPtr = ( uint_littleendian* ) &result.Hash[0];

				[Unroll]
				for( int i = 0; i < 4; ++i )
					hashPtr[i] = State[i];

				ResetState();
				return result;
			}

			public void Process( void* data, uintptr length ) {
				uint blockProcessed = 0;
				var bytes = ( byte* ) data;
				var writeIndex = cast<uint>( BytesCount ) & BlockMask;
				var remainingBytes = BlockSize - writeIndex;

				BytesCount += length;

				if( length >= remainingBytes ) {
					Memory.Copy( &Buffer[writeIndex], data, remainingBytes );
					ProcessBlock( Buffer );

					for( blockProcessed = remainingBytes; blockProcessed + 63 < length; blockProcessed += BlockSize )
						ProcessBlock( bytes + blockProcessed );

					writeIndex = 0;
				}
				else
					blockProcessed = 0;

				if( length - blockProcessed != 0 )
					Memory.Copy( &Buffer[writeIndex], &bytes[blockProcessed], length - blockProcessed );
			}

			private void ProcessBlock( byte* block ) {
				uint a = State[0], b = State[1], c = State[2], d = State[3];
				uint[16] x;

				for( int i = 0, j = 0; j < BlockSize; ++i, j += 4 )
					x[i] = *( uint_littleendian* )( block + j );

				Round1( a, b, c, d, x[0], RotateConstant.S11, 0xD76AA478 );
				Round1( d, a, b, c, x[1], RotateConstant.S12, 0xE8C7B756 );
				Round1( c, d, a, b, x[2], RotateConstant.S13, 0x242070DB );
				Round1( b, c, d, a, x[3], RotateConstant.S14, 0xC1BDCEEE );
				Round1( a, b, c, d, x[4], RotateConstant.S11, 0xF57C0FAF );
				Round1( d, a, b, c, x[5], RotateConstant.S12, 0x4787C62A );
				Round1( c, d, a, b, x[6], RotateConstant.S13, 0xA8304613 );
				Round1( b, c, d, a, x[7], RotateConstant.S14, 0xFD469501 );
				Round1( a, b, c, d, x[8], RotateConstant.S11, 0x698098D8 );
				Round1( d, a, b, c, x[9], RotateConstant.S12, 0x8B44F7AF );
				Round1( c, d, a, b, x[10], RotateConstant.S13, 0xFFFF5BB1 );
				Round1( b, c, d, a, x[11], RotateConstant.S14, 0x895CD7BE );
				Round1( a, b, c, d, x[12], RotateConstant.S11, 0x6B901122 );
				Round1( d, a, b, c, x[13], RotateConstant.S12, 0xFD987193 );
				Round1( c, d, a, b, x[14], RotateConstant.S13, 0xA679438E );
				Round1( b, c, d, a, x[15], RotateConstant.S14, 0x49B40821 );

				Round2( a, b, c, d, x[1], RotateConstant.S21, 0xF61E2562 );
				Round2( d, a, b, c, x[6], RotateConstant.S22, 0xC040B340 );
				Round2( c, d, a, b, x[11], RotateConstant.S23, 0x265E5A51 );
				Round2( b, c, d, a, x[0], RotateConstant.S24, 0xE9B6C7AA );
				Round2( a, b, c, d, x[5], RotateConstant.S21, 0xD62F105D );
				Round2( d, a, b, c, x[10], RotateConstant.S22, 0x02441453 );
				Round2( c, d, a, b, x[15], RotateConstant.S23, 0xD8A1E681 );
				Round2( b, c, d, a, x[4], RotateConstant.S24, 0xE7D3FBC8 );
				Round2( a, b, c, d, x[9], RotateConstant.S21, 0x21E1CDE6 );
				Round2( d, a, b, c, x[14], RotateConstant.S22, 0xC33707D6 );
				Round2( c, d, a, b, x[3], RotateConstant.S23, 0xF4D50D87 );
				Round2( b, c, d, a, x[8], RotateConstant.S24, 0x455A14ED );
				Round2( a, b, c, d, x[13], RotateConstant.S21, 0xA9E3E905 );
				Round2( d, a, b, c, x[2], RotateConstant.S22, 0xFCEFA3F8 );
				Round2( c, d, a, b, x[7], RotateConstant.S23, 0x676F02D9 );
				Round2( b, c, d, a, x[12], RotateConstant.S24, 0x8D2A4C8A );

				Round3( a, b, c, d, x[5], RotateConstant.S31, 0xFFFA3942 );
				Round3( d, a, b, c, x[8], RotateConstant.S32, 0x8771F681 );
				Round3( c, d, a, b, x[11], RotateConstant.S33, 0x6D9D6122 );
				Round3( b, c, d, a, x[14], RotateConstant.S34, 0xFDE5380C );
				Round3( a, b, c, d, x[1], RotateConstant.S31, 0xA4BEEA44 );
				Round3( d, a, b, c, x[4], RotateConstant.S32, 0x4BDECFA9 );
				Round3( c, d, a, b, x[7], RotateConstant.S33, 0xF6BB4B60 );
				Round3( b, c, d, a, x[10], RotateConstant.S34, 0xBEBFBC70 );
				Round3( a, b, c, d, x[13], RotateConstant.S31, 0x289B7EC6 );
				Round3( d, a, b, c, x[0], RotateConstant.S32, 0xEAA127FA );
				Round3( c, d, a, b, x[3], RotateConstant.S33, 0xD4EF3085 );
				Round3( b, c, d, a, x[6], RotateConstant.S34, 0x04881D05 );
				Round3( a, b, c, d, x[9], RotateConstant.S31, 0xD9D4D039 );
				Round3( d, a, b, c, x[12], RotateConstant.S32, 0xE6DB99E5 );
				Round3( c, d, a, b, x[15], RotateConstant.S33, 0x1FA27CF8 );
				Round3( b, c, d, a, x[2], RotateConstant.S34, 0xC4AC5665 );

				Round4( a, b, c, d, x[0], RotateConstant.S41, 0xF4292244 );
				Round4( d, a, b, c, x[7], RotateConstant.S42, 0x432AFF97 );
				Round4( c, d, a, b, x[14], RotateConstant.S43, 0xAB9423A7 );
				Round4( b, c, d, a, x[5], RotateConstant.S44, 0xFC93A039 );
				Round4( a, b, c, d, x[12], RotateConstant.S41, 0x655B59C3 );
				Round4( d, a, b, c, x[3], RotateConstant.S42, 0x8F0CCC92 );
				Round4( c, d, a, b, x[10], RotateConstant.S43, 0xFFEFF47D );
				Round4( b, c, d, a, x[1], RotateConstant.S44, 0x85845DD1 );
				Round4( a, b, c, d, x[8], RotateConstant.S41, 0x6FA87E4F );
				Round4( d, a, b, c, x[15], RotateConstant.S42, 0xFE2CE6E0 );
				Round4( c, d, a, b, x[6], RotateConstant.S43, 0xA3014314 );
				Round4( b, c, d, a, x[13], RotateConstant.S44, 0x4E0811A1 );
				Round4( a, b, c, d, x[4], RotateConstant.S41, 0xF7537E82 );
				Round4( d, a, b, c, x[11], RotateConstant.S42, 0xBD3AF235 );
				Round4( c, d, a, b, x[2], RotateConstant.S43, 0x2AD7D2BB );
				Round4( b, c, d, a, x[9], RotateConstant.S44, 0xEB86D391 );

				State[0] += a;
				State[1] += b;
				State[2] += c;
				State[3] += d;
			}
		}
	}
}