//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;

namespace System.Hash {
	public struct SHA256 : IFormattable {
		public byte[32] Hash;

		public SHA256() {
		}

		public SHA256( vararg MemorySegment segments ) {
			var evaluator = new Evaluator();

			foreach( var segment in segments )
				evaluator.Process( segment.Start, segment.Count );

			this = evaluator.Finish();
		}

		public SHA256( SbcsString value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public SHA256( Utf8String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public SHA256( Utf16String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public SHA256( Utf32String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}

		void IFormattable.ToString( StringBuilder builder, string format ) {
			PrimitiveTypesFormatter.FormatMemoryHexUtf16( builder, &Hash[0], Hash.Length, true );
		}

		public struct Evaluator {
			private ulong BytesCount;

			private uint[8] State;
			private byte[BlockSize] Buffer;

			private const uint BlockSize = 1u << 6;
			private const uint BlockMask = BlockSize - 1;

			public Evaluator() {
				ResetState();
			}

			private void ResetState() {
				BytesCount = 0;

				State[0] = 0x6A09E667;
				State[1] = 0xBB67AE85;
				State[2] = 0x3C6EF372;
				State[3] = 0xA54FF53A;
				State[4] = 0x510E527F;
				State[5] = 0x9B05688C;
				State[6] = 0x1F83D9AB;
				State[7] = 0x5BE0CD19;

				Memory.Clear( Buffer, sizeof( Buffer ) );
			}

			public SHA256 Finish() {
				var bitsCount = ( ulong_littleendian ) BytesCount << 3;

				var count = ( byte ) BlockSize - ( ( byte ) BytesCount & ( byte ) BlockMask );
				if( count < 9 )
					count += ( byte ) BlockSize;

				var trailing = stackalloc byte[count];
				Memory.Clear( trailing, count );
				trailing[0] = 0x80;
				*( ulong_bigendian* ) &trailing[count - 8] = bitsCount;
				Process( trailing, count );

				SHA256 result;
				var hashPtr = ( uint_bigendian* ) &result.Hash[0];

				[Unroll]
				for( int i = 0; i < State.Length; ++i )
					hashPtr[i] = State[i];

				ResetState();
				return result;
			}

			public void Process( void* data, uintptr length ) {
				uint blockProcessed = 0;
				var bytes = ( byte* ) data;
				var writeIndex = cast<uint>( BytesCount ) & BlockMask;
				var remainingBytes = BlockSize - writeIndex;

				BytesCount += length;

				if( length >= remainingBytes ) {
					Memory.Copy( &Buffer[writeIndex], data, remainingBytes );
					ProcessBlock( Buffer );

					for( blockProcessed = remainingBytes; blockProcessed + 63 < length; blockProcessed += BlockSize )
						ProcessBlock( bytes + blockProcessed );

					writeIndex = 0;
				}
				else
					blockProcessed = 0;

				if( length - blockProcessed != 0 )
					Memory.Copy( &Buffer[writeIndex], &bytes[blockProcessed], length - blockProcessed );
			}

			private static uint Ch( uint x, uint y, uint z ) {
				return ( ( x >>> 6U ^ x >>> 11U ) ^ x >>> 25U ) + ( x & y ^ ~x & z );
			}

			private static uint Maj( uint x, uint y, uint z ) {
				return ( ( x >>> 2U ^ x >>> 13U ) ^ x >>> 22U ) + ( ( x & y ^ x & z ) ^ y & z );
			}

			private static uint Theta0( uint x ) {
				return ( x >>> 7U ^ x >>> 18U ) ^ x >> 3U;
			}

			private static uint Theta1( uint x ) {
				return ( x >>> 17U ^ x >>> 19U ) ^ x >> 10U;
			}

			private static readonly uint[64] K = {
				0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
				0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
				0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
				0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
				0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
				0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
				0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
				0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
				0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
				0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
				0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
				0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
				0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
				0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
				0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
				0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
			};

			private void ProcessBlock( byte* buf ) {
				var X = stackalloc uint[64];
				var dataPtr = ( uint_bigendian* ) buf;
				for( var j = 0; j < 16; ++j )
					X[j] = dataPtr[j];

				for( int ti = 16; ti <= 63; ti++ )
					X[ti] = Theta1( X[ti - 2] ) + X[ti - 7] + Theta0( X[ti - 15] ) + X[ti - 16];

				uint a = State[0];
				uint b = State[1];
				uint c = State[2];
				uint d = State[3];
				uint e = State[4];
				uint f = State[5];
				uint g = State[6];
				uint h = State[7];

				int t = 0;
				for( int i = 0; i < 8; ++i ) {
					h += Ch( e, f, g ) + K[t] + X[t];
					d += h;
					h += Maj( a, b, c );
					++t;

					g += Ch( d, e, f ) + K[t] + X[t];
					c += g;
					g += Maj( h, a, b );
					++t;

					f += Ch( c, d, e ) + K[t] + X[t];
					b += f;
					f += Maj( g, h, a );
					++t;

					e += Ch( b, c, d ) + K[t] + X[t];
					a += e;
					e += Maj( f, g, h );
					++t;

					d += Ch( a, b, c ) + K[t] + X[t];
					h += d;
					d += Maj( e, f, g );
					++t;

					c += Ch( h, a, b ) + K[t] + X[t];
					g += c;
					c += Maj( d, e, f );
					++t;

					b += Ch( g, h, a ) + K[t] + X[t];
					f += b;
					b += Maj( c, d, e );
					++t;

					a += Ch( f, g, h ) + K[t] + X[t];
					e += a;
					a += Maj( b, c, d );
					++t;
				}

				State[0] += a;
				State[1] += b;
				State[2] += c;
				State[3] += d;
				State[4] += e;
				State[5] += f;
				State[6] += g;
				State[7] += h;
			}
		}
	}
}