//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;

namespace System.Hash {
	public struct MD4 : IFormattable {
		public byte[16] Hash;

		public MD4() {
		}

		public MD4( vararg MemorySegment segments ) {
			var evaluator = new Evaluator();

			foreach( var segment in segments )
				evaluator.Process( segment.Start, segment.Count );

			this = evaluator.Finish();
		}

		public MD4( SbcsString value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public MD4( Utf8String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public MD4( Utf16String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public MD4( Utf32String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}

		void IFormattable.ToString( StringBuilder builder, string format ) {
			PrimitiveTypesFormatter.FormatMemoryHexUtf16( builder, &Hash[0], Hash.Length, true );
		}

		public struct Evaluator {
			private ulong BytesCount;

			private uint[4] State;
			private byte[BlockSize] Buffer;

			private const uint BlockSize = 1u << 6;
			private const uint BlockMask = BlockSize - 1;

			private static byte[64] PaddingBytes = {
				0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			};

			/// Constants for MD5Transform routine.
			private enum RotateConstant : uint {
				S11 = 3, S12 = 7, S13 = 11, S14 = 19,
				S21 = 3, S22 = 5, S23 =  9, S24 = 13,
				S31 = 3, S32 = 9, S33 = 11, S34 = 15,
			}

			[ForceInline]
			private static void Round1( uint& a, uint b, uint c, uint d, uint x, RotateConstant s ) {
				a = ( a + ( b & c | ~b & d ) + x ) <<< s;
			}

			[ForceInline]
			private static void Round2( uint& a, uint b, uint c, uint d, uint x, RotateConstant s ) {
				a = ( a + ( b & c | b & d | c & d ) + x + 0x5A827999 ) <<< s;
			}

			[ForceInline]
			private static void Round3( uint& a, uint b, uint c, uint d, uint x, RotateConstant s ) {
				a = ( a + ( b ^ c ^ d ) + x + 0x6ED9EBA1 ) <<< s;
			}

			public Evaluator() {
				ResetState();
			}

			private void ResetState() {
				BytesCount = 0;
				State[0] = 0x67452301;
				State[1] = 0xEFCDAB89;
				State[2] = 0x98BADCFE;
				State[3] = 0x10325476;

				Memory.Clear( Buffer, sizeof( Buffer ) );
			}

			public MD4 Finish() {
				ulong_littleendian bitsCount = BytesCount << 3;

				var bufferIndex = cast<uint>( BytesCount ) & BlockMask;
				Process( PaddingBytes, bufferIndex < 56 ? 56 - bufferIndex : 120 - bufferIndex );
				Process( &bitsCount, sizeof( bitsCount ) );

				MD4 result;
				var hashPtr = ( uint_littleendian* ) &result.Hash[0];

				[Unroll]
				for( int i = 0; i < 4; ++i )
					hashPtr[i] = State[i];

				ResetState();
				return result;
			}

			public void Process( void* data, uintptr length ) {
				uint blockProcessed = 0;
				var bytes = ( byte* ) data;
				var writeIndex = cast<uint>( BytesCount ) & BlockMask;
				var remainingBytes = BlockSize - writeIndex;

				BytesCount += length;

				if( length >= remainingBytes ) {
					Memory.Copy( &Buffer[writeIndex], data, remainingBytes );
					ProcessBlock( Buffer );

					for( blockProcessed = remainingBytes; blockProcessed + 63 < length; blockProcessed += BlockSize )
						ProcessBlock( bytes + blockProcessed );

					writeIndex = 0;
				}
				else
					blockProcessed = 0;

				if( length - blockProcessed != 0 )
					Memory.Copy( &Buffer[writeIndex], &bytes[blockProcessed], length - blockProcessed );
			}

			private void ProcessBlock( byte* block ) {
				uint a = State[0], b = State[1], c = State[2], d = State[3];
				uint[16] x;

				for( int i = 0, j = 0; j < BlockSize; ++i, j += 4 )
					x[i] = *( uint_littleendian* )( block + j );

				Round1( a, b, c, d, x[0], RotateConstant.S11 );
				Round1( d, a, b, c, x[1], RotateConstant.S12 );
				Round1( c, d, a, b, x[2], RotateConstant.S13 );
				Round1( b, c, d, a, x[3], RotateConstant.S14 );
				Round1( a, b, c, d, x[4], RotateConstant.S11 );
				Round1( d, a, b, c, x[5], RotateConstant.S12 );
				Round1( c, d, a, b, x[6], RotateConstant.S13 );
				Round1( b, c, d, a, x[7], RotateConstant.S14 );
				Round1( a, b, c, d, x[8], RotateConstant.S11 );
				Round1( d, a, b, c, x[9], RotateConstant.S12 );
				Round1( c, d, a, b, x[10], RotateConstant.S13 );
				Round1( b, c, d, a, x[11], RotateConstant.S14 );
				Round1( a, b, c, d, x[12], RotateConstant.S11 );
				Round1( d, a, b, c, x[13], RotateConstant.S12 );
				Round1( c, d, a, b, x[14], RotateConstant.S13 );
				Round1( b, c, d, a, x[15], RotateConstant.S14 );

				Round2( a, b, c, d, x[0], RotateConstant.S21 );
				Round2( d, a, b, c, x[4], RotateConstant.S22 );
				Round2( c, d, a, b, x[8], RotateConstant.S23 );
				Round2( b, c, d, a, x[12], RotateConstant.S24 );
				Round2( a, b, c, d, x[1], RotateConstant.S21 );
				Round2( d, a, b, c, x[5], RotateConstant.S22 );
				Round2( c, d, a, b, x[9], RotateConstant.S23 );
				Round2( b, c, d, a, x[13], RotateConstant.S24 );
				Round2( a, b, c, d, x[2], RotateConstant.S21 );
				Round2( d, a, b, c, x[6], RotateConstant.S22 );
				Round2( c, d, a, b, x[10], RotateConstant.S23 );
				Round2( b, c, d, a, x[14], RotateConstant.S24 );
				Round2( a, b, c, d, x[3], RotateConstant.S21 );
				Round2( d, a, b, c, x[7], RotateConstant.S22 );
				Round2( c, d, a, b, x[11], RotateConstant.S23 );
				Round2( b, c, d, a, x[15], RotateConstant.S24 );

				Round3( a, b, c, d, x[0], RotateConstant.S31 );
				Round3( d, a, b, c, x[8], RotateConstant.S32 );
				Round3( c, d, a, b, x[4], RotateConstant.S33 );
				Round3( b, c, d, a, x[12], RotateConstant.S34 );
				Round3( a, b, c, d, x[2], RotateConstant.S31 );
				Round3( d, a, b, c, x[10], RotateConstant.S32 );
				Round3( c, d, a, b, x[6], RotateConstant.S33 );
				Round3( b, c, d, a, x[14], RotateConstant.S34 );
				Round3( a, b, c, d, x[1], RotateConstant.S31 );
				Round3( d, a, b, c, x[9], RotateConstant.S32 );
				Round3( c, d, a, b, x[5], RotateConstant.S33 );
				Round3( b, c, d, a, x[13], RotateConstant.S34 );
				Round3( a, b, c, d, x[3], RotateConstant.S31 );
				Round3( d, a, b, c, x[11], RotateConstant.S32 );
				Round3( c, d, a, b, x[7], RotateConstant.S33 );
				Round3( b, c, d, a, x[15], RotateConstant.S34 );

				State[0] += a;
				State[1] += b;
				State[2] += c;
				State[3] += d;
			}
		}
	}
}