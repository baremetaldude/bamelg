//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Hash {
	public static struct Adler32 {
		private const uint Base = 65521;
		private const uint Max = 5552;

		public static uint LowCachePressure_Compute( uint initialSeed, void* data, uintptr length ) {
			var buffer = ( byte* ) data;
			uint s1 = initialSeed & 0xFFFF;
			uint s2 = initialSeed >> 16;

			while( length-- != 0 ) {
				s1 = ( s1 + *( buffer++ ) ) % Base;
				s2 = ( s2 + s1 ) % Base;
			}

			return ( s2 << 16 ) | s1;
		}

		public static uint Compute( uint initialSeed, void* data, uintptr length ) {
			if( data == null ) return 1;
			var buffer = ( byte* ) data;

			uintptr k;
			uint s1 = initialSeed & 0xFFFF;
			uint s2 = initialSeed >> 16;

			while( length != 0 ) {
				k = length < Max ? length : Max;
				length -= k;

				while( k >= 16 ) {
					s2 += s1 += buffer[0];
					s2 += s1 += buffer[1];
					s2 += s1 += buffer[2];
					s2 += s1 += buffer[3];
					s2 += s1 += buffer[4];
					s2 += s1 += buffer[5];
					s2 += s1 += buffer[6];
					s2 += s1 += buffer[7];

					s2 += s1 += buffer[8];
					s2 += s1 += buffer[9];
					s2 += s1 += buffer[10];
					s2 += s1 += buffer[11];
					s2 += s1 += buffer[12];
					s2 += s1 += buffer[13];
					s2 += s1 += buffer[14];
					s2 += s1 += buffer[15];

					buffer += 16;
					k -= 16;
				}

				while( k != 0 ) {
					s1 += *buffer++;
					s2 += s1;
					--k;
				}

				s1 %= Base;
				s2 %= Base;
			}

			return ( s2 << 16 ) | s1;
		}
	}
}