//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;

namespace System.Hash {
	public struct SHA1 : IFormattable {
		public byte[20] Hash;

		public SHA1() {
		}

		public SHA1( vararg MemorySegment segments ) {
			var evaluator = new Evaluator();

			foreach( var segment in segments )
				evaluator.Process( segment.Start, segment.Count );

			this = evaluator.Finish();
		}

		public SHA1( SbcsString value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public SHA1( Utf8String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public SHA1( Utf16String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}
		public SHA1( Utf32String value )
			: this( new MemorySegment( value != null ? value.GetChars() : null, value != null ? value.ByteLength : 0U ) ) {
		}

		void IFormattable.ToString( StringBuilder builder, string format ) {
			PrimitiveTypesFormatter.FormatMemoryHexUtf16( builder, &Hash[0], Hash.Length, true );
		}

		public struct Evaluator {
			private ulong BytesCount;

			private uint[5] State;
			private byte[BlockSize] Buffer;

			private const uint BlockSize = 1u << 6;
			private const uint BlockMask = BlockSize - 1;

			public Evaluator() {
				ResetState();
			}

			private void ResetState() {
				BytesCount = 0;

				State[0] = 0x67452301;
				State[1] = 0xEFCDAB89;
				State[2] = 0x98BADCFE;
				State[3] = 0x10325476;
				State[4] = 0xC3D2E1F0;

				Memory.Clear( Buffer, sizeof( Buffer ) );
			}

			public SHA1 Finish() {
				var bitsCount = ( ulong_littleendian ) BytesCount << 3;

				var count = ( byte ) BlockSize - ( ( byte ) BytesCount & ( byte ) BlockMask );
				if( count < 9 )
					count += ( byte ) BlockSize;

				var trailing = stackalloc byte[count];
				Memory.Clear( trailing, count );
				trailing[0] = 0x80;
				*( ulong_bigendian* ) &trailing[count - 8] = bitsCount;
				Process( trailing, count );

				SHA1 result;
				var hashPtr = ( uint_bigendian* ) &result.Hash[0];

				[Unroll]
				for( int i = 0; i < State.Length; ++i )
					hashPtr[i] = State[i];

				ResetState();
				return result;
			}

			public void Process( void* data, uintptr length ) {
				uint blockProcessed = 0;
				var bytes = ( byte* ) data;
				var writeIndex = cast<uint>( BytesCount ) & BlockMask;
				var remainingBytes = BlockSize - writeIndex;

				BytesCount += length;

				if( length >= remainingBytes ) {
					Memory.Copy( &Buffer[writeIndex], data, remainingBytes );
					ProcessBlock( Buffer );

					for( blockProcessed = remainingBytes; blockProcessed + 63 < length; blockProcessed += BlockSize )
						ProcessBlock( bytes + blockProcessed );

					writeIndex = 0;
				}
				else
					blockProcessed = 0;

				if( length - blockProcessed != 0 )
					Memory.Copy( &Buffer[writeIndex], &bytes[blockProcessed], length - blockProcessed );
			}

			private void ProcessBlock( byte* buf ) {
				uint[80] temp;

				{
					var dataPtr = ( uint_bigendian* ) buf;
					for( var i = 0; i < 16; ++i ) {
						temp[i] = dataPtr[i];
					}
				}

				for( var i = 16; i < 80; ++i )
					temp[i] = ( temp[i - 3] ^ temp[i - 8] ^ temp[i - 14] ^ temp[i - 16] ) <<< 1;

				var a = State[0];
				var b = State[1];
				var c = State[2];
				var d = State[3];
				var e = State[4];

				uint i = 0;

				for( i = 0; i < 20; ++i ) {
					var f = d ^ ( b & ( c ^ d ) );
					var k = 0x5A827999U;

					var t = ( a <<< 5 ) + f + e + k + temp[i];
					e = d; d = c; c = b <<< 30; b = a; a = t;
				}

				for( ; i < 40; ++i ) {
					var f = b ^ c ^ d;
					var k = 0x6ED9EBA1U;

					var t = ( a <<< 5 ) + f + e + k + temp[i];
					e = d; d = c; c = b <<< 30; b = a; a = t;
				}

				for( ; i < 60; ++i ) {
					var f = ( b & c ) | ( d & ( b | c ) );
					var k = 0x8F1BBCDCU;

					var t = ( a <<< 5 ) + f + e + k + temp[i];
					e = d; d = c; c = b <<< 30; b = a; a = t;
				}

				for( ; i < 80; ++i ) {
					var f = b ^ c ^ d;
					var k = 0xCA62C1D6U;

					var t = ( a <<< 5 ) + f + e + k + temp[i];
					e = d; d = c; c = b <<< 30; b = a; a = t;
				}

				State[0] += a;
				State[1] += b;
				State[2] += c;
				State[3] += d;
				State[4] += e;
			}
		}
	}
}