//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Serialization;

namespace System {
	public sealed partial class SbcsString : IBinarySerializable, ITextSerializable, IFormattable {
		void IBinarySerializable.Serialize( BinaryWriter stream, SerializerContext context ) { stream.Write( this ); }
		void IBinarySerializable.Deserialize( void* object, BinaryReader stream, SerializerContext context ) { *( thistype* ) object = stream.ReadSbcsString(); }

		void ITextSerializable.Serialize( StringBuilder builder, string format, SerializerContext context ) { builder.Append( this ); }
		void ITextSerializable.Deserialize( void* object, StringBuilder builder, SerializerContext context ) { *( thistype* ) object = builder.ToSbcsString(); }

		void IFormattable.ToString( StringBuilder builder, string format ) { builder.Append( this ); }

		public struct Builder {
			private declaringtype _result;

			private bool _hashSet { get; set; }
			public uint Hash {
				get { return _result.Hash; }
				set {
					Debug.Assert( !_detached );
					*cast<uint*>( bitcast<byte*>( _result ) + memberinfo( declaringtype.Hash ).ByteOffset ) = value;
					_hashSet = true;
				}
			}

			public System.Text.CodePageID CodePage {
				get { return _result.CodePage; }
				set {
					Debug.Assert( !_detached );
					*cast<uint*>( bitcast<byte*>( _result ) + memberinfo( declaringtype.CodePage ).ByteOffset ) = value;
				}
			}

			public byte* GetChars() {
				Debug.Assert( !_detached );
				return _result.GetChars();
			}

			public Builder( uint length ) {
				_result = new declaringtype( length, Environment.DefaultCodePage );
			}

			public Builder( uint length, System.Text.CodePageID codepage ) {
				_result = new declaringtype( length, codepage );
			}

			private bool _detached { get; set; }
			public declaringtype Detach() {
				Debug.Assert( !_detached );
				_result.GetChars()[_result.Length] = '\0';
				if( !_hashSet ) _result.UpdateHash();
				_detached = true;

				return _result;
			}
		}
	}

	public partial struct CString : IFormattable {
		void IFormattable.ToString( StringBuilder builder, string format ) { builder.Append( this ); }

		// Works only for ASCII characters. Makes in-pace modifications.
		public static void MakeLower( byte* location, uint length ) {
			for( var i = 0U; i < length; ++i ) {
				var ch = location[i];
				if( ch >= 'A' && ch <= 'Z' ) {
					ch += 0x20;
					location[i] = ch;
				}
			}
		}

		// Works only for ASCII characters. Makes in-pace modifications.
		public static void MakeUpper( byte* location, uint length ) {
			for( var i = 0U; i < length; ++i ) {
				var ch = location[i];
				if( ch >= 'a' && ch <= 'z' ) {
					ch -= 0x20;
					location[i] = ch;
				}
			}
		}

		public bool StartsWith( CString prefix ) {
			var left = GetChars();
			var right = prefix.GetChars();

			if( ( left == null ) | ( right == null ) ) return false;

			while( *left != '\0' && ( *left == *right ) ) {
				++left;
				++right;
			}

			return *right == 0;
		}

		public static void Concatenate( CString destinationString, CString sourceString ) {
			var destination = destinationString.GetChars();
			var source = sourceString.GetChars();

			var length = destinationString.Length;
			var length2 = sourceString.Length;

			for( var i = 0U; i <= length2; ++i )
				destination[i + length] = source[i];
		}
	}

	public partial struct CStringSpan : IFormattable {
		void IFormattable.ToString( StringBuilder builder, string format ) { builder.Append( this ); }
	}
}