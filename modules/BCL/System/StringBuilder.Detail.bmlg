//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime;
using System.Text;

namespace System {
	public partial class StringBuilder : ITextWriter {
		void ITextWriter.Flush( FlushKind flushKind = FlushKind.SynchronizeWrite ) { }

		void ITextWriter.WriteLine() { AppendLine(); }

		void ITextWriter.Write( bool value ) { Append( value ); }
		void ITextWriter.WriteLine( bool value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( char value ) { Append( value ); }
		void ITextWriter.WriteLine( char value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( sbyte value ) { Append( value ); }
		void ITextWriter.WriteLine( sbyte value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( byte value ) { Append( value ); }
		void ITextWriter.WriteLine( byte value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( short value ) { Append( value ); }
		void ITextWriter.WriteLine( short value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( ushort value ) { Append( value ); }
		void ITextWriter.WriteLine( ushort value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( int value ) { Append( value ); }
		void ITextWriter.WriteLine( int value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( uint value ) { Append( value ); }
		void ITextWriter.WriteLine( uint value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( long value ) { Append( value ); }
		void ITextWriter.WriteLine( long value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( ulong value ) { Append( value ); }
		void ITextWriter.WriteLine( ulong value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( float value ) { Append( value ); }
		void ITextWriter.WriteLine( float value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( double value ) { Append( value ); }
		void ITextWriter.WriteLine( double value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( TypedReference value ) { Append( value ); }
		void ITextWriter.WriteLine( TypedReference value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( SbcsString value ) { Append( value ); }
		void ITextWriter.WriteLine( SbcsString value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( CString value ) { Append( value ); }
		void ITextWriter.WriteLine( CString value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( Utf8String value ) { Append( value ); }
		void ITextWriter.WriteLine( Utf8String value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( CUtf8String value ) { Append( value ); }
		void ITextWriter.WriteLine( CUtf8String value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( Utf16String value ) { Append( value ); }
		void ITextWriter.WriteLine( Utf16String value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( CUtf16String value ) { Append( value ); }
		void ITextWriter.WriteLine( CUtf16String value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( Utf32String value ) { Append( value ); }
		void ITextWriter.WriteLine( Utf32String value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( CUtf32String value ) { Append( value ); }
		void ITextWriter.WriteLine( CUtf32String value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( StringBuilder value ) { Append( value ); }
		void ITextWriter.WriteLine( StringBuilder value ) { Append( value ); AppendLine(); }

		void ITextWriter.Write( [VerifyFormatString] string str, vararg TypedReference parameters ) { AppendFormat( str, vararg( parameters, parameters.Length ) ); }
		void ITextWriter.WriteLine( [VerifyFormatString] string str, vararg TypedReference parameters ) { AppendFormat( str, vararg( parameters, parameters.Length ) ); AppendLine(); }
	}
}