//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Runtime;

namespace System.Text {
	public static partial class Unicode {
		public static byte[3] ByteOrderMarkUtf1 = { 0xF7, 0x64, 0x4C };
		public static byte[4] ByteOrderMarkUtfEBCDIC = { 0xDD, 0x73, 0x66, 0x73 };

		public static byte[4][4] ByteOrderMarkUtf7 = {
			new byte[4] { 0x2B, 0x2F, 0x76, 0x38 },
			new byte[4] { 0x2B, 0x2F, 0x76, 0x39 },
			new byte[4] { 0x2B, 0x2F, 0x76, 0x2B },
			new byte[4] { 0x2B, 0x2F, 0x76, 0x2F }
		};

		public static byte[3] ByteOrderMarkUtf8 = { 0xEF, 0xBB, 0xBF };
		public static byte[2] ByteOrderMarkUtf16BigEndian = { 0xFE, 0xFF };
		public static byte[2] ByteOrderMarkUtf16LittleEndian = { 0xFF, 0xFE };
		public static byte[4] ByteOrderMarkUtf32BigEndian = { 0x00, 0x00, 0xFE, 0xFF };
		public static byte[4] ByteOrderMarkUtf32LittleEndian = { 0xFF, 0xFE, 0x00, 0x00 };

		public enum ByteOrderMark {
			Unknown,

			Utf1,
			UtfEBCDIC,
			Utf7,
			Utf8,
			Utf16BigEndian,
			Utf16LittleEndian,
			Utf32BigEndian,
			Utf32LittleEndian,
		}

		public static MemorySegment GetByteOrderMark( ByteOrderMark bom ) {
			switch( bom ) {
				case ByteOrderMark.Utf1: return new MemorySegment( ByteOrderMarkUtf1, ( uint ) ByteOrderMarkUtf1.Length );
				case ByteOrderMark.UtfEBCDIC: return new MemorySegment( ByteOrderMarkUtfEBCDIC, ( uint ) ByteOrderMarkUtfEBCDIC.Length );
				case ByteOrderMark.Utf7: return new MemorySegment( ByteOrderMarkUtf7[0], ( uint ) ByteOrderMarkUtf7[0].Length );
				case ByteOrderMark.Utf8: return new MemorySegment( ByteOrderMarkUtf8, ( uint ) ByteOrderMarkUtf8.Length );
				case ByteOrderMark.Utf16BigEndian: return new MemorySegment( ByteOrderMarkUtf16BigEndian, ( uint ) ByteOrderMarkUtf16BigEndian.Length );
				case ByteOrderMark.Utf16LittleEndian: return new MemorySegment( ByteOrderMarkUtf16LittleEndian, ( uint ) ByteOrderMarkUtf16LittleEndian.Length );
				case ByteOrderMark.Utf32BigEndian: return new MemorySegment( ByteOrderMarkUtf32BigEndian, ( uint ) ByteOrderMarkUtf32BigEndian.Length );
				case ByteOrderMark.Utf32LittleEndian: return new MemorySegment( ByteOrderMarkUtf32LittleEndian, ( uint ) ByteOrderMarkUtf32LittleEndian.Length );
			}

			return default( MemorySegment );
		}

		public static ByteOrderMark DetectByteOrderMark( void* buffer, uintptr length, [Out] int& headerLength ) {
			if( buffer == null ) { headerLength = 0; return ByteOrderMark.Unknown; }

			if( length >= 4 ) {
				if( Memory.Compare( buffer, &ByteOrderMarkUtf32BigEndian[0], headerLength = ByteOrderMarkUtf32BigEndian.Length ) ) return ByteOrderMark.Utf32BigEndian;
				if( Memory.Compare( buffer, &ByteOrderMarkUtf32LittleEndian[0], headerLength = ByteOrderMarkUtf32LittleEndian.Length ) ) return ByteOrderMark.Utf32LittleEndian;

				if( Memory.Compare( buffer, &ByteOrderMarkUtf7[0][0], headerLength = ByteOrderMarkUtf7[0].Length ) ) return ByteOrderMark.Utf7;
				if( Memory.Compare( buffer, &ByteOrderMarkUtf7[1][0], headerLength = ByteOrderMarkUtf7[0].Length ) ) return ByteOrderMark.Utf7;
				if( Memory.Compare( buffer, &ByteOrderMarkUtf7[2][0], headerLength = ByteOrderMarkUtf7[0].Length ) ) return ByteOrderMark.Utf7;
				if( Memory.Compare( buffer, &ByteOrderMarkUtf7[3][0], headerLength = ByteOrderMarkUtf7[0].Length ) ) return ByteOrderMark.Utf7;

				if( Memory.Compare( buffer, &ByteOrderMarkUtfEBCDIC[0], headerLength = ByteOrderMarkUtfEBCDIC.Length ) ) return ByteOrderMark.UtfEBCDIC;
			}

			if( length >= 3 ) {
				if( Memory.Compare( buffer, &ByteOrderMarkUtf1[0], headerLength = ByteOrderMarkUtf1.Length ) ) return ByteOrderMark.Utf1;
				if( Memory.Compare( buffer, &ByteOrderMarkUtf8[0], headerLength = ByteOrderMarkUtf8.Length ) ) return ByteOrderMark.Utf8;
			}

			if( length >= 2 ) {
				if( Memory.Compare( buffer, &ByteOrderMarkUtf16BigEndian[0], headerLength = ByteOrderMarkUtf16BigEndian.Length ) ) return ByteOrderMark.Utf16BigEndian;
				if( Memory.Compare( buffer, &ByteOrderMarkUtf16LittleEndian[0], headerLength = ByteOrderMarkUtf16LittleEndian.Length ) ) return ByteOrderMark.Utf16LittleEndian;
			}

			headerLength = 0;
			return ByteOrderMark.Unknown;
		}

		public static Utf16String DeserializeToUtf16( void* memory, uintptr length ) {
			int bomHeaderLength;
			var bom = DetectByteOrderMark( memory, length, bomHeaderLength );

			switch( bom ) {
				case ByteOrderMark.Utf8: return Utf16String.FromUtf8( ( byte* ) memory + bomHeaderLength, cast<uint>( length - bomHeaderLength ) );
				// case ByteOrderMark.Utf16BigEndian: return Utf16String.FromUtf8( ( byte* ) memory + ByteOrderMarkUtf16BigEndian.Length, length - ByteOrderMarkUtf16BigEndian.Length );
				case ByteOrderMark.Utf16LittleEndian: return Utf16String.FromUtf16( cast<char*>( cast<byte*>( memory ) + bomHeaderLength ), cast<uint>( length - bomHeaderLength ) / 2 );

				default:
					Assert.Fail( string.Format( "Unsupported BOM: {0}", bom ) );
					break;
			}

			return null;
		}

		[ForceInline]
		public static int EncodeToUtf8( byte* buffer, char codePoint ) {
			if( codePoint < 0x80 ) { // 0xxxxxxx
				buffer[0] = cast<byte>( codePoint );
				return 1;
			}
			else if( codePoint < 0x800 ) { // 110xxxxx 10xxxxxx
				buffer[0] = cast<byte>( codePoint >> 6 ) | 0xC0;
				buffer[1] = ( cast<byte>( codePoint ) & 0b00111111 ) | 0x80; // 10xxxxxx

				return 2;
			}
			else { // 1110xxxx 10xxxxxx 10xxxxxx
				buffer[0] = cast<byte>( codePoint >> 12 ) | 0xE0;
				buffer[1] = ( cast<byte>( codePoint >> 6 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[2] = ( cast<byte>( codePoint ) & 0b00111111 ) | 0x80; // 10xxxxxx

				return 3;
			}
		}

		[ForceInline]
		public static int EncodeToUtf8( byte* buffer, uint codePoint ) {
			if( codePoint < 0x80 ) { // 0xxxxxxx
				buffer[0] = cast<byte>( codePoint );
				return 1;
			}
			else if( codePoint < 0x800 ) { // 110xxxxx 10xxxxxx
				buffer[0] = cast<byte>( codePoint >> 6 ) | 0xC0;
				buffer[1] = ( cast<byte>( codePoint ) & 0b00111111 ) | 0x80; // 10xxxxxx

				return 2;
			}
			else if( codePoint < 0x10000 ) { // 1110xxxx 10xxxxxx 10xxxxxx
				buffer[0] = cast<byte>( codePoint >> 12 ) | 0xE0;
				buffer[1] = ( cast<byte>( codePoint >> 6 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[2] = ( cast<byte>( codePoint ) & 0b00111111 ) | 0x80; // 10xxxxxx

				return 3;
			}
			else if( codePoint < 0x200000 ) { // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
				buffer[0] = cast<byte>( codePoint >> 18 ) | 0xF0;
				buffer[1] = ( cast<byte>( codePoint >> 12 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[2] = ( cast<byte>( codePoint >> 6 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[3] = ( cast<byte>( codePoint ) & 0b00111111 ) | 0x80; // 10xxxxxx

				return 4;
			}
			else if( codePoint < 0x4000000 ) { // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
				buffer[0] = cast<byte>( codePoint >> 24 ) | 0xF8;
				buffer[1] = ( cast<byte>( codePoint >> 18 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[2] = ( cast<byte>( codePoint >> 12 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[3] = ( cast<byte>( codePoint >> 6 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[4] = ( cast<byte>( codePoint ) & 0b00111111 ) | 0x80; // 10xxxxxx

				return 5;
			}
			else { // 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
				buffer[0] = cast<byte>( codePoint >> 30 ) | 0xFC;
				buffer[1] = ( cast<byte>( codePoint >> 24 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[2] = ( cast<byte>( codePoint >> 18 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[3] = ( cast<byte>( codePoint >> 12 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[4] = ( cast<byte>( codePoint >> 6 ) & 0b00111111 ) | 0x80; // 10xxxxxx
				buffer[5] = ( cast<byte>( codePoint ) & 0b00111111 ) | 0x80; // 10xxxxxx

				return 6;
			}
		}

		public static uint DecodeFromUtf8( byte* buffer, int& codeUnits, int maxLength ) {
			uint minValue;
			uint result = *buffer;

			if( result < 0x80 ) {
				codeUnits = 1;
				return result; // ASCII
			}

			// error input
			if( result < 0xC0 ) {
				codeUnits = 1;
				return 0x20; // space
			}

			if( result < 0xE0 ) {
				codeUnits = 2;
				result &= 0x1F;
				minValue = 1U << 7;
			}
			else if( result < 0xF0 ) {
				codeUnits = 3;
				result &= 0x0F;
				minValue = 1U << 11;
			}
			else if( result < 0xF8 ) {
				codeUnits = 4;
				result &= 0x07;
				minValue = 1U << 16;
			}
			else if( result < 0xFC ) {
				codeUnits = 5;
				result &= 0x03;
				minValue = 1U << 21;
			}
			else if( result < 0xFE ) {
				codeUnits = 6;
				result &= 0x01;
				minValue = 1U << 26;
			}
			// else
			//	throw new ArgumentException( #buffer );

			// if( maxLength != 0 && codeUnits > maxLength )
			//	throw new ArgumentException( #buffer );

			for( var i = 1U; i < codeUnits; ++i ) {
				var @byte = buffer[i];

				// if( ( @byte & 0xC0 ) != 0x80 )
				//	throw new ArgumentException( #buffer );

				result <<= 6;
				result |= @byte & 0x3F;
			}

			// if( result < minValue )
			//	throw new ArgumentException( #buffer );

			return result;
		}

		[ForceInline]
		public static uint EncodeToUtf16( char* buffer, uint codePoint ) {
			if( codePoint < 0xD800 ) {
				buffer[0] = ( char ) codePoint;
				return 1;
			}
			else if( codePoint < 0xE000 ) {
				return 0;
			}
			else if( codePoint < 0x10000 ) {
				buffer[0] = ( char ) codePoint;
				return 1;
			}
			else if( codePoint < 0x110000 ) {
				buffer[0] = cast<char>( ( codePoint - 0x10000 ) / 0x400 + 0xD800 );
				buffer[1] = cast<char>( ( codePoint - 0x10000 ) % 0x400 + 0xDC00 );
				return 2;
			}

			return 0;
		}

		// 00000000-0000007F Oxxxxxxx
		// 00000080-000007FF 110xxxxx 10xxxxxx
		// 00000800-0000FFFF 1110xxxx 10xxxxxx 10xxxxxx
		// 00010000-001FFFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
		// 00200000-03FFFFFF 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
		// 04000000-7FFFFFFF 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
		[ForceInline]
		public static int GetUtf8CodePointCountByPrefix( byte startByte ) {
			if( startByte < 192 ) return 1;
			else if( startByte < 224 ) return 2;
			else if( startByte < 240 ) return 3;
			else if( startByte < 248 ) return 4;
			else if( startByte < 252 ) return 5;
			else if( startByte < 254 ) return 6;

			return 1;
		}

		[ForceInline]
		public static int GetUtf16CodeUnitCountInUtf8( char codePoint ) {
			if( codePoint < 0x80 ) return 1;
			if( codePoint < 0x800 ) return 2;
			return 3;
		}

		[ForceInline]
		public static int GetUtf32CodeUnitCountInUtf8( uint codePoint ) {
			if( codePoint < 0x80 ) return 1;
			if( codePoint < 0x800 ) return 2;
			if( codePoint < 0x10000 ) return 3;
			if( codePoint < 0x200000 ) return 4;
			if( codePoint < 0x4000000 ) return 5;

			return 6;
		}

		[ForceInline]
		public static int GetUtf32CodeUnitCountInUtf16( uint codePoint ) {
			if( codePoint < 0xD800 ) return 1;
			if( codePoint < 0xE000 ) return 0;
			if( codePoint < 0x10000 ) return 1;
			if( codePoint < 0x110000 ) return 2;

			return 0;
		}

		public static void GetUtf8CodeUnitCount( byte* characters, uint& limitBytes, uint& codeUnits16, uint& codeUnits32 ) {
			if( characters == null ) { codeUnits16 = codeUnits32 = 0; return; }
			var currentUnit = characters;

			codeUnits16 = 0U;
			codeUnits32 = 0U;

			for( ; limitBytes == 0 || ( uintptr )( currentUnit - characters ) < limitBytes; ) {
				var c = *currentUnit;
				if( limitBytes == 0 & c == 0 ) break;

				int characterLengthUtf8;
				var utf32Char = DecodeFromUtf8( currentUnit, characterLengthUtf8, limitBytes == 0 ? 6 : cast<int>( characters - currentUnit + limitBytes ) );

				var characterLengthUtf16 = GetUtf32CodeUnitCountInUtf16( utf32Char );
				// if( characterLengthUtf16 == 0 ) throw new ArgumentException( #characters );

				currentUnit += characterLengthUtf8;
				codeUnits16 += characterLengthUtf16;
				++codeUnits32;
			}

			limitBytes = ( uint )( currentUnit - characters );
		}

		[ForceInline]
		public static uint CombineUtf32CharFromUtf16SurrogatePair( char highSurrogate, char lowSurrogate ) {
			return cast<uint>( bitcast<ushort>( highSurrogate ) - 0xD800 ) * 0x400 + bitcast<ushort>( lowSurrogate ) + ( 0x10000U - 0xDC00U );
		}

		public static uint GetUtf16CharacterCount( char* characters, uint limitChars ) {
			if( characters == null ) { return 0; }
			var currentCharacter = characters;

			var characterCount = 0U;

			char highSurrogate = '\0';

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var c = *currentCharacter;
				if( limitChars == 0 & c == 0 ) break;

				uint utf32Char;

				if( c.IsLowSurrogate ) {
					// if( highSurrogate == 0 )
					//	throw new ArgumentException( #characters );

					utf32Char = CombineUtf32CharFromUtf16SurrogatePair( highSurrogate, c );
					highSurrogate = '\0';
					++characterCount;
				}
				else {
					// if( highSurrogate != 0 )
					//	throw new ArgumentException( #characters );

					if( c.IsHighSurrogate ) {
						highSurrogate = c;
						continue;
					}
					else {
						utf32Char = c;
						++characterCount;
					}
				}
			}

			// if( highSurrogate != 0 )
			//	throw new ArgumentException();

			return characterCount;
		}

		public static bool GetUtf16ByteCountInUtf8( char* characters, uint& limitChars, [Out] uint& characterCount16, [Out] uint& bytesCount ) {
			if( characters == null ) { bytesCount = 0; characterCount16 = 0; return false; }
			var currentCharacter = characters;

			characterCount16 = 0U;
			bytesCount = 0;

			char highSurrogate = '\0';
			uint utf32Char;

			if( limitChars == 0 )
				for( ; currentCharacter > characters; ++currentCharacter ) {
					var c = *currentCharacter;
					if( c == 0 ) { limitChars = ( uint )( currentCharacter - characters ); break; }

					if( !c.IsSurrogate ) {
						if( highSurrogate != 0 ) return false;

						utf32Char = c;
					}
					else if( c.IsHighSurrogate ) {
						if( highSurrogate != 0 ) return false;

						highSurrogate = c;
						continue;
					}
					else { // c.IsLowSurrogate
						if( highSurrogate == 0 ) return false;

						utf32Char = CombineUtf32CharFromUtf16SurrogatePair( highSurrogate, c );
						highSurrogate = '\0';
					}

					bytesCount += GetUtf32CodeUnitCountInUtf8( utf32Char );
					characterCount16 += GetUtf32CodeUnitCountInUtf16( utf32Char );
				}
			else {
				var pos = 0U;
				if( limitChars >= 4 )
					for( ; pos < limitChars - 3; pos += 4 ) {
						var c1 = characters[pos];
						var c2 = characters[pos + 1];
						var c3 = characters[pos + 2];
						var c4 = characters[pos + 3];

						if( !c1.IsSurrogate & !c2.IsSurrogate & !c3.IsSurrogate & !c4.IsSurrogate ) {
							bytesCount += GetUtf16CodeUnitCountInUtf8( c1 );
							bytesCount += GetUtf16CodeUnitCountInUtf8( c2 );
							bytesCount += GetUtf16CodeUnitCountInUtf8( c3 );
							bytesCount += GetUtf16CodeUnitCountInUtf8( c4 );
							characterCount16 += 4;
						}
						else break;
					}

				for( ; pos < limitChars; ++pos ) {
					var c = characters[pos];

					if( !c.IsSurrogate ) {
						if( highSurrogate != 0 ) return false;

						utf32Char = c;
					}
					else if( c.IsHighSurrogate ) {
						if( highSurrogate != 0 ) return false;

						highSurrogate = c;
						continue;
					}
					else { // c.IsLowSurrogate
						if( highSurrogate == 0 ) return false;

						utf32Char = CombineUtf32CharFromUtf16SurrogatePair( highSurrogate, c );
						highSurrogate = '\0';
					}

					bytesCount += GetUtf32CodeUnitCountInUtf8( utf32Char );
					characterCount16 += GetUtf32CodeUnitCountInUtf16( utf32Char );
				}
			}

			return true;
		}

		public static bool ConvertUtf16CharactersToUtf8( byte* buffer, char* characters, uint limitChars, uint& bytesWritten, uint& charsWritten ) {
			if( buffer == null || characters == null ) return false;

			var started = buffer;
			var currentCharacter = characters;
			char highSurrogate = '\0';
			uint utf32Char;
			charsWritten = 0;

			if( limitChars == 0 )
				for( var limitPtr = limitChars == 0 ? ( char* )( uintptr.MaxValue - 1 ) : characters + limitChars; currentCharacter < limitPtr; ++currentCharacter ) {
					var c = *currentCharacter;
					if( c == 0 ) break;

					if( !c.IsSurrogate ) {
						if( highSurrogate != 0 ) return false;

						utf32Char = c;
					}
					else if( c.IsHighSurrogate ) {
						if( highSurrogate != 0 ) return false;

						highSurrogate = c;
						continue;
					}
					else { // c.IsLowSurrogate
						if( highSurrogate == 0 ) return false;

						utf32Char = CombineUtf32CharFromUtf16SurrogatePair( highSurrogate, c );
						highSurrogate = '\0';
					}

					buffer += EncodeToUtf8( buffer, utf32Char );
					++charsWritten;
				}
			else {
				var pos = 0U;
				if( limitChars >= 8 )
					for( ; pos + 8 - 1 < limitChars; pos += 8 ) {
						var c1 = characters[pos];
						var c2 = characters[pos + 1];
						var c3 = characters[pos + 2];
						var c4 = characters[pos + 3];
						var c5 = characters[pos + 4];
						var c6 = characters[pos + 5];
						var c7 = characters[pos + 6];
						var c8 = characters[pos + 7];

						var fold = ( ushort )( c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 );
						if( fold < 0x80 ) {
							buffer[0] = ( byte ) c1;
							buffer[1] = ( byte ) c2;
							buffer[2] = ( byte ) c3;
							buffer[3] = ( byte ) c4;
							buffer[4] = ( byte ) c5;
							buffer[5] = ( byte ) c6;
							buffer[6] = ( byte ) c7;
							buffer[7] = ( byte ) c8;

							buffer += 8;
							charsWritten += 8;
						}
						else if( fold < 0xD800 ) {
							buffer += EncodeToUtf8( buffer, c1 );
							buffer += EncodeToUtf8( buffer, c2 );
							buffer += EncodeToUtf8( buffer, c3 );
							buffer += EncodeToUtf8( buffer, c4 );
							buffer += EncodeToUtf8( buffer, c5 );
							buffer += EncodeToUtf8( buffer, c6 );
							buffer += EncodeToUtf8( buffer, c7 );
							buffer += EncodeToUtf8( buffer, c8 );

							charsWritten += 8;
						}
						else {
							var batch = Math.Min( limitChars, pos + 8 );
							for( ; pos < batch; ++pos ) {
								var c = characters[pos];

								if( !c.IsSurrogate ) {
									buffer += EncodeToUtf8( buffer, c );
									++charsWritten;
									continue;
								}

								if( c.IsHighSurrogate ) {
									++pos;
									if( !( pos < limitChars ) ) return false;

									var low = characters[pos];
									utf32Char = CombineUtf32CharFromUtf16SurrogatePair( c, low );

									buffer += EncodeToUtf8( buffer, utf32Char );
									++charsWritten;

									continue;
								}

								// c.IsLowSurrogate
								return false;
							}

							pos -= 8;
						}
					}

				for( ; pos < limitChars; ++pos ) {
					var c = characters[pos];

					if( !c.IsSurrogate ) {
						buffer += EncodeToUtf8( buffer, c );
						++charsWritten;
						continue;
					}

					if( c.IsHighSurrogate ) {
						++pos;
						if( !( pos < limitChars ) ) return false;

						var low = characters[pos];
						utf32Char = CombineUtf32CharFromUtf16SurrogatePair( c, low );

						buffer += EncodeToUtf8( buffer, utf32Char );
						++charsWritten;

						continue;
					}

					// c.IsLowSurrogate
					return false;
				}
			}

			bytesWritten = ( uint )( buffer - started );
			return true;
		}

		public static yield<MemorySegment<byte>> StreamConvertUtf16CharactersToUtf8( byte* buffer, uint bufferLength, char* characters, uint limitChars ) {
			if( buffer == null || characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;

			char highSurrogate = '\0';

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var c = *currentCharacter;
				if( limitChars == 0 & c == 0 ) break;

				uint utf32Char;

				if( c.IsLowSurrogate ) {
					// if( highSurrogate == 0 )
					//	throw new ArgumentException( #characters );

					utf32Char = CombineUtf32CharFromUtf16SurrogatePair( highSurrogate, c );
					highSurrogate = '\0';
				}
				else {
					// if( highSurrogate != 0 )
					//	throw new ArgumentException( #characters );

					if( c.IsHighSurrogate ) {
						highSurrogate = c;
						continue;
					}
					else
						utf32Char = c;
				}

				buffer += EncodeToUtf8( buffer, utf32Char );

				if( buffer >= bufferEnd - 7 ) {
					yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			// if( highSurrogate != 0 )
			//	throw new ArgumentException();

			if( buffer != bufferStart )
				yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
		}

		public static void GetUtf32ByteCountInUtf8( uint* characters, uint limitChars, uint& characterCount, uint& bytesCount ) {
			if( characters == null ) { bytesCount = 0; characterCount = 0; return; }
			var currentCharacter = characters;

			characterCount = 0U;
			bytesCount = 0;

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var utf32Char = *currentCharacter;
				if( limitChars == 0 & utf32Char == 0 ) break;

				// if( utf32Char >= 0x80000000 )
				//	throw new ArgumentException( #characters );

				bytesCount += GetUtf32CodeUnitCountInUtf8( utf32Char );
				++characterCount;
			}
		}

		public static void ConvertUtf32CharactersToUtf8( byte* buffer, uint* characters, uint limitChars ) {
			if( buffer == null || characters == null ) return;

			var converter = StreamConvertUtf32CharactersToUtf8( buffer, ( uint )( ( uintptr.MaxValue ^ ( uintptr ) buffer ) / sizeof( *buffer ) - 1 ), characters, limitChars );
			converter.MoveNext();
		}

		public static yield<MemorySegment<byte>> StreamConvertUtf32CharactersToUtf8( byte* buffer, uint bufferLength, uint* characters, uint limitChars ) {
			if( characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var utf32Char = *currentCharacter;
				if( limitChars == 0 & utf32Char == 0 ) break;

				// if( utf32Char >= 0x80000000 )
				//	throw new ArgumentException( #characters );

				buffer += EncodeToUtf8( buffer, utf32Char );

				if( buffer >= bufferEnd - 7 ) {
					yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			if( buffer != bufferStart )
				yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
		}

		public static void GetUtf8ByteCountInUtf16( byte* characters, uint limitBytes, uint& characterCount, uint& encodedCharacterCount ) {
			if( characters == null ) { characterCount = 0; return; }
			var currentCharacter = characters;

			characterCount = 0U;
			encodedCharacterCount = 0U;

			for( ; limitBytes == 0 || ( uintptr )( currentCharacter - characters ) < limitBytes; ) {
				var c = *currentCharacter;
				if( limitBytes == 0 & c == 0 ) break;

				int characterLengthUtf8;
				var utf32Char = DecodeFromUtf8( currentCharacter, characterLengthUtf8, limitBytes == 0 ? 6 : cast<int>( characters - currentCharacter + limitBytes ) );

				var characterLengthUtf16 = GetUtf32CodeUnitCountInUtf16( utf32Char );
				// if( characterLengthUtf16 == 0 ) throw new ArgumentException( #characters );

				currentCharacter += characterLengthUtf8;
				encodedCharacterCount += characterLengthUtf16;
				++characterCount;
			}
		}

		public static void ConvertUtf8CharactersToUtf16( char* buffer, byte* characters, uint limitBytes ) {
			if( buffer == null || characters == null ) return;

			var converter = StreamConvertUtf8CharactersToUtf16( buffer, ( uint )( ( uintptr.MaxValue ^ ( uintptr ) buffer ) / sizeof( *buffer ) - 1 ), characters, limitBytes );
			converter.MoveNext();
		}

		public static yield<MemorySegment<char>> StreamConvertUtf8CharactersToUtf16( char* buffer, uint bufferLength, byte* characters, uint limitBytes ) {
			if( buffer == null || characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;

			for( ; limitBytes == 0 || ( uintptr )( currentCharacter - characters ) < limitBytes; ) {
				var c = *currentCharacter;
				if( limitBytes == 0 & c == 0 ) break;

				int characterLengthUtf8;
				var utf32Char = DecodeFromUtf8( currentCharacter, characterLengthUtf8, limitBytes == 0 ? 6 : cast<int>( characters - currentCharacter + limitBytes ) );

				var characterLengthUtf16 = EncodeToUtf16( buffer, utf32Char );

				buffer += characterLengthUtf16;
				currentCharacter += characterLengthUtf8;

				if( buffer >= bufferEnd - 1 ) {
					yield return new MemorySegment<char>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			if( buffer != bufferStart )
				yield return new MemorySegment<char>( bufferStart, ( uint )( buffer - bufferStart ) );
		}

		public static void GetUtf32ByteCountInUtf16( uint* characters, uint& limitChars, uint& characterCount16 ) {
			if( characters == null ) { limitChars = 0; characterCount16 = 0; return; }
			var currentCharacter = characters;

			characterCount16 = 0U;

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var utf32Char = *currentCharacter;
				if( limitChars == 0 & utf32Char == 0 ) { limitChars = ( uint )( currentCharacter - characters ); break; }

				var length = GetUtf32CodeUnitCountInUtf16( utf32Char );
				// if( length == 0 ) throw new ArgumentException( #characters );

				characterCount16 += length;
			}
		}

		public static void ConvertUtf32CharactersToUtf16( char* buffer, uint* characters, uint limitChars ) {
			if( buffer == null || characters == null ) return;

			var converter = StreamConvertUtf32CharactersToUtf16( buffer, ( uint )( ( uintptr.MaxValue ^ ( uintptr ) buffer ) / sizeof( *buffer ) - 1 ), characters, limitChars );
			converter.MoveNext();
		}

		public static yield<MemorySegment<char>> StreamConvertUtf32CharactersToUtf16( char* buffer, uint bufferLength, uint* characters, uint limitChars ) {
			if( buffer == null || characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var utf32Char = *currentCharacter;
				if( limitChars == 0 & utf32Char == 0 ) break;

				buffer += EncodeToUtf16( buffer, utf32Char );

				if( buffer >= bufferEnd - 1 ) {
					yield return new MemorySegment<char>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			if( buffer != bufferStart )
				yield return new MemorySegment<char>( bufferStart, ( uint )( buffer - bufferStart ) );
		}

		public static void GetUtf8ByteCountInUtf32( byte* characters, uint limitChars, uint& characterCount ) {
			if( characters == null ) { characterCount = 0; return; }
			var currentCharacter = characters;

			characterCount = 0U;

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ) {
				var c = *currentCharacter;
				if( limitChars == 0 & c == 0 ) break;

				int characterLengthUtf8;
				var utf32Char = DecodeFromUtf8( currentCharacter, characterLengthUtf8, limitChars == 0 ? 6 : cast<int>( characters - currentCharacter + limitChars ) );

				currentCharacter += characterLengthUtf8;
				++characterCount;
			}
		}

		public static void ConvertUtf8CharactersToUtf32( uint* buffer, byte* characters, uint limitBytes ) {
			if( buffer == null || characters == null ) return;

			var converter = StreamConvertUtf8CharactersToUtf32( buffer, ( uint )( ( uintptr.MaxValue ^ ( uintptr ) buffer ) / sizeof( *buffer ) - 1 ), characters, limitBytes );
			converter.MoveNext();
		}

		public static yield<MemorySegment<uint>> StreamConvertUtf8CharactersToUtf32( uint* buffer, uint bufferLength, byte* characters, uint limitBytes ) {
			if( buffer == null || characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;

			for( ; limitBytes == 0 || ( uintptr )( currentCharacter - characters ) < limitBytes; ) {
				var c = *currentCharacter;
				if( limitBytes == 0 & c == 0 ) break;

				int characterLengthUtf8;
				var utf32Char = DecodeFromUtf8( currentCharacter, characterLengthUtf8, limitBytes == 0 ? 6 : cast<int>( characters - currentCharacter + limitBytes ) );

				*buffer++ = utf32Char;

				currentCharacter += characterLengthUtf8;

				if( buffer >= bufferEnd - 1 ) {
					yield return new MemorySegment<uint>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			if( buffer != bufferStart )
				yield return new MemorySegment<uint>( bufferStart, ( uint )( buffer - bufferStart ) );
		}

		public static void GetUtf16ByteCountInUtf32( char* characters, uint limitChars, uint& characterCount ) {
			if( characters == null ) { characterCount = 0; return; }
			var currentCharacter = characters;

			characterCount = 0U;

			char highSurrogate = '\0';

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var c = *currentCharacter;
				if( limitChars == 0 & c == 0 ) break;

				uint utf32Char;

				if( c.IsLowSurrogate ) {
					// if( highSurrogate == 0 )
					//	throw new ArgumentException( #characters );

					utf32Char = CombineUtf32CharFromUtf16SurrogatePair( highSurrogate, c );
					highSurrogate = '\0';
				}
				else {
					// if( highSurrogate != 0 )
					//	throw new ArgumentException( #characters );

					if( c.IsHighSurrogate ) {
						highSurrogate = c;
						continue;
					}
					else
						utf32Char = c;
				}

				++characterCount;
			}

			// if( highSurrogate != 0 )
			//	throw new ArgumentException();
		}

		public static void ConvertUtf16CharactersToUtf32( uint* buffer, char* characters, uint limitChars ) {
			if( buffer == null || characters == null ) return;

			var converter = StreamConvertUtf16CharactersToUtf32( buffer, ( uint )( ( uintptr.MaxValue ^ ( uintptr ) buffer ) / sizeof( *buffer ) - 1 ), characters, limitChars );
			converter.MoveNext();
		}

		public static yield<MemorySegment<uint>> StreamConvertUtf16CharactersToUtf32( uint* buffer, uint bufferLength, char* characters, uint limitChars ) {
			if( buffer == null || characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;

			char highSurrogate = '\0';

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ++currentCharacter ) {
				var c = *currentCharacter;
				if( limitChars == 0 & c == 0 ) break;

				uint utf32Char;

				if( c.IsLowSurrogate ) {
					// if( highSurrogate == 0 )
					//	throw new ArgumentException( #characters );

					utf32Char = CombineUtf32CharFromUtf16SurrogatePair( highSurrogate, c );
					highSurrogate = '\0';
				}
				else {
					// if( highSurrogate != 0 )
					//	throw new ArgumentException( #characters );

					if( c.IsHighSurrogate ) {
						highSurrogate = c;
						continue;
					}
					else
						utf32Char = c;
				}

				*buffer++ = utf32Char;

				if( buffer >= bufferEnd - 1 ) {
					yield return new MemorySegment<uint>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			// if( highSurrogate != 0 )
			//	throw new ArgumentException();

			if( buffer != bufferStart )
				yield return new MemorySegment<uint>( bufferStart, ( uint )( buffer - bufferStart ) );
		}

		/// @{ UTF8 <=> codepage conversions
		public static yield<MemorySegment<byte>> StreamConvertUtf8CharactersToSbcs( CodePageID codepage, byte* buffer, uint bufferLength, byte* characters, uint limitBytes ) {
			if( buffer == null || characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;

			for( ; limitBytes == 0 || ( uintptr )( currentCharacter - characters ) < limitBytes; ) {
				var c = *currentCharacter;
				if( limitBytes == 0 & c == 0 ) break;

				int characterLengthUtf8;
				var utf32Char = DecodeFromUtf8( currentCharacter, characterLengthUtf8, limitBytes == 0 ? 6 : cast<int>( characters - currentCharacter + limitBytes ) );
				var utf16char = ( char ) utf32Char;

				Encoding.GetBytes( codepage, &utf16char, 1, buffer, 1 );

				++buffer;
				currentCharacter += characterLengthUtf8;

				if( buffer >= bufferEnd - 1 ) {
					yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			if( buffer != bufferStart )
				yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
		}

		public static void GetSbcsByteCountInUtf8( CodePageID codepage, byte* sbcsText, uint& sbcsTextLength, uint& characterCount16, uint& bytesCount ) {
			if( sbcsText == null ) { characterCount16 = 0; return; }
			var currentCharacter = sbcsText;

			bytesCount = 0U;
			characterCount16 = 0U;
			var conversionTable = Encoding.GetConversionTable( codepage );

			if( sbcsTextLength == 0 )
				for( ; ; ) {
					var c = *currentCharacter;
					if( c == 0 ) { sbcsTextLength = ( uint )( currentCharacter - sbcsText ); break; }

					var utf16char = conversionTable[c];
					bytesCount += GetUtf16CodeUnitCountInUtf8( utf16char );
					characterCount16 += GetUtf32CodeUnitCountInUtf16( utf16char );

					++currentCharacter;
				}
			else
				for( ; ( uintptr )( currentCharacter - sbcsText ) < sbcsTextLength; ) {
					var c = *currentCharacter;

					var utf16char = conversionTable[c];
					bytesCount += GetUtf16CodeUnitCountInUtf8( utf16char );
					characterCount16 += GetUtf32CodeUnitCountInUtf16( utf16char );

					++currentCharacter;
				}
		}

		public static void ConvertSbcsCharactersToUtf8( CodePageID codepage, byte* buffer, uint bufferLength, byte* characters, uint limitChars ) {
			if( buffer == null || characters == null ) return;

			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;
			var conversionTable = Encoding.GetConversionTable( codepage );

			if( limitChars == 0 )
				for( ; ; ) {
					var c = *currentCharacter;
					if( limitChars == 0 & c == 0 ) break;

					var utf16char = conversionTable[c];
					var characterLengthUtf8 = EncodeToUtf8( buffer, utf16char );

					buffer += characterLengthUtf8;
					++currentCharacter;
				}
			else
				for( ; ( uintptr )( currentCharacter - characters ) < limitChars; ) {
					var c = *currentCharacter;

					var utf16char = conversionTable[c];
					var characterLengthUtf8 = EncodeToUtf8( buffer, utf16char );

					buffer += characterLengthUtf8;
					++currentCharacter;
				}
		}

		public static yield<MemorySegment<byte>> StreamConvertSbcsCharactersToUtf8( CodePageID codepage, byte* buffer, uint bufferLength, byte* characters, uint limitChars ) {
			if( buffer == null || characters == null ) yield break;
			var currentCharacter = characters;
			var bufferStart = buffer;
			var bufferEnd = bufferStart + bufferLength;
			var conversionTable = Encoding.GetConversionTable( codepage );

			for( ; limitChars == 0 || ( uintptr )( currentCharacter - characters ) < limitChars; ) {
				var c = *currentCharacter;
				if( limitChars == 0 & c == 0 ) break;

				var utf16char = conversionTable[c];
				var characterLengthUtf8 = EncodeToUtf8( buffer, utf16char );

				buffer += characterLengthUtf8;
				++currentCharacter;

				if( buffer >= bufferEnd - 7 ) {
					yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
					buffer = bufferStart;
				}
			}

			if( buffer != bufferStart )
				yield return new MemorySegment<byte>( bufferStart, ( uint )( buffer - bufferStart ) );
		}
		/// @}

		/// @{ UTF16 <=> codepage conversions
		public static yield<MemorySegment<byte>> StreamConvertUtf16CharactersToSbcs( CodePageID codepage, byte* buffer, uint bufferLength, char* characters, uint limitChars ) {
			if( buffer == null || characters == null ) yield break;

			if( limitChars == 0 ) limitChars = new CUtf16String( characters ).Length;

			var currentCharacter = characters;
			var charactersEnd = characters + limitChars;

			var remaining = limitChars;

			for( ; remaining > 0; ) {
				var c = *currentCharacter;

				var charsToRead = Math.Min( remaining, bufferLength / 2 );
				Encoding.GetBytes( codepage, currentCharacter, charsToRead, buffer, bufferLength );

				currentCharacter += charsToRead;
				remaining -= charsToRead;

				yield return new MemorySegment<byte>( buffer, charsToRead );
			}
		}
		/// @}
	}
}