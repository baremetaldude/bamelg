//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;

namespace System.Reflection {
	public partial struct Type : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			var& fixedArray = AsFixedArray;
			if( fixedArray != nullref ) { fixedArray.ToString( builder, format ); return; }

			var& dynamicArray = AsDynamicArray;
			if( dynamicArray != nullref ) { dynamicArray.ToString( builder, format ); return; }

			var& pointer = AsPointer;
			if( pointer != nullref ) { pointer.ToString( builder, format ); return; }

			var& reference = AsReference;
			if( reference != nullref ) { reference.ToString( builder, format ); return; }

			var& userType = AsUserType;
			if( userType != nullref ) { userType.ToString( builder, format ); return; }

			var& enumType = AsEnum;
			if( enumType != nullref ) { enumType.ToString( builder, format ); return; }

			var& functorType = AsFunctor;
			if( functorType != nullref ) { functorType.ToString( builder, format ); return; }

			var& delegateType = AsDelegate;
			if( delegateType != nullref ) { delegateType.ToString( builder, format ); return; }

			var& interfaceType = AsInterface;
			if( interfaceType != nullref ) { interfaceType.ToString( builder, format ); return; }
		}
	}

	public partial struct UserType : IFormattable {
		public MemoryEnumerator<Constant> Constants { get { return new MemoryEnumerator<Constant>( ConstantsStart, ConstantCount ); } }
		public MemoryEnumerator<Field> Fields { get { return new MemoryEnumerator<Field>( FieldsStart, FieldCount ); } }
		public MemoryEnumerator<Property> Properties { get { return new MemoryEnumerator<Property>( PropertiesStart, PropertyCount ); } }
		public MemoryEnumerator<IndexedProperty> IndexedProperties { get { return new MemoryEnumerator<IndexedProperty>( IndexedPropertiesStart, IndexedPropertyCount ); } }
		public MemoryEnumerator<Event> Events { get { return new MemoryEnumerator<Event>( EventsStart, EventCount ); } }
		public MemoryEnumerator<Method> Methods { get { return new MemoryEnumerator<Method>( MethodsStart, MethodCount ); } }

		public new void ToString( StringBuilder builder, string format ) {
			if( format.IsNullOrEmpty ) {
			fallback_format:
				var& declaringType = DeclaringType;
				var declaringNamespace = DeclaringNamespace;

				if( declaringType != nullref ) declaringType.ToString( builder, format );
				else if( declaringNamespace != null ) builder.Append( declaringNamespace );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );

				if( TemplateTypeDefinition != nullref ) {
					builder.Append( '<' );
					for( var i = 0; i < TemplateTypeDefinition.ParameterCount; ++i ) {
						if( i > 0 ) builder.Append( ',' );
						TemplateParameters[i]->ToString( builder, format );
					}
					builder.Append( '>' );
				}

				return;
			}

			switch( format ) {
				case "L": {
						switch( this ) {
							case typeof( void ): builder.Append( "void" ); return;
							case typeof( bool ): builder.Append( "bool" ); return;

							case typeof( byte ): builder.Append( "byte" ); return;
							case typeof( sbyte ): builder.Append( "sbyte" ); return;

							case typeof( short ): builder.Append( "short" ); return;
							case typeof( ushort ): builder.Append( "ushort" ); return;

							case typeof( int ): builder.Append( "int" ); return;
							case typeof( uint ): builder.Append( "uint" ); return;

							case typeof( long ): builder.Append( "long" ); return;
							case typeof( ulong ): builder.Append( "ulong" ); return;

							case typeof( float ): builder.Append( "float" ); return;
							case typeof( double ): builder.Append( "double" ); return;

							case typeof( char ): builder.Append( "char" ); return;
							case typeof( string ): builder.Append( "string" ); return;
							default: goto fallback_format;
						}
					} break;
			}
		}

		public partial struct Method : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );

				if( TemplateMethodDefinition != nullref ) {
					builder.Append( '<' );
					for( var i = 0; i < TemplateMethodDefinition.ParameterCount; ++i ) {
						if( i > 0 ) builder.Append( ',' );
						TemplateParameters[i]->ToString( builder, "L" );
					}
					builder.Append( '>' );
				}

				builder.Append( '(' );

				var needComma = false;
				for( var i = 0; i < ParameterCount; ++i ) {
					if( Parameters[i]->Name.StartsWith( '#' ) ) continue;
					if( needComma ) builder.Append( ',' );
					Parameters[i]->ParameterType.ToString( builder, "L" );
					needComma = true;
				}

				builder.Append( ')' );
			}
		}

		public partial struct Field : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct Property : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct Event : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct Constant : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct IndexedProperty : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );

				if( GetMethod != nullref ) {
					builder.Append( '[' );
					if( GetMethod.Parameters != null )
						for( var i = 0; i < GetMethod.ParameterCount; ++i ) {
							if( i > 0 ) builder.Append( ',' );
							GetMethod.Parameters[i]->ParameterType.ToString( builder, "L" );
						}
					builder.Append( ']' );
				}
				else if( SetMethod != nullref ) {
					builder.Append( '[' );
					if( SetMethod.Parameters != null )
						for( var i = 0; i < SetMethod.ParameterCount - 1; ++i ) {
							if( i > 0 ) builder.Append( ',' );
							SetMethod.Parameters[i]->ParameterType.ToString( builder, "L" );
						}
					builder.Append( ']' );
				}
				else {
					builder.Append( '[' );
					builder.Append( "<stripped>" );
					builder.Append( ']' );
				}
			}
		}
	}

	public partial struct InterfaceType : IFormattable {
		public MemoryEnumerator<UserType.Property> Properties { get { return new MemoryEnumerator<UserType.Property>( PropertiesStart, PropertyCount ); } }
		public MemoryEnumerator<UserType.IndexedProperty> IndexedProperties { get { return new MemoryEnumerator<UserType.IndexedProperty>( IndexedPropertiesStart, IndexedPropertyCount ); } }
		public MemoryEnumerator<UserType.Event> Events { get { return new MemoryEnumerator<UserType.Event>( EventsStart, EventCount ); } }
		public MemoryEnumerator<UserType.Method> Methods { get { return new MemoryEnumerator<UserType.Method>( MethodsStart, MethodCount ); } }

		public new void ToString( StringBuilder builder, string format ) {
			var& declaringType = DeclaringType;
			var declaringNamespace = DeclaringNamespace;

			if( declaringType != nullref ) declaringType.ToString( builder, format );
			else if( declaringNamespace != null ) builder.Append( declaringNamespace );
			else builder.Append( "<stripped>" );

			builder.Append( '.' );
			builder.Append( Name );

			if( TemplateTypeDefinition != nullref ) {
				builder.Append( '<' );
				for( var i = 0; i < TemplateTypeDefinition.ParameterCount; ++i ) {
					if( i > 0 ) builder.Append( ',' );
					TemplateParameters[i]->ToString( builder, format );
				}
				builder.Append( '>' );
			}
		}
	}

	public partial struct EnumType : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			var& declaringType = DeclaringType;
			var declaringNamespace = DeclaringNamespace;

			if( declaringType != nullref ) declaringType.ToString( builder, format );
			else if( declaringNamespace != null ) builder.Append( declaringNamespace );
			else builder.Append( "<stripped>" );

			builder.Append( '.' );
			builder.Append( Name );
		}
	}

	public partial struct FunctorType : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			var& declaringType = DeclaringType;
			var declaringNamespace = DeclaringNamespace;

			if( declaringType != nullref ) declaringType.ToString( builder, format );
			else if( declaringNamespace != null ) builder.Append( declaringNamespace );
			else builder.Append( "<stripped>" );

			builder.Append( '.' );
			builder.Append( Name );

			if( TemplateTypeDefinition != nullref ) {
				builder.Append( '<' );
				for( var i = 0; i < TemplateTypeDefinition.ParameterCount; ++i ) {
					if( i > 0 ) builder.Append( ',' );
					TemplateParameters[i]->ToString( builder, format );
				}
				builder.Append( '>' );
			}
		}
	}

	public partial struct DelegateType : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			var& declaringType = DeclaringType;
			var declaringNamespace = DeclaringNamespace;

			if( declaringType != nullref ) declaringType.ToString( builder, format );
			else if( declaringNamespace != null ) builder.Append( declaringNamespace );
			else builder.Append( "<stripped>" );

			builder.Append( '.' );
			builder.Append( Name );

			if( TemplateTypeDefinition != nullref ) {
				builder.Append( '<' );
				for( var i = 0; i < TemplateTypeDefinition.ParameterCount; ++i ) {
					if( i > 0 ) builder.Append( ',' );
					TemplateParameters[i]->ToString( builder, format );
				}
				builder.Append( '>' );
			}
		}
	}

	public partial struct FixedArrayType : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			ElementType.ToString( builder, format );
			builder.Append( '[' );
			{
				for( var i = 0; i < Dimensions; ++i ) {
					if( i > 0 ) builder.Append( ',' );
					builder.Append( Lengths[i] );
				}
			}
			builder.Append( ']' );
		}
	}

	public partial struct DynamicArrayType : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			ElementType.ToString( builder, format );

			builder.Append( '[' );
			{
				for( var i = 1; i < Dimensions; ++i )
					builder.Append( ',' );
			}
			builder.Append( ']' );
		}
	}

	public partial struct PointerType : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			Pointee.ToString( builder, format );
			builder.Append( '*' );
		}
	}

	public partial struct ReferenceType : IFormattable {
		public new void ToString( StringBuilder builder, string format ) {
			Referentee.ToString( builder, format );
			builder.Append( '&' );
		}
	}
}