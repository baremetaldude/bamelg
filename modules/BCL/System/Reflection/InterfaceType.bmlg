//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.Runtime;

namespace System.Reflection {
	public partial struct InterfaceType : Type {
		public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
		public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

		public InterfaceType** BaseInterfaces;

		public UserType.Property* PropertiesStart;
		public UserType.IndexedProperty* IndexedPropertiesStart;
		public UserType.Event* EventsStart;
		public UserType.Method* MethodsStart;

		public TemplateInterfaceDefinition& TemplateTypeDefinition;
		public Type** TemplateParameters;

		public Attribute** Attributes;
		public new bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
		public new Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
		public new T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

		public uint BaseInterfaceCount;
		public uint PropertyCount, IndexedPropertyCount, EventCount, MethodCount;
		public uint AttributeCount;
	}
}