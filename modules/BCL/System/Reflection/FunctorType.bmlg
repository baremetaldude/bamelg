//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.Runtime;

namespace System.Reflection {
	public partial struct FunctorType : Type {
		private FunctorType() { }
		public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
		public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

		public Type& ReturnType;

		public ParameterInfo** Parameters;

		public TemplateFunctorDefinition& TemplateTypeDefinition;
		public Type** TemplateParameters;

		public Attribute** Attributes;
		public new bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
		public new Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
		public new T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

		public uint ParameterCount;
		public uint AttributeCount;

		public bool HasImplicitReferenceConversion( [In] thistype& toType ) {
			if( &toType == null | &this == null ) return false;
			if( &toType == &this ) return true;

			return false;
		}
	}
}