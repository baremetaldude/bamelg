//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;

namespace System.Reflection {
	public partial struct UserType : IFormattable {
		public MemoryEnumerator<Constant> Constants { get { return new MemoryEnumerator<Constant>( ConstantsStart, ConstantCount ); } }
		public MemoryEnumerator<Field> Fields { get { return new MemoryEnumerator<Field>( FieldsStart, FieldCount ); } }
		public MemoryEnumerator<Property> Properties { get { return new MemoryEnumerator<Property>( PropertiesStart, PropertyCount ); } }
		public MemoryEnumerator<IndexedProperty> IndexedProperties { get { return new MemoryEnumerator<IndexedProperty>( IndexedPropertiesStart, IndexedPropertyCount ); } }
		public MemoryEnumerator<Event> Events { get { return new MemoryEnumerator<Event>( EventsStart, EventCount ); } }
		public MemoryEnumerator<Method> Methods { get { return new MemoryEnumerator<Method>( MethodsStart, MethodCount ); } }

		public new void ToString( StringBuilder builder, string format ) {
			if( format.IsNullOrEmpty ) {
			fallback_format:
				var& declaringType = DeclaringType;
				var declaringNamespace = DeclaringNamespace;

				if( declaringType != nullref ) declaringType.ToString( builder, format );
				else if( declaringNamespace != null ) builder.Append( declaringNamespace );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );

				if( TemplateTypeDefinition != nullref ) {
					builder.Append( '<' );
					for( var i = 0; i < TemplateTypeDefinition.ParameterCount; ++i ) {
						if( i > 0 ) builder.Append( ',' );
						TemplateParameters[i]->ToString( builder, format );
					}
					builder.Append( '>' );
				}

				return;
			}

			switch( format ) {
				case "l":
				case "L": {
						if( System.Runtime.CompilerServices.CompilerInfo.BigEndian ) {
							switch( this ) {
								case typeof( void ): builder.Append( "void" ); return;
								case typeof( bool ): builder.Append( "bool" ); return;

								case typeof( byte ): builder.Append( "byte" ); return;
								case typeof( sbyte ): builder.Append( "sbyte" ); return;

								case typeof( short_littleendian ): builder.Append( "short_littleendian" ); return;
								case typeof( ushort_littleendian ): builder.Append( "ushort_littleendian" ); return;

								case typeof( int_littleendian ): builder.Append( "int_littleendian" ); return;
								case typeof( uint_littleendian ): builder.Append( "uint_littleendian" ); return;

								case typeof( long_littleendian ): builder.Append( "long_littleendian" ); return;
								case typeof( ulong_littleendian ): builder.Append( "ulong_littleendian" ); return;

								case typeof( float_littleendian ): builder.Append( "float_littleendian" ); return;
								case typeof( double_littleendian ): builder.Append( "double_littleendian" ); return;

								case typeof( short_bigendian ): builder.Append( "short" ); return;
								case typeof( ushort_bigendian ): builder.Append( "ushort" ); return;

								case typeof( int_bigendian ): builder.Append( "int" ); return;
								case typeof( uint_bigendian ): builder.Append( "uint" ); return;

								case typeof( long_bigendian ): builder.Append( "long" ); return;
								case typeof( ulong_bigendian ): builder.Append( "ulong" ); return;

								case typeof( float_bigendian ): builder.Append( "float" ); return;
								case typeof( double_bigendian ): builder.Append( "double" ); return;

								case typeof( char ): builder.Append( "char" ); return;
								case typeof( string ): builder.Append( "string" ); return;
								default: goto fallback_format;
							}
						}
						else {
							switch( this ) {
								case typeof( void ): builder.Append( "void" ); return;
								case typeof( bool ): builder.Append( "bool" ); return;

								case typeof( byte ): builder.Append( "byte" ); return;
								case typeof( sbyte ): builder.Append( "sbyte" ); return;

								case typeof( short_littleendian ): builder.Append( "short" ); return;
								case typeof( ushort_littleendian ): builder.Append( "ushort" ); return;

								case typeof( int_littleendian ): builder.Append( "int" ); return;
								case typeof( uint_littleendian ): builder.Append( "uint" ); return;

								case typeof( long_littleendian ): builder.Append( "long" ); return;
								case typeof( ulong_littleendian ): builder.Append( "ulong" ); return;

								case typeof( float_littleendian ): builder.Append( "float" ); return;
								case typeof( double_littleendian ): builder.Append( "double" ); return;

								case typeof( short_bigendian ): builder.Append( "short_bigendian" ); return;
								case typeof( ushort_bigendian ): builder.Append( "ushort_bigendian" ); return;

								case typeof( int_bigendian ): builder.Append( "int_bigendian" ); return;
								case typeof( uint_bigendian ): builder.Append( "uint_bigendian" ); return;

								case typeof( long_bigendian ): builder.Append( "long_bigendian" ); return;
								case typeof( ulong_bigendian ): builder.Append( "ulong_bigendian" ); return;

								case typeof( float_bigendian ): builder.Append( "float_bigendian" ); return;
								case typeof( double_bigendian ): builder.Append( "double_bigendian" ); return;

								case typeof( char ): builder.Append( "char" ); return;
								case typeof( string ): builder.Append( "string" ); return;
								default: goto fallback_format;
							}
						}
					} break;

				case "e":
				case "E": {
						switch( this ) {
							case typeof( void ): builder.Append( "void" ); return;
							case typeof( bool ): builder.Append( "bool" ); return;

							case typeof( byte ): builder.Append( "byte" ); return;
							case typeof( sbyte ): builder.Append( "sbyte" ); return;

							case typeof( short_littleendian ): builder.Append( "short_littleendian" ); return;
							case typeof( ushort_littleendian ): builder.Append( "ushort_littleendian" ); return;

							case typeof( int_littleendian ): builder.Append( "int_littleendian" ); return;
							case typeof( uint_littleendian ): builder.Append( "uint_littleendian" ); return;

							case typeof( long_littleendian ): builder.Append( "long_littleendian" ); return;
							case typeof( ulong_littleendian ): builder.Append( "ulong_littleendian" ); return;

							case typeof( float_littleendian ): builder.Append( "float_littleendian" ); return;
							case typeof( double_littleendian ): builder.Append( "double_littleendian" ); return;

							case typeof( short_bigendian ): builder.Append( "short_bigendian" ); return;
							case typeof( ushort_bigendian ): builder.Append( "ushort_bigendian" ); return;

							case typeof( int_bigendian ): builder.Append( "int_bigendian" ); return;
							case typeof( uint_bigendian ): builder.Append( "uint_bigendian" ); return;

							case typeof( long_bigendian ): builder.Append( "long_bigendian" ); return;
							case typeof( ulong_bigendian ): builder.Append( "ulong_bigendian" ); return;

							case typeof( float_bigendian ): builder.Append( "float_bigendian" ); return;
							case typeof( double_bigendian ): builder.Append( "double_bigendian" ); return;

							case typeof( char ): builder.Append( "char" ); return;
							case typeof( string ): builder.Append( "string" ); return;
							default: goto fallback_format;
						}
					} break;
			}
		}

		public partial struct Method : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );

				if( TemplateMethodDefinition != nullref ) {
					builder.Append( '<' );
					for( var i = 0; i < TemplateMethodDefinition.ParameterCount; ++i ) {
						if( i > 0 ) builder.Append( ',' );
						TemplateParameters[i]->ToString( builder, "L" );
					}
					builder.Append( '>' );
				}

				builder.Append( '(' );

				var needComma = false;
				for( var i = 0; i < ParameterCount; ++i ) {
					if( Parameters[i]->Name.StartsWith( '#' ) ) continue;
					if( needComma ) builder.Append( ',' );
					Parameters[i]->ParameterType.ToString( builder, "L" );
					needComma = true;
				}

				builder.Append( ')' );
			}
		}

		public partial struct Field : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct Property : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct Event : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct Constant : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );
			}
		}

		public partial struct IndexedProperty : IFormattable {
			public void ToString( StringBuilder builder, string format ) {
				var& declaringType = DeclaringType;

				if( declaringType != nullref ) builder.Append( declaringType.FullQualifiedName );
				else builder.Append( "<stripped>" );

				builder.Append( '.' );
				builder.Append( Name );

				if( GetMethod != nullref ) {
					builder.Append( '[' );
					if( GetMethod.Parameters != null )
						for( var i = 0; i < GetMethod.ParameterCount; ++i ) {
							if( i > 0 ) builder.Append( ',' );
							GetMethod.Parameters[i]->ParameterType.ToString( builder, "L" );
						}
					builder.Append( ']' );
				}
				else if( SetMethod != nullref ) {
					builder.Append( '[' );
					if( SetMethod.Parameters != null )
						for( var i = 0; i < SetMethod.ParameterCount - 1; ++i ) {
							if( i > 0 ) builder.Append( ',' );
							SetMethod.Parameters[i]->ParameterType.ToString( builder, "L" );
						}
					builder.Append( ']' );
				}
				else {
					builder.Append( '[' );
					builder.Append( "<stripped>" );
					builder.Append( ']' );
				}
			}
		}
	}
}