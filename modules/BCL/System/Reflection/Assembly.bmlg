//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.Runtime;

namespace System.Reflection {
	public partial struct Assembly {
		public DateTime BuildDate { get { return *( DateTime* ) &_buildDate; } }

		public MemoryEnumerator<UserType> UserTypes { get { return new MemoryEnumerator<UserType>( UserTypesStart, UserTypeCount ); } }
		public MemoryEnumerator<InterfaceType> InterfaceTypes { get { return new MemoryEnumerator<InterfaceType>( InterfacesStart, InterfaceCount ); } }
		public MemoryEnumerator<FunctorType> FunctorTypes { get { return new MemoryEnumerator<FunctorType>( FunctorsStart, FunctorCount ); } }
		public MemoryEnumerator<DelegateType> DelegateTypes { get { return new MemoryEnumerator<DelegateType>( DelegatesStart, DelegateCount ); } }
		public MemoryEnumerator<EnumType> EnumTypes { get { return new MemoryEnumerator<EnumType>( EnumsStart, EnumCount ); } }

		public MemoryEnumerator<TemplateUserTypeDefinition> TemplateUserTypes { get { return new MemoryEnumerator<TemplateUserTypeDefinition>( TemplateUserTypesStart, TemplateUserTypeCount ); } }
		public MemoryEnumerator<TemplateInterfaceDefinition> TemplateInterfaceTypes { get { return new MemoryEnumerator<TemplateInterfaceDefinition>( TemplateInterfacesStart, TemplateInterfaceCount ); } }
		public MemoryEnumerator<TemplateFunctorDefinition> TemplateFunctorTypes { get { return new MemoryEnumerator<TemplateFunctorDefinition>( TemplateFunctorsStart, TemplateFunctorCount ); } }
		public MemoryEnumerator<TemplateDelegateDefinition> TemplateDelegateTypes { get { return new MemoryEnumerator<TemplateDelegateDefinition>( TemplateDelegatesStart, TemplateDelegateCount ); } }

		public MemoryEnumerator<PointerType> PointerTypes { get { return new MemoryEnumerator<PointerType>( PointerTypesStart, PointerTypeCount ); } }
		public MemoryEnumerator<ReferenceType> ReferenceTypes { get { return new MemoryEnumerator<ReferenceType>( ReferenceTypesStart, ReferenceTypeCount ); } }
		public MemoryEnumerator<FixedArrayType> FixedArrayTypes { get { return new MemoryEnumerator<FixedArrayType>( FixedArraysStart, FixedArrayCount ); } }
		public MemoryEnumerator<DynamicArrayType> DynamicArrayTypes { get { return new MemoryEnumerator<DynamicArrayType>( DynamicArraysStart, DynamicArrayCount ); } }

		public MemoryEnumerator<UserType.Field> Fields { get { return new MemoryEnumerator<UserType.Field>( FieldsStart, FieldCount ); } }
		public MemoryEnumerator<UserType.Constant> Constants { get { return new MemoryEnumerator<UserType.Constant>( ConstantsStart, ConstantCount ); } }
		public MemoryEnumerator<UserType.Property> Properties { get { return new MemoryEnumerator<UserType.Property>( PropertiesStart, PropertyCount ); } }
		public MemoryEnumerator<UserType.IndexedProperty> IndexedProperties { get { return new MemoryEnumerator<UserType.IndexedProperty>( IndexedPropertiesStart, IndexedPropertyCount ); } }
		public MemoryEnumerator<UserType.Method> Methods { get { return new MemoryEnumerator<UserType.Method>( MethodsStart, MethodCount ); } }
		public MemoryEnumerator<UserType.TemplateMethodDefinition> TemplateMethods { get { return new MemoryEnumerator<UserType.TemplateMethodDefinition>( TemplateMethodsStart, TemplateMethodCount ); } }
		public MemoryEnumerator<UserType.Event> Events { get { return new MemoryEnumerator<UserType.Event>( EventsStart, EventCount ); } }

		public new bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
		public new Attribute* GetAttribute( [In] UserType& type ) { return AttributeAccessor.GetAttribute( Attributes, AttributeCount, type ); }
		public new T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

		public static struct AttributeAccessor {
			public static Attribute* GetAttribute( Attribute** attributes, uint attributesCount, [In] UserType& type ) {
				for( var i = 0U; i < attributesCount; ++i )
					if( attributes[i]->Type == type )
						return attributes[i];

				return null;
			}
		}
	}
}