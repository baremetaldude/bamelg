//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.Runtime;

namespace System.Reflection {
	public partial struct FixedArrayType : Type {
		private FixedArrayType() { }
		public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
		public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

		public Type& ElementType { get { return *( Type* ) _declaringContainer; } }

		public int* Lengths;

		public int ElementCount {
			get {
				var result = Lengths[0];
				for( var i = 1; i < Dimensions; ++i ) result *= Lengths[i];
				return result;
			}
		}

		public int Dimensions;

		public new int InstanceSize {
			get {
				var elementAlignment = ElementType.InstanceAlignment;
				var tailPadding = Memory.GetTailPadding( ( uint ) ElementType.InstanceSize, elementAlignment );
				var elementStride = ( int ) Memory.GetStride( ( uint ) ElementType.InstanceSize, elementAlignment );
				return cast<int>( elementStride * ElementCount - tailPadding );
			}
		}

		public bool HasImplicitReferenceConversion( [In] thistype& toType ) {
			if( &toType == null | &this == null ) return false;
			if( &toType == &this ) return true;

			if( toType.Dimensions != Dimensions ) return false;
			if( !Memory.Compare( Lengths, toType.Lengths, sizeof( *Lengths ) * Dimensions ) ) return false;

			return ElementType.HasImplicitReferenceConversion( toType.ElementType );
		}
	}
}