//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.Runtime;

namespace System.Reflection {
	[Alignment( Boundary = sizeof( intptr ) )]
	public partial struct Type {
		public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
		public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

		public Functors.Action<void*> Destructor {
			get {
				var& userType = AsUserType;
				if( userType != nullref ) return userType.Destructor;
				if( IsDynamicArray ) return typeof( Array ).Destructor;
				if( IsDelegate ) return typeof( Delegate ).Destructor;

				return null;
			}
		}

		public Functors.Action<void*> Postblit {
			get {
				var& structType = AsStruct;
				if( structType != nullref ) return structType.Postblit;

				return null;
			}
		}

		public SbcsString Name;

		protected void* _declaringContainer;
		public UserType& DeclaringType { get { return ( Flags & TypeFlags.Nested ) != 0 ? *( UserType* ) _declaringContainer : nullref; } }
		public SbcsString DeclaringNamespace { get { return ( Flags & TypeFlags.TopLevel ) != 0 ? bitcast<SbcsString>( _declaringContainer ) : null; } }

		public SbcsString FullQualifiedName;

		public string ToString() { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { ToString( builder.Value, "L" ); return builder.Value.ToString(); } }

		[Flags]
		public enum TypeFlags {
			AccessKindMask = 0b111, // access kind bits
			Predefined,             // is type predefined or not

			Enum,                   // is enum type
			Class,                  // is class
			Struct,                 // is struct
			Functor,                // is functor
			Pointer,                // is pointer
			Delegate,               // is delegate
			Interface,              // is interface
			Reference,              // is reference
			FixedArray,             // is fixed array
			DynamicArray,           // is dynamic array

			Sealed,                 // sealed class
			Nested,                 // type declared in another type
			Static,                 // static class/struct
			Abstract,               // abstract class
			TopLevel,               // type declared in namespace

			NoFields,               // struct have no fields ( "struct S1 { }" )
		}

		public TypeFlags Flags;
		public AccessKind AccessKind { get { return cast<AccessKind>( Flags & TypeFlags.AccessKindMask ); } }

		public bool IsRuntimeObject { get { return ( Flags & ( TypeFlags.Class | TypeFlags.DynamicArray | TypeFlags.Delegate ) ) != 0; } }

		public bool IsClass { get { return ( Flags & TypeFlags.Class ) != 0; } }
		public UserType& AsClass { get { return IsClass ? *( UserType* ) &this : nullref; } }

		public bool IsStruct { get { return ( Flags & TypeFlags.Struct ) != 0; } }
		public UserType& AsStruct { get { return IsStruct ? *( UserType* ) &this : nullref; } }

		public bool IsUserType { get { return ( Flags & ( TypeFlags.Class | TypeFlags.Struct ) ) != 0; } }
		public UserType& AsUserType { get { return IsUserType ? *( UserType* ) &this : nullref; } }

		public bool IsInterface { get { return ( Flags & TypeFlags.Interface ) != 0; } }
		public InterfaceType& AsInterface { get { return IsInterface ? *( InterfaceType* ) &this : nullref; } }

		public bool IsEnum { get { return ( Flags & TypeFlags.Enum ) != 0; } }
		public EnumType& AsEnum { get { return IsEnum ? *( EnumType* ) &this : nullref; } }

		public bool IsPointer { get { return ( Flags & TypeFlags.Pointer ) != 0; } }
		public PointerType& AsPointer { get { return IsPointer ? *( PointerType* ) &this : nullref; } }

		public bool IsReference { get { return ( Flags & TypeFlags.Reference ) != 0; } }
		public ReferenceType& AsReference { get { return IsReference ? *( ReferenceType* ) &this : nullref; } }

		public bool IsFunctor { get { return ( Flags & TypeFlags.Functor ) != 0; } }
		public FunctorType& AsFunctor { get { return IsFunctor ? *( FunctorType* ) &this : nullref; } }

		public bool IsDelegate { get { return ( Flags & TypeFlags.Delegate ) != 0; } }
		public DelegateType& AsDelegate { get { return IsDelegate ? *( DelegateType* ) &this : nullref; } }

		public bool IsFixedArray { get { return ( Flags & TypeFlags.FixedArray ) != 0; } }
		public FixedArrayType& AsFixedArray { get { return IsFixedArray ? *( FixedArrayType* ) &this : nullref; } }

		public bool IsDynamicArray { get { return ( Flags & TypeFlags.DynamicArray ) != 0; } }
		public DynamicArrayType& AsDynamicArray { get { return IsDynamicArray ? *( DynamicArrayType* ) &this : nullref; } }

		public bool HasImplicitReferenceConversion( [In] Type& toType, bool structByRef = false ) {
			if( &toType == null | &this == null ) return false;
			if( &toType == &this ) return true;

			if( toType == typeof( RuntimeObjectBase ) && ( Flags & ( TypeFlags.Class | TypeFlags.Delegate | TypeFlags.DynamicArray ) ) != 0 )
				return true;

			if( IsClass || ( structByRef & IsStruct ) ) return AsUserType.IsSubclassOf( toType.AsUserType );
			if( IsDynamicArray ) return AsDynamicArray.HasImplicitReferenceConversion( toType.AsDynamicArray );
			if( IsPointer ) return AsPointer.HasImplicitReferenceConversion( toType.AsPointer );
			if( structByRef & IsFixedArray ) return AsFixedArray.HasImplicitReferenceConversion( toType.AsFixedArray );
			if( IsDelegate ) return AsDelegate.HasImplicitReferenceConversion( toType.AsDelegate );
			if( IsFunctor ) return AsFunctor.HasImplicitReferenceConversion( toType.AsFunctor );

			return false;
		}

		public bool CheckAssignment( [In] Type& toType ) {
			if( HasImplicitReferenceConversion( toType ) ) return true;

			var& @enum = AsEnum;
			if( @enum != nullref )
				return @enum.ElementType == toType;

			return false;
		}

		// How many bytes needed to store that type in variable or field
		public uint InstanceSize {
			get {
				if( ( Flags & ( TypeFlags.Reference | TypeFlags.Pointer | TypeFlags.Functor | TypeFlags.Delegate | TypeFlags.Class | TypeFlags.DynamicArray ) ) != 0 ) return sizeof( void* );
				if( IsInterface ) return sizeof( InterfaceInstance );

				var& userType = AsUserType;
				if( userType != nullref ) return userType.ContentSize; // for structs

				var& fixedArray = AsFixedArray;
				if( fixedArray != nullref ) return fixedArray.InstanceSize;

				var& enumType = AsEnum;
				if( enumType != nullref ) return enumType.ElementType.InstanceSize;

				return 0;
			}
		}

		// How to align variable or field of this type
		public uint InstanceAlignment {
			get {
				var targetType = &this;
				while( targetType != null ) {
					if( ( targetType->Flags & ( TypeFlags.Reference | TypeFlags.Pointer | TypeFlags.Functor | TypeFlags.Delegate | TypeFlags.Class | TypeFlags.DynamicArray | TypeFlags.Interface ) ) != 0 ) return sizeof( void* );

					var& userType = targetType->AsUserType;
					if( userType != nullref ) return userType.ContentAlignment; // for structs

					var& fixedArrayType = targetType->AsFixedArray;
					if( fixedArrayType != nullref ) { targetType = &fixedArrayType.ElementType; continue; }

					break;
				}

				return 1;
			}
		}

		// pointer stride, may be greater than 'sizeof(T)' when alignment involved
		public uint InstanceStride {
			get { return Memory.GetStride( InstanceSize, InstanceAlignment ); }
		}

		public bool IsPlainDataType {
			get {
				if( ( Flags & ( TypeFlags.Enum | TypeFlags.Functor | TypeFlags.Pointer | TypeFlags.Reference ) ) != 0 ) return true;
				if( IsStruct ) return Postblit == null & Destructor == null;
				return false;
			}
		}

		internal static Attribute* GetAttribute( Attribute** attributes, uint attributesCount, [In] UserType& type ) {
			return Assembly.AttributeAccessor.GetAttribute( attributes, attributesCount, type );
		}

		public void FreeHolder( void* object ) {
			if( IsStruct ) {
				if( Destructor != null ) Destructor( object );
			}
			else if( ( Flags & ( TypeFlags.Class | TypeFlags.DynamicArray | TypeFlags.Delegate ) ) != 0 ) {
				cast<RuntimeObjectBase*>( object )->ReleaseReference();
			}
		}

		public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
		public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

		public Attribute* GetAttribute( [In] UserType& type ) {
			var& userType = AsUserType;
			if( userType != nullref ) return userType.GetAttribute( type );

			var& interfaceType = AsInterface;
			if( interfaceType != nullref ) return interfaceType.GetAttribute( type );

			var& delegateType = AsDelegate;
			if( delegateType != nullref ) return delegateType.GetAttribute( type );

			var& functorType = AsFunctor;
			if( functorType != nullref ) return functorType.GetAttribute( type );

			return null;
		}

		public Type& GetRefinedType( void* object ) {
			if( object != null ) {
				if( IsRuntimeObject )
					return bitcast<RuntimeObjectBase>( object ).GetType();
			}

			return this;
		}

		public T QueryInterface<T>( void* objectAddress ) {
			Assert.IsTrue( typeof( T ).IsInterface );
			return bitcast<T>( QueryInterface( objectAddress, typeof( T ) ) );
		}

		private System.Runtime.InterfaceInstance QueryInterface( void* objectAddress, System.Reflection.InterfaceType& @interface ) {
			if( this == nullref ) return default( InterfaceInstance );

			{
				var& userType = AsUserType;
				if( userType != nullref ) {
					var table = userType.QueryInterface( @interface );
					if( table == null ) return default( InterfaceInstance );

					var realType = &this;

					if( objectAddress != null && IsRuntimeObject ) {
						bitcast<RuntimeObjectBase>( objectAddress ).AddReference();
						realType = &bitcast<RuntimeObjectBase>( objectAddress ).GetType();
					}

					return new InterfaceInstance {
						Type = realType,
						Object = objectAddress,
						ImplementedMethodTable = table
					};
				}
			}

			if( objectAddress == null ) return default( InterfaceInstance );

			{
				var& interfaceType = AsInterface;
				if( interfaceType != nullref ) {
					var source = ( InterfaceInstance* ) objectAddress;
					if( source->Type == null | source->Object == null ) return default( InterfaceInstance );

					var& userType = source->Type->AsUserType;
					if( userType == nullref ) return default( InterfaceInstance );

					var table = userType.QueryInterface( @interface );
					if( table == null ) return default( InterfaceInstance );

					source->AddReference();

					return new InterfaceInstance {
						Type = source->Type,
						Object = source->Object,
						ImplementedMethodTable = table
					};
				}
			}

			return default( InterfaceInstance );
		}
	}
}