//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.Runtime;

namespace System.Reflection {
	public partial struct UserType : Type {
		public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
		public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

		public void** VirtualMethods;
		public UserType** Bases;

		public new Functors.Action<void*> Destructor, Postblit;

		public UserType& BaseType { get { return BaseCount > 0 ? *Bases[0] : nullref; } }

		public Field* FieldsStart;
		public Property* PropertiesStart;
		public IndexedProperty* IndexedPropertiesStart;
		public Event* EventsStart;
		public Method* MethodsStart;
		public TemplateMethodDefinition* TemplateMethodsStart;
		public Constant* ConstantsStart;

		public void* InterfaceMappings;

		public TemplateUserTypeDefinition& TemplateTypeDefinition;
		public Type** TemplateParameters;

		public Attribute** Attributes;
		public new bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
		public new Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
		public new T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

		/// virtual function table pointer unique for each class.
		/// each element is pointer to method start but first element is typeof(this)
		public int VirtualMethodCount;
		public int BaseCount;

		public int ContentSize;
		public uint ContentAlignment;
		// pointer stride, may be greater than 'sizeof(T)' when alignment involved
		public uint ContentStride {
			get { return Memory.ComputeStrideByAlign( ( uint ) ContentSize, ContentAlignment ); }
		}

		public uint InterfaceMappingCapacity;
		public int FieldCount, PropertyCount, IndexedPropertyCount, EventCount, MethodCount, TemplateMethodCount, ConstantCount;
		public int AttributeCount;

		public bool IsSealed { get { return ( Flags & TypeFlags.Sealed ) != 0; } }
		public bool IsAbstract { get { return ( Flags & TypeFlags.Abstract ) != 0; } }
		public bool IsStatic { get { return ( Flags & TypeFlags.Static ) != 0; } }

		public bool IsSubclassOf( [In] UserType& probablyBaseType ) {
			if( &probablyBaseType == null | &this == null ) return false;
			if( &probablyBaseType == &this ) return true;

			if( probablyBaseType.BaseCount >= BaseCount ) return false;

			return Bases[BaseCount - probablyBaseType.BaseCount - 1] == &probablyBaseType;
		}

		public bool IsOverriden( Method& method ) {
			var& declaringUserType = method.DeclaringUserType;
			if( declaringUserType == nullref || !declaringUserType.IsSubclassOf( this ) ) return false;
			return VirtualMethods[method.VirtualSlot] != method.Address;
		}


		private const int InterfaceHashCapacityThreshold = 32; /// Do not create hashtables with capacity smaller than 'InterfaceHashCapacityThreshold'

		public void** QueryInterface( [In] InterfaceType& interfaceType ) {
			if( interfaceType == nullref || interfaceType.FullQualifiedName == null || InterfaceMappingCapacity == 0 ) return null;

			if( InterfaceMappingCapacity <= InterfaceHashCapacityThreshold ) { /// Guided linear search of 'interfaceType'
				var interfaces = ( InterfaceType** ) InterfaceMappings;
				var implementations = ( void*** )( interfaces + InterfaceMappingCapacity );

				var start = 0;
				var end = ( int ) InterfaceMappingCapacity - 1;
				var median = ( start + end ) >> 1;
				var compareResult = interfaces[median]->FullQualifiedName.Hash.CompareTo( interfaceType.FullQualifiedName.Hash );

				if( compareResult == 0 ) {
					if( interfaces[median] == &interfaceType )
						return implementations[median];
				}
				else if( compareResult < 0 ) start = median + 1;
				else end = median - 1;

				for( var i = start; i <= end; ++i )
					if( interfaces[i] == &interfaceType )
						return implementations[i];

				// if( InterfaceMappingCapacity <= 256 / sizeof( InterfaceMappingArrayEntry ) ) { /// Linear search of 'interfaceType'
				// for( var i = 0U; i < InterfaceMappingCapacity; ++i )
				// 	if( interfaces[i] == &interfaceType )
				// 		return implementations[i];
				// }
				// else {
				// var start = 0;
				// var end = ( int ) InterfaceMappingCapacity - 1;

				// while( start <= end ) {
				// 	var median = ( start + end ) >> 1;

				// 	var compareResult = interfaces[median]->FullQualifiedName.Hash.CompareTo( interfaceType.FullQualifiedName.Hash );

				// 	if( compareResult == 0 )
				// 		if( interfaces[median] == &interfaceType )
				// 			return implementations[median];

				// 	if( compareResult < 0 ) start = median + 1;
				// 	else end = median - 1;
				// }
				// }
			}
			else { /// Hashtable lookup of 'interfaceType'
				var mappings = ( InterfaceMappingHashEntry* ) InterfaceMappings;

				var i = cast<int>( interfaceType.FullQualifiedName.Hash % InterfaceMappingCapacity );
				if( mappings[i].Interface == nullref || ( mappings[i].Interface.FullQualifiedName.Hash % InterfaceMappingCapacity ) != ( uint ) i ) return null;

				for( ; i >= 0; i = mappings[i].Next )
					if( mappings[i].Interface == interfaceType )
						return mappings[i].ImplementedMethods;
			}
			return null;
		}

		public struct InterfaceMappingHashEntry {
			public InterfaceType& Interface;
			public int Next;
			public void** ImplementedMethods;
		}

		[Alignment( Boundary = sizeof( intptr ) )]
		public partial struct Field {
			public static bool operator ==( thistype& left, thistype& right ) { return &left == &right; }
			public static bool operator !=( thistype& left, thistype& right ) { return &left != &right; }

			public bool IsStatic { get { return ( Flags & LocalFlags.Static ) != 0; } }
			public bool IsInstance { get { return ( Flags & LocalFlags.Static ) == 0; } }
			public bool IsVolatile { get { return ( Flags & LocalFlags.Volatile ) != 0; } }
			public bool IsConfigurable { get { return ( Flags & LocalFlags.Configurable ) != 0; } }
			public bool IsThreadLocal { get { return ( Flags & LocalFlags.ThreadLocal ) != 0; } }
			public bool IsReadOnly { get { return ( Flags & LocalFlags.ReadOnly ) != 0; } }
			public bool IsOverlapped { get { return ( Flags & LocalFlags.Overlapped ) != 0; } }

			public SbcsString Name;
			public UserType& DeclaringType;

			public Type& FieldType;

			public Attribute** Attributes;
			public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
			public Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
			public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

			[Flags]
			public enum LocalFlags : ushort {
				AccessKindMask = 0b111,
				Predefined,

				Static,
				Extern,
				Volatile,
				Configurable,
				ThreadLocal,
				FiberLocal,
				ReadOnly,
				Overlapped,
			}

			public AccessKind AccessKind { get { return cast<AccessKind>( Flags & LocalFlags.AccessKindMask ); } }

			/// for instance fields it contains offset of field
			public int ByteOffset { get { return ( int ) Address; } }
			public void* Address;
			public int AttributeCount;
			public LocalFlags Flags;

			public T GetValue<T>( void* target ) {
				Debug.Assert( FieldType.CheckAssignment( typeof( T ) ) );
				return *cast<T*>( cast<byte*>( target ) + ByteOffset );
			}

			public void SetValue<T>( void* target, T value ) {
				Debug.Assert( FieldType.CheckAssignment( typeof( T ) ) );
				*cast<T*>( cast<byte*>( target ) + ByteOffset ) = value;
			}
		}

		[Alignment( Boundary = sizeof( intptr ) )]
		public partial struct Method {
			public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
			public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

			public bool IsStatic { get { return ( Flags & LocalFlags.Static ) != 0; } }
			public bool IsInstance { get { return ( Flags & LocalFlags.Static ) == 0; } }
			public bool IsVirtual { get { return ( Flags & LocalFlags.Virtual ) != 0; } }
			public bool IsOverride { get { return ( Flags & LocalFlags.Override ) != 0; } }
			public bool IsAbstract { get { return ( Flags & LocalFlags.Abstract ) != 0; } }
			public bool IsSealed { get { return ( Flags & LocalFlags.Sealed ) != 0; } }
			public bool IsVararg { get { return ( Flags & LocalFlags.Vararg ) != 0; } }
			public bool IsExtern { get { return ( Flags & LocalFlags.Extern ) != 0; } }

			public void* Address;
			public SbcsString Name;

			public Type& DeclaringType;
			public UserType& DeclaringUserType { get { return ( Flags & LocalFlags.Interface ) == 0 ? *( UserType* ) &DeclaringType : nullref; } }
			public InterfaceType& DeclaringInterface { get { return ( Flags & LocalFlags.Interface ) != 0 ? *( InterfaceType* ) &DeclaringType : nullref; } }

			public Type& ReturnType;

			public ParameterInfo** Parameters;

			public TemplateMethodDefinition& TemplateMethodDefinition;
			public Type** TemplateParameters;

			public Attribute** Attributes;
			public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
			public Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
			public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

			public InteropServices.CallingConvention CallingConvention {
				get {
					var attribute = GetAttribute<InteropServices.CallingConventionAttribute>();
					if( attribute != null ) return attribute->Value;

					attribute = DeclaringType.GetAttribute<InteropServices.CallingConventionAttribute>();
					if( attribute != null ) return attribute->Value;

					return Runtime.InteropServices.CallingConvention.Default;
				}
			}

			[Flags]
			public enum LocalFlags : uint {
				AccessKindMask = 0b111,
				Predefined,

				Static,
				Sealed,
				Virtual,
				Override,
				Abstract,
				Vararg,
				Extern,
				Interface,

				ReadNone,
				ReadOnly,
				NoThrow,
				Extension,
			}

			public AccessKind AccessKind { get { return cast<AccessKind>( Flags & LocalFlags.AccessKindMask ); } }

			public int VirtualSlot;
			public int ParameterCount;
			public int AttributeCount;
			public LocalFlags Flags;
		}

		[Alignment( Boundary = sizeof( intptr ) )]
		public struct TemplateMethodDefinition : TemplatePartialDeclaration {
			public SbcsString Name;
			// public SbcsString* ParameterNames;
			public UserType& DeclaringType;

			[Flags]
			public enum LocalFlags : byte {
				AccessKindMask = 0b111,
				Predefined,

				Static,
			}

			public int ParameterCount;
			public LocalFlags Flags;
			public AccessKind AccessKind { get { return cast<AccessKind>( Flags & LocalFlags.AccessKindMask ); } }
		}

		[Alignment( Boundary = sizeof( intptr ) )]
		public partial struct Property {
			public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
			public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

			public SbcsString Name;

			public bool IsStatic { get { return _accessor.IsStatic; } }
			public bool IsInstance { get { return _accessor.IsInstance; } }
			public bool IsVirtual { get { return _accessor.IsVirtual; } }
			public bool IsAbstract { get { return _accessor.IsAbstract; } }
			public bool IsSealed { get { return _accessor.IsSealed; } }

			private Method& _accessor { get { return GetMethod != nullref ? GetMethod : SetMethod; } }

			public Type& DeclaringType { get { var accessor = &GetMethod ?? &SetMethod; return accessor != null ? accessor->DeclaringType : nullref; } }
			public UserType& DeclaringUserType { get { var accessor = &GetMethod ?? &SetMethod; return accessor != null ? accessor->DeclaringUserType : nullref; } }
			public InterfaceType& DeclaringInterface { get { var accessor = &GetMethod ?? &SetMethod; return accessor != null ? accessor->DeclaringInterface : nullref; } }

			public Method& GetMethod;
			public Method& SetMethod;

			public Type& PropertyType {
				get {
					return GetMethod != nullref ? GetMethod.ReturnType : SetMethod != nullref ? SetMethod.Parameters[0]->ParameterType : nullref;
				}
			}

			public Attribute** Attributes;
			public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
			public Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
			public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

			public T GetValue<T>( void* object ) {
				Debug.Assert( GetMethod != nullref );
				Debug.Assert( GetMethod.ReturnType.CheckAssignment( typeof( T ) ) );
				return bitcast<Functors.Func<void*, T>>( GetMethod.Address )( object );
			}

			public void SetValue<T>( void* object, T value ) {
				Debug.Assert( SetMethod != nullref );
				Debug.Assert( SetMethod.Parameters[0]->ParameterType.CheckAssignment( typeof( T ) ) );
				bitcast<Functors.Action<void*, T>>( SetMethod.Address )( object, value );
			}

			public void UnsafeGetValue( void* object, void* value ) {
				if( !Assert.IsTrue( GetMethod != nullref ) ) return;

				var& propertyType = PropertyType;
				switch( propertyType ) {
					case typeof( char ):
					case typeof( bool ):

					case typeof( sbyte ):
					case typeof( byte ):

					case typeof( short_littleendian ):
					case typeof( ushort_littleendian ):
					case typeof( short_bigendian ):
					case typeof( ushort_bigendian ):

					case typeof( int_littleendian ):
					case typeof( uint_littleendian ):
					case typeof( int_bigendian ):
					case typeof( uint_bigendian ):

					case typeof( long_littleendian ):
					case typeof( ulong_littleendian ):
					case typeof( long_bigendian ):
					case typeof( ulong_bigendian ):

					case typeof( float_littleendian ):
					case typeof( double_littleendian ):
					case typeof( float_bigendian ):
					case typeof( double_bigendian ):
						// for passing via registers
						if( propertyType == typeof( float ) ) {
							*( float* ) value = bitcast<Functors.Func<void*, float>>( GetMethod.Address )( object );
							break;
						}
						// for passing via registers
						else if( propertyType == typeof( double ) ) {
							*( double* ) value = bitcast<Functors.Func<void*, double>>( GetMethod.Address )( object );
							break;
						}

						switch( propertyType.InstanceSize ) {
							case 1: *( byte* ) value = bitcast<Functors.Func<void*, byte>>( GetMethod.Address )( object ); break;
							case 2: *( ushort* ) value = bitcast<Functors.Func<void*, ushort>>( GetMethod.Address )( object ); break;
							case 4: *( uint* ) value = bitcast<Functors.Func<void*, uint>>( GetMethod.Address )( object ); break;
							case 8: *( ulong* ) value = bitcast<Functors.Func<void*, ulong>>( GetMethod.Address )( object ); break;
							default: Assert.NotImplemented( string.Format( "propertyType.InstanceSize={0}", propertyType.InstanceSize ) ); break;
						} break;

					case typeof( void* ):
					case typeof( Guid ):
					case typeof( SbcsString ):
					case typeof( Utf8String ):
					case typeof( Utf16String ):
					case typeof( Utf32String ):
						bitcast<Functors.Action<void*, void*>>( GetMethod.Address )( object, value );
						break;

					default: {
							if( propertyType.IsEnum )
								goto case typeof( byte );

							var& propertyUserType = propertyType.AsUserType;
							if( propertyUserType != nullref ) {
								if( propertyUserType.IsDefined( typeof( PrimitiveTypeAttribute ) ) )
									goto case typeof( byte );

								if( propertyType.IsClass )
									goto case typeof( SbcsString );

								if( propertyType.IsStruct )
									goto case typeof( Guid );
							}

							if( propertyType.IsDelegate | propertyType.IsDynamicArray )
								goto case typeof( SbcsString );

							if( propertyType.IsPointer | propertyType.IsFunctor )
								goto case typeof( void* );

							Assert.NotImplemented( string.Format( "propertyType={0}", propertyType.FullQualifiedName ) );
						} break;
				}
			}

			public void UnsafeSetValue( void* object, void* value ) {
				if( !Assert.IsTrue( SetMethod != nullref ) ) return;

				var& propertyType = PropertyType;
				switch( propertyType ) {
					case typeof( char ):
					case typeof( bool ):

					case typeof( sbyte ):
					case typeof( byte ):

					case typeof( short_littleendian ):
					case typeof( ushort_littleendian ):
					case typeof( short_bigendian ):
					case typeof( ushort_bigendian ):

					case typeof( int_littleendian ):
					case typeof( uint_littleendian ):
					case typeof( int_bigendian ):
					case typeof( uint_bigendian ):

					case typeof( long_littleendian ):
					case typeof( ulong_littleendian ):
					case typeof( long_bigendian ):
					case typeof( ulong_bigendian ):

					case typeof( float_littleendian ):
					case typeof( double_littleendian ):
					case typeof( float_bigendian ):
					case typeof( double_bigendian ):
						// for passing via registers
						if( propertyType == typeof( float ) ) {
							bitcast<Functors.Action<void*, float>>( SetMethod.Address )( object, *( float* ) value );
							break;
						}
						// for passing via registers
						else if( propertyType == typeof( double ) ) {
							bitcast<Functors.Action<void*, double>>( SetMethod.Address )( object, *( double* ) value );
							break;
						}

						switch( propertyType.InstanceSize ) {
							case 1: bitcast<Functors.Action<void*, byte>>( SetMethod.Address )( object, *( byte* ) value ); break;
							case 2: bitcast<Functors.Action<void*, ushort>>( SetMethod.Address )( object, *( ushort* ) value ); break;
							case 4: bitcast<Functors.Action<void*, uint>>( SetMethod.Address )( object, *( uint* ) value ); break;
							case 8: bitcast<Functors.Action<void*, ulong>>( SetMethod.Address )( object, *( ulong* ) value ); break;
							default: Assert.NotImplemented( string.Format( "propertyType.InstanceSize={0}", propertyType.InstanceSize ) ); break;
						} break;

					case typeof( void* ):
					case typeof( SbcsString ):
					case typeof( Utf8String ):
					case typeof( Utf16String ):
					case typeof( Utf32String ):
						bitcast<Functors.Action<void*, void*>>( SetMethod.Address )( object, *( void** ) value );
						break;

					case typeof( Guid ):
						bitcast<Functors.Action<void*, void*>>( SetMethod.Address )( object, value );
						break;

					default: {
							if( propertyType.IsEnum )
								goto case typeof( byte );

							var& propertyUserType = propertyType.AsUserType;
							if( propertyUserType != nullref ) {
								if( propertyUserType.IsDefined( typeof( PrimitiveTypeAttribute ) ) )
									goto case typeof( byte );

								if( propertyType.IsClass )
									goto case typeof( SbcsString );

								if( propertyType.IsStruct )
									goto case typeof( Guid );
							}

							if( propertyType.IsDelegate | propertyType.IsDynamicArray )
								goto case typeof( SbcsString );

							if( propertyType.IsPointer | propertyType.IsFunctor )
								goto case typeof( void* );

							Assert.NotImplemented( string.Format( "propertyType={0}", propertyType.FullQualifiedName ) );
						} break;
				}
			}

			public int AttributeCount;
		}

		[Alignment( Boundary = sizeof( intptr ) )]
		public partial struct IndexedProperty {
			public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
			public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

			public SbcsString Name;

			public Type& DeclaringType { get { var accessor = &GetMethod ?? &SetMethod; return accessor != null ? accessor->DeclaringType : nullref; } }
			public UserType& DeclaringUserType { get { var accessor = &GetMethod ?? &SetMethod; return accessor != null ? accessor->DeclaringUserType : nullref; } }
			public InterfaceType& DeclaringInterface { get { var accessor = &GetMethod ?? &SetMethod; return accessor != null ? accessor->DeclaringInterface : nullref; } }

			public Method& GetMethod;
			public Method& SetMethod;

			public Type& PropertyType {
				get {
					return GetMethod != nullref ? GetMethod.ReturnType : SetMethod != nullref ? SetMethod.Parameters[0]->ParameterType : nullref;
				}
			}

			public Attribute** Attributes;
			public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
			public Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
			public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

			public int AttributeCount;
		}

		[Alignment( Boundary = sizeof( intptr ) )]
		public partial struct Event {
			public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
			public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

			public SbcsString Name;

			public Type& DeclaringType { get { var accessor = &AddMethod ?? &RemoveMethod; return accessor != null ? accessor->DeclaringType : nullref; } }
			public UserType& DeclaringUserType { get { var accessor = &AddMethod ?? &RemoveMethod; return accessor != null ? accessor->DeclaringUserType : nullref; } }
			public InterfaceType& DeclaringInterface { get { var accessor = &AddMethod ?? &RemoveMethod; return accessor != null ? accessor->DeclaringInterface : nullref; } }

			public Method& AddMethod;
			public Method& RemoveMethod;

			public Type& EventType { get { var accessor = &AddMethod ?? &RemoveMethod; return accessor != null ? accessor->Parameters[0]->ParameterType : nullref; } }

			public Attribute** Attributes;
			public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
			public Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
			public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

			public int AttributeCount;
		}

		[Alignment( Boundary = sizeof( intptr ) )]
		public partial struct Constant {
			public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
			public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

			public SbcsString Name;
			public UserType& DeclaringType;
			public Type& ConstantType;

			public Attribute** Attributes;
			public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
			public Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
			public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

			[Flags]
			public enum LocalFlags : byte {
				AccessKindMask = 0b111,
				Predefined,
			}

			public int AttributeCount;
			public void* Value;

			public LocalFlags Flags;
			public AccessKind AccessKind { get { return cast<AccessKind>( Flags & LocalFlags.AccessKindMask ); } }
		}
	}
}