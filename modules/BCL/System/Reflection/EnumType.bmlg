//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.Runtime;

namespace System.Reflection {
	public partial struct EnumType : Type {
		public struct ElementAttribute {
			public uint AttributeCount;
			public Attribute** Attributes;
			public bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
			public Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
			public T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }
		}

		private EnumType() { }
		public static bool operator ==( [In] thistype& left, [In] thistype& right ) { return &left == &right; }
		public static bool operator !=( [In] thistype& left, [In] thistype& right ) { return &left != &right; }

		public Type& ElementType;

		public void* Values; // stored in sorted order
		public SbcsString* Names;

		public void* SortedIndices;

		// Generated for every enum which contains attributed elements. Names and attributes are separated from each other to:
		// 1. compact metadata size
		// 2. improve data locality
		// 3. provide efficient lookup
		public ElementAttribute* ElementAttributes;

		public Attribute** Attributes;
		public new bool IsDefined( [In] UserType& type ) { return GetAttribute( type ) != null; }
		public new Attribute* GetAttribute( [In] UserType& type ) { return GetAttribute( Attributes, AttributeCount, type ); }
		public new T* GetAttribute<T>() { return ( T* ) GetAttribute( typeof( T ) ); }

		public uint AttributeCount;
		public uint ElementCount;

		public const string FlagEnumElementsSeparator = " | ";

		public byte GetUInt8Value( uint index ) { return GetValueImpl<byte>( index ); }
		public ushort GetUInt16Value( uint index ) { return GetValueImpl<ushort>( index ); }
		public uint GetUInt32Value( uint index ) { return GetValueImpl<uint>( index ); }
		public ulong GetUInt64Value( uint index ) { return GetValueImpl<ulong>( index ); }

		public bool IsValid( byte value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<byte>( value ) : GetIndex( value ) != uint.MaxValue; }
		public bool IsValid( ushort value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<ushort>( value ) : GetIndex( value ) != uint.MaxValue; }
		public bool IsValid( uint value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<uint>( value ) : GetIndex( value ) != uint.MaxValue; }
		public bool IsValid( ulong value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<ulong>( value ) : GetIndex( value ) != uint.MaxValue; }

		public bool IsValid( sbyte value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<byte>( ( byte ) value ) : GetIndex( value ) != uint.MaxValue; }
		public bool IsValid( short value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<ushort>( ( ushort ) value ) : GetIndex( value ) != uint.MaxValue; }
		public bool IsValid( int value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<uint>( ( uint ) value ) : GetIndex( value ) != uint.MaxValue; }
		public bool IsValid( long value ) { return IsDefined( typeof( FlagsAttribute ) ) ? IsValidFlagsImpl<ulong>( ( ulong ) value ) : GetIndex( value ) != uint.MaxValue; }

		public uint GetIndex( byte value ) { return GetIndexImpl<byte>( value ); }
		public uint GetIndex( ushort value ) { return GetIndexImpl<ushort>( value ); }
		public uint GetIndex( uint value ) { return GetIndexImpl<uint>( value ); }
		public uint GetIndex( ulong value ) { return GetIndexImpl<ulong>( value ); }

		public uint GetIndex( sbyte value ) { return GetIndexImpl<sbyte>( value ); }
		public uint GetIndex( short value ) { return GetIndexImpl<short>( value ); }
		public uint GetIndex( int value ) { return GetIndexImpl<int>( value ); }
		public uint GetIndex( long value ) { return GetIndexImpl<long>( value ); }

		public SbcsString ToSbcsString( byte value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<byte>( value ) : ToSbcsStringNonFlagsImpl<byte>( value ); }
		public SbcsString ToSbcsString( ushort value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<ushort>( value ) : ToSbcsStringNonFlagsImpl<ushort>( value ); }
		public SbcsString ToSbcsString( uint value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<uint>( value ) : ToSbcsStringNonFlagsImpl<uint>( value ); }
		public SbcsString ToSbcsString( ulong value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<ulong>( value ) : ToSbcsStringNonFlagsImpl<ulong>( value ); }

		public SbcsString ToSbcsString( sbyte value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<byte>( ( byte ) value ) : ToSbcsStringNonFlagsImpl<sbyte>( value ); }
		public SbcsString ToSbcsString( short value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<ushort>( ( ushort ) value ) : ToSbcsStringNonFlagsImpl<short>( value ); }
		public SbcsString ToSbcsString( int value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<uint>( ( uint ) value ) : ToSbcsStringNonFlagsImpl<int>( value ); }
		public SbcsString ToSbcsString( long value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToSbcsStringFlagsImpl<ulong>( ( ulong ) value ) : ToSbcsStringNonFlagsImpl<long>( value ); }

		public string ToString( byte value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<byte>( value ) : ToStringNonFlagsImpl<byte>( value ); }
		public string ToString( ushort value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<ushort>( value ) : ToStringNonFlagsImpl<ushort>( value ); }
		public string ToString( uint value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<uint>( value ) : ToStringNonFlagsImpl<uint>( value ); }
		public string ToString( ulong value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<ulong>( value ) : ToStringNonFlagsImpl<ulong>( value ); }

		public string ToString( sbyte value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<byte>( ( byte ) value ) : ToStringNonFlagsImpl<sbyte>( value ); }
		public string ToString( short value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<ushort>( ( ushort ) value ) : ToStringNonFlagsImpl<short>( value ); }
		public string ToString( int value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<uint>( ( uint ) value ) : ToStringNonFlagsImpl<int>( value ); }
		public string ToString( long value ) { return IsDefined( typeof( FlagsAttribute ) ) ? ToStringFlagsImpl<ulong>( ( ulong ) value ) : ToStringNonFlagsImpl<long>( value ); }

		public Utf8String ToUtf8String( byte value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<byte>( builder.Value, value ); else ToStringNonFlagsImpl<byte>( builder.Value, value ); return builder.Value.ToUtf8String(); } }
		public Utf8String ToUtf8String( ushort value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ushort>( builder.Value, value ); else ToStringNonFlagsImpl<ushort>( builder.Value, value ); return builder.Value.ToUtf8String(); } }
		public Utf8String ToUtf8String( uint value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<uint>( builder.Value, value ); else ToStringNonFlagsImpl<uint>( builder.Value, value ); return builder.Value.ToUtf8String(); } }
		public Utf8String ToUtf8String( ulong value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ulong>( builder.Value, value ); else ToStringNonFlagsImpl<ulong>( builder.Value, value ); return builder.Value.ToUtf8String(); } }

		public Utf8String ToUtf8String( sbyte value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<byte>( builder.Value, ( byte ) value ); else ToStringNonFlagsImpl<sbyte>( builder.Value, value ); return builder.Value.ToUtf8String(); } }
		public Utf8String ToUtf8String( short value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ushort>( builder.Value, ( ushort ) value ); else ToStringNonFlagsImpl<short>( builder.Value, value ); return builder.Value.ToUtf8String(); } }
		public Utf8String ToUtf8String( int value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<uint>( builder.Value, ( uint ) value ); else ToStringNonFlagsImpl<int>( builder.Value, value ); return builder.Value.ToUtf8String(); } }
		public Utf8String ToUtf8String( long value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ulong>( builder.Value, ( ulong ) value ); else ToStringNonFlagsImpl<long>( builder.Value, value ); return builder.Value.ToUtf8String(); } }

		public Utf32String ToUtf32String( byte value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<byte>( builder.Value, value ); else ToStringNonFlagsImpl<byte>( builder.Value, value ); return builder.Value.ToUtf32String(); } }
		public Utf32String ToUtf32String( ushort value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ushort>( builder.Value, value ); else ToStringNonFlagsImpl<ushort>( builder.Value, value ); return builder.Value.ToUtf32String(); } }
		public Utf32String ToUtf32String( uint value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<uint>( builder.Value, value ); else ToStringNonFlagsImpl<uint>( builder.Value, value ); return builder.Value.ToUtf32String(); } }
		public Utf32String ToUtf32String( ulong value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ulong>( builder.Value, value ); else ToStringNonFlagsImpl<ulong>( builder.Value, value ); return builder.Value.ToUtf32String(); } }

		public Utf32String ToUtf32String( sbyte value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<byte>( builder.Value, ( byte ) value ); else ToStringNonFlagsImpl<sbyte>( builder.Value, value ); return builder.Value.ToUtf32String(); } }
		public Utf32String ToUtf32String( short value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ushort>( builder.Value, ( ushort ) value ); else ToStringNonFlagsImpl<short>( builder.Value, value ); return builder.Value.ToUtf32String(); } }
		public Utf32String ToUtf32String( int value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<uint>( builder.Value, ( uint ) value ); else ToStringNonFlagsImpl<int>( builder.Value, value ); return builder.Value.ToUtf32String(); } }
		public Utf32String ToUtf32String( long value ) { using( var builder = StringBuilder.CachedBuilders.PopScoped() ) { if( IsDefined( typeof( FlagsAttribute ) ) ) ToStringFlagsImpl<ulong>( builder.Value, ( ulong ) value ); else ToStringNonFlagsImpl<long>( builder.Value, value ); return builder.Value.ToUtf32String(); } }

		public bool TryParse( CStringSpan name, void* result ) {
			var index = BinarySearch( name );
			if( index == uint.MaxValue ) return false;

			switch( ElementType.InstanceSize ) {
				case 1: *( byte* ) result = cast<byte*>( Values )[index]; break;
				case 2: *( ushort* ) result = cast<ushort*>( Values )[index]; break;
				case 4: *( uint* ) result = cast<uint*>( Values )[index]; break;
				case 8: *( ulong* ) result = cast<ulong*>( Values )[index]; break;
			}

			return true;
		}

		public bool TryParse( CUtf8StringSpan name, void* result ) { return TryParse( ( CStringSpan ) name, result ); }
		public bool TryParse( CUtf16StringSpan name, void* result ) { return TryParse( SbcsString.FromUtf16( name ), result ); }
		public bool TryParse( CUtf32StringSpan name, void* result ) { return TryParse( SbcsString.FromUtf32( name ), result ); }
	}
}