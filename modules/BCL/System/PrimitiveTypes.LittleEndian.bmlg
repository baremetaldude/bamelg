//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Globalization;
using System.Text;

namespace System {
	public sealed struct LittleEndianChar16 {
		public const char MaxValue = ( char ) 0xFFFF;
		public const char MinValue = ( char ) 0;

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatCharSbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatCharUtf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatCharUtf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatCharUtf32( this ); }

		public uint GetHashCode() { return this; }
		public int CompareTo( char value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public bool IsSurrogate { get { return ( this - 0xD800 ) < 0x800; } }
		public bool IsHighSurrogate { get { return this >= 0xD800 && this < 0xDC00; } }
		public bool IsLowSurrogate { get { return this >= 0xDC00 && this < 0xE000; } }

		public UnicodeCategory Category { get { return ( UnicodeCategory ) Unicode.CategoryData[this]; } }
		public bool IsControl { get { return Category == UnicodeCategory.Control; } }
		public bool IsDigit { get { return Category == UnicodeCategory.DecimalDigitNumber; } }
		public bool IsLetter { get { return Category <= UnicodeCategory.OtherLetter; } }
		public bool IsLetterOrDigit { get { return IsDigit | IsLetter; } }
		public bool IsLower { get { return Category == UnicodeCategory.LowercaseLetter; } }
		public bool IsNumber { get { return Category >= UnicodeCategory.DecimalDigitNumber && Category <= UnicodeCategory.OtherNumber; } }
		public bool IsPunctuation { get { return Category >= UnicodeCategory.ConnectorPunctuation && Category <= UnicodeCategory.OtherPunctuation; } }
		public bool IsSeparator { get { return Category >= UnicodeCategory.SpaceSeparator && Category <= UnicodeCategory.ParagraphSeparator; } }
		public bool IsSymbol { get { return Category >= UnicodeCategory.MathSymbol && Category <= UnicodeCategory.OtherSymbol; } }
		public bool IsUpper { get { return Category == UnicodeCategory.UppercaseLetter; } }

		public bool IsAscii { get { return this <= '\x007F'; } }
		public bool IsDigitAscii { get { return this >= '0' && this <= '9'; } }

		public bool IsWhiteSpace {
			get {
				switch( this ) {
					case ' ':
					case '\t':
					case '\n':
					case '\v':
					case '\f':
					case '\r':
					case '\x0085':
					case '\x00A0':
						return true;

					case '\x1680':
					case '\x180E':
					case '\x2000':
					case '\x2001':
					case '\x2002':
					case '\x2003':
					case '\x2004':
					case '\x2005':
					case '\x2006':
					case '\x2007':
					case '\x2008':
					case '\x2009':
					case '\x200A':
					case '\x2028':
					case '\x2029':
					case '\x202F':
					case '\x205F':
					case '\x3000':
						return true;
				}

				return false;
			}
		}

		public static bool IsSurrogatePair( char highSurrogate, char lowSurrogate ) {
			return highSurrogate >= '\xD800' & highSurrogate <= '\xDBFF' & lowSurrogate >= '\xDC00' & lowSurrogate <= '\xDFFF';
		}

		public static char ToLower( char value ) {
			var code = ( ushort ) value;

			if( code <= 0x24CF ) return ( char ) Unicode.ToLowerDataLow[code];
			if( code >= 0xFF21 ) return ( char ) Unicode.ToLowerDataHigh[code - 0xFF21];

			return value;
		}

		public static char ToUpper( char value ) {
			var code = ( ushort ) value;

			if( code <= 0x24E9 ) return ( char ) Unicode.ToUpperDataLow[code];
			if( code >= 0xFF21 ) return ( char ) Unicode.ToUpperDataHigh[code - 0xFF21];

			return value;
		}
	}

	public sealed partial struct LittleEndianInt16 {
		public const short MaxValue = 0x7FFF;
		public const short MinValue = ~MaxValue;

		public uint GetHashCode() { return ( ushort ) this; }

		public static short Parse( CString input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }
		public static short Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.ByteLength ); }
		public static short Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }
		public static short Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }

		public static short Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }
		public static short Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.ByteLength ); }
		public static short Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }
		public static short Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }

		public static short Parse( SbcsString input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }
		public static short Parse( Utf8String input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.ByteLength ); }
		public static short Parse( Utf16String input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }
		public static short Parse( Utf32String input ) { return PrimitiveTypesParser.ParseInt16( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, short& value ) { return PrimitiveTypesParser.TryParseInt16( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, short& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt16( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, short& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt16( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, short& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt16( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] short& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public short ToSigned() { return this; }
		public ushort ToUnsigned() { Assert.IsTrue( this >= 0 ); return ( ushort ) this; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatInt16Sbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatInt16Utf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatInt16Utf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatInt16Utf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatInt16Sbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatInt16Utf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatInt16Utf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatInt16Utf32( this, format ); }
	}

	public sealed partial struct LittleEndianUInt16 {
		public const ushort MaxValue = 0xFFFF;
		public const ushort MinValue = ~MaxValue;

		public uint GetHashCode() { return ( uint ) this; }

		public static ushort Parse( CString input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }
		public static ushort Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.ByteLength ); }
		public static ushort Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }
		public static ushort Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }

		public static ushort Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }
		public static ushort Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.ByteLength ); }
		public static ushort Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }
		public static ushort Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }

		public static ushort Parse( SbcsString input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }
		public static ushort Parse( Utf8String input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.ByteLength ); }
		public static ushort Parse( Utf16String input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }
		public static ushort Parse( Utf32String input ) { return PrimitiveTypesParser.ParseUInt16( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( SbcsString input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CString input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, ushort& value ) { return PrimitiveTypesParser.TryParseUInt16( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, ushort& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt16( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, ushort& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt16( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, ushort& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt16( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public short ToSigned() { Assert.IsTrue( this <= short.MaxValue ); return ( short ) this; }
		public ushort ToUnsigned() { return this; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatUInt16Sbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatUInt16Utf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatUInt16Utf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatUInt16Utf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatUInt16Sbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatUInt16Utf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatUInt16Utf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatUInt16Utf32( this, format ); }
	}

	public sealed partial struct LittleEndianInt32 {
		public const int MaxValue = 0x7FFFFFFF;
		public const int MinValue = ~MaxValue;

		public uint GetHashCode() { return ( uint ) this; }

		public static int Parse( CString input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }
		public static int Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.ByteLength ); }
		public static int Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }
		public static int Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }

		public static int Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }
		public static int Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.ByteLength ); }
		public static int Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }
		public static int Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }

		public static int Parse( SbcsString input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }
		public static int Parse( Utf8String input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.ByteLength ); }
		public static int Parse( Utf16String input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }
		public static int Parse( Utf32String input ) { return PrimitiveTypesParser.ParseInt32( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, int& value ) { return PrimitiveTypesParser.TryParseInt32( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, int& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt32( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, int& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt32( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, int& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt32( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public int ToSigned() { return this; }
		public uint ToUnsigned() { Assert.IsTrue( this >= 0 ); return ( uint ) this; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatInt32Sbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatInt32Utf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatInt32Utf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatInt32Utf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatInt32Sbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatInt32Utf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatInt32Utf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatInt32Utf32( this, format ); }
	}

	public sealed partial struct LittleEndianUInt32 {
		public const uint MaxValue = 0xFFFFFFFF;
		public const uint MinValue = ~MaxValue;

		public uint GetHashCode() { return ( uint ) this; }

		public static uint Parse( CString input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }
		public static uint Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.ByteLength ); }
		public static uint Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }
		public static uint Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }

		public static uint Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }
		public static uint Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.ByteLength ); }
		public static uint Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }
		public static uint Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }

		public static uint Parse( SbcsString input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }
		public static uint Parse( Utf8String input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.ByteLength ); }
		public static uint Parse( Utf16String input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }
		public static uint Parse( Utf32String input ) { return PrimitiveTypesParser.ParseUInt32( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, uint& value ) { return PrimitiveTypesParser.TryParseUInt32( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, uint& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt32( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, uint& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt32( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, uint& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt32( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public int ToSigned() { Assert.IsTrue( this <= int.MaxValue ); return ( int ) this; }
		public uint ToUnsigned() { return this; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatUInt32Sbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatUInt32Utf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatUInt32Utf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatUInt32Utf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatUInt32Sbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatUInt32Utf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatUInt32Utf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatUInt32Utf32( this, format ); }
	}

	public sealed partial struct LittleEndianInt64 {
		public const long MaxValue = 0x7FFFFFFFFFFFFFFF;
		public const long MinValue = ~MaxValue;

		public uint GetHashCode() { return BitOperations.CombineHashCodes( cast<uint>( this >> 32 ), ( uint ) this ); }

		public static long Parse( CString input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }
		public static long Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.ByteLength ); }
		public static long Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }
		public static long Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }

		public static long Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }
		public static long Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.ByteLength ); }
		public static long Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }
		public static long Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }

		public static long Parse( SbcsString input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }
		public static long Parse( Utf8String input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.ByteLength ); }
		public static long Parse( Utf16String input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }
		public static long Parse( Utf32String input ) { return PrimitiveTypesParser.ParseInt64( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, long& value ) { return PrimitiveTypesParser.TryParseInt64( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, long& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt64( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, long& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt64( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, long& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt64( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public long ToSigned() { return this; }
		public ulong ToUnsigned() { Assert.IsTrue( this >= 0 ); return ( ulong ) this; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatInt64Sbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatInt64Utf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatInt64Utf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatInt64Utf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatInt64Sbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatInt64Utf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatInt64Utf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatInt64Utf32( this, format ); }
	}

	public sealed partial struct LittleEndianUInt64 {
		public const ulong MaxValue = 0xFFFFFFFFFFFFFFFF;
		public const ulong MinValue = ~MaxValue;

		public uint GetHashCode() { return BitOperations.CombineHashCodes( cast<uint>( this >> 32 ), ( uint ) this ); }

		public static ulong Parse( CString input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }
		public static ulong Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.ByteLength ); }
		public static ulong Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }
		public static ulong Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }

		public static ulong Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }
		public static ulong Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.ByteLength ); }
		public static ulong Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }
		public static ulong Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }

		public static ulong Parse( SbcsString input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }
		public static ulong Parse( Utf8String input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.ByteLength ); }
		public static ulong Parse( Utf16String input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }
		public static ulong Parse( Utf32String input ) { return PrimitiveTypesParser.ParseUInt64( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, ulong& value ) { return PrimitiveTypesParser.TryParseUInt64( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, ulong& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt64( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, ulong& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt64( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, ulong& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt64( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public long ToSigned() { Assert.IsTrue( this <= long.MaxValue ); return ( long ) this; }
		public ulong ToUnsigned() { return this; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatUInt64Sbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatUInt64Utf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatUInt64Utf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatUInt64Utf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatUInt64Sbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatUInt64Utf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatUInt64Utf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatUInt64Utf32( this, format ); }
	}

	public sealed partial struct LittleEndianInt128 {
	}

	public sealed partial struct LittleEndianUInt128 {
	}

	// public sealed partial struct LittleEndianHalfIEEE754 {
	// 	public const ushort SignMask = 0x8000;
	// 	public const ushort ExponentMask = 0x7C00;
	// 	public const ushort SignificandMask = 0x03FF;

	// 	public const short ExponentBits = 5;
	// 	public const short SignificandBits = 10;
	// 	public const short ExponentBias = 15;

	// 	public const float16 NaN = bitcast<float16>( 0xFE00 );
	// 	public const float16 PositiveNaN = bitcast<float16>( 0x7E00 );
	// 	public const float16 NegativeNaN = bitcast<float16>( 0xFE00 );

	// 	public const float16 MaxValue = bitcast<float16>( 0x7BFF );
	// 	public const float16 MinValue = bitcast<float16>( 0xFBFF );
	// 	public const float16 PositiveInfinity = bitcast<float16>( 0x7C00 );
	// 	public const float16 NegativeInfinity = bitcast<float16>( 0xFC00 );

	// 	private ushort_littleendian _raw { get { return bitcast<ushort_littleendian>( this ); } }
	// 	private short_littleendian _rawSigned { get { return bitcast<short_littleendian>( this ); } }

	// 	public bool IsNegative {
	// 		get { return _rawSigned < 0; }
	// 	}

	// 	public short NormalizedSignificand {
	// 		get { return ( short )( ( _raw & SignificandMask ) | ( SignificandMask + 1 ) ); }
	// 	}

	// 	public short Exponent {
	// 		get { return BiasedExponent - ExponentBias; }
	// 	}

	// 	public short BiasedExponent {
	// 		get { return ( short )( ( _raw & ExponentMask ) >> SignificandBits ); }
	// 	}

	// 	public bool IsSpecial {
	// 		get { return ( _raw & ~SignMask ) >= ExponentMask; }
	// 	}

	// 	public bool IsNaN {
	// 		get { return ( _raw & ~SignMask ) > ExponentMask; }
	// 	}

	// 	public bool IsInfinity {
	// 		get { return ( _raw & ExponentMask ) == ExponentMask; }
	// 	}

	// 	public bool IsPositiveInfinity {
	// 		get { return _raw == ExponentMask; }
	// 	}

	// 	public bool IsNegativeInfinity {
	// 		get { return _raw == ( ExponentMask | SignMask ); }
	// 	}

	// 	public bool IsSubnormal {
	// 		get {
	// 			var value = _raw & ~SignMask;
	// 			return ( value - 1 ) < SignificandMask;
	// 		}
	// 	}

	// 	public bool IsSubnormalOrZero {
	// 		get { return ( _raw & ExponentMask ) == 0; }
	// 	}


	// 	public bool MayHaveFractionalPart {
	// 		get { return Exponent < SignificandBits; }
	// 	}

	// 	public uint GetHashCode() { return ( ushort ) _raw; }

	// 	public static bool AreEqual( thistype left, thistype right, short tolerance ) {
	// 		short value1 = left._rawSigned;
	// 		short value2 = right._rawSigned;

	// 		if( value1 < 0 ) value1 = short.MinValue - value1;
	// 		if( value2 < 0 ) value1 = short.MinValue - value2;

	// 		return Math.Abs( value1 - value2 ) <= tolerance;
	// 	}
	// }

	public sealed partial struct LittleEndianSingleIEEE754 {
		public const uint SignMask = 0x80000000;
		public const uint ExponentMask = 0x7F800000;
		public const uint SignificandMask = 0x007FFFFF;

		public const byte ExponentBits = 8;
		public const byte SignificandBits = 23;
		public const byte ExponentBias = 127;

		public const float NaN = bitcast<float>( 0xFFC00000U );

		public const float MaxValue = bitcast<float>( 0x7F7FFFFFU );
		public const float MinValue = bitcast<float>( 0xFF7FFFFFU );
		public const float PositiveInfinity = bitcast<float>( 0x7F800000U );
		public const float NegativeInfinity = bitcast<float>( 0xFF800000U );

		private uint_littleendian _raw { get { return bitcast<uint_littleendian>( this ); } }
		private int_littleendian _rawSigned { get { return bitcast<int_littleendian>( this ); } }

		public bool IsNegative {
			get { return _rawSigned < 0; }
		}

		public uint Significand {
			get { return _raw & SignificandMask; }
		}

		public uint NormalizedSignificand {
			get { return ( _raw & SignificandMask ) | ( SignificandMask + 1 ); }
		}

		public short Exponent {
			get { return ( short ) BiasedExponent - ExponentBias; }
		}

		public byte BiasedExponent {
			get { return ( byte )( _raw >> SignificandBits ); }
		}

		public bool IsSpecial {
			get { return ( _raw & ~SignMask ) >= ExponentMask; }
		}

		public bool IsNaN {
			get { return ( _raw & ~SignMask ) > ExponentMask; }
		}

		public bool IsInfinity {
			get { return ( _raw & ExponentMask ) == ExponentMask; }
		}

		public bool IsPositiveInfinity {
			get { return _raw == ExponentMask; }
		}

		public bool IsNegativeInfinity {
			get { return _raw == ( ExponentMask | SignMask ); }
		}

		public bool IsSubnormal {
			get {
				var value = _raw & ~SignMask;
				return ( value - 1 ) < SignificandMask;
			}
		}

		public bool IsSubnormalOrZero {
			get { return ( _raw & ExponentMask ) == 0; }
		}

		public bool IsZero {
			get { return ( _raw & ~SignMask ) == 0; }
		}

		public bool IsPositiveZero {
			get { return _raw == 0; }
		}

		public bool IsNegativeZero {
			get { return _raw == SignMask; }
		}

		public bool MayHaveFractionalPart {
			get { return Exponent < SignificandBits; }
		}

		public uint GetHashCode() { return _raw; }

		public static bool AreEqual( thistype left, thistype right, int tolerance ) {
			int value1 = left._rawSigned;
			int value2 = right._rawSigned;

			if( value1 < 0 ) value1 = int.MinValue - value1;
			if( value2 < 0 ) value1 = int.MinValue - value2;

			return Math.Abs( value1 - value2 ) <= tolerance;
		}

		public static float Parse( CString input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }
		public static float Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.ByteLength ); }
		public static float Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }
		public static float Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }

		public static float Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }
		public static float Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.ByteLength ); }
		public static float Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }
		public static float Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }

		public static float Parse( SbcsString input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }
		public static float Parse( Utf8String input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.ByteLength ); }
		public static float Parse( Utf16String input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }
		public static float Parse( Utf32String input ) { return PrimitiveTypesParser.ParseSingleIEEE754( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, float& value ) { return PrimitiveTypesParser.TryParseSingleIEEE754( input.GetChars(), input.Length, value ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatFloatingPointSbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatFloatingPointUtf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatFloatingPointUtf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatFloatingPointUtf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointSbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointUtf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointUtf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointUtf32( this, format ); }
	}

	public sealed partial struct LittleEndianDoubleIEEE754 {
		public const ulong SignMask = 0x8000000000000000;
		public const ulong ExponentMask = 0x7FF0000000000000;
		public const ulong SignificandMask = 0x000FFFFFFFFFFFFF;

		public const byte ExponentBits = 11;
		public const byte SignificandBits = 52;
		public const ushort ExponentBias = 1023;

		public const double NaN = bitcast<double>( 0xFFF8000000000000 );

		public const double MaxValue = bitcast<double>( 0x7FEFFFFFFFFFFFFF );
		public const double MinValue = bitcast<double>( 0xFFEFFFFFFFFFFFFF );
		public const double PositiveInfinity = bitcast<double>( 0x7FF0000000000000 );
		public const double NegativeInfinity = bitcast<double>( 0xFFF0000000000000 );

		private ulong_littleendian _raw { get { return bitcast<ulong_littleendian>( this ); } }
		private long_littleendian _rawSigned { get { return bitcast<long_littleendian>( this ); } }

		public bool IsNegative {
			get { return _rawSigned < 0; }
		}

		public ulong Significand {
			get { return _raw & SignificandMask; }
		}

		public ulong NormalizedSignificand {
			get { return ( _raw & SignificandMask ) | ( SignificandMask + 1 ); }
		}

		public short Exponent {
			get { return ( short ) ( BiasedExponent - ExponentBias ); }
		}

		public ushort BiasedExponent {
			get { return ( ushort )( ( _raw >> SignificandBits ) & ( ExponentMask >> SignificandBits ) ); }
		}

		public bool IsSpecial {
			get { return ( _raw & ~SignMask ) >= ExponentMask; }
		}

		public bool IsNaN {
			get { return ( _raw & ~SignMask ) > ExponentMask; }
		}

		public bool IsInfinity {
			get { return ( _raw & ExponentMask ) == ExponentMask; }
		}

		public bool IsPositiveInfinity {
			get { return _raw == ExponentMask; }
		}

		public bool IsNegativeInfinity {
			get { return _raw == ( ExponentMask | SignMask ); }
		}

		public bool IsSubnormal {
			get {
				var value = _raw & ~SignMask;
				return ( value - 1 ) < SignificandMask;
			}
		}

		public bool IsSubnormalOrZero {
			get { return ( _raw & ExponentMask ) == 0; }
		}

		public bool IsZero {
			get { return ( _raw & ~SignMask ) == 0; }
		}

		public bool IsPositiveZero {
			get { return _raw == 0; }
		}

		public bool IsNegativeZero {
			get { return _raw == SignMask; }
		}

		public bool MayHaveFractionalPart {
			get { return Exponent < SignificandBits; }
		}

		public uint GetHashCode() { return _raw.GetHashCode(); }

		public static bool AreEqual( thistype left, thistype right, long tolerance ) {
			long value1 = left._rawSigned;
			long value2 = right._rawSigned;

			if( value1 < 0 ) value1 = long.MinValue - value1;
			if( value2 < 0 ) value1 = long.MinValue - value2;

			return Math.Abs( value1 - value2 ) <= tolerance;
		}

		public static double Parse( CString input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }
		public static double Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.ByteLength ); }
		public static double Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }
		public static double Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }

		public static double Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }
		public static double Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.ByteLength ); }
		public static double Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }
		public static double Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }

		public static double Parse( SbcsString input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }
		public static double Parse( Utf8String input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.ByteLength ); }
		public static double Parse( Utf16String input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }
		public static double Parse( Utf32String input ) { return PrimitiveTypesParser.ParseDoubleIEEE754( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, double& value ) { return PrimitiveTypesParser.TryParseDoubleIEEE754( input.GetChars(), input.Length, value ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatFloatingPointSbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatFloatingPointUtf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatFloatingPointUtf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatFloatingPointUtf32( this ); }

		public SbcsString ToSbcsString( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointSbcs( this, format ); }
		public Utf8String ToUtf8String( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointUtf8( this, format ); }
		public Utf16String ToString( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointUtf16( this, format ); }
		public Utf32String ToUtf32String( string format ) { return PrimitiveTypesFormatter.FormatFloatingPointUtf32( this, format ); }
	}
}