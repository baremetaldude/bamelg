//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.IO;

namespace System {
	public class XmlWriter {
		private const string _declaration = @"<?xml version=""1.0"" encoding=""utf-8""?>";

		protected ITextWriter _writer;
		protected StringBuilder _formatter = new StringBuilder();
		public string NewLine { get { return _formatter.NewLine; } set { _formatter.NewLine = value; } }

		public bool PreserveNewlines = false;
		public bool UseSpaceIndent = true;
		public int SpaceIndentCount = 2;

		private bool _tagFinished = true;

		public XmlWriter( ITextWriter writer ) {
			_writer = writer;
		}

		~XmlWriter() { Cleanup(); }
		public override void Dispose() { Cleanup(); base.Dispose(); }

		private void Cleanup() {
			if( _writer != null ) {
				_writer.Flush( FlushKind.Write );
				_writer = null;
			}
		}

		public void Declaration() {
			if( PreserveNewlines )
				_writer.WriteLine( _declaration );
			else
				_writer.Write( _declaration );
		}

		private void FinishTag() {
			if( _tagFinished ) return;
			_tagFinished = true;
			_writer.Write( '>' );
		}

		protected int _depth;

		public void OpenTag( string name ) {
			_formatter.Clear();
			if( !_tagFinished ) {
				FinishTag();
				_formatter.AppendLine();
			}

			if( PreserveNewlines ) {
				if( UseSpaceIndent )
					_formatter.Append( ' ', _depth * SpaceIndentCount );
				else
					_formatter.Append( '\t', _depth );
			}

			_formatter.Append( '<' ); _formatter.Append( name );
			_writer.Write( _formatter );

			++_depth;
			_tagFinished = false;
		}

		public void Attribute( string name, TypedReference value ) {
			if( !Assert.IsTrue( !_tagFinished ) ) return;

			_formatter.Clear();
			_formatter.Append( ' ' );
			_formatter.Append( name );
			_formatter.Append( '=' );
			_formatter.Append( '"' );
			_writer.Write( _formatter );

			_formatter.Clear();
			_formatter.Append( value );
			EscapeFormatter();
			_formatter.Append( '"' );
			_writer.Write( _formatter );
		}

		public void CloseTag( string name ) {
			_formatter.Clear();

			if( _tagFinished ) {
				_formatter.Append( "</" ); _formatter.Append( name ); _formatter.Append( '>' );
			}
			else {
				_formatter.Append( "/>" );
				_tagFinished = true;
			}

			if( PreserveNewlines )
				_formatter.AppendLine();

			_writer.Write( _formatter );
			--_depth;
		}

		private static string[,] EscapeStrings = new[7, 2] string {
			{ "&", "&amp;" },
			{ "<", "&lt;" },
			{ ">", "&gt;" },
			{ "\"", "&quot;" },
			{ "©", "&copy;" },
			{ "®", "&reg;" },
			{ "°", "&deg;" }
		};

		private void EscapeFormatter() {
			for( var i = 0; i < EscapeStrings.GetLength( 0 ); ++i )
				_formatter.Replace( EscapeStrings[i, 0], EscapeStrings[i, 1] );
		}

		public void Write( string value ) {
			FinishTag();
			_formatter.Clear();
			_formatter.Append( value );

			EscapeFormatter();
			_writer.Write( _formatter );
		}

		public void WriteUnescaped( string value ) {
			FinishTag();
			_writer.Write( value );
		}

		public void Write( TypedReference value ) {
			FinishTag();
			_formatter.Clear();
			_formatter.Append( value, "" );

			EscapeFormatter();
			_writer.Write( _formatter );
		}

		public void Write( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			FinishTag();
			_formatter.Clear();
			_formatter.AppendFormat( format, vararg( parameters, parameters.Length ) );

			EscapeFormatter();
			_writer.Write( _formatter );
		}

		/// Usage:
		/// using( writer.Tag( "td" ) ) writer.Write( "Hello" );
		public TagRegion Tag( string name ) { return new TagRegion( this, name ); }

		public struct TagRegion : IDisposable {
			public readonly string Name;
			private readonly declaringtype _parent;

			public TagRegion( declaringtype parent, string name ) {
				_parent = parent;
				Name = name;

				_parent.OpenTag( Name );
			}

			public void Dispose() {
				_parent.CloseTag( Name );
			}
		}

		public void Flush( FlushKind flushKind = FlushKind.SynchronizeWrite ) { FinishTag(); _writer.Flush( flushKind ); }
		public void WriteLine() { FinishTag(); _writer.WriteLine(); }
	}
}