//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;

namespace System {
	public sealed partial struct TimeSpan {
		public long Ticks;

		public TimeSpan( long ticks ) {
			Ticks = ticks;
		}

		public TimeSpan( int hours, int minutes, int seconds ) {
			Ticks = DateTime.TimeToTicks( hours, minutes, seconds );
		}

		public TimeSpan( int days, int hours, int minutes, int seconds )
			: this( days, hours, minutes, seconds, 0 ) { }

		public TimeSpan( int days, int hours, int minutes, int seconds, int milliseconds ) {
			var totalMilliseconds = ( long )( ( 60L * 60 * 24 * days + 60L * 60 * hours + 60L * minutes + seconds ) * 1000 + milliseconds );

			if( !Assert.IsFalse( totalMilliseconds > 922337203685477 || totalMilliseconds < -922337203685477L ) )
				days = 0;

			Ticks = 10L * 1000 * totalMilliseconds;
		}

		public TimeSpan Add( TimeSpan ts ) {
			long ticks;
			if( !Assert.IsFalse( checkwrap( ticks = Ticks + ts.Ticks ) ) )
				return new TimeSpan( 0 );

			return new TimeSpan( ticks );
		}

		public TimeSpan Subtract( TimeSpan ts ) {
			long ticks;
			if( !Assert.IsFalse( checkwrap( ticks = Ticks - ts.Ticks ) ) )
				return new TimeSpan( 0 );

			return new TimeSpan( ticks );
		}

		public static TimeSpan operator %( TimeSpan t1, TimeSpan t2 ) { return new TimeSpan( t1.Ticks % t2.Ticks ); }
		public static TimeSpan operator %( DateTime t1, TimeSpan t2 ) { return new TimeSpan( t1.Ticks % t2.Ticks ); }
		public static TimeSpan operator %( DateTimeUTC t1, TimeSpan t2 ) { return new TimeSpan( ( long ) t1.Ticks % t2.Ticks ); }

		public static TimeSpan operator *( TimeSpan t1, int t2 ) { return new TimeSpan( t1.Ticks * t2 ); }
		public static TimeSpan operator /( TimeSpan t1, int t2 ) { return new TimeSpan( t1.Ticks / t2 ); }

		public static TimeSpan operator *( TimeSpan t1, double t2 ) { return new TimeSpan( Math.RoundToInt64( t1.Ticks * t2 ) ); }
		public static TimeSpan operator /( TimeSpan t1, double t2 ) { return new TimeSpan( Math.RoundToInt64( t1.Ticks / t2 ) ); }

		public static TimeSpan operator +( TimeSpan t1, TimeSpan t2 ) { return t1.Add( t2 ); }
		public static TimeSpan operator -( TimeSpan t1, TimeSpan t2 ) { return t1.Subtract( t2 ); }

		public static bool operator ==( [In] TimeSpan& t1, [In] TimeSpan& t2 ) { return t1.Ticks == t2.Ticks; }
		public static bool operator !=( [In] TimeSpan& t1, [In] TimeSpan& t2 ) { return t1.Ticks != t2.Ticks; }

		public static bool operator >( [In] TimeSpan& t1, [In] TimeSpan& t2 ) { return t1.Ticks > t2.Ticks; }
		public static bool operator <( [In] TimeSpan& t1, [In] TimeSpan& t2 ) { return t1.Ticks < t2.Ticks; }

		public static bool operator >=( [In] TimeSpan& t1, [In] TimeSpan& t2 ) { return t1.Ticks >= t2.Ticks; }
		public static bool operator <=( [In] TimeSpan& t1, [In] TimeSpan& t2 ) { return t1.Ticks <= t2.Ticks; }

		public TimeSpan operator +() { return this; }
		public TimeSpan operator -() { return new TimeSpan( -Ticks ); }

		public int Days { get { return ( int )( Ticks / 864000000000 ); } }
		public int Hours { get { return ( int )( ( Ticks / 36000000000 ) % 24 ); } }
		public int Minutes { get { return ( int )( ( Ticks / 600000000 ) % 60 ); } }
		public int Seconds { get { return ( int )( ( Ticks / 10000000 ) % 60 ); } }
		public int Milliseconds { get { return ( int )( Ticks / 10000 % 1000 ); } }
		public int Microseconds { get { return ( int )( Ticks / 10 % 1000 ); } }
		public int MicrosecondsWithMilliseconds { get { return ( int )( ( Ticks / 10 ) % 1000000UL ); } }

		public long TotalMilliseconds { get { return Ticks / ( 1000L * 10 ); } }
		public long TotalSeconds { get { return Ticks / ( 1000L * 1000 * 10 ); } }
		public long TotalMinutes { get { return Ticks / ( 60L * 1000 * 1000 * 10 ); } }
		public long TotalHours { get { return Ticks / ( 60L * 60 * 1000 * 1000 * 10 ); } }
		public long TotalDays { get { return Ticks / ( 24L * 60 * 60 * 1000 * 1000 * 10 ); } }

		public double TotalMillisecondsFractional { get { return Ticks / ( 1000.0 * 10 ); } }
		public double TotalSecondsFractional { get { return Ticks / ( 1000.0 * 1000 * 10 ); } }
		public double TotalMinutesFractional { get { return Ticks / ( 60.0 * 1000 * 1000 * 10 ); } }
		public double TotalHoursFractional { get { return Ticks / ( 60.0 * 60 * 1000 * 1000 * 10 ); } }
		public double TotalDaysFractional { get { return Ticks / ( 24.0 * 60 * 60 * 1000 * 1000 * 10 ); } }

		private static TimeSpan Interval( double value, int scale ) {
			if( !Assert.IsFalse( value.IsNaN ) )
				return new TimeSpan( 0 );

			var totalMilliseconds = Math.RoundHalfAwayFromZeroToInt64( value * scale );

			if( !Assert.IsFalse( totalMilliseconds > 922337203685477 || totalMilliseconds < -922337203685477 ) )
				return new TimeSpan( 0 );

			return new TimeSpan( 10L * 1000L * totalMilliseconds );
		}

		private static TimeSpan Interval( long value, int scale ) {
			long totalMilliseconds;
			if( !Assert.IsFalse( checkwrap( totalMilliseconds = value * scale ) ) )
				return new TimeSpan( 0 );

			if( !Assert.IsFalse( totalMilliseconds > 922337203685477 || totalMilliseconds < -922337203685477 ) )
				return new TimeSpan( 0 );

			return new TimeSpan( 10L * 1000L * totalMilliseconds );
		}

		public static TimeSpan FromMicroseconds( long value ) {
			if( !Assert.IsFalse( value > 922337203685477000 || value < -922337203685477000 ) )
				return new TimeSpan( 0 );

			return new TimeSpan( 10L * value );
		}

		public static TimeSpan FromDays( double value ) { return Interval( value, 0x5265C00 ); }
		public static TimeSpan FromHours( double value ) { return Interval( value, 3600000 ); }
		public static TimeSpan FromMinutes( double value ) { return Interval( value, 60000 ); }
		public static TimeSpan FromSeconds( double value ) { return Interval( value, 1000 ); }
		public static TimeSpan FromMilliseconds( double value ) { return Interval( value, 1 ); }

		public static TimeSpan FromDays( long value ) { return Interval( value, 0x5265C00 ); }
		public static TimeSpan FromHours( long value ) { return Interval( value, 3600000 ); }
		public static TimeSpan FromMinutes( long value ) { return Interval( value, 60000 ); }
		public static TimeSpan FromSeconds( long value ) { return Interval( value, 1000 ); }
		public static TimeSpan FromMilliseconds( long value ) { return Interval( value, 1 ); }

		public const long TicksPerDay = 10L * 1000 * 1000 * 60 * 60 * 24;
		public const long TicksPerHour = 10L * 1000 * 1000 * 60 * 60;
		public const long TicksPerMinute = 10L * 1000 * 1000 * 60;
		public const long TicksPerSecond = 10L * 1000 * 1000;
		public const long TicksPerMillisecond = 10L * 1000;
		public const long TicksPerMicrosecond = 10L;

		public static readonly TimeSpan Zero = new TimeSpan( 0 );
		public static readonly TimeSpan MaxValue = new TimeSpan( long.MaxValue );
		public static readonly TimeSpan MinValue = new TimeSpan( long.MinValue );

		public uint GetHashCode() { return Ticks.GetHashCode(); }

		private static TextParsingStatus TryParse<TElement>( TElement* parsePosition, uint remaining, thistype& parsedResult ) {
			var result = true;
			var negative = false;
			parsedResult = default( thistype );

			int days = 0, hours;
			uint minutes, seconds = 0, frac;
			long ticks = 0;

			if( !int.TryFetch( parsePosition, remaining, hours ) || remaining == 0 ) return TextParsingStatus.Format;
			if( --remaining == 0 ) return TextParsingStatus.Format;

			if( hours < 0 ) {
				negative = true;
				hours = -hours;
			}

			switch( *parsePosition++ ) {
				case '.':
					days = hours;
					if( !int.TryFetch( parsePosition, remaining, hours ) || remaining == 0 ) return TextParsingStatus.Format;
					if( hours < 0 ) return TextParsingStatus.OutOfRange;
					if( *parsePosition++ != ':' || --remaining == 0 ) return TextParsingStatus.Format;
					goto case ':';

				case ':':
					if( hours >= 24 ) return TextParsingStatus.OutOfRange;

					if( !uint.TryFetch( parsePosition, remaining, minutes ) ) return TextParsingStatus.Format;
					if( minutes >= 60 ) return TextParsingStatus.OutOfRange;

					if( remaining == 0 ) goto parsed;
					if( *parsePosition++ != ':' || --remaining == 0 ) return TextParsingStatus.Format;

					if( !uint.TryFetch( parsePosition, remaining, seconds ) ) return TextParsingStatus.Format;
					if( seconds >= 60 ) return TextParsingStatus.OutOfRange;
					if( remaining == 0 ) goto parsed;
					if( *parsePosition++ != '.' || --remaining == 0 ) return TextParsingStatus.Format;

					if( !uint.TryFetch( parsePosition, remaining, frac ) ) return TextParsingStatus.Format;
					if( remaining != 0 ) return TextParsingStatus.Format;

					var scaleOrder = PrimitiveTypesFormatter.GetFormattedLength( frac );
					if( scaleOrder > 7 ) frac /= ( uint ) PrimitiveTypesFormatter.TenPowersTable[scaleOrder - 7];

					ticks = frac;
					ticks *= PrimitiveTypesFormatter.TenPowersTable[7 - scaleOrder];
					break;
			}

		parsed:
			parsedResult = new TimeSpan( ( int ) days, ( int ) hours, ( int ) minutes, ( int ) seconds );
			parsedResult.Ticks += ticks;
			if( negative ) parsedResult.Ticks = -parsedResult.Ticks;
			return TextParsingStatus.OK;
		}

		public static thistype Parse( CString input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( CUtf8String input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( CUtf16String input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( CUtf32String input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }

		public static thistype Parse( CStringSpan input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( CUtf8StringSpan input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( CUtf16StringSpan input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( CUtf32StringSpan input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }

		public static thistype Parse( SbcsString input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( Utf8String input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( Utf16String input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }
		public static thistype Parse( Utf32String input ) { thistype result; var status = TryParse( input, result ); BclErrorHandler.ParserException( status ); return result; }

		public static TextParsingStatus TryParse( CString input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, thistype& value ) { return TryParse<char>( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, thistype& value ) { return TryParse<uint>( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, thistype& value ) { return TryParse<char>( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, thistype& value ) { return TryParse<uint>( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, thistype& value ) { return TryParse<char>( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, thistype& value ) { return TryParse<uint>( input.GetChars(), input.Length, value ); }
	}
}