//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// See http://valgrind.org/docs/manual/manual-core-adv.html
//

using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace System.Diagnostics {
	public static struct Valgrind {
		private static intptr ClientRequest( intptr defaultValue, intptr[6]& args ) asm {
			X86_32 {
				mov edx, [esp + 4] // defaultValue
				mov eax, [esp + 8] // args

				rol edi, 3
				rol edi, 13
				rol edi, 29
				rol edi, 19

				xchg ebx, ebx // magic comes there

				mov eax, edx
				ret
			}
			X86_64 {
				if( Environment.CurrentPlatform == PlatformID.Windows ) {
					mov rax, rdx // args
					mov rdx, rcx // defaultValue
				}
				else {
					mov rdx, rdi // defaultValue
					mov rax, rsi // args
				}

				rol rdi, 3
				rol rdi, 13
				rol rdi, 61
				rol rdi, 51

				xchg rbx, rbx // magic comes there

				mov rax, rdx
				ret
			}
			default {
				switch( Environment.CurrentCpu ) {
					case System.Runtime.CompilerServices.CpuID.ARM_32: return bitcast<Functors.Func<intptr, intptr[6]&, intptr>>( &ClientRequest_ARM32[0] )( defaultValue, args );
					case System.Runtime.CompilerServices.CpuID.ARM_64: return bitcast<Functors.Func<intptr, intptr[6]&, intptr>>( &ClientRequest_ARM64[0] )( defaultValue, args );
					default: return 0;
				}

			}
		}

		[Alignment( Boundary = 4 )]
		[BackendSection( Name = ".text" )]
		private static uint_bigendian[10] ClientRequest_ARM32 = new uint_bigendian[10] {
			0x10402DE9, // push {r4, lr}
			0x0030A0E1, // mov r3, r0
			0x0140A0E1, // mov r4, r1
			0xECC1A0E1, // ror r12, r12, #3
			0xECC6A0E1, // ror r12, r12, #13
			0xECCEA0E1, // ror r12, r12, #29
			0xECC9A0E1, // ror r12, r12, #19
			0x0AA08AE1, // orr r10, r10, r10
			0x0300A0E1, // mov r0, r3
			0x1080BDE8  // pop {r4, pc}
		};

		[Alignment( Boundary = 4 )]
		[BackendSection( Name = ".text" )]
		private static uint_bigendian[9] ClientRequest_ARM64 = new uint_bigendian[9] {
			0xE30300AA, // mov x3, x0
			0xE40301AA, // mov x4, x1
			0x8C0DCC93, // ror x12, x12, #3
			0x8C35CC93, // ror x12, x12, #13
			0x8CCDCC93, // ror x12, x12, #51
			0x8CF5CC93, // ror x12, x12, #61
			0x4A010AAA, // orr x10, x10, x10
			0xE00303AA, // mov x0, x3
			0xC0035FD6  // ret
		};

		private enum RequestID : intptr {
			IsRunningOnValgrind = 0x1001,
			DiscardTranslations = 0x1002,

			StackRegister =       0x1501,
			StackDeregister =     0x1502,
			StackChange =         0x1503,

			MallocLikeBlock =     0x1301,
			ResizeInPlaceBlock =  0x130B,
			FreeLikeBlock =       0x1302,

			MempoolCreate =       0x1303,
			MempoolDestroy =      0x1304,
			MempoolAlloc =        0x1305,
			MempoolFree =         0x1306,
			MempoolTrim =         0x1307,
			MempoolMove =         0x1308,
			MempoolChange =       0x1309,
			MempoolExists =       0x130A,
		}

		public static readonly bool IsAttached = IsRunningOnValgrind();
		private static bool IsRunningOnValgrind() { return ClientRequest( 0, new intptr[6] { RequestID.IsRunningOnValgrind.Value(), 0, 0, 0, 0, 0 } ) > 0; }

		public static intptr StackRegister( void* start, void* end ) { return ClientRequest( 0, new intptr[6] { RequestID.StackRegister.Value(), ( intptr ) start, ( intptr ) end, 0, 0, 0 } ); }
		public static void StackChange( intptr id, void* start, void* end ) { ClientRequest( 0, new intptr[6] { RequestID.StackChange.Value(), id, ( intptr ) start, ( intptr ) end, 0, 0 } ); }
		public static void StackDeregister( intptr id ) { ClientRequest( 0, new intptr[6] { RequestID.StackDeregister.Value(), id, 0, 0, 0, 0 } ); }

		public static void DiscardTranslations( void* address, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.DiscardTranslations.Value(), ( intptr ) address, length, 0, 0, 0 } ); }

		public static void MallocLikeBlock( void* address, uint length, uint redzoneLength, bool isCleared ) { ClientRequest( 0, new intptr[6] { RequestID.MallocLikeBlock.Value(), ( intptr ) address, ( intptr ) length, ( intptr ) redzoneLength, ( intptr ) isCleared, 0 } ); }
		public static void ResizeInPlaceBlock( void* address, int old, int @new, int redzoneLength ) { ClientRequest( 0, new intptr[6] { RequestID.ResizeInPlaceBlock.Value(), ( intptr ) address, old, @new, redzoneLength, 0 } ); }
		public static void FreeLikeBlock( void* address, int redzoneLength ) { ClientRequest( 0, new intptr[6] { RequestID.FreeLikeBlock.Value(), ( intptr ) address, redzoneLength, 0, 0, 0 } ); }

		public static void MempoolCreate( void* pool, uint redzoneLength, bool isCleared ) { ClientRequest( 0, new intptr[6] { RequestID.MempoolCreate.Value(), ( intptr ) pool, ( intptr ) redzoneLength, ( intptr ) isCleared, 0, 0 } ); }
		public static void MempoolDestroy( void* pool ) { ClientRequest( 0, new intptr[6] { RequestID.MempoolDestroy.Value(), ( intptr ) pool, 0, 0, 0, 0 } ); }
		public static void MempoolAlloc( void* pool, void* start, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.MempoolAlloc.Value(), ( intptr ) pool, ( intptr ) start, length, 0, 0 } ); }
		public static void MempoolFree( void* pool, void* start ) { ClientRequest( 0, new intptr[6] { RequestID.MempoolFree.Value(), ( intptr ) pool, ( intptr ) start, 0, 0, 0 } ); }
		public static void MempoolTrim( void* pool, void* start, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.MempoolTrim.Value(), ( intptr ) pool, ( intptr ) start, length, 0, 0 } ); }
		public static void MempoolMove( void* pool, void* newPool ) { ClientRequest( 0, new intptr[6] { RequestID.MempoolMove.Value(), ( intptr ) pool, ( intptr ) newPool, 0, 0, 0 } ); }
		public static void MempoolChange( void* pool, void* startOld, void* startNew, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.MempoolChange.Value(), ( intptr ) pool, ( intptr ) startOld, ( intptr ) startNew, length, 0 } ); }
		public static bool MempoolExists( void* pool ) { return ClientRequest( 0, new intptr[6] { RequestID.MempoolExists.Value(), ( intptr ) pool, 0, 0, 0, 0 } ) > 0; }

		public static struct Memcheck {
			private enum RequestID : intptr {
				MarkNoAccess = ( ( int ) 'M' << 24 ) | ( ( int ) 'C' << 16 ),

				MarkUndefined,
				MarkDefined,
				DiscardBlock,
				IsAddressable,
				IsDefined,
				LeakCheck,
				CountLeaks,

				GetValidityBits,
				SetValidityBits,

				CreateBlock,

				MakeMemDefinedIfAddressable,
				CountLeakBlocks,
			}

			public static void MarkNoAccess( void* address, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.MarkNoAccess.Value(), ( intptr ) address, length, 0, 0, 0 } ); }
			public static void MarkUndefined( void* address, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.MarkUndefined.Value(), ( intptr ) address, length, 0, 0, 0 } ); }
			public static void MarkDefined( void* address, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.MarkDefined.Value(), ( intptr ) address, length, 0, 0, 0 } ); }
			public static void MarkDefinedIfAddressable( void* address, intptr length ) { ClientRequest( 0, new intptr[6] { RequestID.MakeMemDefinedIfAddressable.Value(), ( intptr ) address, length, 0, 0, 0 } ); }

			public static intptr CreateBlock( void* address, intptr length, intptr desc ) { return ClientRequest( 0, new intptr[6] { RequestID.CreateBlock.Value(), ( intptr ) address, length, desc, 0, 0 } ); }
			public static void DiscardBlock( intptr blockId ) { ClientRequest( 0, new intptr[6] { RequestID.DiscardBlock.Value(), blockId, 0, 0, 0, 0 } ); }

			public static bool IsDefined( void* address, intptr length ) { return ( bool ) ClientRequest( 0, new intptr[6] { RequestID.IsDefined.Value(), ( intptr ) address, length, 0, 0, 0 } ); }
			public static bool IsAddressable( void* address, intptr length ) { return ( bool ) ClientRequest( 0, new intptr[6] { RequestID.IsAddressable.Value(), ( intptr ) address, length, 0, 0, 0 } ); }

			public static void LeakCheck() { ClientRequest( 0, new intptr[6] { RequestID.LeakCheck.Value(), 0, 0, 0, 0, 0 } ); }
			public static void LeakCheckQuick() { ClientRequest( 0, new intptr[6] { RequestID.LeakCheck.Value(), 1, 0, 0, 0, 0 } ); }

			public static void GetLeaks( intptr& leaked, intptr& dubious, intptr& reachable, intptr& suppressed ) { ClientRequest( 0, new intptr[6] { RequestID.CountLeaks.Value(), ( intptr ) &leaked, ( intptr ) &dubious, ( intptr ) &reachable, ( intptr ) &suppressed, 0 } ); }
			public static void GetBlockLeaks( intptr& leaked, intptr& dubious, intptr& reachable, intptr& suppressed ) { ClientRequest( 0, new intptr[6] { RequestID.CountLeakBlocks.Value(), ( intptr ) &leaked, ( intptr ) &dubious, ( intptr ) &reachable, ( intptr ) &suppressed, 0 } ); }

			public static intptr GetValidityBits( void* address, void* bits, intptr length ) { return ClientRequest( 0, new intptr[6] { RequestID.GetValidityBits.Value(), ( intptr ) address, ( intptr ) bits, length, 0, 0 } ); }
			public static intptr SetValidityBits( void* address, void* bits, intptr length ) { return ClientRequest( 0, new intptr[6] { RequestID.SetValidityBits.Value(), ( intptr ) address, ( intptr ) bits, length, 0, 0 } ); }
		}

		public static struct Drd {
			private enum RequestID : intptr {
				HappensBefore = ( ( int ) 'H' << 24 ) | ( ( int ) 'G' << 16 ) + 256 + 33,
				HappensAfter,
			}

			public static void HappensBefore( void* address ) { ClientRequest( 0, new intptr[6] { RequestID.HappensBefore.Value(), ( intptr ) address, 0, 0, 0, 0 } ); }
			public static void HappensAfter( void* address ) { ClientRequest( 0, new intptr[6] { RequestID.HappensAfter.Value(), ( intptr ) address, 0, 0, 0, 0 } ); }
		}
	}
}