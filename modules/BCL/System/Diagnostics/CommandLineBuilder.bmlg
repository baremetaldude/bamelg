//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime.CompilerServices;

namespace System.Diagnostics {
	public struct CommandLineBuilder {
		// @{ Settings
		public System.Runtime.CompilerServices.PlatformID Platform = System.Runtime.CompilerServices.CompilerInfo.CurrentPlatform;
		// @}

		public StringBuilder Value;

		public CommandLineBuilder() {
			Value = new StringBuilder();
		}

		public CommandLineBuilder( StringBuilder value ) {
			Value = value;
		}

		public void Append( string parameter ) {
			if( Value.Length > 0 ) Value.Append( ' ' );
			Value.EnsureCapacity( ( int ) parameter.Length );

			if( Platform == PlatformID.Windows ) {
				// http://www.daviddeley.com/autohotkey/parameters/parameters.htm
				// http://blogs.msdn.com/b/twistylittlepassagesallalike/archive/2011/04/23/everyone-quotes-arguments-the-wrong-way.aspx
				var needQuot = false;
				var slashesCount = 0;

				if( parameter.Contains( ' ' ) ) needQuot = true;
				if( parameter.Contains( '\t' ) ) needQuot = true;
				if( parameter.Contains( '\n' ) ) needQuot = true;
				if( parameter.Contains( '\v' ) ) needQuot = true;
				if( parameter.Contains( '"' ) ) needQuot = true;

				if( needQuot ) {
					Value.Append( '"' );

					for( var i = 0U; i < parameter.Length; ++i ) {
						switch( parameter[i] ) {
							case '\\':
								++slashesCount;
								continue;

							case '"':
								Value.Append( '\\', slashesCount * 2 + 1 ); slashesCount = 0;
								Value.Append( @"\""" );
								break;

							default:
								Value.Append( '\\', slashesCount ); slashesCount = 0;
								Value.Append( parameter[i] );
								break;
						}
					}

					Value.Append( '\\', slashesCount * 2 ); slashesCount = 0;
					Value.Append( '"' );
				}
				else
					Value.Append( parameter );
			}
		}
	}
}