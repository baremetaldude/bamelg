//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime.CompilerServices;

namespace System.Diagnostics {
	public static class Debug {
		[Conditional( ConditionString = "DEBUG" )]
		public static void Unreachable( [In] CallerContext& callercontext = nullref ) {
			Assert.Unreachable( callercontext );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Fail( [In] CallerContext& callercontext = nullref ) {
			Assert.Fail( callercontext );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Fail( string message, [In] CallerContext& callercontext = nullref ) {
			Assert.Fail( message, callercontext );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Assert( bool expression, [In] CallerContext& callercontext = nullref ) {
			Assert.IsTrue( expression, null, callercontext );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Assert( bool expression, string message, [In] CallerContext& callercontext = nullref ) {
			Assert.IsTrue( expression, message, callercontext );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Write( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			Console.WriteLine( format, vararg( parameters, parameters.Length ) );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Write( string message ) {
			Console.WriteLine( message );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Write( Console.OutputAttributes& attrs, [VerifyFormatString] string format, vararg TypedReference parameters ) {
			attrs.Apply();
			Console.Write( format, vararg( parameters, parameters.Length ) );
			attrs.Reset();
			Console.WriteLine();
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void Write( Console.OutputAttributes& attrs, string format ) {
			attrs.Apply();
			Console.Write( format );
			attrs.Reset();
			Console.WriteLine();
		}
	}
}