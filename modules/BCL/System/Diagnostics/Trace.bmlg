//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime.CompilerServices;

namespace System.Diagnostics {
	/// Console tracing for debug-only purposes
	/// Typical usage:
	///  [Conditional( ConditionString = "TRACE_COMPONENT" )]
	///  void TraceSomeEvent() {
	///       Trace.Write( "Event arrived!" );
	///  }
	public static class Trace {
		[Conditional( ConditionString = "TRACE" )]
		public static void Assert( bool expression, [In] CallerContext& callercontext = nullref ) {
			if( expression ) return;

			Console.Write( "Assertion failed: " );
			Console.Write( callercontext.Expression );
			Console.Write( " at line " );
			Console.Write( callercontext.Row );

			PrintContextInfo( callercontext );
			Console.WriteLine();
		}

		[Conditional( ConditionString = "TRACE" )]
		public static void Assert( bool expression, string message, [In] CallerContext& callercontext = nullref ) {
			if( expression ) return;

			Console.Write( "Assertion failed: " );
			Console.Write( callercontext.Expression );
			Console.Write( " at line " );
			Console.Write( callercontext.Row );

			PrintContextInfo( callercontext );
			Console.WriteLine();
		}

		private static void PrintContextInfo( [In] CallerContext& context ) {
			if( context.Caller != nullref ) {
				Console.Write( " in " );
				Console.Write( context.Caller.DeclaringType.FullQualifiedName );
				Console.Write( '.' );
				Console.WriteLine( context.Caller.Name );
			}

			StackTrace.Print();
		}

		[Conditional( ConditionString = "TRACE" )]
		public static void Write( [VerifyFormatString] string format, vararg TypedReference parameters ) {
			Console.WriteLine( format, vararg( parameters, parameters.Length ) );
		}

		[Conditional( ConditionString = "TRACE" )]
		public static void Write( string format ) {
			Console.WriteLine( format );
		}
	}
}