//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Threading {
	// Platform-independent interface for dealing with OS threads
	// Usage: Create threads with 'Start' and wait for their termination with 'Join' ( it also releases system resources, like thread descriptors/handles, don't forget to call it ).
	public partial class Thread {
		public bool IsCurrent { get { return _implIsCurrent(); } }

		[ThreadStatic]
		public static Thread CurrentThread = _implCurrentThread();

		public void Join() { _implJoin(); }

		public static void Sleep( uint milliseconds ) { _implSleep( milliseconds ); }
		
		public static void Sleep( TimeSpan timeout ) {
			System.Diagnostics.Debug.Assert( timeout.Ticks >= 0 );
			_implSleep( ( uint ) timeout.TotalMilliseconds );
		}

		public static void Yield() { _implYield(); }

		public static Thread Start( DPC* action ) { return _implStart( action ); }

		public static Thread Start( Functors.Action action ) { return _implStart( action ); }
		public static Thread Start( Delegates.Action action ) { return _implStart( action ); }
	}
}