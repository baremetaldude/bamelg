//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime;
using System.Threading;

namespace System.Threading {
	public static partial struct ThreadPool {
		public struct ReferenceImpl {
			private uint _maxThreads = 0;

			private Semaphore _newTaskNotifier = new Semaphore();
			private Semaphore _workerCompleted = new Semaphore();

			private Mutex _taskLock = new Mutex();
			private Mutex _instanceLock = new Mutex();

			private Mutex _completedLock = new Mutex();
			private List<Thread> _completedList = new List<Thread>();

			private DPC* _taskHead = null, _taskTail = null;

			private static Functors.Action<DPC*> _workerTerminateAction = data => { };

			public ReferenceImpl() {
			}

			public void Stop() {
				MaxThreads = 0;

				using( _taskLock.LockRegion() ) {
					for( var task = _taskHead; task != null; ) {
						var next = task->Next;

						DPC.RunAndDispose( task );

						task = next;
					}

					_taskHead = _taskTail = null;
				}
			}

			public uint MaxThreads {
				get { return _maxThreads; }
				set {
					using( _instanceLock.LockRegion() ) {
						if( _maxThreads == value ) return;

						if( value > _maxThreads ) {
							var startingThreadCount = value - _maxThreads;
							
							for( var i = 0U; i < startingThreadCount; ++i )
								new WorkerInfo( &this ).Start();
						}
						else {
							// make unique stopping tasks
							var stoppingThreadCount = _maxThreads - value;

							var tasks = stackalloc DPC[stoppingThreadCount];
							for( var i = 0U; i < stoppingThreadCount; ++i ) {
								var task = tasks + i;
								task->OnActionDispose = _workerTerminateAction;

								Enqueue( task );
							}

							for( var i = 0U; i < stoppingThreadCount; ++i ) _workerCompleted.Wait();

							using( _completedLock.LockRegion() ) {
								foreach( var thread in _completedList ) {
									thread.Join();
								}
							}
						}

						_maxThreads = value;
					}
				}
			}

			/// @{ thread-safe
			public void Enqueue( DPC* task ) {
				if( MaxThreads == 0 ) {
					Thread.Start( task );
					return;
				}

				task->Next = null;

				using( _taskLock.LockRegion() ) {
					if( _taskTail == null ) {
						_taskHead = _taskTail = task;
					}
					else {
						_taskTail->Next = task;
						_taskTail = task;
					}
				}

				_newTaskNotifier.Post();
			}
			/// @}

			private class WorkerInfo {
				internal declaringtype* _parent;
				internal Thread _thread;

				public WorkerInfo( declaringtype* parent ) {
					_parent = parent;
				}

				public void Start() {
					_thread = Thread.Start( DPC.Create<thistype>( Run, this ) );
				}

				private void Run() {
					SetThreadProperties();

					Dispatch();

					TraceFinished();

					using( _parent->_completedLock.LockRegion() )
						_parent->_completedList.Add( _thread );

					_parent->_workerCompleted.Post();
				}

				private void Dispatch() {
					for( ; ; ) {
					wait:
						_parent->_newTaskNotifier.Wait();
						TraceTasksArrived();

						DPC* task = null;
						using( _parent->_taskLock.LockRegion() ) {
							if( _parent->_taskHead != null ) {
								task = _parent->_taskHead;
								var next = task->Next;

								if( next == null ) {
									_parent->_taskHead = null;
									_parent->_taskTail = null;
								}
								else {
									_parent->_taskHead = next;
								}
							}
						}

						var exitAction = task->OnActionDispose == _workerTerminateAction;
						DPC.RunAndDispose( task );

						if( exitAction ) return;
					}
				}

				/// @{ Tracing

				internal const string TraceConditionString = "TRACE_THREAD_POOL";

				[Conditional( ConditionString = TraceConditionString )]
				private void TraceTasksArrived() {
					Trace.Write( "ThreadPool: Worker [{0}] got new task", this );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private void TraceFinished() {
					Trace.Write( "ThreadPool: Worker [{0}] finished", this );
				}

				/// @}
			}
		}
	}
}