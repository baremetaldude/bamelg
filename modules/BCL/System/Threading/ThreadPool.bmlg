//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;

namespace System.Threading {
	public static partial struct ThreadPool {
		/// @{ not thread-safe
		public static void Initialize( int maxThreads = 0 ) {
			MaxThreads = maxThreads > 0 ? maxThreads : Environment.ProcessorCount * 4;
		}

		public static int MaxThreads {
			get { return _implMaxThreads; }
			set { _implMaxThreads = value; }
		}

		public static void Terminate() { _implTerminate(); }
		/// @}

		internal static void SetThreadProperties() { _implSetThreadProperties(); }

		/// @{ thread-safe
		public static void BeginInvoke( DPC* task ) {
			_implEnqueue( task );
		}

		public static void BeginInvoke( Functors.Action action ) {
			_implEnqueue( DPC.Create( action ) );
		}

		public static void BeginInvoke( Delegates.Action action ) {
			_implEnqueue( DPC.Create( action ) );
		}

		/// @}
	}
}