//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace System.Threading {
	public partial struct DPC {
		public DPC* Next;
		public Functors.Action<DPC*> OnAction, OnDispose, OnActionDispose;

		public static void Run( DPC* dpc ) {
			if( dpc == null ) return;

			dpc->OnAction( dpc );
		}

		public static void Dispose( DPC* dpc ) {
			if( dpc == null ) return;
			if( dpc->OnDispose == null ) return;

			dpc->OnDispose( dpc );
		}

		public static void RunAndDispose( DPC* dpc ) {
			if( dpc == null ) return;

			dpc->OnActionDispose( dpc );
		}

		public static DPC* Combine( DPC* left, DPC* right ) {
			if( left == null ) return right;
			if( right == null ) return left;

			return heapalloc DPC<DPC*, DPC*> {
				P0 = left,
				P1 = right,
				OnAction = data => {
					var passedTask = ( DPC<DPC*, DPC*>* ) data;
					Run( passedTask->P0 );
					Run( passedTask->P1 );
				},
				OnActionDispose = data => {
					var passedTask = ( DPC<DPC*, DPC*>* ) data;
					RunAndDispose( passedTask->P0 );
					RunAndDispose( passedTask->P1 );
					heapfree passedTask;
				},
				OnDispose = data => {
					var passedTask = ( DPC<DPC*, DPC*>* ) data;
					Dispose( passedTask->P0 );
					Dispose( passedTask->P1 );
					heapfree passedTask;
				}
			};
		}
	}
}