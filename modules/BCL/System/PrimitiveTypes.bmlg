//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Globalization;
using System.Text;

namespace System {
	public sealed partial struct Boolean {
		public SbcsString ToSbcsString() { return PrimitiveTypesFormatter.FormatBoolSbcs( this ); }
		public Utf8String ToUtf8String() { return PrimitiveTypesFormatter.FormatBoolUtf8( this ); }
		public Utf16String ToString() { return PrimitiveTypesFormatter.FormatBoolUtf16( this ); }
		public Utf32String ToUtf32String() { return PrimitiveTypesFormatter.FormatBoolUtf32( this ); }

		public uint GetHashCode() { return ( uint ) this; }

		public static bool Parse( CString input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }
		public static bool Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.ByteLength ); }
		public static bool Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }
		public static bool Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }

		public static bool Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }
		public static bool Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.ByteLength ); }
		public static bool Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }
		public static bool Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }

		public static bool Parse( SbcsString input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }
		public static bool Parse( Utf8String input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.ByteLength ); }
		public static bool Parse( Utf16String input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }
		public static bool Parse( Utf32String input ) { return PrimitiveTypesParser.ParseBool( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, bool& value ) { return PrimitiveTypesParser.TryParseBool( input.GetChars(), input.Length, value ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this ? 1 : -1; }
	}

	public sealed struct Void {
	}

	public sealed partial struct Int8 {
		public const sbyte MaxValue = 0x7F;
		public const sbyte MinValue = ~MaxValue;

		public uint GetHashCode() { return ( uint ) this; }

		public static sbyte Parse( CString input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }
		public static sbyte Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.ByteLength ); }
		public static sbyte Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }
		public static sbyte Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }

		public static sbyte Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }
		public static sbyte Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.ByteLength ); }
		public static sbyte Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }
		public static sbyte Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }

		public static sbyte Parse( SbcsString input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }
		public static sbyte Parse( Utf8String input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.ByteLength ); }
		public static sbyte Parse( Utf16String input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }
		public static sbyte Parse( Utf32String input ) { return PrimitiveTypesParser.ParseInt8( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, sbyte& value ) { return PrimitiveTypesParser.TryParseInt8( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, sbyte& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt8( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, sbyte& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt8( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, sbyte& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchInt8( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public sbyte ToSigned() { return this; }
		public byte ToUnsigned() { Assert.IsTrue( this >= 0 ); return ( byte ) this; }
	}

	public sealed partial struct UInt8 {
		public const byte MaxValue = 0xFF;
		public const byte MinValue = ~MaxValue;

		public uint GetHashCode() { return ( uint ) this; }

		public static byte Parse( CString input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }
		public static byte Parse( CUtf8String input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.ByteLength ); }
		public static byte Parse( CUtf16String input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }
		public static byte Parse( CUtf32String input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }

		public static byte Parse( CStringSpan input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }
		public static byte Parse( CUtf8StringSpan input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.ByteLength ); }
		public static byte Parse( CUtf16StringSpan input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }
		public static byte Parse( CUtf32StringSpan input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }

		public static byte Parse( SbcsString input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }
		public static byte Parse( Utf8String input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.ByteLength ); }
		public static byte Parse( Utf16String input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }
		public static byte Parse( Utf32String input ) { return PrimitiveTypesParser.ParseUInt8( input.GetChars(), input.Length ); }

		public static TextParsingStatus TryParse( CString input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8String input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16String input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32String input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( CStringSpan input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf8StringSpan input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( CUtf16StringSpan input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( CUtf32StringSpan input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryParse( SbcsString input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf8String input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.ByteLength, value ); }
		public static TextParsingStatus TryParse( Utf16String input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }
		public static TextParsingStatus TryParse( Utf32String input, byte& value ) { return PrimitiveTypesParser.TryParseUInt8( input.GetChars(), input.Length, value ); }

		public static TextParsingStatus TryFetch( byte*& input, uint& remaining, byte& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt8( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( char*& input, uint& remaining, byte& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt8( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }
		public static TextParsingStatus TryFetch( uint*& input, uint& remaining, byte& value, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) { return PrimitiveTypesParser.TryFetchUInt8( input, remaining, value, trimLeadingWhitespace, trimTrailingWhitespace ); }

		public int CompareTo( [In] thistype& value ) { return value == this ? 0 : this > value ? 1 : -1; }

		public sbyte ToSigned() { Assert.IsTrue( this <= sbyte.MaxValue ); return ( sbyte ) this; }
		public byte ToUnsigned() { return this; }
	}

	// Used for vararg marshaling
	// Holds pointer to struct/class instance and it's type
	// Reference counter NOT changed for class/delegate/dynamic array instances
	public sealed partial struct TypedReference {
		public Reflection.Type& Type;
		public void* Address;
	}

	public struct ExceptionHandler {
		public Functors.Action<void*, void*> Handler;
		public void* Context;

		private static void DefaultHandlerMessage( System.Reflection.UserType& userType, TypedReference& details ) {
			Console.WriteConcatLine( "Program terminated due to unhandled exception of type '", userType, "'!" );
			Console.WriteConcatLine( "Details: ", details );
		}

		private static void DefaultHandler( void* context, void* details ) {
			StackTrace.Print();
			Environment.Abort( 1 );
		}
	}
}