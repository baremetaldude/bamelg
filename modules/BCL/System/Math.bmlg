//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Bit twiddling hacks come from http://graphics.stanford.edu/~seander/bithacks.html
//

using System.Runtime;

namespace System {
	public static partial struct Math {
		public static float Sqr( float value ) { return value * value; }
		public static double Sqr( double value ) { return value * value; }

		public extern static float Sqrt( float value );
		public extern static double Sqrt( double value );

		public extern static float Exp( float value );
		public extern static double Exp( double value );

		public extern static float Exp2( float value );
		public extern static double Exp2( double value );

		public extern static float Pow( float value, int power );
		public extern static double Pow( double value, int power );

		public extern static float Pow( float value, float power );
		public extern static double Pow( double value, double power );

		public extern static float Sin( float value );
		public extern static double Sin( double value );

		public extern static float Cos( float value );
		public extern static double Cos( double value );

		[ForceInline] public static float Acos( float value ) { return CRuntime.acosf( value ); }
		[ForceInline] public static double Acos( double value ) { return CRuntime.acos( value ); }

		[ForceInline] public static float Asin( float value ) { return CRuntime.asinf( value ); }
		[ForceInline] public static double Asin( double value ) { return CRuntime.asin( value ); }

		[ForceInline] public static float Atan( float value ) { return CRuntime.atanf( value ); }
		[ForceInline] public static double Atan( double value ) { return CRuntime.atan( value ); }

		[ForceInline] public static float Atan2( float y, float x ) { return CRuntime.atan2f( y, x ); }
		[ForceInline] public static double Atan2( double y, double x ) { return CRuntime.atan2( y, x ); }

		/// Returns the base e logarithm of a specified 'value'.
		public extern static double Log( double value );
		/// Returns the base 2 logarithm of a specified 'value'.
		public extern static double Log2( double value );
		/// Returns the base 10 logarithm of a specified 'value'.
		public extern static double Log10( double value );

		public const float FloatPi = bitcast<float>( 0x40490FDB );
		public const double Pi = bitcast<double>( 0x400921FB54442D18 );

		#region Default hardware-assisted rounding with platform defined tie-breaking rules

		public static float Round( float value ) { return Impl.RoundHalfToEven( value ); }
		public static double Round( double value ) { return Impl.RoundHalfToEven( value ); }

		public static sbyte RoundToInt8( float value ) { return Impl.RoundHalfToInt8( value ); }
		public static short RoundToInt16( float value ) { return Impl.RoundHalfToInt16( value ); }
		public static int RoundToInt32( float value ) { return Impl.RoundHalfToInt32( value ); }
		public static long RoundToInt64( float value ) { return Impl.RoundHalfToInt64( value ); }

		public static byte RoundToUInt8( float value ) { return Impl.RoundHalfToUInt8( value ); }
		public static ushort RoundToUInt16( float value ) { return Impl.RoundHalfToUInt16( value ); }
		public static uint RoundToUInt32( float value ) { return Impl.RoundHalfToUInt32( value ); }
		public static ulong RoundToUInt64( float value ) { return Impl.RoundHalfToUInt64( value ); }

		public static sbyte RoundToInt8( double value ) { return Impl.RoundHalfToEvenToInt8( value ); }
		public static short RoundToInt16( double value ) { return Impl.RoundHalfToEvenToInt16( value ); }
		public static int RoundToInt32( double value ) { return Impl.RoundHalfToInt32( value ); }
		public static long RoundToInt64( double value ) { return Impl.RoundHalfToEvenToInt64( value ); }

		public static byte RoundToUInt8( double value ) { return Impl.RoundHalfToEvenToUInt8( value ); }
		public static ushort RoundToUInt16( double value ) { return Impl.RoundHalfToEvenToUInt16( value ); }
		public static uint RoundToUInt32( double value ) { return Impl.RoundHalfToEvenToUInt32( value ); }
		public static ulong RoundToUInt64( double value ) { return Impl.RoundHalfToEvenToUInt64( value ); }

		#endregion

		#region Round half to positive infinity

		public static float RoundHalfTowardsPositiveInfinity( float value ) { return Impl.RoundHalfTowardsPositiveInfinity( value ); }
		public static double RoundHalfTowardsPositiveInfinity( double value ) { return Impl.RoundHalfTowardsPositiveInfinity( value ); }

		public static sbyte RoundHalfTowardsPositiveInfinityToInt8( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt8( value ); }
		public static short RoundHalfTowardsPositiveInfinityToInt16( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt16( value ); }
		public static int RoundHalfTowardsPositiveInfinityToInt32( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt32( value ); }
		public static long RoundHalfTowardsPositiveInfinityToInt64( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt64( value ); }

		public static byte RoundHalfTowardsPositiveInfinityToUInt8( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt8( value ); }
		public static ushort RoundHalfTowardsPositiveInfinityToUInt16( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt16( value ); }
		public static uint RoundHalfTowardsPositiveInfinityToUInt32( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt32( value ); }
		public static ulong RoundHalfTowardsPositiveInfinityToUInt64( float value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt64( value ); }

		public static sbyte RoundHalfTowardsPositiveInfinityToInt8( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt8( value ); }
		public static short RoundHalfTowardsPositiveInfinityToInt16( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt16( value ); }
		public static int RoundHalfTowardsPositiveInfinityToInt32( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt32( value ); }
		public static long RoundHalfTowardsPositiveInfinityToInt64( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToInt64( value ); }

		public static byte RoundHalfTowardsPositiveInfinityToUInt8( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt8( value ); }
		public static ushort RoundHalfTowardsPositiveInfinityToUInt16( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt16( value ); }
		public static uint RoundHalfTowardsPositiveInfinityToUInt32( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt32( value ); }
		public static ulong RoundHalfTowardsPositiveInfinityToUInt64( double value ) { return Impl.RoundHalfTowardsPositiveInfinityToUInt64( value ); }

		#endregion

		#region Round half to negative infinity

		public static float RoundHalfTowardsNegativeInfinity( float value ) { return Impl.RoundHalfTowardsNegativeInfinity( value ); }
		public static double RoundHalfTowardsNegativeInfinity( double value ) { return Impl.RoundHalfTowardsNegativeInfinity( value ); }

		public static sbyte RoundHalfTowardsNegativeInfinityToInt8( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt8( value ); }
		public static short RoundHalfTowardsNegativeInfinityToInt16( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt16( value ); }
		public static int RoundHalfTowardsNegativeInfinityToInt32( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt32( value ); }
		public static long RoundHalfTowardsNegativeInfinityToInt64( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt64( value ); }

		public static byte RoundHalfTowardsNegativeInfinityToUInt8( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt8( value ); }
		public static ushort RoundHalfTowardsNegativeInfinityToUInt16( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt16( value ); }
		public static uint RoundHalfTowardsNegativeInfinityToUInt32( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt32( value ); }
		public static ulong RoundHalfTowardsNegativeInfinityToUInt64( float value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt64( value ); }

		public static sbyte RoundHalfTowardsNegativeInfinityToInt8( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt8( value ); }
		public static short RoundHalfTowardsNegativeInfinityToInt16( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt16( value ); }
		public static int RoundHalfTowardsNegativeInfinityToInt32( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt32( value ); }
		public static long RoundHalfTowardsNegativeInfinityToInt64( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToInt64( value ); }

		public static byte RoundHalfTowardsNegativeInfinityToUInt8( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt8( value ); }
		public static ushort RoundHalfTowardsNegativeInfinityToUInt16( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt16( value ); }
		public static uint RoundHalfTowardsNegativeInfinityToUInt32( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt32( value ); }
		public static ulong RoundHalfTowardsNegativeInfinityToUInt64( double value ) { return Impl.RoundHalfTowardsNegativeInfinityToUInt64( value ); }

		#endregion

		#region Round half to closest even integer ( rint, lrint, llrint )

		public static float RoundHalfToEven( float value ) { return Impl.RoundHalfToEven( value ); }
		public static double RoundHalfToEven( double value ) { return Impl.RoundHalfToEven( value ); }

		public static sbyte RoundHalfToEvenToInt8( float value ) { return Impl.RoundHalfToEvenToInt8( value ); }
		public static short RoundHalfToEvenToInt16( float value ) { return Impl.RoundHalfToEvenToInt16( value ); }
		public static int RoundHalfToEvenToInt32( float value ) { return Impl.RoundHalfToEvenToInt32( value ); }
		public static long RoundHalfToEvenToInt64( float value ) { return Impl.RoundHalfToEvenToInt64( value ); }

		public static byte RoundHalfToEvenToUInt8( float value ) { return Impl.RoundHalfToEvenToUInt8( value ); }
		public static ushort RoundHalfToEvenToUInt16( float value ) { return Impl.RoundHalfToEvenToUInt16( value ); }
		public static uint RoundHalfToEvenToUInt32( float value ) { return Impl.RoundHalfToEvenToUInt32( value ); }
		public static ulong RoundHalfToEvenToUInt64( float value ) { return Impl.RoundHalfToEvenToUInt64( value ); }

		public static sbyte RoundHalfToEvenToInt8( double value ) { return Impl.RoundHalfToEvenToInt8( value ); }
		public static short RoundHalfToEvenToInt16( double value ) { return Impl.RoundHalfToEvenToInt16( value ); }
		public static int RoundHalfToEvenToInt32( double value ) { return Impl.RoundHalfToEvenToInt32( value ); }
		public static long RoundHalfToEvenToInt64( double value ) { return Impl.RoundHalfToEvenToInt64( value ); }

		public static byte RoundHalfToEvenToUInt8( double value ) { return Impl.RoundHalfToEvenToUInt8( value ); }
		public static ushort RoundHalfToEvenToUInt16( double value ) { return Impl.RoundHalfToEvenToUInt16( value ); }
		public static uint RoundHalfToEvenToUInt32( double value ) { return Impl.RoundHalfToEvenToUInt32( value ); }
		public static ulong RoundHalfToEvenToUInt64( double value ) { return Impl.RoundHalfToEvenToUInt64( value ); }

		#endregion

		#region Round half to closest odd integer

		public static float RoundHalfToOdd( float value ) { return Impl.RoundHalfToOdd( value ); }
		public static double RoundHalfToOdd( double value ) { return Impl.RoundHalfToOdd( value ); }

		public static sbyte RoundHalfToOddToInt8( float value ) { return Impl.RoundHalfToOddToInt8( value ); }
		public static short RoundHalfToOddToInt16( float value ) { return Impl.RoundHalfToOddToInt16( value ); }
		public static int RoundHalfToOddToInt32( float value ) { return Impl.RoundHalfToOddToInt32( value ); }
		public static long RoundHalfToOddToInt64( float value ) { return Impl.RoundHalfToOddToInt64( value ); }

		public static byte RoundHalfToOddToUInt8( float value ) { return Impl.RoundHalfToOddToUInt8( value ); }
		public static ushort RoundHalfToOddToUInt16( float value ) { return Impl.RoundHalfToOddToUInt16( value ); }
		public static uint RoundHalfToOddToUInt32( float value ) { return Impl.RoundHalfToOddToUInt32( value ); }
		public static ulong RoundHalfToOddToUInt64( float value ) { return Impl.RoundHalfToOddToUInt64( value ); }

		public static sbyte RoundHalfToOddToInt8( double value ) { return Impl.RoundHalfToOddToInt8( value ); }
		public static short RoundHalfToOddToInt16( double value ) { return Impl.RoundHalfToOddToInt16( value ); }
		public static int RoundHalfToOddToInt32( double value ) { return Impl.RoundHalfToOddToInt32( value ); }
		public static long RoundHalfToOddToInt64( double value ) { return Impl.RoundHalfToOddToInt64( value ); }

		public static byte RoundHalfToOddToUInt8( double value ) { return Impl.RoundHalfToOddToUInt8( value ); }
		public static ushort RoundHalfToOddToUInt16( double value ) { return Impl.RoundHalfToOddToUInt16( value ); }
		public static uint RoundHalfToOddToUInt32( double value ) { return Impl.RoundHalfToOddToUInt32( value ); }
		public static ulong RoundHalfToOddToUInt64( double value ) { return Impl.RoundHalfToOddToUInt64( value ); }

		#endregion

		#region Round half away from zero ( round, roundf, llround )

		public static float RoundHalfAwayFromZero( float value ) { return Impl.RoundHalfAwayFromZero( value ); }
		public static double RoundHalfAwayFromZero( double value ) { return Impl.RoundHalfAwayFromZero( value ); }

		public static sbyte RoundHalfAwayFromZeroToInt8( float value ) { return Impl.RoundHalfAwayFromZeroToInt8( value ); }
		public static short RoundHalfAwayFromZeroToInt16( float value ) { return Impl.RoundHalfAwayFromZeroToInt16( value ); }
		public static int RoundHalfAwayFromZeroToInt32( float value ) { return Impl.RoundHalfAwayFromZeroToInt32( value ); }
		public static long RoundHalfAwayFromZeroToInt64( float value ) { return Impl.RoundHalfAwayFromZeroToInt64( value ); }

		public static byte RoundHalfAwayFromZeroToUInt8( float value ) { return Impl.RoundHalfAwayFromZeroToUInt8( value ); }
		public static ushort RoundHalfAwayFromZeroToUInt16( float value ) { return Impl.RoundHalfAwayFromZeroToUInt16( value ); }
		public static uint RoundHalfAwayFromZeroToUInt32( float value ) { return Impl.RoundHalfAwayFromZeroToUInt32( value ); }
		public static ulong RoundHalfAwayFromZeroToUInt64( float value ) { return Impl.RoundHalfAwayFromZeroToUInt64( value ); }

		public static sbyte RoundHalfAwayFromZeroToInt8( double value ) { return Impl.RoundHalfAwayFromZeroToInt8( value ); }
		public static short RoundHalfAwayFromZeroToInt16( double value ) { return Impl.RoundHalfAwayFromZeroToInt16( value ); }
		public static int RoundHalfAwayFromZeroToInt32( double value ) { return Impl.RoundHalfAwayFromZeroToInt32( value ); }
		public static long RoundHalfAwayFromZeroToInt64( double value ) { return Impl.RoundHalfAwayFromZeroToInt64( value ); }

		public static byte RoundHalfAwayFromZeroToUInt8( double value ) { return Impl.RoundHalfAwayFromZeroToUInt8( value ); }
		public static ushort RoundHalfAwayFromZeroToUInt16( double value ) { return Impl.RoundHalfAwayFromZeroToUInt16( value ); }
		public static uint RoundHalfAwayFromZeroToUInt32( double value ) { return Impl.RoundHalfAwayFromZeroToUInt32( value ); }
		public static ulong RoundHalfAwayFromZeroToUInt64( double value ) { return Impl.RoundHalfAwayFromZeroToUInt64( value ); }

		#endregion

		#region Round half towards zero

		public static float RoundHalfTowardsZero( float value ) { return Impl.RoundHalfTowardsZero( value ); }
		public static double RoundHalfTowardsZero( double value ) { return Impl.RoundHalfTowardsZero( value ); }

		public static sbyte RoundHalfTowardsZeroToInt8( float value ) { return Impl.RoundHalfTowardsZeroToInt8( value ); }
		public static short RoundHalfTowardsZeroToInt16( float value ) { return Impl.RoundHalfTowardsZeroToInt16( value ); }
		public static int RoundHalfTowardsZeroToInt32( float value ) { return Impl.RoundHalfTowardsZeroToInt32( value ); }
		public static long RoundHalfTowardsZeroToInt64( float value ) { return Impl.RoundHalfTowardsZeroToInt64( value ); }

		public static byte RoundHalfTowardsZeroToUInt8( float value ) { return Impl.RoundHalfTowardsZeroToUInt8( value ); }
		public static ushort RoundHalfTowardsZeroToUInt16( float value ) { return Impl.RoundHalfTowardsZeroToUInt16( value ); }
		public static uint RoundHalfTowardsZeroToUInt32( float value ) { return Impl.RoundHalfTowardsZeroToUInt32( value ); }
		public static ulong RoundHalfTowardsZeroToUInt64( float value ) { return Impl.RoundHalfTowardsZeroToUInt64( value ); }

		public static sbyte RoundHalfTowardsZeroToInt8( double value ) { return Impl.RoundHalfTowardsZeroToInt8( value ); }
		public static short RoundHalfTowardsZeroToInt16( double value ) { return Impl.RoundHalfTowardsZeroToInt16( value ); }
		public static int RoundHalfTowardsZeroToInt32( double value ) { return Impl.RoundHalfTowardsZeroToInt32( value ); }
		public static long RoundHalfTowardsZeroToInt64( double value ) { return Impl.RoundHalfTowardsZeroToInt64( value ); }

		public static byte RoundHalfTowardsZeroToUInt8( double value ) { return Impl.RoundHalfTowardsZeroToUInt8( value ); }
		public static ushort RoundHalfTowardsZeroToUInt16( double value ) { return Impl.RoundHalfTowardsZeroToUInt16( value ); }
		public static uint RoundHalfTowardsZeroToUInt32( double value ) { return Impl.RoundHalfTowardsZeroToUInt32( value ); }
		public static ulong RoundHalfTowardsZeroToUInt64( double value ) { return Impl.RoundHalfTowardsZeroToUInt64( value ); }

		#endregion

		#region Rounding down / Round towards minus infinity

		public static float Floor( float value ) { return Impl.RoundTowardsNegativeInfinity( value ); }
		public static double Floor( double value ) { return Impl.RoundTowardsNegativeInfinity( value ); }

		public static sbyte FloorToInt8( float value ) { return Impl.RoundTowardsNegativeInfinityToInt8( value ); }
		public static short FloorToInt16( float value ) { return Impl.RoundTowardsNegativeInfinityToInt16( value ); }
		public static int FloorToInt32( float value ) { return Impl.RoundTowardsNegativeInfinityToInt32( value ); }
		public static long FloorToInt64( float value ) { return Impl.RoundTowardsNegativeInfinityToInt64( value ); }

		public static byte FloorToUInt8( float value ) { return Impl.RoundTowardsNegativeInfinityToUInt8( value ); }
		public static ushort FloorToUInt16( float value ) { return Impl.RoundTowardsNegativeInfinityToUInt16( value ); }
		public static uint FloorToUInt32( float value ) { return Impl.RoundTowardsNegativeInfinityToUInt32( value ); }
		public static ulong FloorToUInt64( float value ) { return Impl.RoundTowardsNegativeInfinityToUInt64( value ); }

		public static sbyte FloorToInt8( double value ) { return Impl.RoundTowardsNegativeInfinityToInt8( value ); }
		public static short FloorToInt16( double value ) { return Impl.RoundTowardsNegativeInfinityToInt16( value ); }
		public static int FloorToInt32( double value ) { return Impl.RoundTowardsNegativeInfinityToInt32( value ); }
		public static long FloorToInt64( double value ) { return Impl.RoundTowardsNegativeInfinityToInt64( value ); }

		public static byte FloorToUInt8( double value ) { return Impl.RoundTowardsNegativeInfinityToUInt8( value ); }
		public static ushort FloorToUInt16( double value ) { return Impl.RoundTowardsNegativeInfinityToUInt16( value ); }
		public static uint FloorToUInt32( double value ) { return Impl.RoundTowardsNegativeInfinityToUInt32( value ); }
		public static ulong FloorToUInt64( double value ) { return Impl.RoundTowardsNegativeInfinityToUInt64( value ); }

		#endregion

		#region Rounding up / Round towards positive infinity

		public static float Ceiling( float value ) { return Impl.RoundTowardsPositiveInfinity( value ); }
		public static double Ceiling( double value ) { return Impl.RoundTowardsPositiveInfinity( value ); }

		public static sbyte CeilingToInt8( float value ) { return Impl.RoundTowardsPositiveInfinityToInt8( value ); }
		public static short CeilingToInt16( float value ) { return Impl.RoundTowardsPositiveInfinityToInt16( value ); }
		public static int CeilingToInt32( float value ) { return Impl.RoundTowardsPositiveInfinityToInt32( value ); }
		public static long CeilingToInt64( float value ) { return Impl.RoundTowardsPositiveInfinityToInt64( value ); }

		public static byte CeilingToUInt8( float value ) { return Impl.RoundTowardsPositiveInfinityToUInt8( value ); }
		public static ushort CeilingToUInt16( float value ) { return Impl.RoundTowardsPositiveInfinityToUInt16( value ); }
		public static uint CeilingToUInt32( float value ) { return Impl.RoundTowardsPositiveInfinityToUInt32( value ); }
		public static ulong CeilingToUInt64( float value ) { return Impl.RoundTowardsPositiveInfinityToUInt64( value ); }

		public static sbyte CeilingToInt8( double value ) { return Impl.RoundTowardsPositiveInfinityToInt8( value ); }
		public static short CeilingToInt16( double value ) { return Impl.RoundTowardsPositiveInfinityToInt16( value ); }
		public static int CeilingToInt32( double value ) { return Impl.RoundTowardsPositiveInfinityToInt32( value ); }
		public static long CeilingToInt64( double value ) { return Impl.RoundTowardsPositiveInfinityToInt64( value ); }

		public static byte CeilingToUInt8( double value ) { return Impl.RoundTowardsPositiveInfinityToUInt8( value ); }
		public static ushort CeilingToUInt16( double value ) { return Impl.RoundTowardsPositiveInfinityToUInt16( value ); }
		public static uint CeilingToUInt32( double value ) { return Impl.RoundTowardsPositiveInfinityToUInt32( value ); }
		public static ulong CeilingToUInt64( double value ) { return Impl.RoundTowardsPositiveInfinityToUInt64( value ); }

		#endregion

		#region Round away from zero / round towards infinity

		public static float RoundAwayFromZero( float value ) { return Impl.RoundAwayFromZero( value ); }
		public static double RoundAwayFromZero( double value ) { return Impl.RoundAwayFromZero( value ); }

		public static sbyte RoundAwayFromZeroToInt8( float value ) { return Impl.RoundAwayFromZeroToInt8( value ); }
		public static short RoundAwayFromZeroToInt16( float value ) { return Impl.RoundAwayFromZeroToInt16( value ); }
		public static int RoundAwayFromZeroToInt32( float value ) { return Impl.RoundAwayFromZeroToInt32( value ); }
		public static long RoundAwayFromZeroToInt64( float value ) { return Impl.RoundAwayFromZeroToInt64( value ); }

		public static byte RoundAwayFromZeroToUInt8( float value ) { return Impl.RoundAwayFromZeroToUInt8( value ); }
		public static ushort RoundAwayFromZeroToUInt16( float value ) { return Impl.RoundAwayFromZeroToUInt16( value ); }
		public static uint RoundAwayFromZeroToUInt32( float value ) { return Impl.RoundAwayFromZeroToUInt32( value ); }
		public static ulong RoundAwayFromZeroToUInt64( float value ) { return Impl.RoundAwayFromZeroToUInt64( value ); }

		public static sbyte RoundAwayFromZeroToInt8( double value ) { return Impl.RoundAwayFromZeroToInt8( value ); }
		public static short RoundAwayFromZeroToInt16( double value ) { return Impl.RoundAwayFromZeroToInt16( value ); }
		public static int RoundAwayFromZeroToInt32( double value ) { return Impl.RoundAwayFromZeroToInt32( value ); }
		public static long RoundAwayFromZeroToInt64( double value ) { return Impl.RoundAwayFromZeroToInt64( value ); }

		public static byte RoundAwayFromZeroToUInt8( double value ) { return Impl.RoundAwayFromZeroToUInt8( value ); }
		public static ushort RoundAwayFromZeroToUInt16( double value ) { return Impl.RoundAwayFromZeroToUInt16( value ); }
		public static uint RoundAwayFromZeroToUInt32( double value ) { return Impl.RoundAwayFromZeroToUInt32( value ); }
		public static ulong RoundAwayFromZeroToUInt64( double value ) { return Impl.RoundAwayFromZeroToUInt64( value ); }

		#endregion

		#region Round towards zero ( trunc, truncf )

		public static float Truncate( float value ) { return Impl.RoundTowardsZero( value ); }
		public static double Truncate( double value ) { return Impl.RoundTowardsZero( value ); }

		public static sbyte TruncateToInt8( float value ) { return Impl.RoundTowardsZeroToInt8( value ); }
		public static short TruncateToInt16( float value ) { return Impl.RoundTowardsZeroToInt16( value ); }
		public static int TruncateToInt32( float value ) { return Impl.RoundTowardsZeroToInt32( value ); }
		public static long TruncateToInt64( float value ) { return Impl.RoundTowardsZeroToInt64( value ); }

		public static byte TruncateToUInt8( float value ) { return Impl.RoundTowardsZeroToUInt8( value ); }
		public static ushort TruncateToUInt16( float value ) { return Impl.RoundTowardsZeroToUInt16( value ); }
		public static uint TruncateToUInt32( float value ) { return Impl.RoundTowardsZeroToUInt32( value ); }
		public static ulong TruncateToUInt64( float value ) { return Impl.RoundTowardsZeroToUInt64( value ); }

		public static sbyte TruncateToInt8( double value ) { return Impl.RoundTowardsZeroToInt8( value ); }
		public static short TruncateToInt16( double value ) { return Impl.RoundTowardsZeroToInt16( value ); }
		public static int TruncateToInt32( double value ) { return Impl.RoundTowardsZeroToInt32( value ); }
		public static long TruncateToInt64( double value ) { return Impl.RoundTowardsZeroToInt64( value ); }

		public static byte TruncateToUInt8( double value ) { return Impl.RoundTowardsZeroToUInt8( value ); }
		public static ushort TruncateToUInt16( double value ) { return Impl.RoundTowardsZeroToUInt16( value ); }
		public static uint TruncateToUInt32( double value ) { return Impl.RoundTowardsZeroToUInt32( value ); }
		public static ulong TruncateToUInt64( double value ) { return Impl.RoundTowardsZeroToUInt64( value ); }

		#endregion

		[ForceInline]
		public static float Abs( float value ) { return bitcast<float>( bitcast<int>( value ) & ~( 1 << 31 ) ); }
		// public static float Abs( float value ) { return value >= 0 ? value : -value; }

		[ForceInline]
		public static double Abs( double value ) { return bitcast<double>( bitcast<long>( value ) & ~( 1L << 63 ) ); }
		// public static double Abs( double value ) { return value >= 0 ? value : -value; }

		/// @{
		/// No need for bit tweaks here, backend is capable to generate sequental code for such primitive constructs
		[ForceInline] public static sbyte Abs( sbyte value ) { return value > 0 ? value : -value; }
		[ForceInline] public static short Abs( short value ) { return value > 0 ? value : -value; }
		[ForceInline] public static int Abs( int value ) { return value > 0 ? value : -value; }
		[ForceInline] public static long Abs( long value ) { return value > 0 ? value : -value; }

		[ForceInline] public static sbyte Max( sbyte value1, sbyte value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static byte Max( byte value1, byte value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static short Max( short value1, short value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static ushort Max( ushort value1, ushort value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static int Max( int value1, int value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static uint Max( uint value1, uint value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static long Max( long value1, long value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static ulong Max( ulong value1, ulong value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static float Max( float value1, float value2 ) { return value1 > value2 ? value1 : value2; }
		[ForceInline] public static double Max( double value1, double value2 ) { return value1 > value2 ? value1 : value2; }

		[ForceInline] public static sbyte Min( sbyte value1, sbyte value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static byte Min( byte value1, byte value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static short Min( short value1, short value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static ushort Min( ushort value1, ushort value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static int Min( int value1, int value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static uint Min( uint value1, uint value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static long Min( long value1, long value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static ulong Min( ulong value1, ulong value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static float Min( float value1, float value2 ) { return value1 < value2 ? value1 : value2; }
		[ForceInline] public static double Min( double value1, double value2 ) { return value1 < value2 ? value1 : value2; }
		/// @}

		[ForceInline] public static bool InRange( sbyte minValue, sbyte value, sbyte maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( byte minValue, byte value, byte maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( short minValue, short value, short maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( ushort minValue, ushort value, ushort maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( int minValue, int value, int maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( uint minValue, uint value, uint maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( long minValue, long value, long maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( ulong minValue, ulong value, ulong maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( float minValue, float value, float maxValue ) { return value >= minValue & value <= maxValue; }
		[ForceInline] public static bool InRange( double minValue, double value, double maxValue ) { return value >= minValue & value <= maxValue; }

		[ForceInline] public static double DegreesToRadians( double value ) { return value * ( Pi / 180 ); }
		[ForceInline] public static double RadiansToDegrees( double value ) { return value * ( 180 / Pi ); }

		[ForceInline] public static sbyte Clamp( sbyte minValue, sbyte value, sbyte maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static byte Clamp( byte minValue, byte value, byte maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static short Clamp( short minValue, short value, short maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static ushort Clamp( ushort minValue, ushort value, ushort maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static int Clamp( int minValue, int value, int maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static uint Clamp( uint minValue, uint value, uint maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static long Clamp( long minValue, long value, long maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static ulong Clamp( ulong minValue, ulong value, ulong maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static float Clamp( float minValue, float value, float maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }
		[ForceInline] public static double Clamp( double minValue, double value, double maxValue ) { return value > maxValue ? maxValue : value < minValue ? minValue : value; }

		public static double Hypotenuse( double a, double b ) { return Sqrt( a * a + b * b ); }

		public static sbyte Average( sbyte a, sbyte b ) { return BitOperations.SignedShiftRight( a, ( sbyte ) 1 ) + BitOperations.SignedShiftRight( b, ( sbyte ) 1 ) + ( a & b & 1 ); }
		public static short Average( short a, short b ) { return BitOperations.SignedShiftRight( a, ( short ) 1 ) + BitOperations.SignedShiftRight( b, ( short ) 1 ) + ( a & b & 1 ); }
		public static int Average( int a, int b ) { return BitOperations.SignedShiftRight( a, ( int ) 1 ) + BitOperations.SignedShiftRight( b, ( int ) 1 ) + ( a & b & 1 ); }
		public static long Average( long a, long b ) { return BitOperations.SignedShiftRight( a, ( long ) 1 ) + BitOperations.SignedShiftRight( b, ( long ) 1 ) + ( a & b & 1 ); }

		public static byte Average( byte a, byte b ) { return ( a & b ) + ( ( a ^ b ) >> 1 ); }
		public static ushort Average( ushort a, ushort b ) { return ( a & b ) + ( ( a ^ b ) >> 1 ); }
		public static uint Average( uint a, uint b ) { return ( a & b ) + ( ( a ^ b ) >> 1 ); }
		public static ulong Average( ulong a, ulong b ) { return ( a & b ) + ( ( a ^ b ) >> 1 ); }

		/// @{ saturated arith
		[ForceInline] public static byte SaturatedAdd( byte a, byte b ) { return SaturatedAdd<byte>( a, b ); }
		[ForceInline] public static ushort SaturatedAdd( ushort a, ushort b ) { return SaturatedAdd<ushort>( a, b ); }
		[ForceInline] public static uint SaturatedAdd( uint a, uint b ) { return SaturatedAdd<uint>( a, b ); }
		[ForceInline] public static ulong SaturatedAdd( ulong a, ulong b ) { return SaturatedAdd<ulong>( a, b ); }
		// Less backend-friendly code:
		// [ForceInline] public static byte SaturatedAdd( byte a, byte b ) { return a > ~b ? byte.MaxValue : a + b; }
		// [ForceInline] public static ushort SaturatedAdd( ushort a, ushort b ) { return a > ~b ? ushort.MaxValue : a + b; }
		// [ForceInline] public static uint SaturatedAdd( uint a, uint b ) { return a > ~b ? uint.MaxValue : a + b; }
		// [ForceInline] public static ulong SaturatedAdd( ulong a, ulong b ) { return a > ~b ? ulong.MaxValue : a + b; }

		[ForceInline] public static sbyte SaturatedAdd( sbyte a, sbyte b ) { return SaturatedAdd<sbyte>( a, b ); }
		[ForceInline] public static short SaturatedAdd( short a, short b ) { return SaturatedAdd<short>( a, b ); }
		[ForceInline] public static int SaturatedAdd( int a, int b ) { return SaturatedAdd<int>( a, b ); }
		[ForceInline] public static long SaturatedAdd( long a, long b ) { return SaturatedAdd<long>( a, b ); }

		[ForceInline] public static byte SaturatedSub( byte a, byte b ) { return SaturatedSub<byte>( a, b ); }
		[ForceInline] public static ushort SaturatedSub( ushort a, ushort b ) { return SaturatedSub<ushort>( a, b ); }
		[ForceInline] public static uint SaturatedSub( uint a, uint b ) { return SaturatedSub<uint>( a, b ); }
		[ForceInline] public static ulong SaturatedSub( ulong a, ulong b ) { return SaturatedSub<ulong>( a, b ); }
		// Less backend-friendly code:
		// [ForceInline] public static byte SaturatedSub( byte a, byte b ) { return a < b ? byte.MinValue : a - b; }
		// [ForceInline] public static ushort SaturatedSub( ushort a, ushort b ) { return a < b ? ushort.MinValue : a - b; }
		// [ForceInline] public static uint SaturatedSub( uint a, uint b ) { return a < b ? uint.MinValue : a - b; }
		// [ForceInline] public static ulong SaturatedSub( ulong a, ulong b ) { return a < b ? ulong.MinValue : a - b; }

		[ForceInline] public static sbyte SaturatedSub( sbyte a, sbyte b ) { return SaturatedSub<sbyte>( a, b ); }
		[ForceInline] public static short SaturatedSub( short a, short b ) { return SaturatedSub<short>( a, b ); }
		[ForceInline] public static int SaturatedSub( int a, int b ) { return SaturatedSub<int>( a, b ); }
		[ForceInline] public static long SaturatedSub( long a, long b ) { return SaturatedSub<long>( a, b ); }

		[ForceInline] public static byte SaturatedMul( byte a, byte b ) { byte result; return checkwrap( result = a * b ) ? byte.MaxValue : result; }
		[ForceInline] public static ushort SaturatedMul( ushort a, ushort b ) { ushort result; return checkwrap( result = a * b ) ? ushort.MaxValue : result; }
		[ForceInline] public static uint SaturatedMul( uint a, uint b ) { uint result; return checkwrap( result = a * b ) ? uint.MaxValue : result; }
		[ForceInline] public static ulong SaturatedMul( ulong a, ulong b ) { ulong result; return checkwrap( result = a * b ) ? ulong.MaxValue : result; }

		[ForceInline] public static sbyte SaturatedMul( sbyte a, sbyte b ) { sbyte result; return checkwrap( result = a * b ) ? ( ( a ^ b ) >= 0 ? sbyte.MaxValue : sbyte.MinValue ) : result; }
		[ForceInline] public static short SaturatedMul( short a, short b ) { short result; return checkwrap( result = a * b ) ? ( ( a ^ b ) >= 0 ? short.MaxValue : short.MinValue ) : result; }
		[ForceInline] public static int SaturatedMul( int a, int b ) { int result; return checkwrap( result = a * b ) ? ( ( a ^ b ) >= 0 ? int.MaxValue : int.MinValue ) : result; }
		[ForceInline] public static long SaturatedMul( long a, long b ) { long result; return checkwrap( result = a * b ) ? ( ( a ^ b ) >= 0 ? long.MaxValue : long.MinValue ) : result; }

		/// @}
	}
}