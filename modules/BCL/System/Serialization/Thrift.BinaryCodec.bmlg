//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;
using System.Text;

namespace System.Serialization.Thrift {
	public class BinaryProtocolCodec : ProtocolCodec, BinaryReader.IEventHandler {
		protected const uint VersionMask = 0xFFFF0000;
		protected const uint Version1 = 0x80010000;

		protected bool _strictRead { get; set; } = false;
		protected bool _strictWrite { get; set; } = true;
		protected bool _framed { get; set; } = true;

		protected BinaryWriter _writer;
		protected BinaryReader _reader;

		protected int _frameLength;
		protected StreamingBufferInfo* _readBuffer, _writeBuffer;

		void BinaryReader.IEventHandler.EndOfStream( RuntimeObjectBase context ) { ExceptionHandler.OnException( ProtocolError.InvalidData ); IsStreamBroken = true; }
		void BinaryReader.IEventHandler.PrimitiveSizeExceeded( RuntimeObjectBase context ) { ExceptionHandler.OnException( ProtocolError.InvalidData ); IsStreamBroken = true; }

		private BinaryProtocolCodec( bool framed, bool strictRead, bool strictWrite ) {
			_strictRead = strictRead;
			_strictWrite = strictWrite;
			_framed = framed;
		}

		public BinaryProtocolCodec( IStream stream, bool framed = true, bool strictRead = false, bool strictWrite = true )
			: this( framed, strictRead, strictWrite ) {
			_writer = new BinaryWriter( stream );
			_reader = new BinaryReader( stream );

			_readBuffer = _reader.BaseStream.BufferInfo;
			_writeBuffer = _writer.BaseStream.BufferInfo;

			_reader.EventHandler = this;
		}

		public BinaryProtocolCodec( IStream input, IStream output, bool framed = true, bool strictRead = false, bool strictWrite = true )
			: this( framed, strictRead, strictWrite ) {
			_writer = new BinaryWriter( output );
			_reader = new BinaryReader( input );

			_readBuffer = _reader.BaseStream.BufferInfo;
			_writeBuffer = _writer.BaseStream.BufferInfo;

			_reader.EventHandler = this;
		}

		public override void Dispose() { // remove cyclic deps
			_reader.EventHandler = null;

			base.Dispose();
		}

		public override void WriteMessageBegin( Utf8String name, MessageInfo.Kind type, int seqID ) {
			if( _framed ) _writeBuffer->OnWritePerformed( 4 );

			if( _strictWrite ) {
				var version = Version1 | ( uint ) type;
				WriteInt32( ( int ) version );
				WriteString( name );
				WriteInt32( seqID );
			}
			else {
				WriteString( name );
				WriteByte( ( byte ) type );
				WriteInt32( seqID );
			}
		}

		public override MessageInfo ReadMessageBegin() {
			var message = default( MessageInfo );

			if( _framed ) {
				_frameLength = _reader.ReadInt32BigEndian();
				if( !_reader.EnsureReadable( ( uint ) _frameLength ) ) {
					ExceptionHandler.OnException( ProtocolError.SizeLimit );
					IsStreamBroken = true;
					return message;
				}
			}

			var size = _reader.PeekInt32BigEndian();
			if( size < 0 ) {
				ReadInt32();

				var version = ( uint ) size & VersionMask;
				if( version != Version1 ) {
					ExceptionHandler.OnException( ProtocolError.BadVersion );
					IsStreamBroken = true;
					return message;
				}

				message.Type = ( MessageInfo.Kind )( size & 0x000000FF );
				message.Name = ReadString();
				message.SeqID = ReadInt32();
			}
			else {
				if( _strictRead ) {
					ExceptionHandler.OnException( ProtocolError.BadVersion );
					IsStreamBroken = true;
					return message;
				}

				message.Name = ReadString();
				message.Type = ( MessageInfo.Kind ) ReadByte();
				message.SeqID = ReadInt32();
			}

			return message;
		}

		public override void WriteMessageEnd() {
			if( _framed ) *( uint_bigendian* ) _writeBuffer->Start = _writeBuffer->Position - 4;

			_writer.Flush( FlushKind.Write );
		}

		public override void ReadMessageEnd() {
		}

		public override void WriteStructBegin( Utf8String name ) {
		}

		public override StructInfo ReadStructBegin() {
			return default( StructInfo );
		}

		public override void WriteFieldBegin( Utf8String name, TypeKind type, short id ) {
			WriteByte( ( byte ) type );
			WriteInt16( id );
		}

		public override FieldInfo ReadFieldBegin() {
			FieldInfo field;
			field.Type = ( TypeKind ) ReadByte();

			if( !field.Type.IsValid ) { IsStreamBroken = true; return default( FieldInfo ); }

			if( field.Type != TypeKind.Stop )
				field.ID = ReadInt16();

			return field;
		}

		public override void WriteFieldStop() {
			WriteByte( ( byte ) TypeKind.Stop );
		}

		public override void WriteMapBegin( TypeKind keyType, TypeKind valueType, int count ) {
			WriteByte( ( byte ) keyType );
			WriteByte( ( byte ) valueType );
			WriteInt32( count );
		}

		public override MapInfo ReadMapBegin() {
			var result = new MapInfo {
				KeyType = ( TypeKind ) ReadByte(),
				ValueType = ( TypeKind ) ReadByte(),
				Count = ReadInt32()
			};

			ValidateContainerSize( result.Count );
			if( !result.KeyType.IsValid ) IsStreamBroken = true;
			if( !result.ValueType.IsValid ) IsStreamBroken = true;
			if( IsStreamBroken ) return default( MapInfo );

			return result;
		}

		public override ListInfo ReadListBegin() {
			var result = new ListInfo {
				ElementType = ( TypeKind ) ReadByte(),
				Count = ReadInt32()
			};

			ValidateContainerSize( result.Count );
			if( !result.ElementType.IsValid ) IsStreamBroken = true;
			if( IsStreamBroken ) return default( ListInfo );

			return result;
		}

		public override SetInfo ReadSetBegin() {
			var result = new SetInfo {
				ElementType = ( TypeKind ) ReadByte(),
				Count = ReadInt32()
			};

			ValidateContainerSize( result.Count );
			if( !result.ElementType.IsValid ) IsStreamBroken = true;
			if( IsStreamBroken ) return default( SetInfo );

			return result;
		}

		public override void WriteListBegin( TypeKind elementType, int count ) {
			WriteByte( ( byte ) elementType );
			WriteInt32( count );
		}

		public override void WriteSetBegin( TypeKind elementType, int count ) {
			WriteByte( ( byte ) elementType );
			WriteInt32( count );
		}

		public override void WriteBool( bool b ) {
			WriteByte( b ? ( byte ) 1 : ( byte ) 0 );
		}

		public override bool ReadBool() {
			if( IsStreamBroken ) return false;

			return ReadByte() == 1;
		}

		public override void WriteByte( byte value ) {
			_writer.Write( value );
		}

		public override byte ReadByte() {
			if( IsStreamBroken ) return 0;

			return _reader.ReadUInt8();
		}

		public override void WriteInt16( short value ) {
			_writer.WriteBigEndian( value );
		}

		public override short ReadInt16() {
			if( IsStreamBroken ) return 0;

			return _reader.ReadInt16BigEndian();
		}

		public override void WriteInt32( int value ) {
			_writer.WriteBigEndian( value );
		}

		public override int ReadInt32() {
			if( IsStreamBroken ) return 0;

			return _reader.ReadInt32BigEndian();
		}

		public override void WriteInt64( long value ) {
			_writer.WriteBigEndian( value );
		}

		public override long ReadInt64() {
			if( IsStreamBroken ) return 0;

			return _reader.ReadInt64BigEndian();
		}

		public override void WriteDouble( double value ) {
			_writer.WriteBigEndian( value );
		}

		public override double ReadDouble() {
			if( IsStreamBroken ) return 0;

			return _reader.ReadDoubleBigEndian();
		}

		public override void WriteBinary( byte[] b ) {
			WriteInt32( ( int ) b.Length );
			_writer.WriteValues( &b[0], b.Length );
		}

		public override byte[] ReadBinary() {
			if( IsStreamBroken ) return null;

			var size = ReadInt32();
			ValidateBlobSize( size );
			if( IsStreamBroken ) return null;

			var buf = new[size] byte;
			var readen = _reader.ReadValues( &buf[0], ( uint ) size );
			if( ( int ) readen != size ) { ExceptionHandler.OnException( ProtocolError.InvalidData ); IsStreamBroken = true; }
			return buf;
		}

		public override void WriteString( Utf8String value ) {
			WriteInt32( ( int ) value.ByteLength );
			_writer.WriteValues( value.GetChars(), value.ByteLength );
		}

		public override Utf8String ReadString() {
			if( IsStreamBroken ) return null;

			var byteLength = ReadInt32();
			ValidateStringSize( byteLength );
			if( IsStreamBroken ) return null;

			var builder = new Utf8String.Builder( ( uint ) byteLength );
			var readen = _reader.ReadValues( builder.GetChars(), ( uint ) byteLength );
			if( readen != ( uint ) byteLength ) { ExceptionHandler.OnException( ProtocolError.InvalidData ); IsStreamBroken = true; }
			return builder.Detach();
		}

		public override void WriteStructEnd() { }
		public override void ReadStructEnd() { }

		public override void WriteFieldEnd() { }
		public override void ReadFieldEnd() { }

		public override void WriteMapEnd() { }
		public override void ReadMapEnd() { }

		public override void WriteListEnd() { }
		public override void ReadListEnd() { }

		public override void WriteSetEnd() { }
		public override void ReadSetEnd() { }
	}
}