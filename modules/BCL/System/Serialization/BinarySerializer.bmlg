//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime;

namespace System.Serialization {
	/// Binary serializer for LPC/IPC. No backward compatibility or versioning
	public static class BinarySerializer {
		public static void Serialize( BinaryWriter writer, Binder.MapperEmpty mapper, Binder.Context& context ) {
			for( uint i = 0U, length = mapper.Binder.Mappings.Length; i < length; ++i )
				context.Binder.GetValue( context, i, writer );
		}

		public static void Deserialize( BinaryReader reader, Binder.MapperEmpty mapper, Binder.Context& context ) {
			for( uint i = 0, length = mapper.Binder.Mappings.Length; i < length; ++i )
				context.Binder.SetValue( context, i, reader );
		}
	}

	/// Simple and facade facade for BinarySerializer
	public class BinarySerializer<T> {
		public static readonly Binder.MapperEmpty Mapper = new Binder.MapperEmpty( typeof( T ) );

		public static void Serialize( T& object, BinaryWriter stream ) {
			var binderContext = Mapper.Binder.CreateContext( &object );
			BinarySerializer.Serialize( stream, Mapper, binderContext );
		}

		public static void Deserialize( T& object, BinaryReader stream ) {
			var binderContext = Mapper.Binder.CreateContext( &object );
			BinarySerializer.Deserialize( stream, Mapper, binderContext );
		}
	}
}