//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime;

namespace System.Serialization {
	/// Stream serializer for *.ini files
	public class IniSerializer {
		protected Binder.MapperUtf16 _mapper;
		protected Binder.Context* _context;

		public IniSerializer( ITextWriter writer ) { _writer = writer; }
		public IniSerializer( ITextReader reader ) { _reader = reader; }

		protected ITextWriter _writer;
		protected ITextReader _reader;

		protected void EscapeValue( StringBuilder result, StringBuilder source, uint startIndex, uint endIndex ) {
			for( var i = startIndex; i < endIndex; ++i ) {
				var @char = source[i];
				switch( @char ) {
					case '\\':
					case '\a':
					case '\b':
					case '\n':
					case '\r':
					case '\t':
					case '\0':

					case '#':
					case '=':
					case ';':
					case ':':
						result.Append( '\\' );
						break;
				}

				result.Append( @char );
			}
		}

		protected void UnescapeValue( StringBuilder result, StringBuilder source, uint startIndex, uint endIndex ) {
			var escape = false;

			for( var i = startIndex; i < endIndex; ++i ) {
				var @char = source[i];
				if( @char == '\\' ) {
					if( !escape ) { escape = true; continue; }
				}

				result.Append( @char );
				escape = false;
			}
		}

		public void Serialize( Binder.MapperUtf16 mapper, Binder.Context& context ) {
			_mapper = mapper;
			_context = &context;

			bool isNull;
			using( var builder1 = StringBuilder.CachedBuilders.PopScoped() )
			using( var builder2 = StringBuilder.CachedBuilders.PopScoped() ) {
				var valueFormatter = builder1.Value;
				var valueFormatterEscaped = builder2.Value;

				foreach( var idMapping in mapper.IdMapping ) {
					var name = idMapping.Key;

					valueFormatterEscaped.Clear();

					valueFormatter.Clear();
					valueFormatter.Append( name );
					EscapeValue( valueFormatterEscaped, valueFormatter, 0, valueFormatter.Length );

					valueFormatterEscaped.Append( '=' );

					context.Binder.GetValue( context, idMapping.Value, valueFormatter, isNull );
					EscapeValue( valueFormatterEscaped, valueFormatter, 0, valueFormatter.Length );

					if( !isNull )
						_writer.WriteLine( valueFormatterEscaped );
				}
			}
		}

		public void Deserialize( Binder.MapperUtf16 mapper, Binder.Context& context ) {
			_mapper = mapper;
			_context = &context;

			using( var builder1 = StringBuilder.CachedBuilders.PopScoped() )
			using( var builder2 = StringBuilder.CachedBuilders.PopScoped() ) {
				var valueFormatter = builder1.Value;
				var valueFormatterEscaped = builder2.Value;

				while( _reader.ReadLine( valueFormatterEscaped ) ) {
					valueFormatterEscaped.Trim();

					if( valueFormatterEscaped.StartsWith( '[' ) ) continue;
					if( valueFormatterEscaped.StartsWith( '#' ) ) continue;
					if( valueFormatterEscaped.StartsWith( ';' ) ) continue;

					var startIndex = 0u;

				findNext:
					var equalsIndex = valueFormatterEscaped.IndexOf( '=', startIndex );
					if( equalsIndex == uint.MaxValue ) continue;
					if( equalsIndex > 0 && valueFormatterEscaped[equalsIndex - 1] == '\\' ) {
						startIndex = equalsIndex + 1;
						goto findNext;
					}

					valueFormatter.Clear();
					UnescapeValue( valueFormatter, valueFormatterEscaped, 0, equalsIndex );
					var key = valueFormatter.ToString();

					var mapping = mapper[key];
					if( mapping == uint.MaxValue ) continue;

					valueFormatter.Clear();
					UnescapeValue( valueFormatter, valueFormatterEscaped, equalsIndex + 1, valueFormatterEscaped.Length );

					context.Binder.SetValue( context, mapping, valueFormatter );
				}
			}
		}
	}

	/// IniSerializer<T> simplifies access to IniSerializer
	public class IniSerializer<T> {
		public static readonly Binder.MapperUtf16 Mapper = new Binder.MapperUtf16( typeof( T ) );

		public static IniSerializer Serialize( T& object, ITextWriter writer ) {
			var binderContext = Mapper.Binder.CreateContext( &object );
			var context = new IniSerializer( writer );
			context.Serialize( Mapper, binderContext );
			return context;
		}

		public static IniSerializer Deserialize( T& object, ITextReader reader ) {
			var binderContext = Mapper.Binder.CreateContext( &object );
			var context = new IniSerializer( reader );
			context.Deserialize( Mapper, binderContext );
			return context;
		}
	}
}