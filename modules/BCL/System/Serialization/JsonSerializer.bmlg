//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime;
using System.Web;

namespace System.Serialization {
	/// Stream serializer for *.ini files
	public class JsonSerializer {
		protected Binder.MapperUtf16 _mapper;
		protected Binder.Context* _context;

		public JsonSerializer( StringBuilder writer ) { _writer = new JsonWriter( writer ); }
		public JsonSerializer( ITextReader reader ) { _reader = reader; }

		protected JsonWriter _writer;
		protected ITextReader _reader;

		public void Serialize( Binder.MapperUtf16 mapper, Binder.Context& context ) {
			_mapper = mapper;
			_context = &context;

			bool isNull;
			using( var builder1 = StringBuilder.CachedBuilders.PopScoped() ) {
				var valueFormatter = builder1.Value;

				using( _writer.Object() ) {
					foreach( var idMapping in mapper.IdMapping ) {
						var name = idMapping.Key;

						switch( mapper.Binder.Mappings[idMapping.Value].GetType() ) {
							case typeof( bool ): { bool value; context.Binder.GetValue( context.Object, idMapping.Value, value ); _writer.Property( name, value ); } break;

							case typeof( sbyte ):
							case typeof( short_littleendian ):
							case typeof( short_bigendian ):
							case typeof( int_littleendian ):
							case typeof( int_bigendian ): { int value; context.Binder.GetValue( context.Object, idMapping.Value, value ); _writer.Property( name, value ); } break;
							case typeof( long_littleendian ):
							case typeof( long_bigendian ): { long value; context.Binder.GetValue( context.Object, idMapping.Value, value ); _writer.Property( name, value ); } break;

							case typeof( byte ):
							case typeof( ushort_littleendian ):
							case typeof( ushort_bigendian ):
							case typeof( uint_littleendian ):
							case typeof( uint_bigendian ): { int value; context.Binder.GetValue( context.Object, idMapping.Value, value ); _writer.Property( name, value ); } break;
							case typeof( ulong_littleendian ):
							case typeof( ulong_bigendian ): { long value; context.Binder.GetValue( context.Object, idMapping.Value, value ); _writer.Property( name, value ); } break;

							case typeof( float_littleendian ):
							case typeof( float_bigendian ):
							case typeof( double_littleendian ):
							case typeof( double_bigendian ): { double value; context.Binder.GetValue( context.Object, idMapping.Value, value ); _writer.Property( name, value ); } break;

							default:
								context.Binder.GetValue( context.Object, idMapping.Value, valueFormatter, isNull );
								if( isNull ) {
									_writer.PropertyStart( name );
									_writer.Null();
								}
								else
									_writer.Property( name, valueFormatter.ToString() );
								break;
						}
					}
				}
			}
		}

		public void Deserialize( Binder.MapperUtf16 mapper, Binder.Context& context ) {
		}
	}

	/// Simple and facade facade for BinarySerializer
	public class JsonSerializer<T> {
		public static readonly Binder.MapperUtf16 Mapper = new Binder.MapperUtf16( typeof( T ) );

		public static JsonSerializer Serialize( T& object, ITextWriter writer ) {
			var binderContext = Mapper.Binder.CreateContext( &object );
			using( var builder = StringBuilder.CachedBuilders.PopScoped() ) {
				var context = new JsonSerializer( builder.Value );
				context.Serialize( Mapper, binderContext );
				writer.Write( builder.Value );
				return context;
			}
		}

		public static JsonSerializer Deserialize( T& object, ITextReader reader ) {
			var binderContext = Mapper.Binder.CreateContext( &object );
			var context = new JsonSerializer( reader );
			context.Deserialize( Mapper, binderContext );
			return context;
		}
	}
}