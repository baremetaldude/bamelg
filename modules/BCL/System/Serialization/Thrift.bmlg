//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Text;

namespace System.Serialization.Thrift {
	public enum TypeKind : byte {
		Stop =    0,
		Void =    1,
		Bool =    2,
		Byte =    3,
		Double =  4,
		Int16 =   6,
		Int32 =   8,
		Int64 =  10,
		String = 11,
		Struct = 12,
		Map =    13,
		Set =    14,
		List =   15,
	}

	public struct MapInfo {
		public TypeKind KeyType;
		public TypeKind ValueType;
		public int Count;

		public MapInfo( TypeKind keyType, TypeKind valueType, int count ) {
			KeyType = keyType;
			ValueType = valueType;
			Count = count;
		}
	}

	public struct ListInfo {
		public TypeKind ElementType;
		public int Count;

		public ListInfo( TypeKind elementType, int count ) {
			ElementType = elementType;
			Count = count;
		}
	}

	public struct SetInfo {
		public TypeKind ElementType;
		public int Count;

		public SetInfo( TypeKind elementType, int count ) {
			ElementType = elementType;
			Count = count;
		}

		public SetInfo( ListInfo list )
			: this( list.ElementType, list.Count ) {
		}
	}

	public struct FieldInfo {
		public Utf8String Name;
		public TypeKind Type;
		public short ID;

		public FieldInfo( Utf8String name, TypeKind type, short id ) {
			Name = name;
			Type = type;
			ID = id;
		}
	}

	public struct StructInfo {
		public Utf8String Name;

		public StructInfo( Utf8String name ) {
			Name = name;
		}
	}

	public struct MessageInfo {
		public Utf8String Name;
		public Kind Type;
		public int SeqID;

		public MessageInfo( Utf8String name, Kind type, int seqid ) {
			Name = name;
			Type = type;
			SeqID = seqid;
		}

		public enum Kind {
			Call =      1,
			Reply =     2,
			Exception = 3, // ServerException
			Oneway =    4,
		}
	}

	public interface IRequestHandler {
		bool Process( ProtocolCodec reader, ProtocolCodec writer );
	}

	public interface IExceptionHandler {
		void OnException( ProtocolError error );
		void OnException( ServerException exception );
	}

	public struct ExceptionHandlerNull : IExceptionHandler {
		public static readonly thistype Instance;

		#region IExceptionHandler Members

		public void OnException( ProtocolError error ) { }
		public void OnException( ServerException exception ) { }

		#endregion
	}

	public struct ExceptionHandlerConsole : IExceptionHandler {
		public static readonly thistype Instance;

		#region IExceptionHandler Members

		public void OnException( ProtocolError error ) { Console.WriteLine( "THRIFT: {0}", error ); }
		public void OnException( ServerException exception ) { Console.WriteLine( "THRIFT: {0}", exception ); }

		#endregion
	}

	public abstract class ProtocolCodec {
		protected ProtocolCodec() {
			DebugDefaults();
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void DebugDefaults() {
			ExceptionHandler = ExceptionHandlerConsole.Instance;
		}

		public bool IsStreamBroken { get; set; } = false;
		public IExceptionHandler ExceptionHandler = ExceptionHandlerNull.Instance;

		public abstract void WriteMessageBegin( Utf8String name, MessageInfo.Kind type, int seqID );
		public abstract void WriteMessageEnd();
		public abstract MessageInfo ReadMessageBegin();
		public abstract void ReadMessageEnd();

		public abstract void WriteStructBegin( Utf8String name );
		public abstract void WriteStructEnd();
		public abstract StructInfo ReadStructBegin();
		public abstract void ReadStructEnd();

		public abstract void WriteFieldBegin( Utf8String name, TypeKind type, short id );
		public abstract void WriteFieldEnd();
		public abstract FieldInfo ReadFieldBegin();
		public abstract void ReadFieldEnd();

		public abstract void WriteMapBegin( TypeKind keyType, TypeKind valueType, int count );
		public abstract void WriteMapEnd();
		public abstract MapInfo ReadMapBegin();
		public abstract void ReadMapEnd();

		public abstract void WriteListBegin( TypeKind elementType, int count );
		public abstract void WriteListEnd();
		public abstract ListInfo ReadListBegin();
		public abstract void ReadListEnd();

		public abstract void WriteSetBegin( TypeKind elementType, int count );
		public abstract void WriteSetEnd();
		public abstract SetInfo ReadSetBegin();
		public abstract void ReadSetEnd();

		public abstract void WriteBool( bool value );
		public abstract bool ReadBool();

		public abstract void WriteByte( byte value );
		public abstract byte ReadByte();

		public abstract void WriteInt16( short value );
		public abstract short ReadInt16();

		public abstract void WriteInt32( int value );
		public abstract int ReadInt32();

		public abstract void WriteInt64( long value );
		public abstract long ReadInt64();

		public abstract void WriteDouble( double value );
		public abstract double ReadDouble();

		public abstract void WriteString( Utf8String value );
		public abstract Utf8String ReadString();

		public abstract void WriteBinary( byte[] value );
		public abstract byte[] ReadBinary();

		public abstract void WriteFieldStop();

		public int MaxStringSize = int.MaxValue;
		public int MaxBlobSize = int.MaxValue;
		public int MaxContainerSize = int.MaxValue;

		protected void ValidateCount( int count ) {
			if( count < 0 ) {
				ExceptionHandler.OnException( ProtocolError.NegativeSize );
				IsStreamBroken = true;
			}
		}

		protected void ValidateContainerSize( int size ) {
			ValidateCount( size );

			if( size > MaxContainerSize ) {
				ExceptionHandler.OnException( ProtocolError.SizeLimit );
				IsStreamBroken = true;
			}
		}

		protected void ValidateStringSize( int size ) {
			ValidateCount( size );

			if( size > MaxStringSize ) {
				ExceptionHandler.OnException( ProtocolError.SizeLimit );
				IsStreamBroken = true;
			}
		}

		protected void ValidateBlobSize( int size ) {
			ValidateCount( size );

			if( size > MaxBlobSize ) {
				ExceptionHandler.OnException( ProtocolError.SizeLimit );
				IsStreamBroken = true;
			}
		}

		public void WriteDateTime( DateTime value ) {
			WriteInt64( *( long* ) &value );
		}

		public void WriteTimeSpan( TimeSpan value ) {
			WriteInt64( *( long* ) &value );
		}

		public void WriteGuid( Guid value ) {
			var result = new[16] byte;
			*( byte[16]* ) &result[0] = value.Bytes;
			WriteBinary( result );
		}

		public DateTime ReadDateTime() {
			var result = ReadInt64();
			return *( DateTime* ) &result;
		}

		public TimeSpan ReadTimeSpan() {
			var result = ReadInt64();
			return *( TimeSpan* ) &result;
		}

		public Guid ReadGuid() {
			var value = ReadBinary();
			if( value == null || value.Length != 16 ) return default( Guid );

			Guid result;
			result.Bytes = *( byte[16]* ) &value[0];
			return result;
		}

		public void Skip( TypeKind type ) {
			switch( type ) {
				case TypeKind.Bool: ReadBool(); break;
				case TypeKind.Byte: ReadByte(); break;
				case TypeKind.Int16: ReadInt16(); break;
				case TypeKind.Int32: ReadInt32(); break;
				case TypeKind.Int64: ReadInt64(); break;
				case TypeKind.Double: ReadDouble(); break;
				case TypeKind.String: ReadBinary(); break;

				case TypeKind.Struct:
					ReadStructBegin();
					while( true ) {
						var field = ReadFieldBegin();
						if( field.Type == TypeKind.Stop )
							break;

						Skip( field.Type );
						ReadFieldEnd();
					}

					ReadStructEnd();
					break;

				case TypeKind.Map:
					var map = ReadMapBegin();
					for( var i = 0; i < map.Count; i++ ) {
						Skip( map.KeyType );
						Skip( map.ValueType );
					}

					ReadMapEnd();
					break;

				case TypeKind.Set:
					var set = ReadSetBegin();
					for( var i = 0; i < set.Count; i++ )
						Skip( set.ElementType );

					ReadSetEnd();
					break;

				case TypeKind.List:
					var list = ReadListBegin();
					for( var i = 0; i < list.Count; i++ )
						Skip( list.ElementType );

					ReadListEnd();
					break;

				default:
					IsStreamBroken = true;
					ExceptionHandler.OnException( ProtocolError.InvalidData );
					break;
			}
		}
	}

	public enum ProtocolError {
		[ErrorCodeSuccess]
		OK =             0,
		InvalidData =    1,
		NegativeSize =   2,
		SizeLimit =      3,
		BadVersion =     4,
		NotImplemented = 5,
	}

	public struct ServerException {
		public Kind Type;
		public Utf8String Message;

		public ServerException() {
		}

		public ServerException( Kind type ) {
			Type = type;
		}

		public ServerException( Kind type, Utf8String message ) {
			Type = type;
		}

		public static ServerException Read( ProtocolCodec reader ) {
			Utf8String message = null;
			var type = Kind.Unknown;

			reader.ReadStructBegin();
			while( true ) {
				var field = reader.ReadFieldBegin();
				if( field.Type == TypeKind.Stop )
					break;

				switch( field.ID ) {
					case 1:
						if( field.Type == TypeKind.String )
							message = reader.ReadString();
						else reader.Skip( field.Type );
						break;
					case 2:
						if( field.Type == TypeKind.Int32 )
							type = ( Kind ) reader.ReadInt32();
						else reader.Skip( field.Type );
						break;

					default:
						reader.Skip( field.Type );
						break;
				}

				reader.ReadFieldEnd();
			}

			reader.ReadStructEnd();

			return new ServerException( type, message );
		}

		public void Write( ProtocolCodec writer ) {
			writer.WriteStructBegin( "TApplicationException" );

			if( !Message.IsNullOrEmpty ) {
				writer.WriteFieldBegin( "message", TypeKind.String, 1 );
				writer.WriteString( Message );
				writer.WriteFieldEnd();
			}

			writer.WriteFieldBegin( "type", TypeKind.Int32, 2 );
			writer.WriteInt32( ( int ) Type );
			writer.WriteFieldEnd();
			writer.WriteFieldStop();
			writer.WriteStructEnd();
		}

		public enum Kind {
			Unknown,
			UnknownMethod,
			InvalidMessageType,
			WrongMethodName,
			BadSequenceID,
			MissingResult,
		}
	}
}