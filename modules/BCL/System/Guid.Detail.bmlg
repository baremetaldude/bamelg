//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.IO;
using System.Runtime.CompilerServices;
using System.Serialization;

namespace System {
	public sealed partial struct Guid : IBinarySerializable, ITextSerializable, IFormattable {
		private byte[16] Data;

		void IBinarySerializable.Serialize( BinaryWriter stream, SerializerContext context ) { stream.Write( this ); }
		void IBinarySerializable.Deserialize( void* object, BinaryReader stream, SerializerContext context ) { *( thistype* ) object = stream.ReadGuid(); }

		void ITextSerializable.Serialize( StringBuilder builder, string format, SerializerContext context ) { builder.Append( this, format ); }
		void ITextSerializable.Deserialize( void* result, StringBuilder builder, SerializerContext context ) { TryParse( builder.GetTextSpan(), *( thistype* ) result ); }

		public void ToString( StringBuilder builder, string format ) {
			switch( format ) {
				case "":
				case "D": // 6F9619FF-8B86-D011-B42D-00CF4FC964FF
					if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
						builder.Append( *( uint_littleendian* ) &Data[0], "X8" );
						builder.Append( '-' );
						builder.Append( *( ushort_littleendian* ) &Data[4], "X4" );
						builder.Append( '-' );
						builder.Append( *( ushort_littleendian* ) &Data[6], "X4" );
					}
					else {
						builder.Append( *( uint_bigendian* ) &Data[0], "X8" );
						builder.Append( '-' );
						builder.Append( *( ushort_bigendian* ) &Data[4], "X4" );
						builder.Append( '-' );
						builder.Append( *( ushort_bigendian* ) &Data[6], "X4" );
					}

					builder.Append( '-' );
					builder.Append( *( ushort_bigendian* ) &Data[8], "X4" );
					builder.Append( '-' );
					builder.Append( *( uint_bigendian* ) &Data[10], "X8" );
					builder.Append( *( ushort_bigendian* ) &Data[14], "X4" );
					break;

				case "B": // {6F9619FF-8B86-D011-B42D-00CF4FC964FF}
					builder.Append( '{' );
					if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
						builder.Append( *( uint_littleendian* ) &Data[0], "X8" );
						builder.Append( '-' );
						builder.Append( *( ushort_littleendian* ) &Data[4], "X4" );
						builder.Append( '-' );
						builder.Append( *( ushort_littleendian* ) &Data[6], "X4" );
					}
					else {
						builder.Append( *( uint_bigendian* ) &Data[0], "X8" );
						builder.Append( '-' );
						builder.Append( *( ushort_bigendian* ) &Data[4], "X4" );
						builder.Append( '-' );
						builder.Append( *( ushort_bigendian* ) &Data[6], "X4" );
					}

					builder.Append( '-' );
					builder.Append( *( ushort_bigendian* ) &Data[8], "X4" );
					builder.Append( '-' );
					builder.Append( *( uint_bigendian* ) &Data[10], "X8" );
					builder.Append( *( ushort_bigendian* ) &Data[14], "X4" );
					builder.Append( '}' );
					break;

				case "P": // (6F9619FF-8B86-D011-B42D-00CF4FC964FF)
					builder.Append( '(' );
					if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
						builder.Append( *( uint_littleendian* ) &Data[0], "X8" );
						builder.Append( '-' );
						builder.Append( *( ushort_littleendian* ) &Data[4], "X4" );
						builder.Append( '-' );
						builder.Append( *( ushort_littleendian* ) &Data[6], "X4" );
					}
					else {
						builder.Append( *( uint_bigendian* ) &Data[0], "X8" );
						builder.Append( '-' );
						builder.Append( *( ushort_bigendian* ) &Data[4], "X4" );
						builder.Append( '-' );
						builder.Append( *( ushort_bigendian* ) &Data[6], "X4" );
					}

					builder.Append( '-' );
					builder.Append( *( ushort_bigendian* ) &Data[8], "X4" );
					builder.Append( '-' );
					builder.Append( *( uint_bigendian* ) &Data[10], "X8" );
					builder.Append( *( ushort_bigendian* ) &Data[14], "X4" );
					builder.Append( ')' );
					break;

				case "X":
					builder.Append( '{' );
					builder.Append( "0x" );
					if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
						builder.Append( *( uint_littleendian* ) &Data[0], "X8" );
						builder.Append( ",0x" );
						builder.Append( *( ushort_littleendian* ) &Data[4], "X4" );
						builder.Append( ",0x" );
						builder.Append( *( ushort_littleendian* ) &Data[6], "X4" );
					}
					else {
						builder.Append( *( uint_bigendian* ) &Data[0], "X8" );
						builder.Append( ",0x" );
						builder.Append( *( ushort_bigendian* ) &Data[4], "X4" );
						builder.Append( ",0x" );
						builder.Append( *( ushort_bigendian* ) &Data[6], "X4" );
					}

					builder.Append( ",{0x" );
					builder.Append( Data[8], "X2" );
					for( var i = 9; i < Data.Length; ++i ) {
						builder.Append( ",0x" );
						builder.Append( Data[i], "X2" );
					}

					builder.Append( "}}" );
					break;

				case "N": // 6F9619FF8B86D011B42D00CF4FC964FF
					if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
						builder.Append( *( uint_littleendian* ) &Data[0], "X8" );
						builder.Append( *( ushort_littleendian* ) &Data[4], "X4" );
						builder.Append( *( ushort_littleendian* ) &Data[6], "X4" );
					}
					else {
						builder.Append( *( ulong_bigendian* ) &Data[0], "X16" );
					}

					builder.Append( *( ulong_bigendian* ) &Data[8], "X16" );
					break;
			}
		}

		public byte[16] Bytes {
			get {
				byte[16] result;
				if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
					result[0] = Data[3];
					result[1] = Data[2];
					result[2] = Data[1];
					result[3] = Data[0];

					result[4] = Data[5];
					result[5] = Data[4];

					result[6] = Data[7];
					result[7] = Data[6];

					result[8] = Data[8];
					result[9] = Data[9];
					result[10] = Data[10];
					result[11] = Data[11];
					result[12] = Data[12];
					result[13] = Data[13];
					result[14] = Data[14];
					result[15] = Data[15];
				}
				else
					result = Data;

				return result;
			}
			set {
				if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
					Data[0] = value[3];
					Data[1] = value[2];
					Data[2] = value[1];
					Data[3] = value[0];

					Data[4] = value[5];
					Data[5] = value[4];

					Data[6] = value[7];
					Data[7] = value[6];

					Data[8] = value[8];
					Data[9] = value[9];
					Data[10] = value[10];
					Data[11] = value[11];
					Data[12] = value[12];
					Data[13] = value[13];
					Data[14] = value[14];
					Data[15] = value[15];
				}
				else
					Data = value;
			}
		}

		private static TextParsingStatus TryFetch<TElement>( TElement* text, uint textLength, Guid& parsedResult, uint& readen = nullref, bool trimLeadingWhitespace = true, bool trimTrailingWhitespace = true ) {
			var data = ( byte* ) &parsedResult;
			var result = false;

			var start = PrimitiveTypesParser.SkipWhitespace<TElement>( text, textLength, 0U, trimLeadingWhitespace );
			var buffer = text + start;
			var length = textLength - start;
			var patternLength = 0U;

			if( length >= 38 ) { // {6F9619FF-8B86-D011-B42D-00CF4FC964FF} or (6F9619FF-8B86-D011-B42D-00CF4FC964FF)
				if( ( ( buffer[0] == '{' & buffer[37] == '}' ) || ( buffer[0] == '(' & buffer[37] == ')' ) ) && buffer[9] == '-' && buffer[14] == '-' && buffer[19] == '-' && buffer[24] == '-' ) {
					result = true;

					if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[1], 2, data[3] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[3], 2, data[2] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[5], 2, data[1] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[7], 2, data[0] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[10], 2, data[5] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[12], 2, data[4] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[15], 2, data[7] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[17], 2, data[6] );
					}
					else {
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[1], 2, data[0] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[3], 2, data[1] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[5], 2, data[2] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[7], 2, data[3] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[10], 2, data[4] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[12], 2, data[5] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[15], 2, data[6] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[17], 2, data[7] );
					}

					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[20], 2, data[8] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[22], 2, data[9] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[25], 2, data[10] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[27], 2, data[11] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[29], 2, data[12] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[31], 2, data[13] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[33], 2, data[14] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[35], 2, data[15] );

					patternLength = 38;
					goto find_match;
				}
			}

			if( length >= 36 ) { // 6F9619FF-8B86-D011-B42D-00CF4FC964FF
				if( buffer[8] == '-' && buffer[13] == '-' && buffer[18] == '-' && buffer[23] == '-' ) {
					result = true;

					if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[0], 2, data[3] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[2], 2, data[2] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[4], 2, data[1] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[6], 2, data[0] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[9], 2, data[5] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[11], 2, data[4] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[14], 2, data[7] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[16], 2, data[6] );
					}
					else {
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[0], 2, data[0] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[2], 2, data[1] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[4], 2, data[2] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[6], 2, data[3] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[9], 2, data[4] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[11], 2, data[5] );

						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[14], 2, data[6] );
						result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[16], 2, data[7] );
					}

					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[19], 2, data[8] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[21], 2, data[9] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[24], 2, data[10] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[26], 2, data[11] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[28], 2, data[12] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[30], 2, data[13] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[32], 2, data[14] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[34], 2, data[15] );

					patternLength = 36;
					goto find_match;
				}
			}

			if( length >= 32 ) { // 6F9619FF8B86D011B42D00CF4FC964FF
				result = true;

				if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[0], 2, data[3] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[2], 2, data[2] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[4], 2, data[1] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[6], 2, data[0] );

					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[8], 2, data[5] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[10], 2, data[4] );

					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[12], 2, data[7] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[14], 2, data[6] );
				}
				else {
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[0], 2, data[0] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[2], 2, data[1] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[4], 2, data[2] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[6], 2, data[3] );

					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[8], 2, data[4] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[10], 2, data[5] );

					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[12], 2, data[6] );
					result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[14], 2, data[7] );
				}

				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[16], 2, data[8] );
				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[18], 2, data[9] );
				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[20], 2, data[10] );
				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[22], 2, data[11] );
				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[24], 2, data[12] );
				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[26], 2, data[13] );
				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[28], 2, data[14] );
				result &= PrimitiveTypesParser.TryParseHexUInt8( &buffer[30], 2, data[15] );

				patternLength = 32;
				goto find_match;
			}

		find_match:
			if( result ) {
				var end = PrimitiveTypesParser.SkipWhitespace<TElement>( buffer, length, patternLength, trimTrailingWhitespace );
				if( result && readen != nullref ) readen = end;
				else result &= end == length;
			}

			if( !result && readen != nullref ) readen = 0;

			return result ? TextParsingStatus.OK : TextParsingStatus.Format;
		}

		[UnitTest]
		public static void ParseTest() {
			var guid = Guid.Parse( "ce9515ab-60b0-473e-81b6-59b19300c988" );
			Assert.AreEqual( guid, Guid.Parse( "{ce9515ab-60b0-473e-81b6-59b19300c988}" ) );
			Assert.AreEqual( guid, Guid.Parse( "(ce9515ab-60b0-473e-81b6-59b19300c988)" ) );
			Assert.AreEqual( guid, Guid.Parse( "ce9515ab60b0473e81b659b19300c988" ) );
		}
	}
}