//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;

namespace System.IO {
	/// Used to implement substream within '_baseStream' stream limited by '_limit' bytes to read
	/// '_baseStream' may not be used until 'ReadSubStream' is disposed
	public class ReadSubStream : IStream {
		private IStream _baseStream;

		private ulong _limit;
		private StreamingBufferInfo* _bufferInfo;
		private uint _oldAvailableValue = uint.MaxValue, _oldPositionValue = 0;

		public ulong Count { get { return _limit; } }

		public ReadSubStream( IStream baseStream, ulong limit ) {
			_baseStream = baseStream;
			_limit = limit;

			_bufferInfo = baseStream.BufferInfo;
			if( _bufferInfo != null ) {
				_oldPositionValue = _bufferInfo->Position;
				UpdateBufferInfo();
			}
		}

		private void UpdateBufferInfo() {
			if( _bufferInfo == null ) return;

			if( _bufferInfo->AvailableToRead > _limit ) {
				var limit32 = ( uint ) _limit;

				Debug.Assert( _oldAvailableValue == uint.MaxValue );
				_oldAvailableValue = _bufferInfo->AvailableToRead - limit32;
				_bufferInfo->AvailableToRead = limit32;
			}
		}

		#region IStream Members

		public uint Read( void* buffer, uint count ) {
			var toRead = 0U;
			if( _limit > count ) toRead = count;
			else toRead = ( uint ) _limit;

			if( toRead == 0 ) return 0;

			var readen = _baseStream.Read( buffer, toRead );

			if( _bufferInfo != null ) {
				_limit -= _bufferInfo->Position - _oldPositionValue;
				_oldPositionValue = _bufferInfo->Position;
				UpdateBufferInfo();
			}
			else
				_limit -= readen;

			return toRead;
		}

		public void Write( void* buffer, uint count ) { Assert.Unreachable(); }

		uint IStream.Read( vararg MemorySegment segments ) { var result = 0U; foreach( var segment in segments ) result += Read( segment.Start, ( uint ) segment.Count ); return result; }
		void IStream.Write( vararg MemorySegment segments ) { Assert.Unreachable(); }

		public void Flush( FlushKind flushKind ) {
			switch( flushKind ) {
				case FlushKind.Read:
					if( _bufferInfo != null ) {
						_limit -= _bufferInfo->Position - _oldPositionValue;

						if( _bufferInfo->AvailableToRead < _limit )
							_baseStream.Flush( FlushKind.Read );

						_oldPositionValue = _bufferInfo->Position;
						UpdateBufferInfo();
					}
					else
						_baseStream.Flush( FlushKind.Read );

					break;

				case FlushKind.Write:
				case FlushKind.DeepWrite:
				case FlushKind.SynchronizeWrite:
					Assert.Unreachable();
					break;
			}
		}

		public StreamingBufferInfo* BufferInfo {
			get { return _bufferInfo; }
		}

		public StreamCapabilities Capabilities {
			get { return StreamCapabilities.Read; }
		}

		#endregion

		public override void Dispose() {
			if( _baseStream != null ) {
				this.DrainToEnd();

				if( _limit == 0 & _oldAvailableValue != uint.MaxValue )
					_bufferInfo->AvailableToRead = _oldAvailableValue;

				_baseStream = null;
				_bufferInfo = null;
			}

			base.Dispose();
		}

		TimeSpan IStream.ReadTimeout { get { return TimeSpan.Zero; } set { } }
		TimeSpan IStream.WriteTimeout { get { return TimeSpan.Zero; } set { } }

		long IStream.Position { get { return 0; } }
		long IStream.Seek( long offset, SeekOrigin origin ) { return 0; }

		MemoryMappedView IStream.CreateReadView( uintptr offset, uintptr length ) { return null; }
		MemoryMappedView IStream.CreateWriteView( uintptr offset, uintptr length ) { return null; }
	}
}