//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;

namespace System.IO {
	public partial struct Fiber {
		// Usage:
		// using( Fiber.CancellationRegion() ) {
		//       semaphore.Decrement();
		//       if( Fiber.IsCancelled ) return;
		// }
		public static CancellationRegionInfo CancellationRegion() {
			return new CancellationRegionInfo();
		}

		public struct CancellationRegionInfo : IDisposable {
			private bool _value;

			public CancellationRegionInfo() {
				var currentFiber = FiberManager.CurrentFiber;

				_value = currentFiber->IsCancellable;
				currentFiber->IsCancellable = true;
			}

			public void Dispose() {
				var currentFiber = FiberManager.CurrentFiber;

				currentFiber->IsCancellable = _value;
			}
		}

		// Non-recursive mutex for fibers. Must be used within single OS thread by multiple fibers.
		// Can be used to protect code which can yield control as part of non-completed IO operation. For example:
		//  * Protect single MySQL connection during execution of batch of queries in single transaction
		//  * Protect shared socket/file handle to perform sequential read/writes
		// Blocked fibers resumed in FIFO order
		public struct Mutex {
			private int _lockCount = 0;
			private FiberInfo* _firstWaiter = null, _lastWaiter = null;

			public Mutex() {
			}

			~Mutex() {
				Debug.Assert( _lockCount == 0 );
				Debug.Assert( _firstWaiter == null );
			}

			public void Lock() {
				Debug.Assert( Fiber.IsFiberExecuting );

				var currentFiber = FiberManager.CurrentFiber;
				Debug.Assert( currentFiber->WaitNext == null );

				if( ++_lockCount == 1 ) return;

				currentFiber->WaitNext = null;
				if( _lastWaiter == null ) {
					_lastWaiter = _firstWaiter = currentFiber;
				}
				else {
					_lastWaiter->WaitNext = currentFiber;
					_lastWaiter = currentFiber;
				}

				TraceBlocked( currentFiber );
				FiberManager.Suspend();

				if( currentFiber->IsCancelled ) // leave mutex in correct state
					OnCancelled();
			}

			public void Unlock() {
				Debug.Assert( Fiber.IsFiberExecuting );

				if( !Assert.IsTrue( _lockCount > 0 ) ) return;
				if( --_lockCount == 0 ) return;

				var ready = _firstWaiter;
				_firstWaiter = ready->WaitNext; ready->WaitNext = null;
				TraceResumed( ready );
				ready->Ready();

				if( _firstWaiter == null )
					_lastWaiter = null;
			}

			private void OnCancelled() {
				var currentFiber = FiberManager.CurrentFiber;

				for( FiberInfo* current = _firstWaiter, prev = null; current != null; prev = current, current = current->WaitNext ) {
					if( current == currentFiber ) {
						if( prev != null ) prev->WaitNext = current->WaitNext;

						if( current == _firstWaiter ) _firstWaiter = current->WaitNext;
						if( current == _lastWaiter ) _lastWaiter = prev;

						current->WaitNext = null;
						break;
					}
				}
			}

			/// @{ Tracing
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceBlocked( FiberInfo* fiber ) { Trace.Write( "Fiber: Blocked [{0}] by mutex {1}", *fiber, &this ); }
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceResumed( FiberInfo* fiber ) { Trace.Write( "Fiber: Resumed [{0}] by mutex {1}", *fiber, &this ); }
			/// @}

			public RegionHolder LockRegion() { return new RegionHolder( this ); }

			public struct RegionHolder : IDisposable {
				private declaringtype* _parent;

				public RegionHolder( declaringtype& parent ) {
					_parent = &parent;
					if( _parent != null )
						_parent->Lock();
				}

				public void Dispose() {
					if( _parent != null ) {
						_parent->Unlock();
						_parent = null;
					}
				}
			}
		}

		// Must be used within single OS thread by multiple fibers.
		// Blocked fibers resumed in FIFO order
		public struct Semaphore {
			private FiberInfo* _firstWaiter = null, _lastWaiter = null;

			public int Value { get; private set; }

			public Semaphore() {
				Value = 0;
			}

			public Semaphore( int initialValue ) {
				Value = initialValue;
			}

			~Semaphore() {
				Debug.Assert( _firstWaiter == null );
			}

			public void Decrement() {
				Debug.Assert( Fiber.IsFiberExecuting );

				var currentFiber = FiberManager.CurrentFiber;
				Debug.Assert( currentFiber->WaitNext == null );

				if( Value > 0 ) {
					--Value;
					return;
				}

				currentFiber->WaitNext = null;
				if( _lastWaiter == null ) {
					_lastWaiter = _firstWaiter = currentFiber;
				}
				else {
					_lastWaiter->WaitNext = currentFiber;
					_lastWaiter = currentFiber;
				}

				TraceBlocked( currentFiber );

				currentFiber->IsCancelled = false;
				FiberManager.Suspend();

				if( currentFiber->IsCancelled ) // leave semaphore in correct state
					OnCancelled();
			}

			public void Wait() {
				Debug.Assert( Fiber.IsFiberExecuting );

				var currentFiber = FiberManager.CurrentFiber;
				Debug.Assert( currentFiber->WaitNext == null );

				if( Value > 0 ) {
					Value = 0;
					return;
				}

				currentFiber->WaitNext = null;
				if( _lastWaiter == null ) {
					_lastWaiter = _firstWaiter = currentFiber;
				}
				else {
					_lastWaiter->WaitNext = currentFiber;
					_lastWaiter = currentFiber;
				}

				TraceBlocked( currentFiber );

				currentFiber->IsCancelled = false;
				FiberManager.Suspend();

				if( currentFiber->IsCancelled ) // leave semaphore in correct state
					OnCancelled();
			}

			public void Increment() {
				// Debug.Assert( Fiber.IsFiberExecuting ); increment can occur in main fiber too

				var unblockedFiber = _firstWaiter;
				if( Value > 0 || unblockedFiber == null ) {
					++Value;
					return;
				}

				_firstWaiter = unblockedFiber->WaitNext;
				if( unblockedFiber->WaitNext == null ) _lastWaiter = null;
				else unblockedFiber->WaitNext = null;

				TraceResumed( unblockedFiber );
				unblockedFiber->Ready();
			}

			private void OnCancelled() {
				var currentFiber = FiberManager.CurrentFiber;

				for( FiberInfo* current = _firstWaiter, prev = null; current != null; prev = current, current = current->WaitNext ) {
					if( current == currentFiber ) {
						if( prev != null ) prev->WaitNext = current->WaitNext;

						if( current == _firstWaiter ) _firstWaiter = current->WaitNext;
						if( current == _lastWaiter ) _lastWaiter = prev;

						current->WaitNext = null;
						break;
					}
				}
			}

			/// @{ Tracing
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceBlocked( FiberInfo* fiber ) { Trace.Write( "Fiber: Blocked [{0}] by semaphore {1}", *fiber, &this ); }
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceResumed( FiberInfo* fiber ) { Trace.Write( "Fiber: Resumed [{0}] by semaphore {1}", *fiber, &this ); }
			/// @}

			public RegionHolder LockRegion() { return new RegionHolder( this ); }

			public struct RegionHolder : IDisposable {
				private declaringtype* _parent;

				public RegionHolder( declaringtype& parent ) {
					_parent = &parent;
					if( _parent != null )
						_parent->Decrement();
				}

				public void Dispose() {
					if( _parent != null ) {
						_parent->Increment();
						_parent = null;
					}
				}
			}
		}

		// Must be used within single OS thread by multiple fibers.
		public struct Event {
			public bool IsSignalled { get; private set; }
			public bool IsAutoReset { get; private set; }

			private FiberInfo* _firstWaiter = null;

			public Event( bool initialState = false, bool autoReset = false ) {
				IsSignalled = initialState;
				IsAutoReset = autoReset;
			}

			~Event() {
				Debug.Assert( _firstWaiter == null );
			}

			public void Wait() {
				Debug.Assert( Fiber.IsFiberExecuting );

				var currentFiber = FiberManager.CurrentFiber;
				Debug.Assert( currentFiber->WaitNext == null );

				if( IsSignalled ) {
					if( IsAutoReset ) IsSignalled = false;
					return;
				}

				currentFiber->WaitNext = _firstWaiter;
				if( _firstWaiter == null )
					_firstWaiter = currentFiber;

				TraceBlocked( currentFiber );

				FiberManager.Suspend();

				if( currentFiber->IsCancelled ) // leave event in correct state
					OnCancelled();
			}

			public void Signal() {
				// Debug.Assert( Fiber.IsFiberExecuting ); signal can occur in main fiber too

				if( IsSignalled ) return;
				IsSignalled = true;

				for( var ready = _firstWaiter; ready != null; ) {
					var next = ready->WaitNext; ready->WaitNext = null;
					TraceResumed( ready );
					ready->Ready();
					ready = next;
				}

				_firstWaiter = null;
			}

			private void OnCancelled() {
				var currentFiber = FiberManager.CurrentFiber;

				for( FiberInfo* current = _firstWaiter, prev = null; current != null; prev = current, current = current->WaitNext ) {
					if( current == currentFiber ) {
						if( prev != null ) prev->WaitNext = current->WaitNext;

						if( current == _firstWaiter ) _firstWaiter = current->WaitNext;

						current->WaitNext = null;
						break;
					}
				}
			}

			/// @{ Tracing
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceBlocked( FiberInfo* fiber ) { Trace.Write( "Fiber: Blocked [{0}] by event {1}", *fiber, &this ); }
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceResumed( FiberInfo* fiber ) { Trace.Write( "Fiber: Resumed [{0}] by event {1}", *fiber, &this ); }
			/// @}
		}

		// Must be used within single OS thread by multiple fibers.
		public struct Barrier {
			public int ParticipantsCount { get; private set; }

			private int _readyCount = 0;
			private FiberInfo* _firstWaiter = null;

			public Barrier( int participantsCount ) {
				ParticipantsCount = participantsCount;
			}

			~Barrier() {
				Debug.Assert( _firstWaiter == null );
			}

			public void Wait() {
				Debug.Assert( Fiber.IsFiberExecuting );

				var currentFiber = FiberManager.CurrentFiber;
				Debug.Assert( currentFiber->WaitNext == null );

				if( ++_readyCount == ParticipantsCount ) {
					for( var ready = _firstWaiter; ready != null; ) {
						var next = ready->WaitNext; ready->WaitNext = null;
						TraceResumed( ready );
						ready->Ready();
						ready = next;
					}

					_readyCount = 0;
					_firstWaiter = null;
					return;
				}

				currentFiber->WaitNext = _firstWaiter;
				_firstWaiter = currentFiber;

				TraceBlocked( currentFiber );

				FiberManager.Suspend();

				if( currentFiber->IsCancelled ) // leave barrier in correct state
					OnCancelled();
			}

			private void OnCancelled() {
				var currentFiber = FiberManager.CurrentFiber;

				for( FiberInfo* current = _firstWaiter, prev = null; current != null; prev = current, current = current->WaitNext ) {
					if( current == currentFiber ) {
						if( prev != null ) prev->WaitNext = current->WaitNext;

						if( current == _firstWaiter ) _firstWaiter = current->WaitNext;

						current->WaitNext = null;

						--_readyCount;
						--ParticipantsCount;
						break;
					}
				}
			}

			/// @{ Tracing
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceBlocked( FiberInfo* fiber ) { Trace.Write( "Fiber: Blocked [{0}] by barrier {1}", *fiber, &this ); }
			[Conditional( ConditionString = TraceConditionString )]
			private void TraceResumed( FiberInfo* fiber ) { Trace.Write( "Fiber: Resumed [{0}] by barrier {1}", *fiber, &this ); }
			/// @}
		}
	}
}