//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Reflection;
using System.Runtime;

namespace System.IO {
	public class MemoryStream : IStream {
		public StreamCapabilities Capabilities { get { return StreamCapabilities.Read | StreamCapabilities.Write | StreamCapabilities.Seek; } }

		protected StreamingBufferInfo _bufferInfo;
		public StreamingBufferInfo* BufferInfo { get { return &_bufferInfo; } }

		private byte[] _buffer;
		private bool _expandable = false;

		private uint _flushGrow;

		public MemoryStream( uint capacity = 4096U * 2, uint flushGrow = 4096 ) {
			if( capacity == 0 ) capacity = 1;

			_flushGrow = flushGrow;
			_expandable = true;
			_buffer = new[capacity] byte;

			_bufferInfo.Start = &_buffer[0];
			_bufferInfo.Capacity = _buffer.Length;
			_bufferInfo.AvailableToRead = 0;
			_bufferInfo.Position = 0;
		}

		public MemoryStream( byte[] buffer ) {
			_flushGrow = 0;
			_expandable = false;
			_buffer = buffer;

			_bufferInfo.Start = &buffer[0];
			_bufferInfo.Capacity = buffer.Length;
			_bufferInfo.AvailableToRead = buffer.Length;
			_bufferInfo.Position = 0;
		}

		public MemoryStream( byte[] buffer, uint start, uint length ) {
			// if( !Assert.IsTrue( start < buffer.Length ) ) { start = buffer.Length - 1; }
			// if( !Assert.IsTrue( length <= buffer.Length ) ) { length = 0; }
			// if( !Assert.IsTrue( start + length <= buffer.Length ) ) { length = buffer.Length - start; }

			_flushGrow = 0;
			_expandable = false;
			_buffer = buffer;

			_bufferInfo.Start = &buffer[0];
			_bufferInfo.Capacity = buffer.Length;
			_bufferInfo.AvailableToRead = length;
			_bufferInfo.Position = start;
		}

		public MemoryStream( MemorySegment segment ) {
			_expandable = false;
			_flushGrow = 0;

			_bufferInfo.Start = ( byte* ) segment.Start;
			_bufferInfo.Capacity = ( uint ) segment.Count;
			_bufferInfo.AvailableToRead = ( uint ) segment.Count;
		}

		public long Position {
			get { return _bufferInfo.Position; }
			set { Seek( value, SeekOrigin.Begin ); }
		}

		long IStream.Position { get { return Position; } }

		public uint Length {
			get { return _bufferInfo.Position + _bufferInfo.AvailableToRead; }
		}

		public uint Capacity {
			get { return _bufferInfo.Capacity; }
			set {
				if( value < Length ) return;

				if( _bufferInfo.Capacity == value ) return;

				if( _expandable ) {
					var newBuffer = new[value] byte;

					Memory.Copy( &newBuffer[0], _bufferInfo.Start, Math.Min( Length, value ) );

					_buffer = newBuffer;
					_bufferInfo.Start = &newBuffer[0];
					_bufferInfo.Capacity = newBuffer.Length;
				}
				else {
					Assert.Fail( "Buffer not expandable" );
					return;
				}
			}
		}

		public void Clear() {
			_bufferInfo.Position = 0;
			_bufferInfo.AvailableToRead = 0;
		}

		public void* GetBufferStart() { return _bufferInfo.Start; }
		public void* GetBufferCurrent() { return _bufferInfo.Start + _bufferInfo.Position; }

		public void EnsureFreeSpace( uint size ) {
			EnsureCapacity( size + _bufferInfo.Position );
		}

		public void EnsureCapacity( uint size ) {
			if( _expandable ) {
				if( !Assert.IsTrue( size > 0 ) ) return;

				var newCapacity = _bufferInfo.Capacity;
				while( newCapacity < size ) newCapacity *= 2;
				Capacity = newCapacity;
			}
			else {
				Assert.Fail( "Buffer not expandable" );
				return;
			}
		}

		// Reserves 'count' bytes for write. Changes stream position, expands buffer if necessary
		public void* Reserve( uint count ) {
			var resultPosition = 0U;
			if( !Assert.IsFalse( checkwrap( resultPosition = _bufferInfo.Position + count ) ) ) return null;

			if( resultPosition > Capacity ) EnsureCapacity( resultPosition );

			var result = _bufferInfo.WriteBufferStart;
			_bufferInfo.OnWritePerformed( count );

			return result;
		}

		public uint TruncateStart( uint count ) {
			if( _bufferInfo.AvailableToRead == 0 || count == 0 ) return 0;

			if( count < _bufferInfo.AvailableToRead ) {
				Memory.Move( _bufferInfo.Start, _bufferInfo.Start + count, _bufferInfo.AvailableToRead - count );
				_bufferInfo.Position = Math.Max( 0, _bufferInfo.Position - count );
				_bufferInfo.AvailableToRead -= count;
			}
			else {
				count = _bufferInfo.AvailableToRead;
				_bufferInfo.Position = 0;
				_bufferInfo.AvailableToRead = 0;
			}

			return count;
		}

		public long Seek( long offset, SeekOrigin origin ) {
			if( !Assert.IsTrue( offset >= -( int ) _bufferInfo.Capacity && offset <= _bufferInfo.Capacity ) ) return 0;

			var newPosition = offset;
			var bufferedReadEnd = _bufferInfo.Position + _bufferInfo.AvailableToRead;

			[CheckAllEnumValues]
			switch( origin ) {
				case SeekOrigin.Begin: break;
				case SeekOrigin.Current: newPosition += _bufferInfo.Position; break;
				case SeekOrigin.End: newPosition += bufferedReadEnd; break;
			}

			if( !Assert.IsTrue( newPosition >= 0 && newPosition <= _bufferInfo.Capacity ) ) return 0;

			if( newPosition <= bufferedReadEnd )
				_bufferInfo.AvailableToRead = ( uint )( bufferedReadEnd - newPosition );
			else
				_bufferInfo.AvailableToRead = 0U;

			_bufferInfo.Position = ( uint ) newPosition;
			return newPosition;
		}

		public byte[] ToArray() {
			if( _bufferInfo.Position == 0 ) return new[0] byte;

			var result = new[_bufferInfo.Position] byte;
			Memory.Copy( &result[0], _bufferInfo.Start, result.Length );
			return result;
		}

		public ArraySegment<byte> GetWrittenSegment() {
			return new ArraySegment<byte>( _buffer, 0, _bufferInfo.Position );
		}

		public uint Read( [Out] void* buffer, uint count ) {
			if( !Assert.IsTrue( buffer != null ) ) return 0;
			if( count == 0 ) return 0;

			if( _bufferInfo.AvailableToRead == 0 ) return 0;

			count = Math.Min( count, _bufferInfo.AvailableToRead );
			Memory.Copy( buffer, _bufferInfo.ReadBufferStart, count );
			_bufferInfo.OnReadPerformed( count );

			return count;
		}

		public void Write( [In] void* buffer, uint count ) {
			if( !Assert.IsTrue( buffer != null ) ) return;
			if( count == 0 ) return;

			var resultPosition = 0U;
			if( !Assert.IsFalse( checkwrap( resultPosition = _bufferInfo.Position + count ) ) ) return;

			if( resultPosition > Capacity ) {
				EnsureCapacity( resultPosition );
				count = Math.Min( count, _bufferInfo.AvailableToWrite );
			}

			Memory.Copy( _bufferInfo.WriteBufferStart, buffer, count );
			_bufferInfo.OnWritePerformed( count );
		}

		/// Read from source [ Position; Position + AvailableToRead ) and write to this stream
		public void Write( MemoryStream source ) {
			var readen = source._bufferInfo.AvailableToRead;
			Write( source._bufferInfo.ReadBufferStart, readen );
			source._bufferInfo.OnReadPerformed( readen );
		}

		/// Get source.GetWrittenSegment() [ 0 ; Position )  and write to this stream
		public void WriteWritten( MemoryStream source ) {
			var readen = source._bufferInfo.Position;
			Write( source._bufferInfo.Start, readen );
		}

		uint IStream.Read( vararg MemorySegment segments ) { var result = 0U; foreach( var segment in segments ) result += Read( segment.Start, ( uint ) segment.Count ); return result; }
		void IStream.Write( vararg MemorySegment segments ) { foreach( var segment in segments ) Write( segment.Start, ( uint ) segment.Count ); }

		public void Flush( FlushKind flushKind = FlushKind.DeepWrite ) {
			switch( flushKind ) {
				case FlushKind.Write:
				case FlushKind.DeepWrite:
				case FlushKind.SynchronizeWrite:
					if( _expandable ) {
						var resultPosition = _bufferInfo.Position + _flushGrow;
						if( resultPosition > Capacity ) {
							EnsureCapacity( resultPosition );
						}
					}
					break;
			}
		}

		TimeSpan IStream.ReadTimeout { get { return TimeSpan.Zero; } set { } }
		TimeSpan IStream.WriteTimeout { get { return TimeSpan.Zero; } set { } }

		MemoryMappedView IStream.CreateReadView( uintptr offset, uintptr length ) { return null; }
		MemoryMappedView IStream.CreateWriteView( uintptr offset, uintptr length ) { return null; }

		// Usage: 'using( new TraceScope( this, thismethod ) ) {'
		private struct TraceScope {
			MemoryStream _parent;
			UserType.Method* _method;

			TraceScope( MemoryStream parent, UserType.Method& method ) {
				_parent = parent;
				_method = &method;

				Console.WriteLine( "TRACE: Enter '{0}': buffer={1}", *_method, _parent._bufferInfo );
			}

			public void Dispose() {
				Console.WriteLine( "TRACE: Leave '{0}': buffer={1}", *_method, _parent._bufferInfo );
			}
		}
	}
}