//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.Runtime;

namespace System.IO {
	public interface IStream : IDisposable {
		uint Read( [Out] void* buffer, uint count ); // available if capability 'Read' is set
		void Write( [In] void* buffer, uint count ); // available if capability 'Write' is set

		/// @{ Scatter-Gather
		uint Read( vararg MemorySegment segments ); // available if capability 'Read | VectoredIO' is set
		void Write( vararg MemorySegment segments ); // available if capability 'Write | VectoredIO' is set
		/// @}

		void Flush( FlushKind flushKind ); // write all buffered data or fill buffers with readen data

		StreamingBufferInfo* BufferInfo { get; }
		StreamCapabilities Capabilities { get; }

		TimeSpan ReadTimeout { get; set; } // available if capability 'Timeout' is set
		TimeSpan WriteTimeout { get; set; } // available if capability 'Timeout' is set

		long Position { get; }
		long Seek( long offset, SeekOrigin origin );

		MemoryMappedView CreateReadView( uintptr offset, uintptr length );
		MemoryMappedView CreateWriteView( uintptr offset, uintptr length );
	}

	public class MemoryMappedView : IDisposable {
		public void* Start;
		public uintptr DataLength;
		public uintptr MappingLength { get { return ( DataLength + System.Runtime.Memory.DefaultPageSize - 1 ) & ~( System.Runtime.Memory.DefaultPageSize - 1 ); } }

		public MemoryMappedView() { }
	}

	public enum FlushKind {
		Read,             // fill read buffers
		Write,            // flush write buffers. some data may remain buffered
		DeepWrite,        // deep flush all write buffers. no data may remain buffered
		SynchronizeWrite, // deep flush all write buffers. no data may remain buffered. flush OS buffers
	}

	[Flags]
	public enum StreamCapabilities {
		None,

		Read,       // able to read
		Write,      // able to write

		VectoredIO, // scatter-gather IO

		Seek,       // able to set position
		Timeout,    // able to set timeout
	}

	// For write streams: buffer region [Start; Start+Capacity), buffered bytes [Start; Start+Position), 'Available' not used
	// For read streams: buffer region [Start; Start+Capacity), buffered bytes [Start+Position; Start+Position+Available),
	public struct StreamingBufferInfo : IFormattable {
		public byte* Start;         // pointer to start of buffer
		public uint Capacity;        // total length of buffer

		public uint Position;        // where writing or reading must begin
		public uint AvailableToRead; // how many bytes available to read

		// how many bytes available to write
		public uint AvailableToWrite { get { return Capacity - Position; } }

		public byte* ReadBufferStart { get { return Start + Position; } }
		public byte* ReadBufferEnd { get { return Start + Position + AvailableToRead; } }

		public byte* WriteBufferStart { get { return Start + Position; } }
		public byte* WriteBufferEnd { get { return Start + Capacity; } }

		public void OnReadPerformed( uint count ) {
			Debug.Assert( AvailableToRead >= count );

			AvailableToRead -= count;
			Position += count;
		}

		public void OnWritePerformed( uint count ) {
			if( count >= AvailableToRead ) {
				Debug.Assert( count <= AvailableToWrite );

				AvailableToRead = 0;
			}
			else {
				AvailableToRead -= count;
			}

			Position += count;
		}

		public void ToString( StringBuilder builder, string format ) {
			builder.Concat( "{ Start=", Start, " Capacity=", Capacity, " Position=", Position, " AvailableToRead=", AvailableToRead, " AvailableToWrite=", AvailableToWrite, " }" );
		}
	}

	public enum SeekOrigin {
		Begin,
		Current,
		End,
	}

	public static class IStreamExtensions {
		public static IStream GetBufferedReadStream( this IStream @this, uint bufferSize = 16384 ) {
			StreamingBufferInfo* bufferInfo;
			return GetBufferedReadStream( @this, bufferInfo, bufferSize );
		}

		public static IStream GetBufferedWriteStream( this IStream @this, uint bufferSize = 16384 ) {
			StreamingBufferInfo* bufferInfo;
			return GetBufferedWriteStream( @this, bufferInfo, bufferSize );
		}

		public static IStream GetBufferedReadStream( this IStream @this, StreamingBufferInfo*& bufferInfo, uint bufferSize = 16384 ) {
			if( ( bufferInfo = @this.BufferInfo ) != null )
				return @this;

			var result = new BufferedReadStream( @this, bufferSize );
			bufferInfo = result.BufferInfo;
			return result;
		}

		public static IStream GetBufferedWriteStream( this IStream @this, StreamingBufferInfo*& bufferInfo, uint bufferSize = 16384 ) {
			if( ( bufferInfo = @this.BufferInfo ) != null )
				return @this;

			var result = new BufferedWriteStream( @this, bufferSize );
			bufferInfo = result.BufferInfo;
			return result;
		}

		public static uint Read( this IStream @this, MemorySegment segment ) { return @this.Read( segment.Start,  ( uint ) segment.Count ); }
		public static void Write( this IStream @this, MemorySegment segment ) { @this.Write( segment.Start,  ( uint ) segment.Count ); }

		/// For use with buffered streams (MemoryStream, BufferedStream) only
		public static bool EnsureReadable( this IStream @this, uint count ) {
			return EnsureReadable( @this, @this.BufferInfo, count );
		}

		/// For use with buffered streams (MemoryStream, BufferedStream) only
		public static bool EnsureReadable( this IStream @this, StreamingBufferInfo* bufferInfo, uint count ) {
			Debug.Assert( bufferInfo != null );
			Debug.Assert( bufferInfo == @this.BufferInfo );
			Debug.Assert( count <= bufferInfo->Capacity );

			if( bufferInfo->AvailableToRead >= count ) return true;

			while( bufferInfo->AvailableToRead < count ) {
				var last = bufferInfo->AvailableToRead;
				@this.Flush( FlushKind.Read );
				if( last == bufferInfo->AvailableToRead ) return false;
			}

			return true;
		}

		/// For use with buffered streams (MemoryStream, BufferedStream) only
		public static bool EnsureWritable( this IStream @this, uint count ) {
			return EnsureWritable( @this, @this.BufferInfo, count );
		}

		/// For use with buffered streams (MemoryStream, BufferedStream) only
		public static bool EnsureWritable( this IStream @this, StreamingBufferInfo* bufferInfo, uint count ) {
			Debug.Assert( bufferInfo != null );
			Debug.Assert( bufferInfo == @this.BufferInfo );

			if( bufferInfo->AvailableToWrite < count ) {
				@this.Flush( FlushKind.Write );

				return bufferInfo->AvailableToWrite >= count;
			}

			return true;
		}

		public static uint ReadExact( this IStream @this, void* buffer, uint count ) {
			var result = 0U;

		restart:
			var readen = @this.Read( buffer, count );
			if( readen == 0 ) return result;

			result += readen;
			count -= readen;
			buffer = ( byte* ) buffer + readen;

			if( count > 0 ) goto restart;
			return result;
		}

		public static uint Read( this IStream @this, byte[] buffer, uint offset, uint count ) {
			Debug.Assert( offset + count <= buffer.Length );
			return @this.Read( &buffer[offset], count );
		}

		public static uint ReadExact( this IStream @this, byte[] buffer, uint offset, uint count ) {
			Debug.Assert( offset + count <= buffer.Length );
			return @this.ReadExact( &buffer[offset], count );
		}

		public static uint Read( this IStream @this, byte[] buffer ) {
			return @this.Read( &buffer[0], buffer.Length );
		}

		public static uint ReadExact( this IStream @this, byte[] buffer ) {
			return @this.ReadExact( &buffer[0], buffer.Length );
		}

		public static void Write( this IStream @this, byte[] buffer, uint offset, uint count ) {
			@this.Write( &buffer[offset], count );
		}

		public static void Write( this IStream @this, byte[] buffer, uint count ) {
			@this.Write( &buffer[0], count );
		}

		public static void Write( this IStream @this, byte[] buffer ) {
			@this.Write( &buffer[0], buffer.Length );
		}

		public static void Write( this IStream destination, IStream source, uint bufferSize = BufferedWriteStream.DefaultBufferSize ) {
			if( !Assert.IsTrue( source != null ) ) return;
			if( !Assert.IsTrue( destination != null ) ) return;

			StreamingBufferInfo* bufferInfo;
			var bufferedStream = source.GetBufferedReadStream( bufferInfo );

			for( ; ; ) {
				if( bufferInfo->AvailableToRead < bufferInfo->Capacity / 2 ) bufferedStream.Flush( FlushKind.Read );
				if( bufferInfo->AvailableToRead == 0 ) break;

				destination.Write( bufferInfo->ReadBufferStart, bufferInfo->AvailableToRead );
				bufferInfo->OnReadPerformed( bufferInfo->AvailableToRead );
			}
		}

		public static void Write( this IStream destination, IStream source, uint length, uint bufferSize = BufferedWriteStream.DefaultBufferSize ) {
			if( !Assert.IsTrue( source != null ) ) return;
			if( !Assert.IsTrue( destination != null ) ) return;

			var bufferInfo = source.BufferInfo;
			if( bufferInfo == null ) {
				using( var page = Memory.CachedPages.PopScoped() ) {
					var buffer = ( byte* ) page.Value;
					var bufferLength = Memory.DefaultPageSize;

					for( ; ; ) {
						var toRead = Math.Min( bufferLength, length );
						var readen = source.Read( buffer, toRead );
						if( readen == 0 ) break;
						destination.Write( buffer, readen );

						length -= readen;
						if( length <= 0 ) break;
					}
				}
			}
			else {
				for( ; bufferInfo->AvailableToRead != 0; ) {
					var toRead = Math.Min( bufferInfo->AvailableToRead, length );

					destination.Write( bufferInfo->ReadBufferStart, toRead );
					length -= toRead;
					bufferInfo->OnReadPerformed( toRead );

					if( length <= 0 ) break;

					source.Flush( FlushKind.Read );
				}
			}
		}

		public static void DrainToEnd( this IStream stream ) {
			if( !Assert.IsTrue( stream != null ) ) return;

			var bufferInfo = stream.BufferInfo;
			if( bufferInfo == null ) {
				using( var page = Memory.CachedPages.PopScoped() ) {
					var buffer = ( byte* ) page.Value;
					var bufferLength = Memory.DefaultPageSize;

					for( ; ; ) {
						var readen = stream.Read( buffer, bufferLength );
						if( readen == 0 ) break;
					}
				}
			}
			else {
				for( ; bufferInfo->AvailableToRead > 0; ) {
					bufferInfo->OnReadPerformed( bufferInfo->AvailableToRead );
					stream.Flush( FlushKind.Read );
				}
			}
		}

		public static bool Drain( this IStream stream, uint count ) {
			if( stream == null ) return false;
			if( count == 0 ) return true;

			var bufferInfo = stream.BufferInfo;
			if( bufferInfo == null ) {
				using( var page = Memory.CachedPages.PopScoped() ) {
					var buffer = ( byte* ) page.Value;
					var bufferLength = Memory.DefaultPageSize;

					for( ; count > 0; ) {
						var readen = stream.Read( buffer, bufferLength );
						if( readen == 0 ) break;
						count -= readen;
					}
				}

				return count == 0;
			}
			else {
				if( count <= bufferInfo->AvailableToRead ) {
					bufferInfo->AvailableToRead -= count;
					bufferInfo->Position += count;
					return true;
				}

				while( count > 0 ) {
					if( bufferInfo->AvailableToRead != 0 ) {
						var bytesToCopy = Math.Min( count, bufferInfo->AvailableToRead );
						count -= bytesToCopy;
						bufferInfo->AvailableToRead -= bytesToCopy;
						bufferInfo->Position += bytesToCopy;
					}

					if( bufferInfo->AvailableToRead == 0 ) stream.Flush( FlushKind.Read );
					if( bufferInfo->AvailableToRead == 0 ) return false;
				}

				return true;
			}
		}
	}
}