//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;
using System.Text;

namespace System.IO {
	public static partial struct File {
		/// @{ WriteAllBytes
		public static void WriteAllBytes( string filename, MemorySegment segment ) {
			using( var file = OpenWrite( filename ) ) {
				if( file == null ) return;

				file.Write( segment );
			}
		}

		public static void WriteAllBytes( Utf8String filename, MemorySegment segment ) {
			using( var file = OpenWrite( filename ) ) {
				if( file == null ) return;

				file.Write( segment );
			}
		}
		/// @}

		/// @{ WriteAllText
		public static void WriteAllText( string filename, TypedReference text, TextEncodingKind textEncodingKind = TextEncodingKind.Utf8, StreamWriter.ByteOrderMarkHeader headerStyle = StreamWriter.ByteOrderMarkHeader.Auto ) {
			using( var file = OpenWrite( filename ) ) {
				if( file == null ) return;

				using( var stream = new StreamWriter( file, textEncodingKind, headerStyle ) )
					stream.Write( text );
			}
		}

		public static void WriteAllText( string filename, TypedReference text, CodePageID codePageID ) {
			using( var file = OpenWrite( filename ) ) {
				if( file == null ) return;

				using( var stream = new StreamWriter( file, codePageID ) )
					stream.Write( text );
			}
		}

		public static void WriteAllText( Utf8String filename, TypedReference text, TextEncodingKind textEncodingKind = TextEncodingKind.Utf8, StreamWriter.ByteOrderMarkHeader headerStyle = StreamWriter.ByteOrderMarkHeader.Auto ) {
			using( var file = OpenWrite( filename ) ) {
				if( file == null ) return;

				using( var stream = new StreamWriter( file, textEncodingKind, headerStyle ) )
					stream.Write( text );
			}
		}

		public static void WriteAllText( Utf8String filename, TypedReference text, CodePageID codePageID ) {
			using( var file = OpenWrite( filename ) ) {
				if( file == null ) return;

				using( var stream = new StreamWriter( file, codePageID ) )
					stream.Write( text );
			}
		}
		/// @}

		public static IStream OpenWrite( string filename ) { return _implOpenWrite( filename ); }
		public static IStream OpenWrite( Utf8String filename ) { return _implOpenWrite( filename ); }

		public static IStream OpenRead( string filename ) { return _implOpenRead( filename ); }
		public static IStream OpenRead( Utf8String filename ) { return _implOpenRead( filename ); }

		public static IStream OpenAppend( string filename ) { return _implOpenAppend( filename ); }
		public static IStream OpenAppend( Utf8String filename ) { return _implOpenAppend( filename ); }

		public static bool Exists( string filename ) { return _implExists( filename ); }
		public static bool Exists( Utf8String filename ) { return _implExists( filename ); }

		public static bool Delete( string filename ) { return _implDelete( filename ); }
		public static bool Delete( Utf8String filename ) { return _implDelete( filename ); }
	}
}