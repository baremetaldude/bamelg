//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace System.IO {
	// Reads primitive data types from binary stream. Assumed all data are stored in little-endian form
	public class BinaryReader {
		public IStream BaseStream;

		protected StreamingBufferInfo* _bufferInfo;

		public bool IsEndOfStream { get; set; }

		public BinaryReader( IStream stream ) {
			BaseStream = stream.GetBufferedReadStream( _bufferInfo );
		}

		~BinaryReader() { Cleanup(); }
		public override void Dispose() { Cleanup(); base.Dispose(); }

		private void Cleanup() {
			BaseStream = null;
		}

		public void Read( System.Serialization.IBinarySerializable value, System.Serialization.SerializerContext context ) {
			var i = bitcast<InterfaceInstance>( value );
			value.Deserialize( i.Object, this, context );
		}

		public bool EnsureReadable( uint count ) {
			return BaseStream.EnsureReadable( _bufferInfo, count );
		}

		private T ReadPrimitive<T>() {
			if( !EnsureReadable( sizeof( T ) ) ) {
				IsEndOfStream = true;
				return default( T );
			}

			var resultPtr = cast<T*>( _bufferInfo->ReadBufferStart );
			_bufferInfo->OnReadPerformed( sizeof( T ) );
			return unaligned( *resultPtr );
		}

		private T PeekPrimitive<T>() {
			if( !EnsureReadable( sizeof( T ) ) ) {
				IsEndOfStream = true;
				return default( T );
			}

			var resultPtr = cast<T*>( _bufferInfo->ReadBufferStart );
			return unaligned( *resultPtr );
		}

		/// @{ primitive types
		public bool ReadBool() { return ReadPrimitive<bool>(); }
		public sbyte ReadInt8() { return ReadPrimitive<sbyte>(); }
		public byte ReadUInt8() { return ReadPrimitive<byte>(); }

		public bool PeekBool() { return PeekPrimitive<bool>(); }
		public sbyte PeekInt8() { return PeekPrimitive<sbyte>(); }
		public byte PeekUInt8() { return PeekPrimitive<byte>(); }

		public short_littleendian ReadInt16() { return ReadPrimitive<short_littleendian>(); }
		public ushort_littleendian ReadUInt16() { return ReadPrimitive<ushort_littleendian>(); }
		public int_littleendian ReadInt32() { return ReadPrimitive<int_littleendian>(); }
		public uint_littleendian ReadUInt32() { return ReadPrimitive<uint_littleendian>(); }
		public long_littleendian ReadInt64() { return ReadPrimitive<long_littleendian>(); }
		public ulong_littleendian ReadUInt64() { return ReadPrimitive<ulong_littleendian>(); }
		public float_littleendian ReadFloat() { return ReadPrimitive<float_littleendian>(); }
		public double_littleendian ReadDouble() { return ReadPrimitive<double_littleendian>(); }

		public short_bigendian ReadInt16BigEndian() { return ReadPrimitive<short_bigendian>(); }
		public ushort_bigendian ReadUInt16BigEndian() { return ReadPrimitive<ushort_bigendian>(); }
		public int_bigendian ReadInt32BigEndian() { return ReadPrimitive<int_bigendian>(); }
		public uint_bigendian ReadUInt32BigEndian() { return ReadPrimitive<uint_bigendian>(); }
		public long_bigendian ReadInt64BigEndian() { return ReadPrimitive<long_bigendian>(); }
		public ulong_bigendian ReadUInt64BigEndian() { return ReadPrimitive<ulong_bigendian>(); }
		public float_bigendian ReadFloatBigEndian() { return ReadPrimitive<float_bigendian>(); }
		public double_bigendian ReadDoubleBigEndian() { return ReadPrimitive<double_bigendian>(); }

		public void Read( bool& value ) { value = ReadBool(); }
		public void Read( sbyte& value ) { value = ReadInt8(); }
		public void Read( byte& value ) { value = ReadUInt8(); }

		public void Read( short_littleendian& value ) { value = ReadInt16(); }
		public void Read( ushort_littleendian& value ) { value = ReadUInt16(); }
		public void Read( short_bigendian& value ) { value = ReadInt16(); }
		public void Read( ushort_bigendian& value ) { value = ReadUInt16(); }

		public void Read( int_littleendian& value ) { value = ReadInt32(); }
		public void Read( uint_littleendian& value ) { value = ReadUInt32(); }
		public void Read( int_bigendian& value ) { value = ReadInt32(); }
		public void Read( uint_bigendian& value ) { value = ReadUInt32(); }

		public void Read( long_littleendian& value ) { value = ReadInt64(); }
		public void Read( ulong_littleendian& value ) { value = ReadUInt64(); }
		public void Read( long_bigendian& value ) { value = ReadInt64(); }
		public void Read( ulong_bigendian& value ) { value = ReadUInt64(); }

		public void Read( float_littleendian& value ) { value = ReadFloat(); }
		public void Read( double_littleendian& value ) { value = ReadDouble(); }
		public void Read( float_bigendian& value ) { value = ReadFloat(); }
		public void Read( double_bigendian& value ) { value = ReadDouble(); }

		public short_littleendian PeekInt16() { return PeekPrimitive<short_littleendian>(); }
		public ushort_littleendian PeekUInt16() { return PeekPrimitive<ushort_littleendian>(); }
		public int_littleendian PeekInt32() { return PeekPrimitive<int_littleendian>(); }
		public uint_littleendian PeekUInt32() { return PeekPrimitive<uint_littleendian>(); }
		public long_littleendian PeekInt64() { return PeekPrimitive<long_littleendian>(); }
		public ulong_littleendian PeekUInt64() { return PeekPrimitive<ulong_littleendian>(); }
		public float_littleendian PeekFloat() { return PeekPrimitive<float_littleendian>(); }
		public double_littleendian PeekDouble() { return PeekPrimitive<double_littleendian>(); }

		public short_bigendian PeekInt16BigEndian() { return PeekPrimitive<short_bigendian>(); }
		public ushort_bigendian PeekUInt16BigEndian() { return PeekPrimitive<ushort_bigendian>(); }
		public int_bigendian PeekInt32BigEndian() { return PeekPrimitive<int_bigendian>(); }
		public uint_bigendian PeekUInt32BigEndian() { return PeekPrimitive<uint_bigendian>(); }
		public long_bigendian PeekInt64BigEndian() { return PeekPrimitive<long_bigendian>(); }
		public ulong_bigendian PeekUInt64BigEndian() { return PeekPrimitive<ulong_bigendian>(); }
		public float_bigendian PeekFloatBigEndian() { return PeekPrimitive<float_bigendian>(); }
		public double_bigendian PeekDoubleBigEndian() { return PeekPrimitive<double_bigendian>(); }

		public void Peek( bool& value ) { value = PeekBool(); }

		public void Peek( sbyte& value ) { value = PeekInt8(); }
		public void Peek( byte& value ) { value = PeekUInt8(); }

		public void Peek( short_littleendian& value ) { value = PeekInt16(); }
		public void Peek( ushort_littleendian& value ) { value = PeekUInt16(); }
		public void Peek( short_bigendian& value ) { value = PeekInt16(); }
		public void Peek( ushort_bigendian& value ) { value = PeekUInt16(); }

		public void Peek( int_littleendian& value ) { value = PeekInt32(); }
		public void Peek( uint_littleendian& value ) { value = PeekUInt32(); }
		public void Peek( int_bigendian& value ) { value = PeekInt32(); }
		public void Peek( uint_bigendian& value ) { value = PeekUInt32(); }

		public void Peek( long_littleendian& value ) { value = PeekInt64(); }
		public void Peek( ulong_littleendian& value ) { value = PeekUInt64(); }
		public void Peek( long_bigendian& value ) { value = PeekInt64(); }
		public void Peek( ulong_bigendian& value ) { value = PeekUInt64(); }

		public void Peek( float_littleendian& value ) { value = PeekFloat(); }
		public void Peek( double_littleendian& value ) { value = PeekDouble(); }
		public void Peek( float_bigendian& value ) { value = PeekFloat(); }
		public void Peek( double_bigendian& value ) { value = PeekDouble(); }
		/// @}

		/// @{ common types
		public Guid ReadGuid() {
			if( !EnsureReadable( sizeof( Guid ) ) ) {
				IsEndOfStream = true;
				return default( Guid );
			}

			byte[sizeof( Guid )] tmp;
			ReadValues( &tmp[0], sizeof( Guid ) );
			return new Guid { Bytes = tmp };
		}

		public DateTime ReadDateTime() { var serializedLayout = ReadUInt64(); ulong nativeLayout = serializedLayout; return *( DateTime* ) &nativeLayout; }
		public DateTimeUTC ReadDateTimeUTC() { var serializedLayout = ReadUInt64(); ulong nativeLayout = serializedLayout; return *( DateTimeUTC* ) &nativeLayout; }
		public TimeSpan ReadTimeSpan() { var serializedLayout = ReadUInt64(); ulong nativeLayout = serializedLayout; return *( TimeSpan* ) &nativeLayout; }

		public void Read( [Out] Guid& value ) { value = ReadGuid(); }
		public void Read( [Out] DateTime& value ) { value = ReadDateTime(); }
		public void Read( [Out] TimeSpan& value ) { value = ReadTimeSpan(); }

		public uint ReadValues( byte* buffer, uint length ) {
			var readen = BaseStream.Read( buffer, length );

			if( readen != length ) {
				IsEndOfStream = true;
			}

			return readen;
		}

		public uint ReadValues( sbyte* buffer, uint length ) {
			return ReadValues( ( byte* ) buffer, length );
		}

		public uint ReadValues( short* buffer, uint length ) {
			var required = sizeof( buffer[0] ) * length;
			var readen = BaseStream.Read( buffer, required );
			var readenCount = readen / sizeof( buffer[0] );

			if( typeof( short ) != typeof( short_littleendian ) )
				for( var i = 0U; i < readenCount; ++i )
					buffer[i] = BitOperations.ByteSwap( buffer[i] );

			if( readen != required ) {
				IsEndOfStream = true;
			}

			return readenCount;
		}

		public uint ReadValues( ushort* buffer, uint length ) { return ReadValues( ( short* ) buffer, length ); }
		public uint ReadValues( char* buffer, uint length ) { return ReadValues( ( short* ) buffer, length ); }

		public uint ReadValues( int* buffer, uint length ) {
			var required = sizeof( buffer[0] ) * length;
			var readen = BaseStream.Read( buffer, required );
			var readenCount = readen / sizeof( buffer[0] );

			if( typeof( short ) != typeof( short_littleendian ) )
				for( var i = 0U; i < readenCount; ++i )
					buffer[i] = BitOperations.ByteSwap( buffer[i] );

			if( readen != required ) {
				IsEndOfStream = true;
			}

			return readenCount;
		}

		public uint ReadValues( uint* buffer, uint length ) { return ReadValues( ( int* ) buffer, length ); }

		public uint ReadValues( long* buffer, uint length ) {
			var required = sizeof( buffer[0] ) * length;
			var readen = BaseStream.Read( buffer, required );
			var readenCount = readen / sizeof( buffer[0] );

			if( typeof( short ) != typeof( short_littleendian ) )
				for( var i = 0U; i < readenCount; ++i )
					buffer[i] = BitOperations.ByteSwap( buffer[i] );

			if( readen != required ) {
				IsEndOfStream = true;
			}

			return readenCount;
		}

		public uint ReadValues( ulong* buffer, uint length ) { return ReadValues( ( long* ) buffer, length ); }

		public uint ReadValues( DateTime* buffer, uint length ) { return ReadValues( ( long* ) buffer, length ); }
		public uint ReadValues( TimeSpan* buffer, uint length ) { return ReadValues( ( long* ) buffer, length ); }

		public sbyte[] ReadInt8Array() { return ReadInt8Array( false, uint.MaxValue ); }
		public byte[] ReadUInt8Array() { return ReadUInt8Array( false, uint.MaxValue ); }
		public short[] ReadInt16Array() { return ReadInt16Array( false, uint.MaxValue ); }
		public ushort[] ReadUInt16Array() { return ReadUInt16Array( false, uint.MaxValue ); }
		public int[] ReadInt32Array() { return ReadInt32Array( false, uint.MaxValue ); }
		public uint[] ReadUInt32Array() { return ReadUInt32Array( false, uint.MaxValue ); }
		public long[] ReadInt64Array() { return ReadInt64Array( false, uint.MaxValue ); }
		public ulong[] ReadUInt64Array() { return ReadUInt64Array( false, uint.MaxValue ); }
		public DateTime[] ReadDateTimeArray() { return ReadDateTimeArray( false, uint.MaxValue ); }
		public TimeSpan[] ReadTimeSpanArray() { return ReadTimeSpanArray( false, uint.MaxValue ); }

		public byte[] ReadUInt8Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] byte;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] byte;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public sbyte[] ReadInt8Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] sbyte;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] sbyte;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public ushort[] ReadUInt16Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] ushort;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] ushort;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public short[] ReadInt16Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] short;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] short;
				ReadValues( &result[0], length );

				if( IsEndOfStream ) return null;
				return result;
			}
		}

		public uint[] ReadUInt32Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] uint;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] uint;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public int[] ReadInt32Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) { maxLengthExceeded = false; return null; }
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] int;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] int;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public ulong[] ReadUInt64Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] ulong;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] ulong;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public long[] ReadInt64Array( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] long;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] long;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public DateTime[] ReadDateTimeArray( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] DateTime;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] DateTime;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public TimeSpan[] ReadTimeSpanArray( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new[maxLength] TimeSpan;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( result[0] ) );
				return result;
			}

			if( IsEndOfStream ) return null;

			{
				var result = new[length] TimeSpan;
				ReadValues( &result[0], length );
				if( IsEndOfStream ) return null;

				return result;
			}
		}

		public SbcsString ReadSbcsString() { return ReadSbcsString( false, uint.MaxValue ); }
		public Utf8String ReadUtf8String() { return ReadUtf8String( false, uint.MaxValue ); }
		public Utf16String ReadUtf16String() { return ReadUtf16String( false, uint.MaxValue ); }
		public Utf32String ReadUtf32String() { return ReadUtf32String( false, uint.MaxValue ); }

		public SbcsString ReadSbcsString( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;
			uint_littleendian codePage;

			Read( length );
			if( length == uint.MaxValue || IsEndOfStream ) return null;

			Read( codePage );
			if( IsEndOfStream ) return null;

			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new SbcsString.Builder( maxLength, ( System.Text.CodePageID ) codePage );
				ReadValues( result.GetChars(), maxLength );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( byte ) );
				return result.Detach();
			}

			{
				var result = new SbcsString.Builder( length, ( System.Text.CodePageID ) codePage );
				ReadValues( result.GetChars(), length );

				if( IsEndOfStream ) return null;
				return result.Detach();
			}
		}

		public Utf8String ReadUtf8String( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length, byteLength;

			Read( length );
			if( length == uint.MaxValue || IsEndOfStream ) return null;

			Read( byteLength );
			if( IsEndOfStream ) return null;

			if( byteLength > maxLength ) {
				maxLengthExceeded = true;

				var result = new Utf8String.Builder( maxLength );
				ReadValues( result.GetChars(), maxLength );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( byte ) );
				return result.Detach();
			}
			else {
				var result = new Utf8String.Builder( byteLength );
				result.Length = length;
				ReadValues( result.GetChars(), byteLength );

				if( IsEndOfStream ) return null;
				return result.Detach();
			}
		}

		public Utf16String ReadUtf16String( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue || IsEndOfStream ) return null;

			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new Utf16String.Builder( maxLength );
				ReadValues( result.GetChars(), maxLength );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( char ) );
				return result.Detach();
			} else {
				var result = new Utf16String.Builder( length );
				ReadValues( result.GetChars(), length );

				if( IsEndOfStream ) return null;
				return result.Detach();
			}
		}

		public Utf32String ReadUtf32String( bool& maxLengthExceeded, uint maxLength ) {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue || IsEndOfStream ) return null;

			if( length > maxLength ) {
				maxLengthExceeded = true;

				var result = new Utf32String.Builder( maxLength );
				ReadValues( result.GetChars(), maxLength );
				if( IsEndOfStream ) return null;

				BaseStream.Drain( ( length - maxLength ) * sizeof( char ) );
				return result.Detach();
			} else {
				var result = new Utf32String.Builder( length );
				ReadValues( result.GetChars(), length );

				if( IsEndOfStream ) return null;
				return result.Detach();
			}
		}

		public void Read( SbcsString& value ) { value = ReadSbcsString(); }
		public void Read( Utf8String& value ) { value = ReadUtf8String(); }
		public void Read( Utf16String& value ) { value = ReadUtf16String(); }
		public void Read( Utf32String& value ) { value = ReadUtf32String(); }
		/// @}

		public int ReadCompactInt32() {
			var header = ReadCompactUInt32();
			if( ( header & 1 ) == 0 ) return cast<int>( header >> 1 );

			return cast<int>( ~( header >> 1 ) );
		}

		public uint ReadCompactUInt32() {
			uint_littleendian result = 0;

			var bytes = ( byte* ) &result;
			var header = ReadUInt8();

			if( ( header & 0x80 ) == 0 ) {
				bytes[0] = header;
				return result;
			}

			if( ( header & 0x40 ) == 0 ) {
				bytes[1] = header & ~( byte ) 0x80;
				bytes[0] = ReadUInt8();
				return result;
			}

			bytes[3] = header & ~( byte ) 0xC0;
			bytes[2] = ReadUInt8();
			bytes[1] = ReadUInt8();
			bytes[0] = ReadUInt8();

			return result;
		}

		public void ReadCompact( int_littleendian& value ) { value = ReadCompactInt32(); }
		public void ReadCompact( uint_littleendian& value ) { value = ReadCompactUInt32(); }
		public void ReadCompact( int_bigendian& value ) { value = ReadCompactInt32(); }
		public void ReadCompact( uint_bigendian& value ) { value = ReadCompactUInt32(); }
	}
}