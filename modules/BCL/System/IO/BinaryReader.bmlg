//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace System.IO {
	// Reads primitive data types from binary stream. Assumed all data are stored in little-endian form
	public class BinaryReader {
		public IStream BaseStream;
		public uint MaxPrimitiveLength = uint.MaxValue;

		protected StreamingBufferInfo* _bufferInfo;

		public BinaryReader( IStream stream ) {
			BaseStream = stream.GetBufferedReadStream( _bufferInfo );
		}

		~BinaryReader() { Cleanup(); }
		public override void Dispose() { Cleanup(); base.Dispose(); }

		private void Cleanup() {
			BaseStream = null;
		}

		public int Read( void* buffer, int length ) { return BaseStream.Read( buffer, length ); }

		public void Read( System.Serialization.IBinarySerializable value, System.Serialization.SerializerContext context ) {
			var i = bitcast<InterfaceInstance>( value );
			value.Deserialize( i.Object, this, context );
		}

		public bool EnsureReadable( int count ) {
			return BaseStream.EnsureReadable( _bufferInfo, count );
		}

		private T ReadPrimitive<T>() {
			if( !BaseStream.EnsureReadable( _bufferInfo, sizeof( T ) ) ) {
				EventHandler.EndOfStream( this );
				return default( T );
			}

			var resultPtr = cast<T*>( _bufferInfo->ReadBufferStart );
			_bufferInfo->OnReadPerformed( sizeof( T ) );
			return *resultPtr;
		}

		private T PeekPrimitive<T>() {
			if( !BaseStream.EnsureReadable( _bufferInfo, sizeof( T ) ) ) {
				EventHandler.EndOfStream( this );
				return default( T );
			}

			var resultPtr = cast<T*>( _bufferInfo->ReadBufferStart );
			return *resultPtr;
		}

		/// @{ primitive types
		public bool ReadBool() { return ReadPrimitive<bool>(); }
		public sbyte ReadInt8() { return ReadPrimitive<sbyte>(); }
		public byte ReadUInt8() { return ReadPrimitive<byte>(); }

		public bool PeekBool() { return PeekPrimitive<bool>(); }
		public sbyte PeekInt8() { return PeekPrimitive<sbyte>(); }
		public byte PeekUInt8() { return PeekPrimitive<byte>(); }

		public short_littleendian ReadInt16() { return ReadPrimitive<short_littleendian>(); }
		public ushort_littleendian ReadUInt16() { return ReadPrimitive<ushort_littleendian>(); }
		public int_littleendian ReadInt32() { return ReadPrimitive<int_littleendian>(); }
		public uint_littleendian ReadUInt32() { return ReadPrimitive<uint_littleendian>(); }
		public long_littleendian ReadInt64() { return ReadPrimitive<long_littleendian>(); }
		public ulong_littleendian ReadUInt64() { return ReadPrimitive<ulong_littleendian>(); }
		public float_littleendian ReadFloat() { return ReadPrimitive<float_littleendian>(); }
		public double_littleendian ReadDouble() { return ReadPrimitive<double_littleendian>(); }

		public short_bigendian ReadInt16BigEndian() { return ReadPrimitive<short_bigendian>(); }
		public ushort_bigendian ReadUInt16BigEndian() { return ReadPrimitive<ushort_bigendian>(); }
		public int_bigendian ReadInt32BigEndian() { return ReadPrimitive<int_bigendian>(); }
		public uint_bigendian ReadUInt32BigEndian() { return ReadPrimitive<uint_bigendian>(); }
		public long_bigendian ReadInt64BigEndian() { return ReadPrimitive<long_bigendian>(); }
		public ulong_bigendian ReadUInt64BigEndian() { return ReadPrimitive<ulong_bigendian>(); }
		public float_bigendian ReadFloatBigEndian() { return ReadPrimitive<float_bigendian>(); }
		public double_bigendian ReadDoubleBigEndian() { return ReadPrimitive<double_bigendian>(); }

		public void Read( bool& value ) { value = ReadBool(); }
		public void Read( sbyte& value ) { value = ReadInt8(); }
		public void Read( byte& value ) { value = ReadUInt8(); }

		public void Read( short_littleendian& value ) { value = ReadInt16(); }
		public void Read( ushort_littleendian& value ) { value = ReadUInt16(); }
		public void Read( short_bigendian& value ) { value = ReadInt16(); }
		public void Read( ushort_bigendian& value ) { value = ReadUInt16(); }

		public void Read( int_littleendian& value ) { value = ReadInt32(); }
		public void Read( uint_littleendian& value ) { value = ReadUInt32(); }
		public void Read( int_bigendian& value ) { value = ReadInt32(); }
		public void Read( uint_bigendian& value ) { value = ReadUInt32(); }

		public void Read( long_littleendian& value ) { value = ReadInt64(); }
		public void Read( ulong_littleendian& value ) { value = ReadUInt64(); }
		public void Read( long_bigendian& value ) { value = ReadInt64(); }
		public void Read( ulong_bigendian& value ) { value = ReadUInt64(); }

		public void Read( float_littleendian& value ) { value = ReadFloat(); }
		public void Read( double_littleendian& value ) { value = ReadDouble(); }
		public void Read( float_bigendian& value ) { value = ReadFloat(); }
		public void Read( double_bigendian& value ) { value = ReadDouble(); }

		public short_littleendian PeekInt16() { return PeekPrimitive<short_littleendian>(); }
		public ushort_littleendian PeekUInt16() { return PeekPrimitive<ushort_littleendian>(); }
		public int_littleendian PeekInt32() { return PeekPrimitive<int_littleendian>(); }
		public uint_littleendian PeekUInt32() { return PeekPrimitive<uint_littleendian>(); }
		public long_littleendian PeekInt64() { return PeekPrimitive<long_littleendian>(); }
		public ulong_littleendian PeekUInt64() { return PeekPrimitive<ulong_littleendian>(); }
		public float_littleendian PeekFloat() { return PeekPrimitive<float_littleendian>(); }
		public double_littleendian PeekDouble() { return PeekPrimitive<double_littleendian>(); }

		public short_bigendian PeekInt16BigEndian() { return PeekPrimitive<short_bigendian>(); }
		public ushort_bigendian PeekUInt16BigEndian() { return PeekPrimitive<ushort_bigendian>(); }
		public int_bigendian PeekInt32BigEndian() { return PeekPrimitive<int_bigendian>(); }
		public uint_bigendian PeekUInt32BigEndian() { return PeekPrimitive<uint_bigendian>(); }
		public long_bigendian PeekInt64BigEndian() { return PeekPrimitive<long_bigendian>(); }
		public ulong_bigendian PeekUInt64BigEndian() { return PeekPrimitive<ulong_bigendian>(); }
		public float_bigendian PeekFloatBigEndian() { return PeekPrimitive<float_bigendian>(); }
		public double_bigendian PeekDoubleBigEndian() { return PeekPrimitive<double_bigendian>(); }

		public void Peek( bool& value ) { value = PeekBool(); }

		public void Peek( sbyte& value ) { value = PeekInt8(); }
		public void Peek( byte& value ) { value = PeekUInt8(); }

		public void Peek( short_littleendian& value ) { value = PeekInt16(); }
		public void Peek( ushort_littleendian& value ) { value = PeekUInt16(); }
		public void Peek( short_bigendian& value ) { value = PeekInt16(); }
		public void Peek( ushort_bigendian& value ) { value = PeekUInt16(); }

		public void Peek( int_littleendian& value ) { value = PeekInt32(); }
		public void Peek( uint_littleendian& value ) { value = PeekUInt32(); }
		public void Peek( int_bigendian& value ) { value = PeekInt32(); }
		public void Peek( uint_bigendian& value ) { value = PeekUInt32(); }

		public void Peek( long_littleendian& value ) { value = PeekInt64(); }
		public void Peek( ulong_littleendian& value ) { value = PeekUInt64(); }
		public void Peek( long_bigendian& value ) { value = PeekInt64(); }
		public void Peek( ulong_bigendian& value ) { value = PeekUInt64(); }

		public void Peek( float_littleendian& value ) { value = PeekFloat(); }
		public void Peek( double_littleendian& value ) { value = PeekDouble(); }
		public void Peek( float_bigendian& value ) { value = PeekFloat(); }
		public void Peek( double_bigendian& value ) { value = PeekDouble(); }
		/// @}

		/// @{ common types
		public Guid ReadGuid() {
			if( CompilerInfo.CurrentPlatform == PlatformID.Windows ) {
				if( !BaseStream.EnsureReadable( _bufferInfo, sizeof( Guid ) ) ) {
					EventHandler.EndOfStream( this );
					return default( Guid );
				}

				Guid value;
				*cast<uint_littleendian*>( &value.Data[0] ) = ReadPrimitive<uint_bigendian>();
				*cast<ushort_littleendian*>( &value.Data[4] ) = ReadPrimitive<ushort_bigendian>();
				*cast<ushort_littleendian*>( &value.Data[6] ) = ReadPrimitive<ushort_bigendian>();
				*cast<ulong_bigendian*>( &value.Data[8] ) = ReadPrimitive<ulong_bigendian>();
				return value;
			}
			else return ReadPrimitive<Guid>();
		}
		public DateTime ReadDateTime() { var serializedLayout = ReadUInt64(); ulong nativeLayout = serializedLayout; return *( DateTime* ) &nativeLayout; }
		public TimeSpan ReadTimeSpan() { var serializedLayout = ReadUInt64(); ulong nativeLayout = serializedLayout; return *( TimeSpan* ) &nativeLayout; }

		public void Read( [Out] Guid& value ) { value = ReadGuid(); }
		public void Read( [Out] DateTime& value ) { value = ReadDateTime(); }
		public void Read( [Out] TimeSpan& value ) { value = ReadTimeSpan(); }

		public byte[] ReadByteArray() {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;
			if( length > MaxPrimitiveLength ) {
				EventHandler.PrimitiveSizeExceeded( this );
				BaseStream.Drain( ( int ) length );
				return null;
			}

			var result = new[length] byte;
			Read( &result[0], ( int ) length );
			return result;
		}

		public SbcsString ReadSbcsString() {
			uint_littleendian length;
			uint_littleendian codePage;

			Read( length );
			if( length == uint.MaxValue ) return null;
			Read( codePage );

			if( length > MaxPrimitiveLength ) {
				EventHandler.PrimitiveSizeExceeded( this );
				BaseStream.Drain( ( int ) length );
				return null;
			}

			var result = new SbcsString.Builder( length, ( System.Text.CodePageID ) codePage );
			Read( result.GetChars(), ( int ) length );
			return result.Detach();
		}

		public Utf8String ReadUtf8String() {
			uint_littleendian length, byteLength;

			Read( length );
			if( length == uint.MaxValue ) return null;

			Read( byteLength );

			var result = new Utf8String.Builder( byteLength );
			result.Length = length;
			Read( result.GetChars(), ( int ) byteLength );

			return result.Detach();
		}

		public Utf16String ReadUtf16String() {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;

			var result = new Utf16String.Builder( length );
			Read( result.GetChars(), ( int ) result.ByteLength );
			return result.Detach();
		}

		public Utf32String ReadUtf32String() {
			uint_littleendian length;

			Read( length );
			if( length == uint.MaxValue ) return null;

			var result = new Utf32String.Builder( length );
			Read( result.GetChars(), ( int ) result.ByteLength );
			return result.Detach();
		}

		public void Read( SbcsString& value ) { value = ReadSbcsString(); }
		public void Read( Utf8String& value ) { value = ReadUtf8String(); }
		public void Read( Utf16String& value ) { value = ReadUtf16String(); }
		public void Read( Utf32String& value ) { value = ReadUtf32String(); }
		/// @}

		public int ReadCompactInt32() {
			var header = ReadCompactUInt32();
			if( ( header & 1 ) == 0 ) return cast<int>( header >> 1 );

			return cast<int>( ~( header >> 1 ) );
		}

		public uint ReadCompactUInt32() {
			uint_littleendian result = 0;

			var bytes = ( byte* ) &result;
			var header = ReadUInt8();

			if( ( header & 0x80 ) == 0 ) {
				bytes[0] = header;
				return result;
			}

			if( ( header & 0x40 ) == 0 ) {
				bytes[1] = header & ~( byte ) 0x80;
				bytes[0] = ReadUInt8();
				return result;
			}

			bytes[3] = header & ~( byte ) 0xC0;
			bytes[2] = ReadUInt8();
			bytes[1] = ReadUInt8();
			bytes[0] = ReadUInt8();

			return result;
		}

		public void ReadCompact( int_littleendian& value ) { value = ReadCompactInt32(); }
		public void ReadCompact( uint_littleendian& value ) { value = ReadCompactUInt32(); }
		public void ReadCompact( int_bigendian& value ) { value = ReadCompactInt32(); }
		public void ReadCompact( uint_bigendian& value ) { value = ReadCompactUInt32(); }

		public IEventHandler EventHandler = EventHandlerAbort.Instance;

		public interface IEventHandler {
			void EndOfStream( BinaryReader context );
			void PrimitiveSizeExceeded( BinaryReader context );
		}

		public struct EventHandlerNull : IEventHandler {
			public static readonly thistype Instance;

			#region IEventHandler Members

			public void EndOfStream( BinaryReader context ) { }
			public void PrimitiveSizeExceeded( BinaryReader context ) { }

			#endregion
		}

		public struct EventHandlerConsole : IEventHandler {
			public static readonly thistype Instance;

			#region IEventHandler Members

			public void EndOfStream( BinaryReader context ) { Console.WriteLine( "'{0}': EndOfStream", context ); }
			public void PrimitiveSizeExceeded( BinaryReader context ) { Console.WriteLine( "'{0}': PrimitiveSizeExceeded", context ); }

			#endregion
		}

		public struct EventHandlerAbort : IEventHandler {
			public static readonly thistype Instance;

			#region IEventHandler Members

			public void EndOfStream( BinaryReader context ) { EventHandlerConsole.Instance.EndOfStream( context ); Environment.Abort( 1 ); }
			public void PrimitiveSizeExceeded( BinaryReader context ) { EventHandlerConsole.Instance.PrimitiveSizeExceeded( context ); Environment.Abort( 1 ); }

			#endregion
		}
	}
}