//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime;

namespace System.IO {
	public abstract class BufferedStream {
		protected byte[] _buffer;

		protected StreamingBufferInfo _bufferInfo;
		public StreamingBufferInfo* BufferInfo { get { return &_bufferInfo; } }

		protected IStream _stream;
		public IStream BaseStream { get { return _stream; } }

		private const int DefaultBufferSize = 4096 * 4;

		private BufferedStream( IStream stream ) {
			_stream = stream;
		}

		public class ReadStream : BufferedStream, IStream {
			public StreamCapabilities Capabilities { get { return StreamCapabilities.Read; } }

			public ReadStream( IStream stream, int bufferSize = DefaultBufferSize )
				: base( stream ) {
				// Assert.IsTrue( bufferSize >= Memory.DefaultPageSize ); // ensure optimal buffer size

				_buffer = new[bufferSize] byte;

				_bufferInfo.Start = &_buffer[0];
				_bufferInfo.Capacity = _buffer.Length;
				_bufferInfo.Position = 0;
				_bufferInfo.AvailableToRead = 0;
			}

			~ReadStream() { Cleanup(); }
			public override void Dispose() { Cleanup(); base.Dispose(); }

			private void Cleanup() {
				if( _stream == null ) return;

				_stream = null;
				_buffer = null;
				_bufferInfo = default( StreamingBufferInfo );
			}

			public int Count { get { return _bufferInfo.AvailableToRead; } }
			public int Capacity { get { return _buffer.Length; } }

			void IStream.Write( void* buffer, int length ) { Assert.Unreachable(); }

			int IStream.Read( vararg MemorySegment segments ) { var result = 0; foreach( var segment in segments ) result += Read( segment.Start, ( int ) segment.Count ); return result; }
			void IStream.Write( vararg MemorySegment segments ) { Assert.Unreachable(); }

			// Used for fast lookups inside buffer
			public void* Peek( int length ) {
				if( !Assert.IsTrue( length <= Capacity ) ) return null;

				if( length <= _bufferInfo.AvailableToRead ) return &_buffer[_bufferInfo.Position];

				Memory.Move( &_buffer[0], &_buffer[_bufferInfo.Position], ( uint ) _bufferInfo.AvailableToRead );
				_bufferInfo.Position = 0;

				while( length > _bufferInfo.AvailableToRead ) {
					var readen = _stream.Read( &_buffer[_bufferInfo.AvailableToRead], _bufferInfo.Capacity - _bufferInfo.AvailableToRead );
					if( readen == 0 ) return null;

					_bufferInfo.AvailableToRead += readen;
				}

				return &_buffer[0];
			}

			public bool Drain( int length ) {
				if( length <= 0 ) return true;

				if( length <= _bufferInfo.AvailableToRead ) {
					_bufferInfo.AvailableToRead -= length;
					_bufferInfo.Position += length;
					return true;
				}

				while( length > 0 ) {
					if( _bufferInfo.AvailableToRead != 0 ) {
						var bytesToCopy = Math.Min( length, _bufferInfo.AvailableToRead );
						length -= bytesToCopy;
						_bufferInfo.AvailableToRead -= bytesToCopy;
						_bufferInfo.Position += bytesToCopy;
					}

					if( _bufferInfo.AvailableToRead == 0 ) Flush( FlushKind.Read );
					if( _bufferInfo.AvailableToRead == 0 ) return false;
				}

				return true;
			}

			public int Read( void* buffer, int length ) {
				if( length == 0 || buffer == null ) return 0;

				if( length <= _bufferInfo.AvailableToRead ) {
					Memory.Copy( buffer, &_buffer[_bufferInfo.Position], ( uint ) length );
					_bufferInfo.AvailableToRead -= length;
					_bufferInfo.Position += length;
					return length;
				}

				var result = 0;
				while( length > 0 ) {
					if( _bufferInfo.AvailableToRead != 0 ) {
						var bytesToCopy = Math.Min( length, _bufferInfo.AvailableToRead );
						Memory.Copy( buffer, &_buffer[_bufferInfo.Position], ( uint ) bytesToCopy );

						buffer = cast<byte*>( buffer ) + bytesToCopy;
						length -= bytesToCopy;
						_bufferInfo.AvailableToRead -= bytesToCopy;
						_bufferInfo.Position += bytesToCopy;
						result += bytesToCopy;
					}

					if( _bufferInfo.AvailableToRead == 0 ) Flush();
					if( _bufferInfo.AvailableToRead == 0 ) break;
				}

				return result;
			}

			public void Flush( FlushKind flushKind = FlushKind.Read ) {
				switch( flushKind ) {
					case FlushKind.Read:
						if( _bufferInfo.Position != 0 && _bufferInfo.AvailableToRead != 0 ) Memory.Move( &_buffer[0], &_buffer[_bufferInfo.Position], ( uint ) _bufferInfo.AvailableToRead );
						_bufferInfo.Position = 0;

						if( _bufferInfo.AvailableToRead < _bufferInfo.Capacity ) {
							var readen = _stream.Read( &_buffer[_bufferInfo.AvailableToRead], _bufferInfo.Capacity - _bufferInfo.AvailableToRead );
							_bufferInfo.AvailableToRead += readen;

							if( readen == 0 ) break;
						}

						break;
				}
			}

			TimeSpan IStream.Timeout { get { return TimeSpan.Zero; } set { } }

			long IStream.Position { get { return 0; } }
			long IStream.Seek( long offset, SeekOrigin origin ) { return 0; }
		}

		public class WriteStream : BufferedStream, IStream {
			public StreamCapabilities Capabilities { get { return StreamCapabilities.Write; } }

			public WriteStream( IStream stream, int bufferSize = DefaultBufferSize )
				: base( stream ) {
				// Assert.IsTrue( bufferSize >= Memory.DefaultPageSize ); // ensure optimal buffer size

				_buffer = new[bufferSize] byte;

				_bufferInfo.Start = &_buffer[0];
				_bufferInfo.Position = 0;
				_bufferInfo.Capacity = _buffer.Length;
			}

			~WriteStream() { Cleanup(); }
			public override void Dispose() { Cleanup(); base.Dispose(); }

			private void Cleanup() {
				if( _stream == null ) return;

				Flush( FlushKind.Write );

				_stream = null;
				_buffer = null;
				_bufferInfo = default( StreamingBufferInfo );
			}

			public int Count { get { return _bufferInfo.Position; } }
			public int Capacity { get { return _buffer.Length; } }

			public void Write( void* buffer, int length ) {
				if( _stream == null ) return;
				if( length == 0 ) return;

				if( _bufferInfo.Position + length < _bufferInfo.Capacity ) {
					Memory.Copy( &_buffer[_bufferInfo.Position], buffer, ( uint ) length );
					_bufferInfo.OnWritePerformed( length );
					return;
				}

				while( length > 0 ) {
					var bytesToCopy = Math.Min( length, _bufferInfo.Capacity - _bufferInfo.Position );
					Memory.Copy( &_buffer[_bufferInfo.Position], buffer, ( uint ) bytesToCopy );

					buffer = cast<byte*>( buffer ) + bytesToCopy;
					length -= bytesToCopy;
					_bufferInfo.Position += bytesToCopy;

					if( _bufferInfo.Position == _bufferInfo.Capacity ) {
						_stream.Write( &_buffer[0], _bufferInfo.Position );
						_bufferInfo.Position = 0;
					}
				}
			}

			int IStream.Read( void* buffer, int length ) { Assert.Unreachable(); return 0; }

			int IStream.Read( vararg MemorySegment segments ) { Assert.Unreachable(); return 0; }
			void IStream.Write( vararg MemorySegment segments ) { foreach( var segment in segments ) Write( segment.Start, ( int ) segment.Count ); }

			public void Flush( FlushKind flushKind = FlushKind.SynchronizeWrite ) {
				if( _stream == null ) return;

				switch( flushKind ) {
					case FlushKind.Write:
					case FlushKind.SynchronizeWrite:
						if( _bufferInfo.Position > 0 ) {
							_stream.Write( &_buffer[0], _bufferInfo.Position );
							_bufferInfo.Position = 0;
						}

						if( flushKind == FlushKind.SynchronizeWrite ) _stream.Flush( flushKind ); // we need to go deeper

						break;
				}
			}

			TimeSpan IStream.Timeout { get { return TimeSpan.Zero; } set { } }
		
			long IStream.Position { get { return 0; } }
			long IStream.Seek( long offset, SeekOrigin origin ) { return 0; }
		}
	}
}