//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace System.IO {
	// Writes primitive data types into binary stream. Regardless of input's byte order data stored in little-endian form
	public class BinaryWriter {
		public IStream BaseStream;

		protected StreamingBufferInfo* _bufferInfo;

		public BinaryWriter( IStream stream ) {
			BaseStream = stream.GetBufferedWriteStream( _bufferInfo );
		}

		~BinaryWriter() { Cleanup(); }
		public override void Dispose() { Cleanup(); base.Dispose(); }

		private void Cleanup() {
			if( BaseStream != null ) {
				BaseStream.Flush( FlushKind.Write );
				BaseStream = null;
			}
		}

		private void WritePrimitive<T>( T& value ) {
			if( !Assert.IsTrue( BaseStream.EnsureWritable( _bufferInfo, sizeof( T ) ) ) ) return;
			*cast<T*>( _bufferInfo->WriteBufferStart ) = value;
			_bufferInfo->OnWritePerformed( sizeof( value ) );
		}

		public void Write( bool value ) { WritePrimitive<bool>( value ); }

		public void Write( sbyte value ) { WritePrimitive<sbyte>( value ); }
		public void Write( byte value ) { WritePrimitive<byte>( value ); }

		public void Write( short_littleendian value ) { WritePrimitive<short_littleendian>( value ); }
		public void Write( ushort_littleendian value ) { WritePrimitive<ushort_littleendian>( value ); }
		public void Write( int_littleendian value ) { WritePrimitive<int_littleendian>( value ); }
		public void Write( uint_littleendian value ) { WritePrimitive<uint_littleendian>( value ); }
		public void Write( long_littleendian value ) { WritePrimitive<long_littleendian>( value ); }
		public void Write( ulong_littleendian value ) { WritePrimitive<ulong_littleendian>( value ); }

		public void WriteBigEndian( short_bigendian value ) { WritePrimitive<short_bigendian>( value ); }
		public void WriteBigEndian( ushort_bigendian value ) { WritePrimitive<ushort_bigendian>( value ); }
		public void WriteBigEndian( int_bigendian value ) { WritePrimitive<int_bigendian>( value ); }
		public void WriteBigEndian( uint_bigendian value ) { WritePrimitive<uint_bigendian>( value ); }
		public void WriteBigEndian( long_bigendian value ) { WritePrimitive<long_bigendian>( value ); }
		public void WriteBigEndian( ulong_bigendian value ) { WritePrimitive<ulong_bigendian>( value ); }

		public void Write( float_littleendian value ) { WritePrimitive<float_littleendian>( value ); }
		public void Write( double_littleendian value ) { WritePrimitive<double_littleendian>( value ); }

		public void WriteBigEndian( float_bigendian value ) { WritePrimitive<float_bigendian>( value ); }
		public void WriteBigEndian( double_bigendian value ) { WritePrimitive<double_bigendian>( value ); }

		public void Write( [In] Guid& value ) {
			var bytes = value.Bytes;
			Write( &bytes[0], bytes.Length );
		}

		public void Write( [In] DateTime& value ) { WritePrimitive<DateTime>( value ); }
		public void Write( [In] TimeSpan& value ) { WritePrimitive<TimeSpan>( value ); }

		public void Write( [In] void* buffer, int length ) { BaseStream.Write( buffer, length ); } // BaseStream always buffered

		public void Write( System.Serialization.IBinarySerializable value, System.Serialization.SerializerContext context ) { value.Serialize( this, context ); }

		public void Write( CString value ) {
			if( value.IsNullOrEmpty ) {
				Write( uint.MaxValue );
				return;
			}

			var length = value.Length;
			Write( length );
			Write( System.Environment.DefaultCodePage );
			BaseStream.Write( value.GetChars(), ( int ) length * sizeof( value[0] ) );
		}

		public void Write( byte[] value ) {
			if( value == null ) {
				Write( uint.MaxValue );
				return;
			}

			Write( value.Length );
			BaseStream.Write( &value[0], ( int ) value.Length );
		}

		public void Write( SbcsString value ) {
			if( value == null ) {
				Write( uint.MaxValue );
				return;
			}

			Write( value.Length );
			Write( value.CodePage );
			BaseStream.Write( value.GetChars(), ( int ) value.ByteLength );
		}

		public void Write( Utf8String value ) {
			if( value == null ) {
				Write( uint.MaxValue );
				return;
			}

			Write( value.Length );
			Write( value.ByteLength );
			BaseStream.Write( value.GetChars(), ( int ) value.ByteLength );
		}

		public void Write( Utf16String value ) {
			if( value == null ) {
				Write( uint.MaxValue );
				return;
			}

			Write( value.Length );
			BaseStream.Write( value.GetChars(), ( int ) value.ByteLength );
		}

		public void Write( Utf32String value ) {
			if( value == null ) {
				Write( uint.MaxValue );
				return;
			}

			Write( value.Length );
			BaseStream.Write( value.GetChars(), ( int ) value.ByteLength );
		}

		public void WriteNullTerminated( CString value ) {
			if( value.IsNullOrEmpty ) {
				Write( ( byte ) 0 );
				return;
			}

			BaseStream.Write( value.GetChars(), ( ( int ) value.Length + 1 ) * sizeof( value[0] ) );
		}

		public void WriteNullTerminated( SbcsString value ) {
			if( value == null ) {
				Write( ( byte ) 0 );
				return;
			}

			BaseStream.Write( value.GetChars(), ( ( int ) value.Length + 1 ) * sizeof( value[0] ) );
		}

		public void WriteNullTerminated( Utf8String value ) {
			if( value == null ) {
				Write( ( byte ) 0 );
				return;
			}

			BaseStream.Write( value.GetChars(), ( int ) value.ByteLength + 1 );
		}

		public void WriteNullTerminated( Utf16String value ) {
			if( value == null ) {
				Write( ( ushort ) 0 );
				return;
			}

			BaseStream.Write( value.GetChars(), ( ( int ) value.Length + 1 ) * sizeof( value[0] ) );
		}

		public void WriteNullTerminated( Utf32String value ) {
			if( value == null ) {
				Write( ( uint ) 0 );
				return;
			}

			BaseStream.Write( value.GetChars(), ( ( int ) value.Length + 1 ) * sizeof( value[0] ) );
		}

		public void Flush( FlushKind flushKind = FlushKind.SynchronizeWrite ) { BaseStream.Flush( flushKind ); }

		public void WriteArray<T>( T* values, int count ) {
			for( var i = 0; i < count; ++i )
				Write( values[i] );
		}

		public void WriteArrayDifferential<T>( T* values, int count ) {
			if( count <= 0 ) return;
			Write( values[0] );
			for( var i = 1; i < count; ++i )
				Write( values[i] - values[i - 1] );
		}

		public void WriteCompact( uint_littleendian value ) {
			Debug.Assert( value < 0x40000000 );

			var bytes = ( byte* ) &value;

			if( value < 0x80 )
				Write( bytes[0] );
			else if( value < 0x4000 ) {
				bytes[1] |= 0x80;
				Write( *( ushort_bigendian* ) bytes );
			}
			else {
				bytes[3] |= 0xC0;
				Write( *( uint_bigendian* ) bytes );
			}
		}

		public void WriteCompact( int_littleendian value ) {
			Debug.Assert( value >= -0x20000000 && value < 0x20000000 );

			if( value >= 0 ) {
				WriteCompact( ( uint ) value << 1 );
				return;
			}

			WriteCompact( ( ( ~( uint ) value ) << 1 ) | 1 );
		}
	}
}