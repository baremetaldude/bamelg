//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

// Fibers used for IO-intensive applications, do not use them for computation-intensive tasks
// Avoid 'stackalloc' or big fixed array instances in stack, use approprite methods from 'System.Runtime.Memory' instead
// Most of functionality is MT-unsafe ( must be used inside EventLoop thread only )

// Testing 10000 fibers with 1000 yields on Q9450 (10 000 000 userspace context switches):
// SwitchCurrentContext: 00:00:06.057995        sizeof(Fiber) == 83
// swapcontext:          00:00:12.550795        sizeof(Fiber) == 373

using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace System.IO {
	public partial struct Fiber : IFormattable {
		public static readonly Fiber Null;

		public static bool UseGuardPage = true;

		public static bool operator ==( Fiber& left, Fiber& right ) { return left._impl == right._impl && left._version == right._version; }
		public static bool operator !=( Fiber& left, Fiber& right ) { return !( left == right ); }

		public bool IsValid { get { return _impl != null && _version == _impl->_version; } }
		public static string Name { get { var& fm = FiberManager; return fm != null ? fm.CurrentFiber->Name : null; } }

		private FiberInfo* _impl;
		private int _version;

		[ThreadStatic]
		internal static FiberInfo.Manager FiberManager;

		public static Fiber Current {
			get {
				EnsureFiberExecuting();
				return *FiberManager.CurrentFiber;
			}
		}

		public void Cancel() {
			if( IsValid )
				FiberManager.Cancel( _impl );
		}

		public static bool Enabled { get { return FiberManager != null; } }
		public static bool IsFiberExecuting { get { return FiberManager.IsFiberExecuting; } }

		void IFormattable.ToString( StringBuilder result, string format ) {
			if( IsValid ) result.Append( *_impl );
			else result.Append( "invalid" );
		}

		// Executes delegate in separate thread and waits for completion
		public static void InvokeAsync( Delegates.Action start ) {
			FiberManager.InvokeAsync( start );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private static void EnsureFiberExecuting() {
			Assert.IsTrue( IsFiberExecuting );
		}

		public static DateTime Now {
			get { EnsureFiberExecuting(); return FiberManager.Now; }
		}

		public static DateTime UtcNow {
			get { EnsureFiberExecuting(); return FiberManager.UtcNow; }
		}

		public static DateTime UnbiasedNow {
			get { EnsureFiberExecuting(); return FiberManager.UnbiasedNow; }
		}

		public static void Sleep( TimeSpan time ) {
			EnsureFiberExecuting();
			FiberManager.Sleep( time );
		}

		public static void Sleep( int milliseconds ) {
			EnsureFiberExecuting();
			FiberManager.Sleep( milliseconds );
		}

		public static void Yield() {
			EnsureFiberExecuting();
			FiberManager.Yield();
		}

		public static bool IsCancelled {
			get {
				EnsureFiberExecuting();
				var currentFiber = FiberManager.CurrentFiber;
				return currentFiber->IsCancellationPending;
			}
		}

		public static void RuntimeInitialize() {
			Assert.IsTrue( FiberManager == null );
			FiberManager = new FiberInfo.Manager();
		}

		public static void RuntimeShutdown() {
			Assert.IsTrue( FiberManager != null );
			FiberManager.Shutdown();
			FiberManager = null;
		}

		/// Create and run fiber
		public static Fiber Start( int pageCount, Functors.Action<void*> function, void* parameter, string name = null ) { var result = Create( pageCount, function, parameter, name ); if( result.IsValid ) result._impl->Ready(); return result; }
		/// Create suspended fiber
		public static Fiber Create( int pageCount, Functors.Action<void*> function, void* parameter, string name = null ) { return *FiberManager.CreateFiber( pageCount, function, parameter, name ); }

		public static Fiber Start( int pageCount, Functors.Action start, string name = null ) { return Start( pageCount, passedData => bitcast<Functors.Action>( passedData )(), bitcast<void*>( start ), name ); }
		/// Create suspended fiber
		public static Fiber Create( int pageCount, Functors.Action start, string name = null ) { return Create( pageCount, passedData => bitcast<Functors.Action>( passedData )(), bitcast<void*>( start ), name ); }

		/// Create and run fiber
		public static Fiber Start( int pageCount, Delegates.Action start, string name = null ) { var result = Create( pageCount, start, name ); if( result.IsValid ) result._impl->Ready(); return result; }
		/// Create suspended fiber
		public static Fiber Create( int pageCount, Delegates.Action start, string name = null ) {
			cast<RuntimeObjectBase>( start ).AddReference();

			return *FiberManager.CreateFiber( pageCount, parameter => {
				var @delegate = bitcast<System.Delegates.Action>( parameter );
				cast<RuntimeObjectBase>( @delegate ).ReleaseReference();

				@delegate();
			}, bitcast<void*>( start ), name );
		}

		public static AsyncCompletionRegionInfo AsyncCompletionRegion() {
			return new AsyncCompletionRegionInfo();
		}

		// Perform enclosing block in thread pool
		// using( Fiber.AsyncCompletionRegion() ) { // TP context starts here
		//		readv( ... ); // no Fiber-related calls may appear here
		// }
		// TLS-specific status codes (errno, LastError) must be transferred manually
		public struct AsyncCompletionRegionInfo : System.Threading.DPC, IDisposable {
			internal FiberInfo.Manager* CurrentManager;
			internal FiberInfo* CompletionFiber;
			internal bool IsCancellable;

			public AsyncCompletionRegionInfo() {
				FiberInfo.Manager.BeginAsyncCompletion( &this );
			}

			public void Dispose() {
				FiberInfo.Manager.EndAsyncCompletion( &this );
			}
		}

		internal partial struct FiberInfo : IFormattable {
			private void* _stack, _fls;
			private int _stackSize;
			private intptr ValgrindStackID;
			internal int _version;
			public string Name;

			private DateTime Alarm, CreatedTime;
			private TimeSpan RunTime;

			private FiberInfo* ScheduledNext;
			internal FiberInfo* WaitNext;

			private bool _isReady { get; set; }
			private bool _isAlive { get; set; }
			private bool _guardPage { get; set; }

			public bool IsCancellable { get; set; } // IO/syncronization waits in cancellable regions able to abort/resume
			public bool IsCancelled { get; set; } // is resumed by cancellation
			public bool IsCancellationPending { get; set; } // is cancellation requested externally

			internal void Ready() { FiberManager.Ready( &this ); }

			public static implicit operator Fiber( FiberInfo& fiber ) {
				if( fiber == nullref ) return default( Fiber );
				return new Fiber { _impl = &fiber, _version = fiber._version };
			}

			private void OnFinalize() {
				// don't deregister main stack
				if( ValgrindStackID != 0 ) {
					Valgrind.StackDeregister( ValgrindStackID );
					ValgrindStackID = 0;
				}

				FiberManager.FreeStack( _guardPage, _stack, _stackSize ); _stack = null;
				Manager.TraceFinalize( &this );

				CommonCollectionOperations.UpdateVersion( &_version );
				_isAlive = false;
				Name = null;
			}

			private struct ProcessorContext {
			}

			private static void FiberFunction( Functors.Action<void*> function, void* parameter ) {
				Loader.InitializeFls();
				function( parameter );
				Loader.FinalizeFls();
				FiberManager.RemoveAndSwitchTo( FiberManager.CurrentFiber->ScheduledNext );
			}

			private static void FiberIncorrectExitHandler() {
				Assert.Fail( "Fiber exited incorrectly!" );
				FiberManager.RemoveAndSwitchTo( FiberManager.CurrentFiber->ScheduledNext );
			}

			internal partial class Manager {
				public DateTime Now, UtcNow, UnbiasedNow;

				internal FiberInfo MainFiber = new FiberInfo {
					_stack = null,
					_fls = Loader.FlsSegment,
					_stackSize = 0,
					ValgrindStackID = 0,
					Name = "main"
				};

				internal FiberInfo* CurrentFiber;

				private PagedPool<FiberInfo> _fibers = new PagedPool<FiberInfo>();
				private List<FiberInfo*> _readyList = new List<FiberInfo*>();
				private List<FiberInfo*> _finishedList = new List<FiberInfo*>();
				private List<DPC*> _pendingThreadPoolTasks = new List<DPC*>();

				public int FiberCount { get { return _fibers.Count; } }
				public bool IsFiberExecuting { get { return this != null && CurrentFiber != &MainFiber; } }

				// false - transfer blocking operations to ThreadPool
				// true - block all running fibers by blocking operation performing in same thread (may be useful when thread running with specific credentials)
				public bool AllowBlockingOperations { get; set; }

				// Some old Linux platforms have glibc threading bugs which prevents coroutines to work on memory not belonging to current thread stack
				public MemoryPageManager PageManager;

				public bool Tracing { get; set; }

				public Manager() {
					Assert.IsTrue( FiberManager == null );
					FiberManager = this;

					// try to make tight allocations
					if( Memory.DefaultPageReserveCount != 1 ) PageManager = new System.Runtime.MemoryPageManager();

					_fibers.OnFinalize = FiberInfo.OnFinalize;

					CurrentFiber = &MainFiber;
					PrepareMainFiberEnvironment( CurrentFiber );

					TraceCreateFiber( CurrentFiber );

					OnInitialize();
				}

				~Manager() {
					OnFinalize();
				}

				public FiberInfo* CreateFiber( int pageCount, Functors.Action<void*> function, void* parameter, string name = null ) {
					var additionalPages = ( Loader._flsSnapshotSize + Loader._flsSnapshotAlignment + Memory.DefaultPageSize / 8 ) / Memory.DefaultPageSize;
					pageCount += additionalPages;

					var stackSize = pageCount * Memory.DefaultPageSize;

					var result = _fibers.Allocate();
					TraceCreateFiber( result );

					result->_isReady = false;
					result->_isAlive = true;
					result->_guardPage = UseGuardPage;

					result->_stack = AllocateStack( pageCount );
					if( result->_stack == null ) {
						_fibers.Free( result );
						return null;
					}

					result->_stackSize = stackSize;
					result->Name = name;

					result->IsCancellable = result->IsCancelled = result->IsCancellationPending = false;

					{
						void* adjustedStack = null;
						int adjustedStackSize = 0;
						var flsStart = ( byte* ) result->_stack;

						[DisableWarningUnreachable]
						if( Memory.StackGrowsDown ) {
							flsStart += stackSize;
							flsStart -= Loader._flsSnapshotSize;
							flsStart = ( byte* )( ( intptr ) flsStart & ~( Loader._flsSnapshotAlignment - 1 ) );

							adjustedStack = result->_stack;
							adjustedStackSize = ( int )( flsStart - ( byte* ) result->_stack );

							result->_fls = flsStart;
						}
						else {
							adjustedStack = ( byte* ) result->_stack + Loader._flsSnapshotSize;
							adjustedStackSize = result->_stackSize - Loader._flsSnapshotSize;

							result->_fls = flsStart;
						}

						Memory.Copy( flsStart, Loader._flsSnapshotStart, ( uint ) Loader._flsSnapshotSize );
						PrepareContext( result->Context, adjustedStack, adjustedStackSize, function, parameter );
						PrepareFiberEnvironment( result );
					}

					result->ValgrindStackID = Valgrind.StackRegister( result->_stack, cast<byte*>( result->_stack ) + result->_stackSize );

					return result;
				}

				/// returns allocation start address
				internal void* AllocateStack( int pageCount ) {
					if( !Assert.IsTrue( pageCount >= 1 ) ) return null;

					var allocationCount = pageCount;
					if( UseGuardPage )
						++allocationCount;

					byte* result;

					if( PageManager != null ) {
						result = ( byte* ) PageManager.AllocatePages( allocationCount );
					}
					else {
						result = ( byte* ) Memory.AllocatePages( allocationCount );
					}

					if( result == null ) return null;

					if( UseGuardPage ) {
						if( Memory.StackGrowsDown ) {
							Memory.DecommitPages( result, 1 );
							return result + Memory.DefaultPageSize;
						}
						else {
							Memory.DecommitPages( result + Memory.DefaultPageSize * pageCount, 1 );
							return result;
						}
					}
					else {
						return result;
					}
				}

				internal void FreeStack( bool guardPage, void* stack, int length ) {
					if( stack == null ) return;
					if( length == 0 ) return;

					var ptr = ( byte* ) stack;
					var allocationLength = length;

					if( guardPage ) {
						if( Memory.StackGrowsDown ) ptr -= Memory.DefaultPageSize;
						allocationLength += Memory.DefaultPageSize;
					}

					if( PageManager != null ) {
						PageManager.FreePages( ptr, allocationLength / Memory.DefaultPageSize );
					}
					else {
						Memory.FreePages( ptr, allocationLength / Memory.DefaultPageSize );
					}
				}

				public void Sleep( int milliseconds ) { Sleep( TimeSpan.FromMilliseconds( milliseconds ) ); }

				internal void CancelAllFibers() {
					TraceCancelAllFibers();

					foreach( var fiber in _fibers ) {
						fiber->IsCancellationPending = true;

						if( fiber->IsCancellable ) {
							Ready( fiber );
							fiber->IsCancelled = true;
						}
					}
				}

				public void Cancel( FiberInfo* fiber ) {
					fiber->IsCancellationPending = true;

					if( fiber->IsCancellable ) {
						Ready( fiber );
						fiber->IsCancelled = true;
					}
				}

				// Waits until 'Ready' called
				public void Suspend() {
					CurrentFiber->IsCancelled = false;
					SwitchTo( CurrentFiber->ScheduledNext );
				}

				// Yields control for one iteration of event loop
				public void Yield() {
					CurrentFiber->IsCancelled = false;
					Ready( CurrentFiber );
					SwitchTo( CurrentFiber->ScheduledNext );
				}

				// Switch context to next fiber
				private void SwitchTo( FiberInfo* fiber ) {
					var prevFiber = CurrentFiber;
					TraceSwitch( prevFiber, fiber );

					CurrentFiber = fiber;
					fiber->_isReady = false;

					Loader.FlsSegment = fiber->_fls;

					SwitchEnvironment( prevFiber, fiber );
					SwitchCurrentContext( prevFiber->Context, fiber->Context );
				}

				// Switch context to next fiber and remove current
				internal void RemoveAndSwitchTo( FiberInfo* fiber ) {
					TraceSwitch( CurrentFiber, fiber );

					var currentFiber = CurrentFiber;
					CurrentFiber = fiber;
					fiber->_isReady = false;

					_finishedList.Add( currentFiber );

					Loader.FlsSegment = fiber->_fls;
					SwitchEnvironment( currentFiber, fiber );
					SwitchCurrentContext( currentFiber->Context, fiber->Context );
				}

				public void InvokeAsync( Delegates.Action start ) {
					var currentFiber = CurrentFiber;

					System.Threading.ThreadPool.BeginInvoke( () => {
						start();
						ReadyAsync( currentFiber );
						TraceTPTaskCompleted( currentFiber );
					} );

					TraceWait( currentFiber, thismethod, TimeSpan.Zero );
					Suspend();
				}

				public void Dispatch() {
					UnbiasedNow = DateTime.UnbiasedNow;
					UtcNow = DateTime.UtcNow;
					Now = UtcNow.ToLocalTime();

					using( _readyListAsyncLock.LockRegion() )
						if( _readyListAsync.Count > 0 ) {
							TraceReadyAsyncStart();

							foreach( var fiber in _readyListAsync )
								Ready( fiber );

							_readyListAsync.Clear();
							TraceReadyAsyncEnd();
						}

					OnBeforeDispatch();

					FiberInfo* scheduleTo = null;
					TraceReadyFibers( _readyList.Count );

					if( _readyList.Count > 0 ) {
						PrepareMainFiberEnvironment( CurrentFiber );
						scheduleTo = _readyList[0];

						for( var i = 0; i < _readyList.Count; ++i )
							_readyList[i]->ScheduledNext = i + 1 < _readyList.Count ? _readyList[i + 1] : CurrentFiber;

						_readyList.Clear();
					}

					if( scheduleTo != null )
						SwitchTo( scheduleTo );

					foreach( var task in _pendingThreadPoolTasks )
						System.Threading.ThreadPool.BeginInvoke( task );

					foreach( var fiber in _finishedList )
						_fibers.Free( fiber );

					_pendingThreadPoolTasks.Clear();
					_finishedList.Clear();

					OnAfterDispatch();
				}

				internal void BeginTimeout( TimeSpan& timeout ) {
					if( timeout == nullref ) return;
					if( timeout <= TimeSpan.Zero ) return;

					CurrentFiber->_alarmID = BeginTimeout( timeout, passedData => {
						var currentFiber = bitcast<FiberInfo*>( passedData );
						currentFiber->_alarmID = null;
						currentFiber->Ready();
					}, CurrentFiber );
				}

				// \return true if timed out
				internal bool EndTimeout( TimeSpan& timeout ) {
					if( timeout == nullref ) return false;
					if( timeout <= TimeSpan.Zero ) return false;

					if( CurrentFiber->_alarmID != null ) { // alarm not fired
						EndTimeout( CurrentFiber->_alarmID );
						CurrentFiber->_alarmID = null;
						return false;
					}

					return true;
				}

				public void Sleep( TimeSpan time ) {
					if( !IsFiberExecuting ) {
						Threading.Thread.Sleep( ( int ) time.TotalMilliseconds );
						return;
					}

					if( !Assert.IsTrue( time > TimeSpan.Zero ) ) return;

					CurrentFiber->_alarmID = BeginTimeout( time, passedData => {
						var currentFiber = bitcast<FiberInfo*>( passedData );
						currentFiber->_alarmID = null;
						currentFiber->Ready();
					}, CurrentFiber );

					Suspend();

					if( CurrentFiber->_alarmID != null ) {
						EndTimeout( CurrentFiber->_alarmID );
						CurrentFiber->_alarmID = null;
					}
				}

				public static void BeginAsyncCompletion( AsyncCompletionRegionInfo* context ) { // called from original fiber
					//
					// before switch
					//
					context->OnAction = AsyncCompletionRoutine;
					context->OnActionDispose = AsyncCompletionRoutine;
					context->OnDispose = null;
					context->CurrentManager = &FiberManager;

					if( !context->CurrentManager->IsFiberExecuting || context->CurrentManager->AllowBlockingOperations ) {
						context->CompletionFiber = null;
						return;
					}

					context->CompletionFiber = context->CurrentManager->CurrentFiber;
					context->CompletionFiber->_isReady = false;

					context->IsCancellable = context->CompletionFiber->IsCancellable;
					context->CompletionFiber->IsCancellable = false;

					context->CurrentManager->_pendingThreadPoolTasks.Add( context );

					context->CurrentManager->Suspend();

					//
					// after switch to TP thread
					//
				}

				// Called from thread pool
				internal static void AsyncCompletionRoutine( AsyncCompletionRegionInfo* context ) { // called from TP
					//
					// after BeginAsyncCompletion()
					//

					var mainFiber = new FiberInfo {
						_stack = null,
						_fls = Loader.FlsSegment,
						_stackSize = 0,
						ValgrindStackID = 0,
						Name = "tp"
					};

					PrepareMainFiberEnvironment( &mainFiber );

					var completionFiber = context->CompletionFiber;
					completionFiber->_isReady = false;
					completionFiber->ScheduledNext = &mainFiber;

					Loader.FlsSegment = completionFiber->_fls;
					SwitchEnvironment( &mainFiber, completionFiber );
					SwitchCurrentContext( mainFiber.Context, completionFiber->Context );

					//
					// after EndAsyncCompletion()
					//

					completionFiber->IsCancellable = context->IsCancellable;
					context->CurrentManager->ReadyAsync( completionFiber );
				}

				public static void EndAsyncCompletion( AsyncCompletionRegionInfo* context ) { // called from TP
					var currentFiber = context->CompletionFiber;
					if( currentFiber == null ) return;

					var mainTPFiber = currentFiber->ScheduledNext;
					currentFiber->_isReady = false;

					Loader.FlsSegment = mainTPFiber->_fls;
					SwitchEnvironment( currentFiber, mainTPFiber );
					SwitchCurrentContext( currentFiber->Context, mainTPFiber->Context );
				}

				private DateTime _lastSwitch = DateTime.UnbiasedNow;

				#region Tracing

				[Conditional( ConditionString = TraceConditionString )]
				private void TraceSwitch( FiberInfo* current, FiberInfo* next ) {
					if( !FiberManager?.Tracing ) return;

					var now = DateTime.UnbiasedNow;
					var elapsed = now - _lastSwitch;
					current->RunTime += elapsed;

					++TracedContextSwitches;

					using( Console.AttributedRegion( new Console.OutputAttributes() {
						ForegroundColor = RgbColor.Green,
						Bold = true
					} ) )
						Console.WriteLine( "Fiber: Switch [{0}] --> [{1}] at {2:HH:mm:ss.ffffff} elapsed={3}", *current, *next, now.ToUniversalTime(), elapsed );

					_lastSwitch = now;
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceReady( FiberInfo* current ) {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: Ready [{0}]", *current );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceReadyAsyncStart() {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: Ready fibers async batch begin" );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceReadyAsyncEnd() {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: Ready fibers async batch end" );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceReadyAsync( FiberInfo* current ) {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: Ready async [{0}]", *current );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceReadyFibers( int readyCount ) {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: Ready to dispatch: {0}", readyCount );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceIOEvents( int polledHandles ) {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: IO events count = {0}", polledHandles );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceWait( FiberInfo* fiber, System.Reflection.UserType.Method& method, TimeSpan& timeout ) {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: Suspend [{0}] in '{1}' timeout={2}", *fiber, method, timeout );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceTPTaskCompleted( FiberInfo* fiber ) {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: TP task for [{0}] completed", *fiber );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceCreateFiber( FiberInfo* fiber ) {
					if( !FiberManager?.Tracing ) return;

					fiber->CreatedTime = DateTime.UnbiasedNow;
					Console.WriteLine( "Fiber: Created [{0}] ( total: {1} ) Stack={2}-{3}({4}) ValgrindStackID: {5} at {6:HH:mm:ss.ffffff}", *fiber, FiberManager.FiberCount, fiber->_stack, ( byte* ) fiber->_stack + fiber->_stackSize, fiber->_stackSize, fiber->ValgrindStackID, DateTime.UnbiasedNow );
				}

				[Conditional( ConditionString = TraceConditionString )]
				internal static void TraceFinalize( FiberInfo* fiber ) {
					if( !FiberManager?.Tracing ) return;

					var now = DateTime.UnbiasedNow;
					var elapsed = now - FiberManager._lastSwitch;
					fiber->RunTime += elapsed;

					using( Console.AttributedRegion( new Console.OutputAttributes() {
						ForegroundColor = RgbColor.Red,
						Bold = true
					} ) )
						Console.WriteLine( "Fiber: Finalized [{0}] ( total: {1} ) at {2:HH:mm:ss.ffffff} duration={3} work={4}", *fiber, FiberManager.FiberCount, now, now - fiber->CreatedTime, fiber->RunTime );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private static void TraceCancelAllFibers() {
					if( !FiberManager?.Tracing ) return;

					using( Console.AttributedRegion( new Console.OutputAttributes() {
						BackgroundColor = RgbColor.Red,
						Bold = true
					} ) )
						Console.WriteLine( "Cancel all ({0}) fibers", FiberManager.FiberCount );
				}

				[Conditional( ConditionString = TraceConditionString )]
				private void TraceUsageStats() {
					if( !FiberManager?.Tracing ) return;

					Console.WriteLine( "Fiber: ContextSwitches = {0}", TracedContextSwitches );
				}

				public int TracedContextSwitches = 0;

				#endregion
			}

			void IFormattable.ToString( StringBuilder result, string format ) {
				if( Name != null ) {
					result.Append( Name );
					result.Append( ':' );
					result.Append( ( void* ) &this );
				}
				else result.Append( ( void* ) &this );
			}
		}

		/// @{ Tracing
		internal const string TraceConditionString = "TRACE_FIBER";

		[Conditional( ConditionString = TraceConditionString )]
		private static void TraceInformation() {
			Trace.Write( "Fiber: sizeof( FiberInfo ) == {0}; alignof( FiberInfo ) == {1}", sizeof( FiberInfo ), typeof( FiberInfo ).InstanceAlignment );
			Trace.Write( "Fiber: sizeof( FLS ) == {0}; alignof( FLS ) = {1}", Loader._flsSnapshotSize, Loader._flsSnapshotAlignment );
		}
		/// @}
	}
}