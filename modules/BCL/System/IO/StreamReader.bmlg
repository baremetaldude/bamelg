//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Runtime.CompilerServices;
using System.Text;

namespace System.IO {
	public class StreamReader : ITextReader {
		private BufferedStream.ReadStream _stream;
		private Unicode.ByteOrderMark _bom = Unicode.ByteOrderMark.Unknown;
		private StringBuilder _builder = new StringBuilder();

		public System.Text.CodePageID CodePage = CompilerInfo.CurrentPlatform == PlatformID.Windows ? Environment.DefaultCodePage : ( System.Text.CodePageID ) 0;

		public char CarriageReturn = '\r';

		public StreamReader( IStream stream )
			: this( stream, true ) {
		}

		public StreamReader( IStream stream, Unicode.ByteOrderMark bom ) {
			_bom = bom;
			_stream = stream as BufferedStream.ReadStream;
			if( _stream == null ) _stream = new BufferedStream.ReadStream( stream );
		}

		public StreamReader( IStream stream, bool detectBOM ) {
			_stream = stream as BufferedStream.ReadStream;
			if( _stream == null ) _stream = new BufferedStream.ReadStream( stream );

			if( detectBOM ) {
				int bomHeaderLength;

				for( var i = 1; i <= 4; ++i ) { // peek up to 4 bytes
					var data = _stream.Peek( i );
					if( data == null ) break;

					_bom = Unicode.DetectByteOrderMark( data, ( uint ) _stream.Count, bomHeaderLength );

					if( _bom != Unicode.ByteOrderMark.Unknown ) {
						_stream.Drain( bomHeaderLength );
						break;
					}
				}
			}
		}

		~StreamReader() { Cleanup(); }
		public override void Dispose() { Cleanup(); base.Dispose(); }

		private void Cleanup() {
			_stream = null;
		}

		public string ReadLine() {
			string fastString = null;
			if( ReadLine( _builder, &fastString ) ) return fastString ?? _builder.ToString();

			return null;
		}

		public bool ReadLine( StringBuilder builder ) {
			return ReadLine( builder, null );
		}

		// public bool SkipEmptyLines = false;

		private void SkipLF() {
			var peekData = _stream.Peek( sizeof( byte ) );
			if( peekData != null && cast<byte*>( peekData )[0] == '\n' ) _stream.Drain( sizeof( byte ) );
		}

		private void SkipLF2LE() {
			var peekData = _stream.Peek( sizeof( char_littleendian ) );
			if( peekData != null && cast<char_littleendian*>( peekData )[0] == '\n' ) _stream.Drain( sizeof( char_littleendian ) );
		}

		private void SkipLF2BE() {
			var peekData = _stream.Peek( sizeof( char_bigendian ) );
			if( peekData != null && cast<char_bigendian*>( peekData )[0] == '\n' ) _stream.Drain( sizeof( char_bigendian ) );
		}

		private void SkipLF4LE() {
			var peekData = _stream.Peek( sizeof( uint_littleendian ) );
			if( peekData != null && cast<uint_littleendian*>( peekData )[0] == '\n' ) _stream.Drain( sizeof( uint_littleendian ) );
		}

		private void SkipLF4BE() {
			var peekData = _stream.Peek( sizeof( uint_bigendian ) );
			if( peekData != null && cast<uint_bigendian*>( peekData )[0] == '\n' ) _stream.Drain( sizeof( uint_bigendian ) );
		}

		public string ReadAllText() {
			_builder.Clear();
			if( _stream.Peek( 1 ) == null ) return null;

			switch( _bom ) {
				case Unicode.ByteOrderMark.Unknown: {
						if( CodePage == 0 ) goto case Unicode.ByteOrderMark.Utf8;

						while( true ) {
							var bufferedBytes = _stream.Count;
							var dataStart = ( byte* ) _stream.Peek( 1 );

							_builder.AppendSBCS( CodePage, dataStart, ( int ) bufferedBytes );
							_stream.Drain( bufferedBytes );

							if( _stream.Peek( 1 ) == null ) break;
						}
					} break;

				case Unicode.ByteOrderMark.Utf8: {
						while( true ) {
							var bufferedBytes = _stream.Count;
							var dataStart = ( byte* ) _stream.Peek( 1 );

							_builder.Append( new CUtf8StringSpan( dataStart, ( uint ) bufferedBytes ) );
							_stream.Drain( bufferedBytes );

							if( _stream.Peek( 1 ) == null ) break;
						}
					} break;

				case Unicode.ByteOrderMark.Utf16LittleEndian: {
						while( true ) {
							var bufferedChars = _stream.Count / sizeof( char );
							var dataStart = ( char* ) _stream.Peek( sizeof( char ) );

							_builder.Append( new CUtf16StringSpan( dataStart, ( uint ) bufferedChars ) );
							_stream.Drain( bufferedChars * sizeof( char ) );

							if( _stream.Peek( sizeof( char ) ) == null ) break;
						}
					} break;

				case Unicode.ByteOrderMark.Utf16BigEndian: {
						while( true ) {
							var bufferedChars = _stream.Count / sizeof( char );
							var dataStart = ( char* ) _stream.Peek( sizeof( char ) );

							System.Runtime.Memory.PerformBswap2( dataStart, ( uint ) bufferedChars );
							_builder.Append( new CUtf16StringSpan( dataStart, ( uint ) bufferedChars ) );
							_stream.Drain( bufferedChars * sizeof( char ) );

							if( _stream.Peek( sizeof( char ) ) == null ) break;
						}
					} break;

				case Unicode.ByteOrderMark.Utf32LittleEndian: {
						bool hasCR = false; // \r

						while( true ) {
							var bufferedChars = _stream.Count / sizeof( uint );
							var dataStart = ( uint* ) _stream.Peek( sizeof( uint ) );

							_builder.Append( new CUtf32StringSpan( dataStart, ( uint ) bufferedChars ) );
							_stream.Drain( bufferedChars * sizeof( uint ) );

							if( _stream.Peek( sizeof( uint ) ) == null ) break;
						}
					} break;

				case Unicode.ByteOrderMark.Utf32BigEndian: {
						while( true ) {
							var bufferedChars = _stream.Count / sizeof( uint );

							var dataStart = ( uint* ) _stream.Peek( sizeof( uint ) );
							System.Runtime.Memory.PerformBswap4( dataStart, ( uint ) bufferedChars );
							_builder.Append( new CUtf32StringSpan( dataStart, ( uint ) bufferedChars ) );
							_stream.Drain( bufferedChars * sizeof( uint ) );

							if( _stream.Peek( sizeof( uint ) ) == null ) break;
						}
					} break;

				default:
					Assert.NotImplemented();
					break;
			}

			return _builder.ToString();
		}

		private bool ReadLine( StringBuilder builder, string* fastString ) {
			var stringStart = -1;

			builder.Clear();
			if( _stream.Peek( 1 ) == null ) return false;

			switch( _bom ) {
				case Unicode.ByteOrderMark.Unknown: {
						if( CodePage == 0 ) goto case Unicode.ByteOrderMark.Utf8;
						bool hasCR = false; // \r

						while( true ) {
							var bufferedBytes = _stream.Count;

							for( var i = 0; i < bufferedBytes; ++i ) {
								var data = ( byte* ) _stream.Peek( i + 1 );

								var isLF = data[i] == '\n';
								var isCR = data[i] == CarriageReturn;

								if( isLF | isCR ) {
									if( isLF && hasCR ) {
										hasCR = false;
										continue;
									}

									hasCR = isCR;

									if( stringStart == -1 ) {
										_stream.Drain( i + 1 );
										if( isCR ) SkipLF();
										return true;
									}

									if( builder.Length == 0 && fastString != null ) {
										*fastString = string.FromSBCS( CodePage, data + stringStart, ( uint )( i - stringStart ) );
										_stream.Drain( i + 1 );
										if( isCR ) SkipLF();
										return true;
									}
									else {
										builder.AppendSBCS( CodePage, data + stringStart, ( int )( i - stringStart ) );
										_stream.Drain( i + 1 );
										if( isCR ) SkipLF();
										return true;
									}
								}
								else {
									hasCR = false;

									if( stringStart == -1 ) {
										stringStart = i;
									}
								}
							}

							if( stringStart == -1 ) {
								_stream.Drain( bufferedBytes );
								return bufferedBytes != 0;
							}

							var dataStart = ( byte* ) _stream.Peek( 1 );

							builder.AppendSBCS( CodePage, dataStart + stringStart, ( int )( bufferedBytes - stringStart ) );
							_stream.Drain( bufferedBytes );

							stringStart = -1;

							if( _stream.Peek( 1 ) == null ) {
								return true;
							}
						}
					} break;

				case Unicode.ByteOrderMark.Utf8: {
						bool hasCR = false; // \r

						while( true ) {
							var bufferedBytes = _stream.Count;

							for( var i = 0; i < bufferedBytes; ++i ) {
								var data = ( byte* ) _stream.Peek( i + 1 );

								var isLF = data[i] == '\n';
								var isCR = data[i] == CarriageReturn;

								if( isLF | isCR ) {
									if( isLF && hasCR ) {
										hasCR = false;
										continue;
									}

									hasCR = isCR;

									if( stringStart == -1 ) {
										_stream.Drain( i + 1 );
										if( isCR ) SkipLF();
										return true;
									}

									if( builder.Length == 0 && fastString != null ) {
										*fastString = string.FromUtf8( data + stringStart, ( uint )( i - stringStart ) );
										_stream.Drain( i + 1 );
										if( isCR ) SkipLF();
										return true;
									}
									else {
										builder.Append( new CUtf8StringSpan( data + stringStart, ( uint )( i - stringStart ) ) );
										_stream.Drain( i + 1 );
										if( isCR ) SkipLF();
										return true;
									}
								}
								else {
									hasCR = false;

									if( stringStart == -1 ) {
										stringStart = i;
									}
								}
							}

							if( stringStart == -1 ) {
								_stream.Drain( bufferedBytes );
								return bufferedBytes != 0;
							}

							var dataStart = ( byte* ) _stream.Peek( 1 );

							builder.Append( new CUtf8StringSpan( dataStart + stringStart, ( uint )( bufferedBytes - stringStart ) ) );
							_stream.Drain( bufferedBytes );

							stringStart = -1;

							if( _stream.Peek( 1 ) == null ) {
								return true;
							}
						}
					} break;

				case Unicode.ByteOrderMark.Utf16LittleEndian: {
						bool hasCR = false; // \r

						while( true ) {
							var bufferedChars = _stream.Count / sizeof( char );

							for( var i = 0; i < bufferedChars; ++i ) {
								var data = ( char_littleendian* ) _stream.Peek( ( i + 1 ) * sizeof( char ) );

								var isLF = data[i] == '\n';
								var isCR = data[i] == CarriageReturn;

								if( isLF | isCR ) {
									if( isLF && hasCR ) {
										hasCR = false;
										continue;
									}

									hasCR = isCR;

									if( stringStart == -1 ) {
										_stream.Drain( ( i + 1 ) * sizeof( char ) );
										if( isCR ) SkipLF2LE();
										return true;
									}

									if( builder.Length == 0 && fastString != null ) {
										*fastString = string.FromUtf16( data + stringStart, ( uint )( i - stringStart ) );
										_stream.Drain( ( i + 1 ) * sizeof( char ) );
										if( isCR ) SkipLF2LE();
										return true;
									}
									else {
										builder.Append( new CUtf16StringSpan( data + stringStart, ( uint )( i - stringStart ) ) );
										_stream.Drain( ( i + 1 ) * sizeof( char ) );
										if( isCR ) SkipLF2LE();
										return true;
									}
								}
								else {
									hasCR = false;

									if( stringStart == -1 ) {
										stringStart = i;
									}
								}
							}

							if( stringStart == -1 ) {
								_stream.Drain( bufferedChars * sizeof( char ) );
								return bufferedChars != 0;
							}

							var dataStart = ( char* ) _stream.Peek( sizeof( char ) );

							builder.Append( new CUtf16StringSpan( dataStart + stringStart, ( uint )( bufferedChars - stringStart ) ) );
							_stream.Drain( bufferedChars * sizeof( char ) );

							stringStart = -1;

							if( _stream.Peek( sizeof( char ) ) == null ) {
								return true;
							}
						}
					} break;

				case Unicode.ByteOrderMark.Utf16BigEndian: {
						bool hasCR = false; // \r

						while( true ) {
							var bufferedChars = _stream.Count / sizeof( char );

							for( var i = 0; i < bufferedChars; ++i ) {
								var data = ( char_bigendian* ) _stream.Peek( ( i + 1 ) * sizeof( char ) );

								var isLF = data[i] == '\n';
								var isCR = data[i] == CarriageReturn;

								if( isLF | isCR ) {
									if( isLF && hasCR ) {
										hasCR = false;
										continue;
									}

									hasCR = isCR;

									if( stringStart == -1 ) {
										_stream.Drain( ( i + 1 ) * sizeof( char ) );
										if( isCR ) SkipLF2BE();
										return true;
									}

									var stringStartPtr = ( char* )( data + stringStart );
									System.Runtime.Memory.PerformBswap2( stringStartPtr, ( uint )( i - stringStart ) );

									if( builder.Length == 0 && fastString != null ) {
										*fastString = string.FromUtf16( stringStartPtr, ( uint )( i - stringStart ) );
										_stream.Drain( ( i + 1 ) * sizeof( char ) );
										if( isCR ) SkipLF2BE();
										return true;
									}
									else {
										builder.Append( new CUtf16StringSpan( stringStartPtr, ( uint )( i - stringStart ) ) );
										_stream.Drain( ( i + 1 ) * sizeof( char ) );
										if( isCR ) SkipLF2BE();
										return true;
									}
								}
								else {
									hasCR = false;

									if( stringStart == -1 ) {
										stringStart = i;
									}
								}
							}

							if( stringStart == -1 ) {
								_stream.Drain( bufferedChars * sizeof( char ) );
								return bufferedChars != 0;
							}

							var dataStart = ( char* ) _stream.Peek( sizeof( char ) );
							System.Runtime.Memory.PerformBswap2( dataStart + stringStart, ( uint )( bufferedChars - stringStart ) );
							builder.Append( new CUtf16StringSpan( dataStart + stringStart, ( uint )( bufferedChars - stringStart ) ) );
							_stream.Drain( bufferedChars * sizeof( char ) );

							stringStart = -1;

							if( _stream.Peek( sizeof( char ) ) == null ) {
								return true;
							}
						}
					} break;

				case Unicode.ByteOrderMark.Utf32LittleEndian: {
						bool hasCR = false; // \r

						while( true ) {
							var bufferedChars = _stream.Count / sizeof( uint );

							for( var i = 0; i < bufferedChars; ++i ) {
								var data = ( uint_littleendian* ) _stream.Peek( ( i + 1 ) * sizeof( uint ) );

								var isLF = data[i] == '\n';
								var isCR = data[i] == CarriageReturn;

								if( isLF | isCR ) {
									if( isLF && hasCR ) {
										hasCR = false;
										continue;
									}

									hasCR = isCR;

									if( stringStart == -1 ) {
										_stream.Drain( ( i + 1 ) * sizeof( uint ) );
										if( isCR ) SkipLF4LE();
										return true;
									}

									if( builder.Length == 0 && fastString != null ) {
										*fastString = string.FromUtf32( data + stringStart, ( uint )( i - stringStart ) );
										_stream.Drain( ( i + 1 ) * sizeof( uint ) );
										if( isCR ) SkipLF4LE();
										return true;
									}
									else {
										builder.Append( new CUtf32StringSpan( data + stringStart, ( uint )( i - stringStart ) ) );
										_stream.Drain( ( i + 1 ) * sizeof( uint ) );
										if( isCR ) SkipLF4LE();
										return true;
									}
								}
								else {
									hasCR = false;

									if( stringStart == -1 ) {
										stringStart = i;
									}
								}
							}

							if( stringStart == -1 ) {
								_stream.Drain( bufferedChars * sizeof( uint ) );
								return bufferedChars != 0;
							}

							var dataStart = ( uint* ) _stream.Peek( sizeof( uint ) );

							builder.Append( new CUtf32StringSpan( dataStart + stringStart, ( uint )( bufferedChars - stringStart ) ) );
							_stream.Drain( bufferedChars * sizeof( uint ) );

							stringStart = -1;

							if( _stream.Peek( sizeof( uint ) ) == null ) {
								return true;
							}
						}
					} break;

				case Unicode.ByteOrderMark.Utf32BigEndian: {
						bool hasCR = false; // \r

						while( true ) {
							var bufferedChars = _stream.Count / sizeof( uint );

							for( var i = 0; i < bufferedChars; ++i ) {
								var data = ( uint_bigendian* ) _stream.Peek( ( i + 1 ) * sizeof( uint ) );

								var isLF = data[i] == '\n';
								var isCR = data[i] == CarriageReturn;

								if( isLF | isCR ) {
									if( isLF && hasCR ) {
										hasCR = false;
										continue;
									}

									hasCR = isCR;

									if( stringStart == -1 ) {
										_stream.Drain( ( i + 1 ) * sizeof( uint ) );
										if( isCR ) SkipLF4BE();
										return true;
									}

									var stringStartPtr = ( uint* )( data + stringStart );
									System.Runtime.Memory.PerformBswap4( stringStartPtr, ( uint )( i - stringStart ) );

									if( builder.Length == 0 && fastString != null ) {
										*fastString = string.FromUtf32( stringStartPtr, ( uint )( i - stringStart ) );
										_stream.Drain( ( i + 1 ) * sizeof( char ) );
										if( isCR ) SkipLF4BE();
										return true;
									}
									else {
										builder.Append( new CUtf32StringSpan( stringStartPtr, ( uint )( i - stringStart ) ) );
										_stream.Drain( ( i + 1 ) * sizeof( uint ) );
										if( isCR ) SkipLF4BE();
										return true;
									}
								}
								else {
									hasCR = false;

									if( stringStart == -1 ) {
										stringStart = i;
									}
								}
							}

							if( stringStart == -1 ) {
								_stream.Drain( bufferedChars * sizeof( uint ) );
								return bufferedChars != 0;
							}

							var dataStart = ( uint* ) _stream.Peek( sizeof( uint ) );
							System.Runtime.Memory.PerformBswap4( dataStart + stringStart, ( uint )( bufferedChars - stringStart ) );
							builder.Append( new CUtf32StringSpan( dataStart + stringStart, ( uint )( bufferedChars - stringStart ) ) );
							_stream.Drain( bufferedChars * sizeof( uint ) );

							stringStart = -1;

							if( _stream.Peek( sizeof( uint ) ) == null ) {
								return true;
							}
						}
					} break;

				default:
					Assert.NotImplemented();
					break;
			}

			return false;
		}
	}
}