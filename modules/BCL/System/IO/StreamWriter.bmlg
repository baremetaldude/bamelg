//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;
using System.IO;
using System.Runtime;
using System.Text;

namespace System.IO {
	public class StreamWriter : ITextWriter {
		public enum ByteOrderMarkHeader {
			Auto,
			Force,
			Skip,
		}

		private IStream _stream;
		public IStream BaseStream { get { return _stream; } }

		public string NewLine { get { return _buffer.NewLine; } set { _buffer.NewLine = value; } }

		public StreamWriter( IStream stream, TextEncodingKind textEncodingKind = TextEncodingKind.Utf8, ByteOrderMarkHeader headerStyle = ByteOrderMarkHeader.Auto ) {
			_stream = stream;

			TextEncodingKind = textEncodingKind;

			var writeByteOrderMark = false;
			switch( headerStyle ) {
				case ByteOrderMarkHeader.Auto: {
						writeByteOrderMark = ( stream.Capabilities & StreamCapabilities.Seek ) == 0 || stream.Seek( 0, SeekOrigin.Current ) == 0;
					} break;

				case ByteOrderMarkHeader.Force: writeByteOrderMark = true; break;
				case ByteOrderMarkHeader.Skip: break;
			}

			if( writeByteOrderMark ) {
				Unicode.ByteOrderMark bom;

				switch( TextEncodingKind ) {
					case TextEncodingKind.Utf8: bom = Unicode.ByteOrderMark.Utf8; break;
					case TextEncodingKind.Utf16: bom = typeof( int ) == typeof( int_littleendian ) ? Unicode.ByteOrderMark.Utf16LittleEndian : Unicode.ByteOrderMark.Utf16BigEndian; break;
					case TextEncodingKind.Utf32: bom = typeof( int ) == typeof( int_littleendian ) ? Unicode.ByteOrderMark.Utf32LittleEndian : Unicode.ByteOrderMark.Utf32BigEndian; break;
				}

				_stream.Write( Unicode.GetByteOrderMark( bom ) );
			}
		}

		public StreamWriter( IStream stream, CodePageID codePageID ) {
			_stream = stream;

			CodePageID = codePageID;
			TextEncodingKind = TextEncodingKind.CodePage;
		}

		public readonly CodePageID CodePageID;
		public readonly TextEncodingKind TextEncodingKind;

		~StreamWriter() { Cleanup(); }
		public override void Dispose() { Cleanup(); base.Dispose(); }

		private void Cleanup() {
			if( _stream != null ) {
				Flush();
				_stream = null;

				StringBuilder.CachedBuilders.Push( _buffer ); _buffer = null;
			}
		}

		/// @{ buffering

		protected StringBuilder _buffer = StringBuilder.CachedBuilders.Pop(); // dont capture this StringBuilder instance since it cached ad reused
		public uint FlushLimit = 8192;
		public bool UseAutoFlush = true;

		public void TryFlush() { TryFlush( FlushKind.Write, FlushLimit ); }
		private void AutoFlush() { if( UseAutoFlush ) TryFlush( FlushKind.Write, FlushLimit ); }
		public bool IsReadyToFlush { get { return ( uint ) _buffer.Length >= FlushLimit; } }

		private void TryFlush( FlushKind flushKind, uint limit ) {
			Debug.Assert( !IsDisposed );

			switch( flushKind ) {
				case FlushKind.Write:
				case FlushKind.SynchronizeWrite:
					if( ( uint ) _buffer.Length >= limit ) {
						WriteUtf16( _buffer.GetChars(), ( uint ) _buffer.Length );
						_buffer.Length = 0;
					}

					if( flushKind == FlushKind.SynchronizeWrite )
						_stream.Flush( flushKind );

					break;
			}
		}

		public void Flush( FlushKind flushKind = FlushKind.SynchronizeWrite ) {
			TryFlush( flushKind, 0 );
		}

		/// @}

		public void Write( bool value ) { _buffer.Append( value ); AutoFlush(); }
		public void Write( char value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( sbyte value ) { _buffer.Append( value ); AutoFlush(); }
		public void Write( byte value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( short value ) { _buffer.Append( value ); AutoFlush(); }
		public void Write( ushort value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( int value ) { _buffer.Append( value ); AutoFlush(); }
		public void Write( uint value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( long value ) { _buffer.Append( value ); AutoFlush(); }
		public void Write( ulong value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( float value ) { _buffer.Append( value ); AutoFlush(); }
		public void Write( double value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( TypedReference value ) { _buffer.Append( value ); AutoFlush(); }
		public void Write( TypedReference value, string customFormat ) { _buffer.Append( value, customFormat ); AutoFlush(); }

		public void Write( SbcsString value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( CString value ) { _buffer.Append( value ); AutoFlush(); }
		public void WriteLine( CString value ) { _buffer.Append( value ); _buffer.AppendLine(); AutoFlush(); }

		public void Write( Utf8String value ) { _buffer.Append( value ); AutoFlush(); }

		public void Write( CUtf8String value ) { _buffer.Append( value ); AutoFlush(); }
		public void WriteLine( CUtf8String value ) { _buffer.Append( value ); _buffer.AppendLine(); AutoFlush(); }

		public void Write( Utf16String value ) {
			if( value.Length > FlushLimit ) {
				Flush();
				WriteUtf16( value.GetChars(), ( uint ) value.Length );
			}
			else {
				_buffer.Append( value );
				AutoFlush();
			}
		}

		public void Write( CUtf16String value ) { _buffer.Append( value ); AutoFlush(); }
		public void WriteLine( CUtf16String value ) { _buffer.Append( value ); _buffer.AppendLine(); AutoFlush(); }

		public void Write( Utf32String value ) {
			_buffer.Append( value );
			AutoFlush();
		}

		public void Write( CUtf32String value ) { _buffer.Append( value ); AutoFlush(); }
		public void WriteLine( CUtf32String value ) { _buffer.Append( value ); _buffer.AppendLine(); AutoFlush(); }

		public void Write( StringBuilder value ) {
			if( ( uint ) value.Length > FlushLimit ) {
				Flush();
				WriteUtf16( value.GetChars(), ( uint ) value.Length );
			}
			else {
				_buffer.Append( value );
				AutoFlush();
			}
		}

		public void Write( [VerifyFormatString] string str, vararg TypedReference parameters ) {
			_buffer.AppendFormat( str, vararg( parameters, parameters.Length ) );
			AutoFlush();
		}

		public void WriteConcat( vararg TypedReference parameters ) {
			_buffer.Concat( vararg( parameters, parameters.Length ) );
			AutoFlush();
		}

		public void WriteLine() { _buffer.AppendLine(); AutoFlush(); }

		public void WriteLine( bool value ) { Write( value ); WriteLine(); }
		public void WriteLine( char value ) { Write( value ); WriteLine(); }

		public void WriteLine( sbyte value ) { Write( value ); WriteLine(); }
		public void WriteLine( byte value ) { Write( value ); WriteLine(); }

		public void WriteLine( short value ) { Write( value ); WriteLine(); }
		public void WriteLine( ushort value ) { Write( value ); WriteLine(); }

		public void WriteLine( int value ) { Write( value ); WriteLine(); }
		public void WriteLine( uint value ) { Write( value ); WriteLine(); }

		public void WriteLine( long value ) { Write( value ); WriteLine(); }
		public void WriteLine( ulong value ) { Write( value ); WriteLine(); }

		public void WriteLine( float value ) { Write( value ); WriteLine(); }
		public void WriteLine( double value ) { Write( value ); WriteLine(); }

		public void WriteLine( SbcsString value ) { Write( value ); WriteLine(); }
		public void WriteLine( Utf8String value ) { Write( value ); WriteLine(); }
		public void WriteLine( Utf16String value ) { Write( value ); WriteLine(); }
		public void WriteLine( Utf32String value ) { Write( value ); WriteLine(); }
		public void WriteLine( StringBuilder value ) { Write( value ); WriteLine(); }

		public void WriteLine( TypedReference value ) { Write( value ); WriteLine(); }

		public void WriteLine( [VerifyFormatString] string str, vararg TypedReference parameters ) {
			_buffer.AppendFormat( str, vararg( parameters, parameters.Length ) );
			_buffer.AppendLine();
			AutoFlush();
		}

		public void WriteConcatLine( vararg TypedReference parameters ) {
			_buffer.Concat( vararg( parameters, parameters.Length ) );
			_buffer.AppendLine();
			AutoFlush();
		}

		private void WriteUtf16( char* chars, uint charCount ) {
			WriteEncodedBytes( _stream, chars, charCount, TextEncodingKind, CodePageID );
		}

		public static void WriteEncodedBytes( IStream stream, char* chars, uint charCount, TextEncodingKind textEncodingKind, CodePageID codePageID = Environment.DefaultCodePage ) {
			if( chars == null || charCount == 0 ) return;

			switch( textEncodingKind ) {
				case TextEncodingKind.CodePage:
					using( var page = Memory.CachedPages.PopScoped() ) {
						var buffer = ( byte* ) page.Value;
						var bufferLength = ( uint ) Memory.DefaultPageSize;

						foreach( var segment in Unicode.StreamConvertUtf16CharactersToSbcs( codePageID, buffer, bufferLength, chars, charCount ) )
							stream.Write( ( MemorySegment ) segment );
					}
					break;

				case TextEncodingKind.Utf8:
					using( var page = Memory.CachedPages.PopScoped() ) {
						var buffer = ( byte* ) page.Value;
						var bufferLength = ( uint ) Memory.DefaultPageSize;

						foreach( var segment in Unicode.StreamConvertUtf16CharactersToUtf8( buffer, bufferLength, chars, charCount ) )
							stream.Write( ( MemorySegment ) segment );
					}
					break;

				case TextEncodingKind.Utf16:
					stream.Write( chars, ( int ) charCount * sizeof( char ) );
					break;

				case TextEncodingKind.Utf32:
					using( var page = Memory.CachedPages.PopScoped() ) {
						var buffer = ( uint* ) page.Value;
						var bufferLength = ( uint ) Memory.DefaultPageSize / sizeof( uint );

						foreach( var segment in Unicode.StreamConvertUtf16CharactersToUtf32( buffer, bufferLength, chars, charCount ) )
							stream.Write( ( MemorySegment ) segment );
					}
					break;
			}
		}
	}
}