//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.IO;

namespace System.IO {
	/// Dumps readen and written data in separate files
	public class FileDumpStream : IStream {
		public StreamCapabilities Capabilities { get { return StreamCapabilities.Read | StreamCapabilities.Write | StreamCapabilities.VectoredIO; } }

		public StreamingBufferInfo* BufferInfo { get { return null; } }

		public IStream BaseStream;
		public string FilePrefix;

		public FileDumpStream( IStream baseStream ) {
			BaseStream = baseStream;

			FilePrefix = "/tmp/fds";
		}

		public override void Dispose() { BaseStream = null; base.Dispose(); }

		public int Read( void* buffer, int count ) {
			var readen = BaseStream.Read( buffer, count );

			if( readen > 0 ) {
				var now = DateTime.UnbiasedNow;
				var file = Utf8String.Format( "{0} {1:HH-mm-ss.fff} read.bin", FilePrefix, now );
				System.IO.File.WriteAllBytes( file, new MemorySegment( buffer, ( uintptr ) readen ) );
				// Console.WriteLine( "dump to file: {0}", DateTime.UnbiasedNow - now );
			}

			return readen;
		}

		public void Write( void* buffer, int count ) {
			if( count > 0 ) {
				var now = DateTime.UnbiasedNow;
				var file = Utf8String.Format( "{0} {1:HH-mm-ss.fff} write.bin", FilePrefix, now );
				System.IO.File.WriteAllBytes( file, new MemorySegment( buffer, ( uintptr ) count ) );
				// Console.WriteLine( "dump to file: {0}", DateTime.UnbiasedNow - now );
			}

			BaseStream.Write( buffer, count );
		}

		public int Read( vararg MemorySegment segments ) {
			var result = 0;
			foreach( var segment in segments ) {
				var readen = Read( segment.Start, ( int ) segment.Count );
				if( readen <= 0 ) break;

				result += readen;
			}
			return result;
		}

		public void Write( vararg MemorySegment segments ) {
			foreach( var segment in segments )
				Write( segment.Start, ( int ) segment.Count );
		}

		public void Flush( FlushKind flushKind = FlushKind.SynchronizeWrite ) {
			BaseStream.Flush( flushKind );
		}

		TimeSpan IStream.Timeout { get { return TimeSpan.Zero; } set { } }

		long IStream.Position { get { return 0; } }
		long IStream.Seek( long offset, SeekOrigin origin ) { return 0; }
	}
}