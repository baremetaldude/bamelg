//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System {
	[Flags]
	public enum AttributeTargets {
		Invalid,            

		// {@ types
		Enum,
		Class,
		Struct,
		Functor,
		Delegate,
		Interface,          
		// @}

		// @{ members
		Event,
		Field,
		Method,
		Return,
		Indexer,
		Property,
		Operator,
		Parameter,
		Destructor,
		Constructor,
		IndexedProperty,
		PostblitConstructor,
		// @}

		// @{ limited set of statements
		ForStatement,
		IfElseStatement,
		SwitchStatement,
		ForeachStatement,
		VariableDeclaration,
		// @}

		Assembly,           

		// @{
		AllowMultiple,      
		// @}
	}

	[AttributeUsage( Targets = AttributeTargets.Struct )]
	public struct Attribute {
		public static bool operator ==( Attribute& left, Attribute& right ) { return &left == &right; }
		public static bool operator !=( Attribute& left, Attribute& right ) { return &left != &right; }

		public readonly Reflection.UserType& Type;
	}

	[AttributeUsage( Targets = AttributeTargets.Struct )]
	public struct AttributeUsageAttribute : Attribute {
		[RequiredField]
		public AttributeTargets Targets;
	}

	[AttributeUsage( Targets = AttributeTargets.Field )]
	public struct RequiredFieldAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Field | AttributeTargets.Parameter )]
	public struct StrictFieldAttribute : Attribute {
	}

	/// Usually compiler automatically makes decision what kind of type iterator should use ( 'struct' or 'class' ).
	/// This behaviour can be overrided by 'ForceClassIteratorAttribute' attribute.
	[AttributeUsage( Targets = AttributeTargets.Method | AttributeTargets.Property )]
	public struct ForceClassIteratorAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Enum )]
	public struct FlagsAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Method | AttributeTargets.Constructor | AttributeTargets.Destructor | AttributeTargets.PostblitConstructor )]
	public struct NoInlineAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Method | AttributeTargets.Constructor | AttributeTargets.Destructor | AttributeTargets.PostblitConstructor )]
	public struct InlineAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Method | AttributeTargets.Constructor | AttributeTargets.Destructor | AttributeTargets.PostblitConstructor )]
	public struct ForceInlineAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Field )]
	public struct FiberStaticAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Field )]
	public struct ThreadStaticAttribute : Attribute {
	}

	// force initialize struct instances (zerofill)
	// Default behaviour - zerofill structs with destructors, delegates, classes, dynamic arrays, pointers and fixed arrays of above types
	// Usage:
	//		[ForceInitialize]
	//		var ptr = stackalloc int[32];
	[AttributeUsage( Targets = AttributeTargets.Struct | AttributeTargets.VariableDeclaration )]
	public struct ForceInitializeAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Struct | AttributeTargets.VariableDeclaration )]
	public struct UninitializedAttribute : Attribute {
	}

	/// Generate errors if you will use obsolete types/members. Used to retain binary compatibility.
	[AttributeUsage( Targets = AttributeTargets.Struct | AttributeTargets.Class | AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Functor | AttributeTargets.Method | AttributeTargets.Constructor | AttributeTargets.Destructor | AttributeTargets.PostblitConstructor | AttributeTargets.Field | AttributeTargets.Property )]
	public struct ObsoleteAttribute : Attribute {
		public string Message;
	}

	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct ConditionalAttribute : Attribute {
		[RequiredField]
		public string ConditionString;
	}

	// This value used to override default alignment
	// When it applied to type it also affects to alignment of fixed arrays and dynamic arrays
	[AttributeUsage( Targets = AttributeTargets.Struct | AttributeTargets.Class | AttributeTargets.Field )]
	public struct AlignmentAttribute : Attribute {
		[RequiredField]
		public int Boundary;
	}

	// Используется для указания точного расположения поля внутри типа
	[AttributeUsage( Targets = AttributeTargets.Field )]
	public struct ExplicitOffsetAttribute : Attribute {
		[RequiredField]
		public int Offset;
	}

	// выравнивание размеров типов
	[AttributeUsage( Targets = AttributeTargets.Class | AttributeTargets.Struct )]
	public struct PadAttribute : Attribute {
		[RequiredField]
		public int Boundary;
	}

	// точное указание размера типа
	[AttributeUsage( Targets = AttributeTargets.Class | AttributeTargets.Struct )]
	public struct ExplicitSizeAttribute : Attribute {
		[RequiredField]
		public int Size;
	}

	/// Этим атрибутом помечаются статические методы, которые будут использоваться при юнит-тестировании.
	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct UnitTestAttribute : Attribute {
	}

	/// Этим атрибутом помечаются статические методы, которые будут использоваться при запуске приложения, после юнит-тестов.
	[AttributeUsage( Targets = AttributeTargets.Method )]
	public struct EntryPointAttribute : Attribute {
	}

	/// Используется для раскрутки циклов
	[AttributeUsage( Targets = AttributeTargets.ForStatement )]
	public struct UnrollAttribute : Attribute {
	}

	/// Создает несколько вложенных свичей по всем буквам.
	[AttributeUsage( Targets = AttributeTargets.SwitchStatement )]
	public struct PerCharacterSwitchAttribute : Attribute {
	}

	/// Switch statement marked with this attribute must handle all possible enum values.
	[AttributeUsage( Targets = AttributeTargets.SwitchStatement )]
	public struct CheckAllEnumValuesAttribute : Attribute {
	}

	// MoveNext/Current доступен у самого класса, а не у возвращенного значения от GetEnumerator()
	[AttributeUsage( Targets = AttributeTargets.Class | AttributeTargets.Struct )]
	public struct EnumeratorAttribute : Attribute {
	}

	// Указывает, что полная специализация расширяет базовые возможности шаблона, а не заменяет их
	[AttributeUsage( Targets = AttributeTargets.Class | AttributeTargets.Struct )]
	public struct AppendingSpecializationAttribute : Attribute {
	}

	// Типы, помеченные этим атрибутом, при должном размере будут передаваться в регистрах, но они не смогут иметь полей.
	[AttributeUsage( Targets = AttributeTargets.Struct )]
	public struct PrimitiveTypeAttribute : Attribute {
		[RequiredField]
		public int Size;
	}

	[Flags]
	public enum ReflectionMetadata : ushort {
		None,
		PublicFields,                                  NonPublicFields,            Fields =                                  PublicFields | NonPublicFields,
		PublicMethods,                                 NonPublicMethods,           Methods =                               PublicMethods | NonPublicMethods,
		PublicIndexers,                                NonPublicIndexers,          Indexers =                            PublicIndexers | NonPublicIndexers,
		PublicConstants,                               NonPublicConstants,         Constants =                         PublicConstants | NonPublicConstants,
		PublicEvents,                                  NonPublicEvents,            Events =                                  PublicEvents | NonPublicEvents,
		PublicProperties,                              NonPublicProperties,        Properties =                      PublicProperties | NonPublicProperties,
		PublicIndexedProperties,                       NonPublicIndexedProperties, IndexedProperties = PublicIndexedProperties | NonPublicIndexedProperties,

		All = ( NonPublicIndexedProperties << 1 ) - 1,
	}

	// Упраляет генерацией метаданных. По-умолчанию поля 'Properties', 'Fields', 'Methods', 'Constants'
	[AttributeUsage( Targets = AttributeTargets.Struct | AttributeTargets.Class )]
	public struct ReflectionMetadataAttribute : Attribute {
		public ReflectionMetadata Mask;
	}

	[AttributeUsage( Targets = AttributeTargets.Field | AttributeTargets.Property | AttributeTargets.Method | AttributeTargets.IndexedProperty | AttributeTargets.Indexer | AttributeTargets.Event | AttributeTargets.Constructor | AttributeTargets.Struct | AttributeTargets.Class )]
	public struct ReflectionMetadataIncludeAttribute : Attribute {
	}

	// Used for flexible integration with external code.
	// Отсутствие явного вызова деструктора, например, облегчает интеграцию кода с GObject system.
	// Wrong usage of this attribute will lead to memory leaks.
	[AttributeUsage( Targets = AttributeTargets.Struct )]
	public struct BreakConstructorDestructorChainingAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Field )]
	public struct ConfigurableAttribute : Attribute {
		public string Section, Description;

		// used for ansi/utf8/utf16/utf32 strings
		public int ReservedSize;
	}

	// 'volatile' is keyword retained for compatibility with C/C++/C# languages but modern code must use 'VolatileAttribute' instead of 'volatile' keyword.
	[AttributeUsage( Targets = AttributeTargets.Field )]
	public struct VolatileAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Parameter )]
	public struct EvaluateConstantAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Parameter )]
	public struct VerifyFormatStringAttribute : Attribute {
	}

	// Fields are laid out automatically by default in optimal manner.
	// Manual layout triggered by 'ExplicitSize' or by 'StructLayoutSequential' attributes
	[AttributeUsage( Targets = AttributeTargets.Struct )]
	public struct StructLayoutSequentialAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.IfElseStatement )]
	public struct DisableWarningUnreachableAttribute : Attribute {
	}

	[AttributeUsage( Targets = AttributeTargets.Struct )]
	public struct ThrowableAttribute : Attribute {
	}

	// Simplify error code checking by marking success error code values in enum
	[AttributeUsage( Targets = AttributeTargets.Field )]
	public struct ErrorCodeSuccessAttribute : Attribute {
	}
}