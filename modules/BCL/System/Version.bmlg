//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System {
	public partial struct Version {
		public int Major, Minor, Build, Revision;

		public Version( int major, int minor ) { Major = major; Minor = minor; Build = -1; Revision = -1; }
		public Version( int major, int minor, int build ) { Major = major; Minor = minor; Build = build; Revision = -1; }
		public Version( int major, int minor, int build, int revision ) { Major = major; Minor = minor; Build = build; Revision = revision; }

		private static bool TryParse<TElement>( TElement* parsePosition, uint remaining, thistype& parsedResult ) {
			parsedResult = default( thistype );

			var values = new uint[4] default( uint.MaxValue );

			if( !uint.TryFetch( parsePosition, remaining, values[0] ) || remaining == 0 || values[0] > int.MaxValue ) return false;
			if( *parsePosition++ != '.' || --remaining == 0 ) return false;

			if( !uint.TryFetch( parsePosition, remaining, values[1] ) || values[1] > int.MaxValue ) return false;
			if( remaining == 0 ) goto parsed;
			if( *parsePosition++ != '.' || --remaining == 0 ) return false;

			if( !uint.TryFetch( parsePosition, remaining, values[2] ) || values[2] > int.MaxValue ) return false;
			if( remaining == 0 ) goto parsed;
			if( *parsePosition++ != '.' || --remaining == 0 ) return false;

			if( !uint.TryFetch( parsePosition, remaining, values[3] ) || values[3] > int.MaxValue ) return false;
			if( remaining != 0 ) return false;

		parsed:
			parsedResult.Major = ( int ) values[0];
			parsedResult.Minor = ( int ) values[1];
			parsedResult.Build = ( int ) values[2];
			parsedResult.Revision = ( int ) values[3];

			return true;
		}

		public static thistype Parse( CString input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }
		public static thistype Parse( CUtf8String input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }
		public static thistype Parse( CUtf16String input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }
		public static thistype Parse( CUtf32String input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }

		public static thistype Parse( SbcsString input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }
		public static thistype Parse( Utf8String input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }
		public static thistype Parse( Utf16String input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }
		public static thistype Parse( Utf32String input ) { thistype result; Assert.IsTrue( TryParse( input, result ) ); return result; }

		public static bool TryParse( CString input, thistype& value, uint length = 0 ) { return TryParse<byte>( input.GetChars(), length == 0 ? input.Length : length, value ); }
		public static bool TryParse( CUtf8String input, thistype& value, uint length = 0 ) { return TryParse<byte>( input.GetChars(), length == 0 ? input.Length : length, value ); }
		public static bool TryParse( CUtf16String input, thistype& value, uint length = 0 ) { return TryParse<char>( input.GetChars(), length == 0 ? input.Length : length, value ); }
		public static bool TryParse( CUtf32String input, thistype& value, uint length = 0 ) { return TryParse<uint>( input.GetChars(), length == 0 ? input.Length : length, value ); }

		public static bool TryParse( SbcsString input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.Length, value ); }
		public static bool TryParse( Utf8String input, thistype& value ) { return TryParse<byte>( input.GetChars(), input.Length, value ); }
		public static bool TryParse( Utf16String input, thistype& value ) { return TryParse<char>( input.GetChars(), input.Length, value ); }
		public static bool TryParse( Utf32String input, thistype& value ) { return TryParse<uint>( input.GetChars(), input.Length, value ); }
	}
}