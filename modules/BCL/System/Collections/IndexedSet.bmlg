//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Collections {
	public class IndexedSet<TKey, TValue> {
		private uint _version;

		private uint[] _buckets;
		private Element[] _items;

		private readonly bool _allowDuplicates;

		private uint _count;
		private uint _freeCount, _freeFirst;

		private readonly Functors.Func<TValue, TKey> _keySelector;

		public IndexedSet( Functors.Func<TValue, TKey> keySelector )
			: this( true, keySelector ) {
			Initialize( 3 );
		}

		public IndexedSet( bool allowKeyDuplicates, Functors.Func<TValue, TKey> keySelector0 ) {
			_allowDuplicates = allowKeyDuplicates;
			_keySelector = keySelector0;

			Initialize( 3 );
		}

		public IndexedSet( IndexedSet<TKey, TValue> value ) {
			_allowDuplicates = value._allowDuplicates;
			_buckets = new[value._buckets.Length] uint;
			_items = new[value._items.Length] Element;
			_count = value._count;
			_freeCount = value._freeCount;
			_freeFirst = value._freeFirst;
			_keySelector = value._keySelector;

			CommonCollectionOperations.Copy<Element>( &_items[0], &value._items[0], _items.Length );
			CommonCollectionOperations.Copy<uint>( &_buckets[0], &value._buckets[0], _buckets.Length );
		}

		public void Add( TValue value ) {
			Insert( value );
		}

		public void AddRange( TValue[] items ) { foreach( var item in items ) Add( item ); }
		public void AddRange( List<TValue> items ) { foreach( var item in items ) Add( item ); }

		public void Clear() {
			if( _count <= 0 ) return;

			for( var i = 0U; i < _buckets.Length; ++i )
				_buckets[i] = uint.MaxValue;

			CommonCollectionOperations.Clear<Element>( &_items[0], _count );

			_freeFirst = uint.MaxValue;
			_count = 0;
			_freeCount = 0;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		public bool ContainsKey( TKey key ) { return FindKey( key ) != uint.MaxValue; }
		public bool ContainsValue( TValue value ) { return FindValue( value ) != uint.MaxValue; }

		private uint FindValue( TValue value ) {
			var key = _keySelector( value );
			var hash = ( int ) key.GetHashCode() & 0x7FFFFFFF;

			for( var i = _buckets[hash % _buckets.Length]; i != uint.MaxValue; i = _items[i]._next )
				if( _items[i]._hash == hash && _items[i]._value == value )
					return i;

			return uint.MaxValue;
		}

		private uint FindValue( TValue value, uint& previous ) {
			previous = uint.MaxValue;
			var key = _keySelector( value );
			var hash = ( int ) key.GetHashCode() & 0x7FFFFFFF;

			for( var i = _buckets[hash % _buckets.Length]; i != uint.MaxValue; previous = i, i = _items[i]._next )
				if( _items[i]._hash == hash && _items[i]._value == value )
					return i;

			return uint.MaxValue;
		}

		private uint FindKey( TKey key ) {
			var hash = ( int ) key.GetHashCode() & 0x7FFFFFFF;

			for( var i = _buckets[hash % _buckets.Length]; i != uint.MaxValue; i = _items[i]._next )
				if( _items[i]._hash == hash && _keySelector( _items[i]._value ) == key )
					return i;

			return uint.MaxValue;
		}

		public LookupEnumerator Retrieve( TKey key ) { return new LookupEnumerator( this, key ); }

		private void Initialize( uint capacity ) {
			var prime = PrimeNumber.GetClosestPrime( capacity );

			_buckets = new[prime] uint;
			for( var i = 0U; i < _buckets.Length; ++i )
				_buckets[i] = uint.MaxValue;

			_items = new[prime] Element;
			_freeFirst = uint.MaxValue;
		}

		private void Insert( TValue value ) {
			uint freeIndex;

			var key = _keySelector( value );

			var hash = ( int ) key.GetHashCode() & 0x7FFFFFFF;
			var index = hash % _buckets.Length;

			if( !_allowDuplicates && ContainsKey( key ) ) {
				Assert.Fail( "Duplicate key" );
				return;
			}

			if( _freeCount > 0 ) {
				freeIndex = _freeFirst;
				_freeFirst = _items[freeIndex]._next;
				--_freeCount;
			}
			else {
				if( _count == _items.Length ) {
					Resize();
					index = hash % _buckets.Length;
				}

				freeIndex = _count;
				++_count;
			}

			_items[freeIndex]._hash = hash;
			_items[freeIndex]._next = _buckets[index];
			_items[freeIndex]._value = value;
			_buckets[index] = freeIndex;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		public bool Remove( TValue value ) {
			var key = _keySelector( value );

			uint previous;
			var i = FindValue( value, previous );

			if( i != uint.MaxValue ) {
				if( previous == uint.MaxValue ) _buckets[( key.GetHashCode() & 0x7FFFFFFF ) % _buckets.Length] = _items[i]._next;
				else _items[previous]._next = _items[i]._next;

				_items[i]._hash = -1;
				_items[i]._next = _freeFirst;
				_items[i]._value = default( TValue );

				_freeFirst = i;
				++_freeCount;
				CommonCollectionOperations.UpdateVersion( &_version );

				return true;
			}

			return false;
		}

		private void Resize() {
			var prime = PrimeNumber.GetClosestPrime( _count * 2 );

			var buckets0 = new[prime] uint default( uint.MaxValue );

			var items = new[prime] Element;
			CommonCollectionOperations.Copy<Element>( &items[0], &_items[0], _count );

			for( var j = 0U; j < _count; ++j ) {
				var index = items[j]._hash % prime;
				items[j]._next = buckets0[index];
				buckets0[index] = j;
			}

			_buckets = buckets0;
			_items = items;
		}

		public ReversedEnumerator Reversed { get { return new ReversedEnumerator( this ); } }

		public Enumerator GetEnumerator() { return new Enumerator( this ); }

		public uint Count { get { return _count - _freeCount; } }

		public TValue this[TKey key] {
			get {
				var index = FindKey( key );

				if( index != uint.MaxValue )
					return _items[index]._value;

				return default( TValue );
			}
		}

		public struct Element {
			public TValue _value;
			public int _hash;
			public uint _next;
		}

		[EnumeratorAttribute]
		public struct Enumerator {
			private readonly IndexedSet<TKey, TValue> _map;
			private readonly uint _version;
			private uint _index;
			private TValue _current;

			internal Enumerator( IndexedSet<TKey, TValue> map ) {
				_current = default( TValue );
				_version = map._version;
				_map = map;
				_index = 0;
			}

			public bool MoveNext() {
				if( _version != _map._version ) {
					Assert.Fail( "Collection was modified since last iteration." );
					return false;
				}

				while( _index < _map._count ) {
					if( _map._items[_index]._hash >= 0 ) {
						_current = _map._items[_index]._value;
						++_index;
						return true;
					}
					++_index;
				}

				_index = _map._count + 1;
				_current = default( TValue );
				return false;
			}

			public TValue Current { get { return _current; } }

			void Reset() {
				_index = 0;
				_current = default( TValue );
			}
		}

		[EnumeratorAttribute]
		public struct ReversedEnumerator {
			private readonly declaringtype _map;
			private readonly uint _version;
			private uint _index;
			private TValue _current;

			internal ReversedEnumerator( declaringtype map ) {
				_current = default( TValue );
				_version = map._version;
				_map = map;
				_index = _map._count - 1;
			}

			public bool MoveNext() {
				CommonCollectionOperations.VersionCheck( _version == _map._version );

				while( _index != uint.MaxValue ) {
					if( _map._items[_index]._hash >= 0 ) {
						_current = _map._items[_index]._value;
						--_index;
						return true;
					}
					--_index;
				}

				_index = uint.MaxValue;
				_current = default( TValue );
				return false;
			}

			public TValue Current { get { return _current; } }

			public ReversedEnumerator GetEnumerator() { return this; }
		}

		[EnumeratorAttribute]
		public struct LookupEnumerator {
			private readonly declaringtype _map;
			private readonly uint _version;
			private uint _index;

			private TKey _retrieveKey;
			private int _retrieveHash;

			private TValue _current;

			public LookupEnumerator( declaringtype map, TKey key ) {
				_current = default( TValue );
				_map = map;
				_index = uint.MaxValue;

				_retrieveKey = key;
				_retrieveHash = ( int ) key.GetHashCode() & 0x7FFFFFFF;

				if( map != null && _map._buckets != null ) {
					_version = map._version;

					Reset();
				}
				else
					_version = 0;
			}

			public TValue Current { get { return _current; } }
			public LookupEnumerator GetEnumerator() { return this; }

			public bool MoveNext() {
				if( _map != null ) {
					CommonCollectionOperations.VersionCheck( _version == _map._version );

					for( ; _index != uint.MaxValue; _index = _map._items[_index]._next )
						if( _map._items[_index]._hash == _retrieveHash && _map._keySelector( _map._items[_index]._value ) == _retrieveKey ) {
							_current = _map._items[_index]._value;
							_index = _map._items[_index]._next;
							return true;
						}
				}

				return false;
			}

			public void Reset() {
				if( _map != null && _map._buckets != null )
					_index = _map._buckets[_retrieveHash % _map._buckets.Length];
			}
		}

		public void UpdateKeys() {
			var values = new List<TValue>( _count );

			foreach( var item in this )
				values.Add( item );

			Clear();

			foreach( var item in values )
				Add( item );
		}
	}
}