//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Collections {
	public class EventLogBuffer : IFormattable {
		public struct EventEntry {
			public DateTime Time;
			public string Text;
		}

		public PagedQueue<EventEntry> Events = new PagedQueue<EventEntry>();

		public bool Trace = false;

		public int MaxCount = 0;
		public TimeSpan MaxTime = new TimeSpan( 0 );

		public int Version = 0;

		public EventLogBuffer() {
		}

		public void Add( string text ) {
			Add( DateTime.UtcNow, text );
		}

		public void Add( string format, vararg TypedReference parameters ) {
			Add( DateTime.UtcNow, string.Format( format, vararg( parameters, parameters.Length ) ) );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void EnsureEventOrder( DateTime time ) {
			if( Events.Count > 0 ) {
				var prev = Events.Last();
				Assert.IsTrue( prev->Time <= time );
			}
		}

		private void UpdateCount( DateTime time ) {
			if( MaxCount > 0 ) {
				while( Events.Count >= MaxCount )
					Events.Dequeue();
			}

			if( MaxTime.Ticks > 0 ) {
				while( Events.Count > 0 && ( time - Events.Last()->Time ) > MaxTime )
					Events.Dequeue();
			}
		}

		public void Add( DateTime time, string text ) {
			if( Trace ) Console.WriteLine( text );

			UpdateCount( time );
			EnsureEventOrder( time );

			var @event = Events.Enqueue();
			@event->Time = time;
			@event->Text = text;

			++Version;
		}

		public void ToString( StringBuilder result, string format ) {
			var time = TimeSpan.Zero;
			if( Events.Count > 0 ) time = Events.Last()->Time - Events.First()->Time;

			result.AppendFormat( "Count={0} Time={1} Capacity={2} Pages={3} BlockSize={4}", Events.Count, time, Events.Capacity, Events.PageCount, PagedQueue<EventEntry>.BlockSize );
		}
	}
}