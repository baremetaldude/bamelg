//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Collections {
	public sealed class BitArray {
		private BitArrayAccessor _accessor;
		private uint[] _itemsHolder;

		public BitArray( uint length, bool defaultValue ) {
			_itemsHolder = new[BitArrayAccessor.GetArrayLength( length )] uint;
			_accessor.Start = &_itemsHolder[0];
			_accessor.Count = length;

			var defaultIntValue = defaultValue ? uint.MaxValue : 0U;
			for( var i = 0u; i < _itemsHolder.Length; i++ )
				_itemsHolder[i] = defaultIntValue;
		}

		public BitArray( uint length )
			: this( length, false ) {
		}

		public BitArray( uint[] array, uint length ) {
			if( !Assert.IsTrue( array.Length < BitArrayAccessor.GetArrayLength( length ) ) ) return;

			_itemsHolder = array;
			_accessor.Start = &_itemsHolder[0];
			_accessor.Count = length;
		}

		public bool this[uint index] {
			get { return _accessor[index]; }
			set { _accessor[index] = value; }
		}

		public void Clear() {
			System.Runtime.Memory.Clear( &_itemsHolder[0], _itemsHolder.Length * sizeof( _itemsHolder[0] ) );
		}

		public uint Count { get { return _accessor.Count; } }
	}

	public sealed struct BitArrayAccessor {
		public uint* Start;
		public uint Count;

		public BitArrayAccessor( uint* array, uint length ) {
			Start = array;
			Count = length;
		}

		public static uint GetArrayLength( uint bitLength ) {
			return ( ( bitLength - 1 ) / 32 + 1 );
		}

		public bool this[uint index] {
			get {
				if( !Assert.Verify( index < Count ) ) return false;
				return BitOperations.BitTest( Start[index >> 5], index & 31 );
			}
			set {
				if( !Assert.Verify( index < Count ) ) return;
				Start[index >> 5] = BitOperations.BitSet( Start[index >> 5], index & 31, value );
			}
		}
	}
}