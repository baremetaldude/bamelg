//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Collections {
	public class PriorityQueue<T> {
		private const int DefaultCapacity = 16;

		// Note:
		// new PriorityQueue<int>( ( x, y ) => x.CompareTo( y ) ); - descending {30,20,10}
		// new PriorityQueue<int>( ( x, y ) => -x.CompareTo( y ) ); - ascending {10,20,30}
		// new PriorityQueue<int>( ( x, y ) => y.CompareTo( x ) ); - ascending {10,20,30}
		private Functors.Func<T, T, int> Comparer;

		private int _count;
		private T[] _heap;

		public PriorityQueue( Functors.Func<T, T, int> comparer )
			: this( DefaultCapacity, comparer ) {
		}

		public PriorityQueue( int capacity, Functors.Func<T, T, int> comparer ) {
			if( !BitOperations.IsPowerOf2( capacity ) )
				capacity = BitOperations.NextPowerOf2( capacity );

			_heap = new[capacity] T;

			_count = 0;
			Comparer = comparer;
		}

		public void Clear() {
			_count = 0;
		}

		public void AddRange( T* items, int count ) {
			EnsureCapacity( count );

			for( var i = 0; i < count; ++i )
				Enqueue( items[i] );
		}

		public void Enqueue( T value ) {
			EnsureCapacity( 1 );

			var i = _count;

			while( i > 0 ) {
				var parentIndex = PriorityQueueCommon.GetParentIndex( i );

				if( Comparer( value, _heap[parentIndex] ) <= 0 )
					break;

				_heap[i] = _heap[parentIndex];
				i = parentIndex;
			}

			_heap[i] = value;
			++_count;
		}

		public T Dequeue() {
			if( !Assert.IsTrue( _count > 0 ) ) return default( T );

			var result = Top;

			if( _count > 1 ) {
				var i = 0;

				for( var leftChild = PriorityQueueCommon.GetLeftChildIndex( i ); leftChild < _count; leftChild = PriorityQueueCommon.GetLeftChildIndex( i ) ) {
					var rightChild = PriorityQueueCommon.GetRightChildIndexFromLeft( leftChild );
					var highestPriorityChild = rightChild < _count && Comparer( _heap[rightChild], _heap[leftChild] ) >= 0 ? rightChild : leftChild;

					_heap[i] = _heap[highestPriorityChild];
					i = highestPriorityChild;
				}

				if( i != _count - 1 ) {
					while( i > 0 ) {
						var parentIndex = PriorityQueueCommon.GetParentIndex( i );

						if( Comparer( _heap[_count - 1], _heap[parentIndex] ) <= 0 )
							break;

						_heap[i] = _heap[parentIndex];
						i = parentIndex;
					}

					_heap[i] = _heap[_count - 1];
				}
			}

			--_count;
			return result;
		}

		public T Replace( T value ) {
			if( !Assert.IsTrue( _count > 0 ) ) return default( T );

			var result = Top;

			var i = 0;

			for( var leftChild = PriorityQueueCommon.GetLeftChildIndex( i ); leftChild < _count; leftChild = PriorityQueueCommon.GetLeftChildIndex( i ) ) {
				var rightChild = PriorityQueueCommon.GetRightChildIndexFromLeft( leftChild );
				var highestPriorityChild = rightChild < _count && Comparer( _heap[rightChild], _heap[leftChild] ) >= 0 ? rightChild : leftChild;

				_heap[i] = _heap[highestPriorityChild];
				i = highestPriorityChild;
			}

			while( i > 0 ) {
				var parentIndex = PriorityQueueCommon.GetParentIndex( i );

				if( Comparer( value, _heap[parentIndex] ) <= 0 )
					break;

				_heap[i] = _heap[parentIndex];
				i = parentIndex;
			}

			_heap[i] = value;

			return result;
		}

		public void EnsureCapacity( int count ) {
			var newCount = _count + count;

			if( newCount >= _heap.Length ) {
				if( !BitOperations.IsPowerOf2( newCount ) )
					newCount = BitOperations.NextPowerOf2( newCount );

				var newHeap = new[newCount] T;

				CommonCollectionOperations.Copy<T>( &newHeap[0], &_heap[0], _count );

				_heap = newHeap;
			}
		}

		public int Count { get { return _count; } }
		public int Capacity { get { return _heap.Length; } }

		public T Top { get { System.Diagnostics.Debug.Assert( _count > 0 ); return _heap[0]; } }
		public T Peek() { System.Diagnostics.Debug.Assert( _count > 0 ); return _heap[0]; }

		public Enumerator GetEnumerator() {
			return new Enumerator( this );
		}

		[EnumeratorAttribute]
		public struct Enumerator {
			private readonly declaringtype _parent;
			private int _index, _count;

			internal Enumerator( declaringtype parent ) {
				_index = -1;
				_parent = parent;
				_count = parent._count;
			}

			public bool MoveNext() {
				return ++_index < _count;
			}

			public T Current { get { return _parent._heap[_index]; } }
		}
	}
}