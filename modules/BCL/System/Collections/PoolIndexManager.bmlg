//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;

namespace System.Collections {
	public class PoolIndexManager {
		public uint Count { get { return _count; } }
		public uint Capacity { get { return _indices.Capacity; } }
		public bool Expandable { get; set; } = true;

		private List<uint> _indices;
		private uint _count;

		public uint Allocate() {
			var count = _indices.Count;
			if( _count >= count ) {
				if( !Expandable && count == _indices.Capacity ) return uint.MaxValue;

				_indices.Add( count );
				++_count;
				return count;
			}

			var result = _indices[_count];
			++_count;
			return result;
		}

		public void Deallocate( uint index ) {
			VerifyIsValid( index );

			--_count;
			_indices[_count] = index;
		}

		public PoolIndexManager( uint maxElements = 7 ) {
			Debug.Assert( maxElements > 0 );

			_indices = new List<uint>( maxElements );
			_count = 0;

			for( var i = 0U; i < maxElements; ++i )
				_indices.Add( i );
		}

		[Conditional( ConditionString = "DEBUG" )]
		public void VerifyIsValid( uint value ) {
			Debug.Assert( value < _indices.Count );

			for( var i = _count; i < _indices.Count; ++i ) {
				if( _indices[i] == value ) {
					Debug.Fail( "Index is freed!" );
					return;
				}
			}
		}
	}
}