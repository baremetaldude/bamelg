//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Collections {
	public class Stack<T> {
		private T[] _items;
		private uint _count;
		private uint _version;

		public Stack() {
			_items = new[16] T;
		}

		public Stack( uint capacity ) {
			if( !Assert.IsFalse( capacity < 0 ) )
				capacity = 3;

			_items = new[capacity] T;
		}

		public void Clear() {
			CommonCollectionOperations.Clear<T>( &_items[0], _count );

			_count = 0;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		/// O(N)
		public bool Contains( T value ) {
			for( var i = 0U; i < _count; ++i )
				if( _items[i] == value )
					return true;
			return false;
		}

		public T Peek() {
			if( !Assert.IsFalse( _count == 0 ) )
				return default( T );

			return _items[_count - 1];
		}

		public T Pop() {
			if( !Assert.IsFalse( _count == 0 ) )
				return default( T );

			var result = _items[--_count];
			_items[_count] = default( T );
			CommonCollectionOperations.UpdateVersion( &_version );
			return result;
		}

		public void Push( T value ) {
			if( _count == _items.Length ) {
				var items = new[2 * _count] T;
				CommonCollectionOperations.Copy<T>( &items[0], &_items[0], _count );
				_items = items;
			}

			_items[_count++] = value;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		public T[] ToArray() {
			var result = new[_count] T;
			for( var i = 0U; i < _count; ++i )
				result[i] = _items[_count - i - 1];

			return result;
		}

		public T[] ToReversedArray() {
			var result = new[_count] T;
			CommonCollectionOperations.Copy<T>( &result[0], &_items[0], _count );
			return result;
		}

		public T this[int index] {
			get { System.Diagnostics.Debug.Assert( ( uint ) index < _count ); return _items[_count - index - 1]; }
			set { System.Diagnostics.Debug.Assert( ( uint ) index < _count ); _items[_count - index - 1] = value; }
		}

		public T this[uint index] {
			get { System.Diagnostics.Debug.Assert( index < _count ); return _items[_count - index - 1]; }
			set { System.Diagnostics.Debug.Assert( index < _count ); _items[_count - index - 1] = value; }
		}

		public uint Count {
			get {
				return _count;
			}
		}

		public Enumerator GetEnumerator() {
			return new Enumerator( this );
		}

		[EnumeratorAttribute]
		public struct Enumerator {
			private declaringtype _parent;
			private uint _index;
			private uint _version;
			private T _current;

			internal Enumerator( declaringtype stack ) {
				_parent = stack;
				_version = _parent._version;
				_index = uint.MaxValue - 1;
				_current = default( T );
			}

			public bool MoveNext() {
				bool result;
				CommonCollectionOperations.VersionCheck( _parent._version == _version );

				if( _index == uint.MaxValue - 1 ) {
					_index = _parent._count - 1;
					result = _index != uint.MaxValue;

					if( result )
						_current = _parent._items[_index];

					return result;
				}

				if( _index == uint.MaxValue )
					return false;

				result = --_index != uint.MaxValue;
				if( result ) {
					_current = _parent._items[_index];
					return result;
				}

				_current = default( T );
				return result;
			}

			[Conditional( ConditionString = "DEBUG" )]
			private void EnsureEnumeratorValid() {
				if( _index == uint.MaxValue - 1 ) {
					System.Diagnostics.Debug.Fail( "Enumeration not started!" );
				}

				if( _index == uint.MaxValue ) {
					System.Diagnostics.Debug.Fail( "Enumeration finished!" );
				}
			}

			public T Current {
				get {
					EnsureEnumeratorValid();

					return _current;
				}
			}
		}
	}
}