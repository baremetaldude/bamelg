//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Usage:
//	var q = new Queue<int>( 3 );
//	q.Enqueue( 0 );
//	q.Dequeue();
//	q.Enqueue( 1 );
//	q.AddRange( vararg( new int[3] { 2, 3, 4 }, 3 ) );
//	foreach( var item in q ) System.Console.WriteLine( item );
//

using System.IO;

namespace System.Collections {
	public class Queue<T> {
		private T[] _items;
		private uint _tail, _head, _count;
		private uint _version;

		public Queue() {
			_items = new[16] T;
		}

		public Queue( uint capacity ) {
			if( !BitOperations.IsPowerOf2( capacity ) )
				capacity = BitOperations.NextPowerOf2( capacity );

			if( !Assert.IsFalse( capacity < 0 ) )
				capacity = 3;

			_items = new[capacity] T;
		}

		public Queue( Queue<T> other ) {
			if( other == null ) return;

			_items = new[other._items.Length] T;
			_count = other._count;

			if( other._count > 0 ) {
				if( other._head < other._tail ) {
					CommonCollectionOperations.Copy<T>( &_items[0], &other._items[other._head], other._count );
				}
				else {
					CommonCollectionOperations.Copy<T>( &_items[0], &other._items[other._head], other._items.Length - other._head );
					CommonCollectionOperations.Copy<T>( &_items[other._items.Length - other._head], &other._items[0], other._tail );
				}
			}
		}

		public void Clear() {
			if( _head < _tail ) {
				CommonCollectionOperations.Clear<T>( &_items[_head], _count );
			}
			else if( _count > 0 ) {
				CommonCollectionOperations.Clear<T>( &_items[0], _tail );
				CommonCollectionOperations.Clear<T>( &_items[_head], _items.Length - _head );
			}

			_head = 0;
			_tail = 0;
			_count = 0;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		public bool Contains( T value ) {
			var index = _head;
			var size = _count;

			while( size-- > 0 ) {
				if( _items[index] == value )
					return true;

				index = ( index + 1 ) & ( _items.Length - 1U );
			}

			return false;
		}

		public T Dequeue() {
			System.Diagnostics.Debug.Assert( _count > 0 );

			var result = _items[_head];

			_items[_head] = default( T );
			_head = ( _head + 1 ) & ( _items.Length - 1U );
			--_count;
			CommonCollectionOperations.UpdateVersion( &_version );

			return result;
		}

		public void Enqueue( T item ) {
			if( _count == _items.Length )
				SetCapacity( _items.Length * 2U );

			_items[_tail] = item;
			_tail = ( _tail + 1 ) & ( _items.Length - 1U );
			++_count;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		public void AddRange( vararg T values ) {
			EnsureCapacity( _count + values.Length );

			if( _head < _tail ) {
				var available = _items.Length - _tail;
				var firstPart = Math.Min( values.Length, available );

				CommonCollectionOperations.Copy<T>( &_items[_tail], values, firstPart );
				if( firstPart != values.Length ) CommonCollectionOperations.Copy<T>( &_items[0], values + firstPart, values.Length - firstPart );
			}
			else if( _count > 0 ) {
				CommonCollectionOperations.Copy<T>( &_items[_tail], values, values.Length );
			}
			else {
				_tail = 0;
				_head = 0;

				CommonCollectionOperations.Copy<T>( &_items[0], values, values.Length );
			}

			_tail = ( _tail + values.Length ) & ( _items.Length - 1U );
			_count += values.Length;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		public T Peek() {
			System.Diagnostics.Debug.Assert( _count > 0 );

			return _items[_head];
		}

		public T First() {
			return Peek();
		}

		public T Last() {
			System.Diagnostics.Debug.Assert( _count > 0 );

			return _items[( _tail - 1U ) & ( _items.Length - 1U )];
		}

		public uint Count { get { return _count; } }

		public T this[uint index] {
			get {
				System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _count, index ) );

				return _items[( _head + index ) & ( _items.Length - 1 )];
			}

			set {
				System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _count, index ) );

				_items[( _head + index ) & ( _items.Length - 1 )] = value;
			}
		}

		public T this[int index] {
			get {
				System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _count, index ) );

				return _items[( _head + index ) & ( _items.Length - 1 )];
			}

			set {
				System.Diagnostics.Debug.Assert( System.Runtime.Memory.BoundsCheck( _count, index ) );

				_items[( _head + index ) & ( _items.Length - 1 )] = value;
			}
		}

		public uint Capacity {
			get { return _items.Length; }
			set { EnsureCapacity( value ); }
		}

		private void EnsureCapacity( uint value ) {
			if( value <= _items.Length ) return;

			if( !BitOperations.IsPowerOf2( value ) )
				value = BitOperations.NextPowerOf2( value );

			SetCapacity( value );
		}

		private void SetCapacity( uint capacity ) {
			var result = new[capacity] T;

			if( _head < _tail )
				CommonCollectionOperations.Copy<T>( &result[0], &_items[_head], _count );
			else if( _count > 0 ) {
				CommonCollectionOperations.Copy<T>( &result[0], &_items[_head], _items.Length - _head );
				CommonCollectionOperations.Copy<T>( &result[_items.Length - _head], &_items[0], _tail );
			}

			_items = result;
			_head = 0;
			_tail = ( _count == capacity ) ? 0U : _count;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		public T[] ToArray() {
			var result = new[_count] T;

			if( _count > 0 ) {
				if( _head < _tail ) {
					CommonCollectionOperations.Copy<T>( &result[0], &_items[_head], _count );
					return result;
				}

				CommonCollectionOperations.Copy<T>( &result[0], &_items[_head], _items.Length - _head );
				CommonCollectionOperations.Copy<T>( &result[_items.Length - _head], &_items[0], _tail );
			}

			return result;
		}

		public Enumerator GetEnumerator() { return new Enumerator( this ); }

		[EnumeratorAttribute]
		public struct Enumerator {
			private declaringtype _parent;
			private uint _index;
			private uint _version;
			private T _currentElement;

			internal Enumerator( declaringtype parent ) {
				_parent = parent;
				_version = _parent._version;
				_index = uint.MaxValue;
				_currentElement = default( T );
			}

			public bool MoveNext() {
				CommonCollectionOperations.VersionCheck( _parent._version == _version );

				if( _index == uint.MaxValue - 1 )
					return false;

				++_index;

				if( _index == _parent._count ) {
					_index = uint.MaxValue - 1;
					_currentElement = default( T );
					return false;
				}

				_currentElement = _parent[_index];
				return true;
			}

			public T Current {
				get {
					System.Diagnostics.Debug.Assert( _index < uint.MaxValue - 1 );

					return _currentElement;
				}
			}
		}
	}
}