//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

namespace System.Collections {
	public class CachingStack<T> {
		private Stack<T> _cachedValues = new Stack<T>( 16 );
		private Functors.Func<T> _generator;
		private Functors.Action<T> _initializer;
		private Functors.Action<T> _finalizer;

		public CachingStack( Functors.Func<T> generator, Functors.Action<T> initializer = null, Functors.Action<T> finalizer = null ) {
			_generator = generator;
			_initializer = initializer;
			_finalizer = finalizer;
		}

		~CachingStack() {
			Clear();
		}

		public uint Count { get { return _cachedValues.Count; } }

		public void Push( T item ) {
			if( _initializer != null ) _initializer( item );
			_cachedValues.Push( item );
		}

		public T Pop() {
			return _cachedValues.Count > 0 ? _cachedValues.Pop() : _generator();
		}

		public UsingScope PopScoped() {
			return new UsingScope( this );
		}

		public struct UsingScope : IDisposable {
			private readonly declaringtype _parent;
			public readonly T Value;

			public UsingScope( declaringtype parent ) {
				_parent = parent;
				Value = parent.Pop();
			}

			public void Dispose() {
				_parent.Push( Value );
			}
		}

		public void Clear() {
			if( _finalizer != null )
				foreach( var value in _cachedValues )
					_finalizer( value );

			_cachedValues.Clear();
		}
	}
}