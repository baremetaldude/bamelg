//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;

namespace System.Collections {
	// Designed for small structs. O(1) insertion and removal
	// Object locations/addresses not changed (important for struct types!) while adding new elements
	public class FixedPool<T> {
		private uint _version;

		private int _maxElements;

		public T[] Elements;
		private int[] AvailableIndices;
		private int* FreeIndexPtr;

		public FixedPool( int maxElements ) {
			Assert.IsTrue( typeof( T ).IsStruct ); // Pool<T> designed to be used with structs

			_maxElements = maxElements;

			Elements = new[maxElements] T;
			AvailableIndices = new[maxElements] int;
			FreeIndexPtr = &AvailableIndices[0];

			for( var i = 0; i < _maxElements; ++i )
				AvailableIndices[i] = i;

			var tailPadding = System.Runtime.Memory.GetTailPadding( ( uint ) typeof( T ).InstanceSize, typeof( T ).InstanceAlignment );
			Valgrind.MempoolCreate( &Elements[0], ( int ) tailPadding, false );
		}

		~FixedPool() {
			if( OnFinalize != null ) {
				var count = Count;

				for( var j = 0; j < count; ++j ) {
					var value = &Elements[AvailableIndices[j]];

					VerifyOwning( value );
					var index = value - &Elements[0];
					VerifyFree( ( int ) index );
					OnFinalize( *value );

					// Valgrind.MempoolFree( &Elements[0], value ); this client request buggy even for valgrind 3.10.1
				}
			}

			Valgrind.MempoolDestroy( &Elements[0] );
		}

		public Functors.Action<T&> OnInitialize, OnFinalize;

		// unfortunately we must return ptrs to prevent possible usage errors
		public T* Allocate() {
			var result = TryAllocate();
			if( result == null ) Assert.Fail( "Not enought room for new elements!" );
			return result;
		}

		public yield<T*> GetEnumerator() {
			var version = _version;
			var count = Count;

			for( var j = 0; j < count; ++j ) {
				CommonCollectionOperations.VersionCheck( version != _version );

				yield return &Elements[AvailableIndices[j]];
			}
		}

		public int Count { get { return ( int )( FreeIndexPtr - &AvailableIndices[0] ); } }
		public int FreeElementsCount { get { return ( int )( _maxElements - Count ); } }

		public T* TryAllocate() {
			if( FreeElementsCount <= 0 ) return null;

			var index = *FreeIndexPtr;
			++FreeIndexPtr;

			var result = &Elements[index];
			// Valgrind.MempoolAlloc( &Elements[0], result, typeof( T ).InstanceSize );

			if( OnInitialize != null ) OnInitialize( *result );
			CommonCollectionOperations.UpdateVersion( &_version );
			return result;
		}

		public void Free( T* value ) {
			VerifyOwning( value );
			var index = value - &Elements[0];
			VerifyFree( ( int ) index );
			if( OnFinalize != null ) OnFinalize( *value );

			// Valgrind.MempoolFree( &Elements[0], value ); this client request buggy even for valgrind 3.10.1

			--FreeIndexPtr;
			*FreeIndexPtr = ( int ) index;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void VerifyOwning( T* value ) {
			Assert.IsTrue( IsOwned( value ) );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void VerifyFree( int value ) {
			var freePtr = FreeIndexPtr;
			var freeCount = FreeElementsCount;

			for( var i = 0; i < freeCount; ++i ) {
				if( freePtr[i] == value ) {
					Assert.Fail( "Object already freed!" );
					return;
				}
			}
		}

		private bool IsOwned( T* value ) {
			var index = value - &Elements[0];

			return ( index >= 0 ) & ( index < _maxElements );
		}

		public int IndexOf( T* value ) {
			var index = ( int )( value - &Elements[0] );

			return ( index >= 0 ) & ( index < _maxElements ) ? index : -1;
		}
	}
}