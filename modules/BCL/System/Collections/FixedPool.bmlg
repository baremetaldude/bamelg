//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System.Diagnostics;

namespace System.Collections {
	// Designed for small structs. O(1) insertion and removal
	// Object locations not changed while adding/removing new elements
	public class FixedPool<T> {
		private uint _version;

		private uint _maxElements;

		public T[] Elements;
		private uint[] AvailableIndices;
		private uint* FreeIndexPtr, IndexRemapper;

		public FixedPool( uint maxElements ) {
			Assert.IsTrue( typeof( T ).IsStruct ); // Pool<T> designed to be used with structs

			_maxElements = maxElements;

			Elements = new[maxElements] T;
			AvailableIndices = new[maxElements * 2] uint;
			FreeIndexPtr = &AvailableIndices[0];
			IndexRemapper = &AvailableIndices[maxElements];

			for( var i = 0U; i < _maxElements; ++i ) AvailableIndices[i] = i;
			InitializeRemapper();

			var tailPadding = System.Runtime.Memory.GetTailPadding( typeof( T ).InstanceSize, typeof( T ).InstanceAlignment );
			Valgrind.MempoolCreate( &Elements[0], tailPadding, false );
		}

		~FixedPool() {
			if( OnFinalize != null ) {
				var version = _version;
				var count = Count;

				for( var j = 0U; j < count; ++j ) {
					CommonCollectionOperations.VersionCheck( version == _version );

					VerifyFree( AvailableIndices[j] );
					OnFinalize( Elements[AvailableIndices[j]] );

					// Valgrind.MempoolFree( &Elements[0], &Elements[AvailableIndices[j]] ); this client request buggy even for valgrind 3.10.1
				}
			}

			Valgrind.MempoolDestroy( &Elements[0] );
		}

		public Functors.Action<T&> OnInitialize, OnFinalize;

		// unfortunately we must return ptrs to prevent possible usage errors
		public T* Allocate() {
			var result = TryAllocate();
			if( result == null ) Assert.Fail( "Not enought room for new elements!" );
			return result;
		}

		public yield<T*> GetEnumerator() {
			var version = _version;
			var count = Count;

			for( var j = 0U; j < count; ++j ) {
				CommonCollectionOperations.VersionCheck( version == _version );
				yield return &Elements[AvailableIndices[j]];
			}
		}

		public uint Count { get { return ( uint )( FreeIndexPtr - &AvailableIndices[0] ); } }
		public uint FreeElementsCount { get { return _maxElements - Count; } }

		public T* TryAllocate() {
			if( FreeElementsCount == 0 ) return null;

			var index = *FreeIndexPtr;
			IndexRemapper[index] = Count;
			++FreeIndexPtr;

			var result = &Elements[index];
			// Valgrind.MempoolAlloc( &Elements[0], result, typeof( T ).InstanceSize );

			if( OnInitialize != null ) OnInitialize( *result );
			CommonCollectionOperations.UpdateVersion( &_version );
			return result;
		}

		public void Free( T* value ) {
			var index = ( uint )( value - &Elements[0] );
			if( *( FreeIndexPtr - 1 ) != index ) {
				var replacement = IndexRemapper[index];
				AvailableIndices[replacement] = *( FreeIndexPtr - 1 );
				IndexRemapper[*( FreeIndexPtr - 1 )] = replacement;
			}

			VerifyFree( index );
			if( OnFinalize != null ) OnFinalize( *value );
			// Valgrind.MempoolFree( &Elements[0], value ); this client request buggy even for valgrind 3.10.1

			--FreeIndexPtr;
			*FreeIndexPtr = index;
			CommonCollectionOperations.UpdateVersion( &_version );
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void InitializeRemapper() {
			for( var i = _maxElements; i < _maxElements * 2; ++i ) AvailableIndices[i] = uint.MaxValue;
		}

		[Conditional( ConditionString = "DEBUG" )]
		private void VerifyFree( uint index ) {
			Debug.Assert( index < _maxElements );
			if( IndexRemapper[index] == uint.MaxValue ) Debug.Fail( "Object already freed!" );

			IndexRemapper[index] = uint.MaxValue;
		}

		public uint IndexOf( T* value ) {
			var index = ( uint )( value - &Elements[0] );

			return index < _maxElements ? index : uint.MaxValue;
		}
	}
}