//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace System.Collections {
	public static partial struct CommonCollectionOperations {
		[Conditional( ConditionString = "DEBUG" )]
		public static void UpdateVersion( uint* version ) {
			++*version;
		}

		[Conditional( ConditionString = "DEBUG" )]
		public static void VersionCheck( bool expression, [In] CallerContext& callercontext = nullref ) {
			Assert.IsTrue( expression, "Collection was changed since last iteration", callercontext );
		}

		[ForceInline]
		public static void Swap<T>( T& left, T& right ) {
			var temp = left;
			left = right;
			right = temp;
		}

		public static void Copy<T>( T* destination, T* source, uint count ) {
			// overlapped
			if( source < destination && source + count >= destination ) {
				source += count - 1;
				destination += count - 1;
				for( uint i = 0; i < count; ++i )
					*destination-- = *source--;
			}
			else {
				for( uint i = 0; i < count; ++i )
					*destination++ = *source++;
			}
		}

		public static uint IndexOf<T>( T* destination, T value, uint count ) {
			for( var i = 0U; i < count; ++i )
				if( destination[i] == value )
					return i;

			return uint.MaxValue;
		}

		public static uint NextIndexOf<T>( T* destination, T value, uint lastFoundIndex, uint count ) {
			for( var i = lastFoundIndex + 1; i < count; ++i )
				if( destination[i] == value )
					return i;

			return uint.MaxValue;
		}

		public static void Clear<T>( T* destination, uint count ) {
			for( var i = 0U; i < count; ++i )
				*destination++ = default( T );
		}

		public static bool Compare<T>( T* source1, T* source2, uint count ) {
			for( var i = 0U; i < count; ++i )
				if( *source1++ != *source2++ )
					return false;

			return true;
		}

		public static bool Compare<T>( T[] source1, T[] source2 ) {
			if( source1 == null && source2 == null ) return true;
			if( source1 == null || source2 == null ) return false;
			if( source1.Length != source2.Length ) return false;

			var count = source1.Length;
			var psource1 = &source1[0];
			var psource2 = &source2[0];

			for( var i = 0U; i < count; ++i )
				if( *psource1++ != *psource2++ )
					return false;

			return true;
		}

		public static bool Contains<T>( T* source, uint count, T& element ) {
			for( var i = 0U; i < count; ++i )
				if( *source++ == element )
					return true;

			return false;
		}

		// [x; y]
		// BinarySearch( x - 1 ) == false; result == 0
		// BinarySearch( x )     == true;  result == 0
		// BinarySearch( x + 1 ) == false; result == 1
		// BinarySearch( y - 1 ) == false; result == 1
		// BinarySearch( y )     == true;  result == 1
		public static bool BinarySearch<T>( T* array, uint length, T value, uint& result ) {
			if( length == 0 ) {
				result = 0;
				return false;
			}

			var start = 0U;
			var end = length - 1;

			while( start <= end ) {
				int compareResult;
				var median = ( start + end ) >> 1;

				if( typeof( T ).IsClass & array[median] == default( T ) ) compareResult = value == default( T ) ? 0 : -1;
				else compareResult = array[median].CompareTo( value );

				if( compareResult == 0 ) {
					result = median;
					return true;
				}

				if( compareResult < 0 ) start = median + 1;
				else if( checkwrap( end = median - 1 ) ) break;
			}

			result = start;
			return false;
		}

		public static bool BinarySearchDescending<T>( T* array, uint length, T value ) {
			if( length == 0 ) {
				result = 0;
				return false;
			}

			var start = 0U;
			var end = length - 1;

			while( start <= end ) {
				int compareResult;
				var median = ( start + end ) >> 1;

				if( typeof( T ).IsClass & array[median] == default( T ) ) compareResult = value == default( T ) ? 0 : 1;
				else compareResult = array[median].CompareTo( value );

				if( compareResult == 0 ) {
					result = median;
					return true;
				}

				if( compareResult > 0 ) start = median + 1;
				else if( checkwrap( end = median - 1 ) ) break;
			}

			result = start;
			return false;
		}

		[ForceInline]
		private static void Heapify<T>( T* data, uint index, uint count, Functors.Func<T, T, int> comparison ) {
			while( 2 * index + 1 < count ) {
				var t = 2 * index + 1;
				if( 2 * index + 2 < count && comparison( data[2 * index + 2], data[t] ) >= 0 )
					t = 2 * index + 2;

				if( comparison( data[index], data[t] ) < 0 ) {
					Swap<T>( data[index], data[t] );
					index = t;
				}
				else
					break;
			}
		}

		public static void HeapSort<T>( T* data, uint count, Functors.Func<T, T, int> comparison ) {
			for( var i = count - 1; i != uint.MaxValue; --i )
				Heapify<T>( data, i, count, comparison );

			while( count != 0 ) {
				Swap<T>( data[0], data[count - 1] );
				--count;

				Heapify<T>( data, 0, count, comparison );
			}
		}

		public static void QuickSort<T>( T* input, uint inputLength, Functors.Func<T, T, int> comparison ) {
			var pivotIndex = 0;
			var leftIndex = pivotIndex + 1;
			var rightIndex = inputLength - 1;

			var stack = stackalloc uint[BitOperations.Log2( inputLength ) * 2];
			var stackLength = 0U;

			stack[stackLength++] = pivotIndex;
			stack[stackLength++] = rightIndex;

			while( stackLength > 0 ) {
				var rightPartitionIndex = stack[--stackLength];
				var leftPartitionIndex = stack[--stackLength];

				leftIndex = leftPartitionIndex + 1;
				pivotIndex = leftPartitionIndex;
				rightIndex = rightPartitionIndex;

				var pivot = input[pivotIndex];

				if( leftIndex > rightIndex )
					continue;

				while( leftIndex < rightIndex ) {
					while( leftIndex <= rightIndex && comparison( input[leftIndex], pivot ) <= 0 )
						++leftIndex;

					while( leftIndex <= rightIndex && comparison( input[rightIndex], pivot ) >= 0 )
						--rightIndex;

					if( rightIndex >= leftIndex )
						Swap<T>( input[leftIndex], input[rightIndex] );
				}

				if( pivotIndex <= rightIndex )
					if( comparison( input[pivotIndex], input[rightIndex] ) > 0 )
						Swap<T>( input[pivotIndex], input[rightIndex] );

				var leftPartitionLength = rightIndex - 1 - leftPartitionIndex;
				var rightPartitionLength = rightPartitionIndex - 1 - rightIndex;

				if( leftPartitionLength < rightPartitionLength ) {
					if( rightPartitionLength > 0 ) {
						stack[stackLength++] = rightIndex + 1;
						stack[stackLength++] = rightPartitionIndex;
					}

					if( leftPartitionLength > 0 ) {
						stack[stackLength++] = leftPartitionIndex;
						stack[stackLength++] = rightIndex - 1;
					}
				}
				else {
					if( leftPartitionLength > 0 ) {
						stack[stackLength++] = leftPartitionIndex;
						stack[stackLength++] = rightIndex - 1;
					}

					if( rightPartitionLength > 0 ) {
						stack[stackLength++] = rightIndex + 1;
						stack[stackLength++] = rightPartitionIndex;
					}
				}
			}
		}
	}
}