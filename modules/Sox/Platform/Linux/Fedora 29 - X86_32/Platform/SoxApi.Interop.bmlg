//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// Even in 2019 version 14.4.2 leaks, do not use this library
//

using System;
using System.Runtime.InteropServices;

namespace Platform.Sox {
	[ExternLibrary( Image = "/usr/lib/libsox.so.3" )]
	public static partial struct SoxApi {
		public extern static ulong lsx_filelength( sox_format_t* ft );
		[BackendHintReadOnly]
		public extern static lsx_enum_item* lsx_find_enum_text( CUtf8String text, lsx_enum_item* lsxEnumItems, int flags );
		[BackendHintReadOnly]
		public extern static lsx_enum_item* lsx_find_enum_value( uint value, lsx_enum_item* lsxEnumItems );
		[BackendHintReadOnly]
		public extern static sbyte* lsx_find_file_extension( CUtf8String pathname );
		public extern static int lsx_getopt( lsx_getopt_t* state );
		public extern static void lsx_getopt_init( int argc, sbyte** argv, sbyte* shortopts, lsx_option_t* longopts, lsx_getopt_flags_t flags, int first, lsx_getopt_t* state );
		public extern static void* lsx_realloc( void* ptr, uint newsize );
		public extern static sbyte* lsx_sigfigs3( double number );
		public extern static sbyte* lsx_sigfigs3p( double percentage );
		[BackendHintReadOnly]
		public extern static int lsx_strcasecmp( sbyte* s1, sbyte* s2 );
		public extern static int sox_add_effect( sox_effects_chain_t* chain, sox_effect_t* effp, sox_signalinfo_t* in, sox_signalinfo_t* out );
		public extern static void sox_append_comment( sbyte*** comments, sbyte* item );
		public extern static void sox_append_comments( sbyte*** comments, sbyte* items );
		public extern static uint sox_basename( sbyte* baseBuffer, uint baseBufferLen, CUtf8String filename );
		public extern static int sox_close( sox_format_t* ft );
		public extern static sbyte** sox_copy_comments( sbyte** comments );
		public extern static sox_effect_t* sox_create_effect( sox_effect_handler_t* eh );
		public extern static sox_effects_chain_t* sox_create_effects_chain( sox_encodinginfo_t* inEnc, sox_encodinginfo_t* outEnc );
		public extern static void sox_delete_comments( sbyte*** comments );
		public extern static void sox_delete_effect( sox_effect_t* effp );
		public extern static void sox_delete_effect_last( sox_effects_chain_t* chain );
		public extern static void sox_delete_effects( sox_effects_chain_t* chain );
		public extern static void sox_delete_effects_chain( sox_effects_chain_t* ecp );
		public extern static int sox_effect_options( sox_effect_t* effp, int argc, sbyte** argv );
		public extern static ulong sox_effects_clips( sox_effects_chain_t* chain );
		public extern static sbyte* sox_find_comment( sbyte** comments, sbyte* id );
		[BackendHintReadOnly]
		public extern static sox_effect_handler_t* sox_find_effect( CUtf8String name );
		public extern static sox_format_handler_t* sox_find_format( CUtf8String name, sox_bool ignoreDevices );
		public extern static int sox_flow_effects( sox_effects_chain_t* chain, Functors.Func<sox_bool, void*, int>* callback, void* clientData );
		public extern static int sox_format_init();
		public extern static void sox_format_quit();
		public extern static sox_bool sox_format_supports_encoding( sbyte* path, sbyte* filetype, sox_encodinginfo_t* encoding );
		[BackendHintReadOnly]
		public extern static Functors.Func<sox_effect_handler_t*>** sox_get_effect_fns();
		[BackendHintReadOnly]
		public extern static sox_effects_globals_t* sox_get_effects_globals();
		[BackendHintReadOnly]
		public extern static sox_encodings_info_t* sox_get_encodings_info();
		[BackendHintReadOnly]
		public extern static sox_format_tab_t* sox_get_format_fns();
		[BackendHintReadOnly]
		public extern static sox_globals_t* sox_get_globals();
		public extern static int sox_init();
		public extern static void sox_init_encodinginfo( sox_encodinginfo_t* e );
		public extern static sox_bool sox_is_playlist( CUtf8String filename );
		public extern static uint sox_num_comments( sbyte** comments );
		public extern static sox_format_t* sox_open_mem_read( void* buffer, uint bufferSize, sox_signalinfo_t* signal, sox_encodinginfo_t* encoding, sbyte* filetype );
		public extern static sox_format_t* sox_open_mem_write( void* buffer, uint bufferSize, sox_signalinfo_t* signal, sox_encodinginfo_t* encoding, sbyte* filetype, sox_oob_t* oob );
		public extern static sox_format_t* sox_open_memstream_write( sbyte** bufferPtr, uint* bufferSizePtr, sox_signalinfo_t* signal, sox_encodinginfo_t* encoding, sbyte* filetype, sox_oob_t* oob );
		public extern static sox_format_t* sox_open_read( CUtf8String path, sox_signalinfo_t* signal, sox_encodinginfo_t* encoding, CUtf8String filetype );
		public extern static sox_format_t* sox_open_write( CUtf8String path, sox_signalinfo_t* signal, sox_encodinginfo_t* encoding, CUtf8String filetype, sox_oob_t* oob, Functors.Func<sbyte*, sox_bool>* overwritePermitted );
		public extern static int sox_parse_playlist( Functors.Func<void*, sbyte*, int>* callback, void* p, CUtf8String listname );
		public extern static sox_effect_t* sox_pop_effect_last( sox_effects_chain_t* chain );
		[BackendHintReadOnly]
		public extern static uint sox_precision( sox_encoding_t encoding, uint bitsPerSample );
		public extern static void sox_push_effect_last( sox_effects_chain_t* chain, sox_effect_t* effp );
		public extern static int sox_quit();
		public extern static uint sox_read( sox_format_t* ft, int* buf, uint len );
		public extern static int sox_seek( sox_format_t* ft, ulong offset, int whence );
		public extern static ulong sox_stop_effect( sox_effect_t* effp );
		[BackendHintReadOnly]
		public extern static sbyte* sox_strerror( int soxErrno );
		public extern static void sox_trim_clear_start( sox_effect_t* effp );
		public extern static ulong sox_trim_get_start( sox_effect_t* effp );
		[BackendHintReadOnly]
		public extern static sbyte* sox_version();
		[BackendHintReadOnly]
		public extern static sox_version_info_t* sox_version_info();
		public extern static uint sox_write( sox_format_t* ft, int* buf, uint len );
		public extern static sox_format_handler_t* sox_write_handler( sbyte* path, sbyte* filetype, sbyte** filetype1 );
	}
	[Flags]
	public enum lsx_getopt_flags_t : uint {
		lsx_getopt_flag_none =     0,
		lsx_getopt_flag_opterr =   1,
		lsx_getopt_flag_longonly = 2,
	}
	public enum lsx_io_type : uint {
		lsx_io_file = 0,
		lsx_io_pipe = 1,
		lsx_io_url =  2,
	}
	public enum lsx_option_arg_t : uint {
		lsx_option_arg_none =     0,
		lsx_option_arg_required = 1,
		lsx_option_arg_optional = 2,
	}
	public enum sox_bool : int {
		sox_bool_dummy = -1,
		sox_false =       0,
		sox_true =        1,
	}
	public enum sox_encoding_t : uint {
		SOX_ENCODING_UNKNOWN =     0,
		SOX_ENCODING_SIGN2 =       1,
		SOX_ENCODING_UNSIGNED =    2,
		SOX_ENCODING_FLOAT =       3,
		SOX_ENCODING_FLOAT_TEXT =  4,
		SOX_ENCODING_FLAC =        5,
		SOX_ENCODING_HCOM =        6,
		SOX_ENCODING_WAVPACK =     7,
		SOX_ENCODING_WAVPACKF =    8,
		SOX_ENCODING_ULAW =        9,
		SOX_ENCODING_ALAW =       10,
		SOX_ENCODING_G721 =       11,
		SOX_ENCODING_G723 =       12,
		SOX_ENCODING_CL_ADPCM =   13,
		SOX_ENCODING_CL_ADPCM16 = 14,
		SOX_ENCODING_MS_ADPCM =   15,
		SOX_ENCODING_IMA_ADPCM =  16,
		SOX_ENCODING_OKI_ADPCM =  17,
		SOX_ENCODING_DPCM =       18,
		SOX_ENCODING_DWVW =       19,
		SOX_ENCODING_DWVWN =      20,
		SOX_ENCODING_GSM =        21,
		SOX_ENCODING_MP3 =        22,
		SOX_ENCODING_VORBIS =     23,
		SOX_ENCODING_AMR_WB =     24,
		SOX_ENCODING_AMR_NB =     25,
		SOX_ENCODING_CVSD =       26,
		SOX_ENCODING_LPC10 =      27,
		SOX_ENCODING_OPUS =       28,
		SOX_ENCODINGS =           29,
	}
	[Flags]
	public enum sox_encodings_flags_t : uint {
		sox_encodings_none =   0,
		sox_encodings_lossy1 = 1,
		sox_encodings_lossy2 = 2,
	}
	public enum sox_error_t : int {
		SOX_SUCCESS =    0,
		SOX_EOF =       -1,
		SOX_EHDR =    2000,
		SOX_EFMT =    2001,
		SOX_ENOMEM =  2002,
		SOX_EPERM =   2003,
		SOX_ENOTSUP = 2004,
		SOX_EINVAL =  2005,
	}
	[Flags]
	public enum sox_loop_flags_t : uint {
		sox_loop_none =           0,
		sox_loop_forward =        1,
		sox_loop_forward_back =   2,
		sox_loop_8 =             32,
		sox_loop_sustain_decay = 64,
	}
	public enum sox_option_t : uint {
		sox_option_no =      0,
		sox_option_yes =     1,
		sox_option_default = 2,
	}
	public enum sox_plot_t : uint {
		sox_plot_off =     0,
		sox_plot_octave =  1,
		sox_plot_gnuplot = 2,
		sox_plot_data =    3,
	}
	[Flags]
	public enum sox_version_flags_t : uint {
		sox_version_none =         0,
		sox_version_have_popen =   1,
		sox_version_have_magic =   2,
		sox_version_have_threads = 4,
		sox_version_have_memopen = 8,
	}
	public enum UnnamedEnum_E858CA5E : uint {
		lsx_static_assert_sox_int8_size = 1,
	}
	public enum UnnamedEnum_E858CA81 : uint {
		lsx_static_assert_sox_uint8_size = 1,
	}
	public enum UnnamedEnum_E858CBA8 : uint {
		lsx_static_assert_sox_int64_size = 1,
	}
	public enum UnnamedEnum_E858CBCB : uint {
		lsx_static_assert_sox_uint64_size = 1,
	}
	public enum UnnamedEnum_E858CBEA : uint {
		lsx_static_assert_sox_int32_size = 1,
	}
	public enum UnnamedEnum_E858CC0D : uint {
		lsx_static_assert_sox_uint32_size = 1,
	}
	public enum UnnamedEnum_E858CC2C : uint {
		lsx_static_assert_sox_int16_size = 1,
	}
	public enum UnnamedEnum_E858CC4F : uint {
		lsx_static_assert_sox_uint16_size = 1,
	}
	public enum UnnamedEnum_E859E3C7 : uint {
		lsx_find_enum_item_none =           0,
		lsx_find_enum_item_case_sensitive = 1,
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct lsx_enum_item {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String text;
		[ExplicitOffset( Offset = 4 )]
		public uint value;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 4 )]
	public partial struct lsx_getopt_t {
		[ExplicitOffset( Offset = 0 )]
		public int argc;
		[ExplicitOffset( Offset = 4 )]
		public sbyte** argv;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* shortopts;
		[ExplicitOffset( Offset = 12 )]
		public lsx_option_t* longopts;
		[ExplicitOffset( Offset = 16 )]
		public lsx_getopt_flags_t flags;
		[ExplicitOffset( Offset = 20 )]
		public sbyte* curpos;
		[ExplicitOffset( Offset = 24 )]
		public int ind;
		[ExplicitOffset( Offset = 28 )]
		public int opt;
		[ExplicitOffset( Offset = 32 )]
		public sbyte* arg;
		[ExplicitOffset( Offset = 36 )]
		public int lngind;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct lsx_option_t {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 4 )]
		public lsx_option_arg_t has_arg;
		[ExplicitOffset( Offset = 8 )]
		public int* flag;
		[ExplicitOffset( Offset = 12 )]
		public int val;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_effect_handler_t {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 4 )]
		public sbyte* usage;
		[ExplicitOffset( Offset = 8 )]
		public uint flags;
		[ExplicitOffset( Offset = 12 )]
		public Functors.Func<sox_effect_t*, int, sbyte**, int>* getopts;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<sox_effect_t*, int>* start;
		[ExplicitOffset( Offset = 20 )]
		public Functors.Func<sox_effect_t*, int*, int*, uint*, uint*, int>* flow;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<sox_effect_t*, int*, uint*, int>* drain;
		[ExplicitOffset( Offset = 28 )]
		public Functors.Func<sox_effect_t*, int>* stop;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<sox_effect_t*, int>* kill;
		[ExplicitOffset( Offset = 36 )]
		public uint priv_size;
	}
	[ExplicitSize( Size = 144 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_effect_t {
		[ExplicitOffset( Offset = 0 )]
		public sox_effects_globals_t* global_info;
		[ExplicitOffset( Offset = 4 )]
		public sox_signalinfo_t in_signal;
		[ExplicitOffset( Offset = 32 )]
		public sox_signalinfo_t out_signal;
		[ExplicitOffset( Offset = 60 )]
		public sox_encodinginfo_t* in_encoding;
		[ExplicitOffset( Offset = 64 )]
		public sox_encodinginfo_t* out_encoding;
		[ExplicitOffset( Offset = 68 )]
		public sox_effect_handler_t handler;
		[ExplicitOffset( Offset = 108 )]
		public ulong clips;
		[ExplicitOffset( Offset = 116 )]
		public uint flows;
		[ExplicitOffset( Offset = 120 )]
		public uint flow;
		[ExplicitOffset( Offset = 124 )]
		public void* priv;
		[ExplicitOffset( Offset = 128 )]
		public int* obuf;
		[ExplicitOffset( Offset = 132 )]
		public uint obeg;
		[ExplicitOffset( Offset = 136 )]
		public uint oend;
		[ExplicitOffset( Offset = 140 )]
		public uint imin;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_effects_chain_t {
		[ExplicitOffset( Offset = 0 )]
		public sox_effect_t** effects;
		[ExplicitOffset( Offset = 4 )]
		public uint length;
		[ExplicitOffset( Offset = 8 )]
		public sox_effects_globals_t global_info;
		[ExplicitOffset( Offset = 16 )]
		public sox_encodinginfo_t* in_enc;
		[ExplicitOffset( Offset = 20 )]
		public sox_encodinginfo_t* out_enc;
		[ExplicitOffset( Offset = 24 )]
		public uint table_size;
		[ExplicitOffset( Offset = 28 )]
		public int* il_buf;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_effects_globals_t {
		[ExplicitOffset( Offset = 0 )]
		public sox_plot_t plot;
		[ExplicitOffset( Offset = 4 )]
		public sox_globals_t* global_info;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_encodinginfo_t {
		[ExplicitOffset( Offset = 0 )]
		public sox_encoding_t encoding;
		[ExplicitOffset( Offset = 4 )]
		public uint bits_per_sample;
		[ExplicitOffset( Offset = 8 )]
		public double compression;
		[ExplicitOffset( Offset = 16 )]
		public sox_option_t reverse_bytes;
		[ExplicitOffset( Offset = 20 )]
		public sox_option_t reverse_nibbles;
		[ExplicitOffset( Offset = 24 )]
		public sox_option_t reverse_bits;
		[ExplicitOffset( Offset = 28 )]
		public sox_bool opposite_endian;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_encodings_info_t {
		[ExplicitOffset( Offset = 0 )]
		public sox_encodings_flags_t flags;
		[ExplicitOffset( Offset = 4 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* desc;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_fileinfo_t {
		[ExplicitOffset( Offset = 0 )]
		public sbyte* buf;
		[ExplicitOffset( Offset = 4 )]
		public uint size;
		[ExplicitOffset( Offset = 8 )]
		public uint count;
		[ExplicitOffset( Offset = 12 )]
		public uint pos;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_format_handler_t {
		[ExplicitOffset( Offset = 0 )]
		public uint sox_lib_version_code;
		[ExplicitOffset( Offset = 4 )]
		public CUtf8String description;
		[ExplicitOffset( Offset = 8 )]
		public sbyte** names;
		[ExplicitOffset( Offset = 12 )]
		public uint flags;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<sox_format_t*, int>* startread;
		[ExplicitOffset( Offset = 20 )]
		public Functors.Func<sox_format_t*, int*, uint, uint>* read;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<sox_format_t*, int>* stopread;
		[ExplicitOffset( Offset = 28 )]
		public Functors.Func<sox_format_t*, int>* startwrite;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<sox_format_t*, int*, uint, uint>* write;
		[ExplicitOffset( Offset = 36 )]
		public Functors.Func<sox_format_t*, int>* stopwrite;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<sox_format_t*, ulong, int>* seek;
		[ExplicitOffset( Offset = 44 )]
		public uint* write_formats;
		[ExplicitOffset( Offset = 48 )]
		public double* write_rates;
		[ExplicitOffset( Offset = 52 )]
		public uint priv_size;
	}
	[ExplicitSize( Size = 640 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_format_t {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String filename;
		[ExplicitOffset( Offset = 4 )]
		public sox_signalinfo_t signal;
		[ExplicitOffset( Offset = 32 )]
		public sox_encodinginfo_t encoding;
		[ExplicitOffset( Offset = 64 )]
		public sbyte* filetype;
		[ExplicitOffset( Offset = 68 )]
		public sox_oob_t oob;
		[ExplicitOffset( Offset = 272 )]
		public sox_bool seekable;
		[ExplicitOffset( Offset = 276 )]
		public sbyte mode;
		[ExplicitOffset( Offset = 280 )]
		public ulong olength;
		[ExplicitOffset( Offset = 288 )]
		public ulong clips;
		[ExplicitOffset( Offset = 296 )]
		public int sox_errno;
		[ExplicitOffset( Offset = 300 )]
		public sbyte[256] sox_errstr;
		[ExplicitOffset( Offset = 556 )]
		public void* fp;
		[ExplicitOffset( Offset = 560 )]
		public lsx_io_type io_type;
		[ExplicitOffset( Offset = 564 )]
		public ulong tell_off;
		[ExplicitOffset( Offset = 572 )]
		public ulong data_start;
		[ExplicitOffset( Offset = 580 )]
		public sox_format_handler_t handler;
		[ExplicitOffset( Offset = 636 )]
		public void* priv;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_format_tab_t {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 4 )]
		public Functors.Func<sox_format_handler_t*>* fn;
	}
	[ExplicitSize( Size = 52 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_globals_t {
		[ExplicitOffset( Offset = 0 )]
		public uint verbosity;
		[ExplicitOffset( Offset = 4 )]
		public Functors.Action<uint, sbyte*, sbyte*, sbyte*>* output_message_handler;
		[ExplicitOffset( Offset = 8 )]
		public sox_bool repeatable;
		[ExplicitOffset( Offset = 12 )]
		public uint bufsiz;
		[ExplicitOffset( Offset = 16 )]
		public uint input_bufsiz;
		[ExplicitOffset( Offset = 20 )]
		public int ranqd1;
		[ExplicitOffset( Offset = 24 )]
		public sbyte* stdin_in_use_by;
		[ExplicitOffset( Offset = 28 )]
		public sbyte* stdout_in_use_by;
		[ExplicitOffset( Offset = 32 )]
		public sbyte* subsystem;
		[ExplicitOffset( Offset = 36 )]
		public sbyte* tmp_path;
		[ExplicitOffset( Offset = 40 )]
		public sox_bool use_magic;
		[ExplicitOffset( Offset = 44 )]
		public sox_bool use_threads;
		[ExplicitOffset( Offset = 48 )]
		public uint log2_dft_min_size;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_instrinfo_t {
		[ExplicitOffset( Offset = 0 )]
		public sbyte MIDInote;
		[ExplicitOffset( Offset = 1 )]
		public sbyte MIDIlow;
		[ExplicitOffset( Offset = 2 )]
		public sbyte MIDIhi;
		[ExplicitOffset( Offset = 3 )]
		public byte loopmode;
		[ExplicitOffset( Offset = 4 )]
		public uint nloops;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_loopinfo_t {
		[ExplicitOffset( Offset = 0 )]
		public ulong start;
		[ExplicitOffset( Offset = 8 )]
		public ulong length;
		[ExplicitOffset( Offset = 16 )]
		public uint count;
		[ExplicitOffset( Offset = 20 )]
		public byte type;
	}
	[ExplicitSize( Size = 204 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_oob_t {
		[ExplicitOffset( Offset = 0 )]
		public sbyte** comments;
		[ExplicitOffset( Offset = 4 )]
		public sox_instrinfo_t instr;
		[ExplicitOffset( Offset = 12 )]
		public sox_loopinfo_t[8] loops;
	}
	[ExplicitSize( Size = 28 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_signalinfo_t {
		[ExplicitOffset( Offset = 0 )]
		public double rate;
		[ExplicitOffset( Offset = 8 )]
		public uint channels;
		[ExplicitOffset( Offset = 12 )]
		public uint precision;
		[ExplicitOffset( Offset = 16 )]
		public ulong length;
		[ExplicitOffset( Offset = 24 )]
		public double* mult;
	}
	[ExplicitSize( Size = 36 )]
	[Alignment( Boundary = 4 )]
	public partial struct sox_version_info_t {
		[ExplicitOffset( Offset = 0 )]
		public uint size;
		[ExplicitOffset( Offset = 4 )]
		public sox_version_flags_t flags;
		[ExplicitOffset( Offset = 8 )]
		public uint version_code;
		[ExplicitOffset( Offset = 12 )]
		public CUtf8String version;
		[ExplicitOffset( Offset = 16 )]
		public CUtf8String version_extra;
		[ExplicitOffset( Offset = 20 )]
		public sbyte* time;
		[ExplicitOffset( Offset = 24 )]
		public sbyte* distro;
		[ExplicitOffset( Offset = 28 )]
		public sbyte* compiler;
		[ExplicitOffset( Offset = 32 )]
		public sbyte* arch;
	}
}