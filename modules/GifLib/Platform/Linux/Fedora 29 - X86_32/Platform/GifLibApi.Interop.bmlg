//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

namespace Platform.GifLib {
	[ExternLibrary( Image = "/usr/lib/libgif.so.7" )]
	public static partial struct GifLibApi {
		public extern static int DGifCloseFile( GifFileType* gifFile, int* errorCode );
		public extern static int DGifExtensionToGCB( uint gifExtensionLength, byte* gifExtension, GraphicsControlBlock* gCB );
		public extern static int DGifGetCode( GifFileType* gifFile, int* gifCodeSize, byte** gifCodeBlock );
		public extern static int DGifGetCodeNext( GifFileType* gifFile, byte** gifCodeBlock );
		public extern static int DGifGetExtension( GifFileType* gifFile, int* gifExtCode, byte** gifExtension );
		public extern static int DGifGetExtensionNext( GifFileType* gifFile, byte** gifExtension );
		public extern static int DGifGetImageDesc( GifFileType* gifFile );
		public extern static int DGifGetLine( GifFileType* gifFile, byte* gifLine, int gifLineLen );
		public extern static int DGifGetLZCodes( GifFileType* gifFile, int* gifCode );
		public extern static int DGifGetPixel( GifFileType* gifFile, byte gifPixel );
		public extern static int DGifGetRecordType( GifFileType* gifFile, GifRecordType* gifType );
		public extern static int DGifGetScreenDesc( GifFileType* gifFile );
		public extern static GifFileType* DGifOpen( void* userPtr, Functors.Func<GifFileType*, byte*, int, int> readFunc, int* error );
		public extern static GifFileType* DGifOpenFileHandle( int gifFileHandle, int* error );
		public extern static GifFileType* DGifOpenFileName( CUtf8String gifFileName, int* error );
		public extern static int DGifSavedExtensionToGCB( GifFileType* gifFile, int imageIndex, GraphicsControlBlock* gCB );
		public extern static int DGifSlurp( GifFileType* gifFile );
		public extern static int EGifCloseFile( GifFileType* gifFile, int* errorCode );
		public extern static uint EGifGCBToExtension( GraphicsControlBlock* gCB, byte* gifExtension );
		public extern static int EGifGCBToSavedExtension( GraphicsControlBlock* gCB, GifFileType* gifFile, int imageIndex );
		public extern static sbyte* EGifGetGifVersion( GifFileType* gifFile );
		public extern static GifFileType* EGifOpen( void* userPtr, Functors.Func<GifFileType*, byte*, int, int> writeFunc, int* error );
		public extern static GifFileType* EGifOpenFileHandle( int gifFileHandle, int* error );
		public extern static GifFileType* EGifOpenFileName( CUtf8String gifFileName, int gifTestExistance, int* error );
		public extern static int EGifPutCode( GifFileType* gifFile, int gifCodeSize, byte* gifCodeBlock );
		public extern static int EGifPutCodeNext( GifFileType* gifFile, byte* gifCodeBlock );
		public extern static int EGifPutComment( GifFileType* gifFile, CUtf8String gifComment );
		public extern static int EGifPutExtension( GifFileType* gifFile, int gifExtCode, int gifExtLen, void* gifExtension );
		public extern static int EGifPutExtensionBlock( GifFileType* gifFile, int gifExtLen, void* gifExtension );
		public extern static int EGifPutExtensionLeader( GifFileType* gifFile, int gifExtCode );
		public extern static int EGifPutExtensionTrailer( GifFileType* gifFile );
		public extern static int EGifPutImageDesc( GifFileType* gifFile, int gifLeft, int gifTop, int width, int gifHeight, int gifInterlace, ColorMapObject* gifColorMap );
		public extern static int EGifPutLine( GifFileType* gifFile, byte* gifLine, int gifLineLen );
		public extern static int EGifPutPixel( GifFileType* gifFile, byte gifPixel );
		public extern static int EGifPutScreenDesc( GifFileType* gifFile, int gifWidth, int gifHeight, int gifColorRes, int gifBackGround, ColorMapObject* gifColorMap );
		public extern static void EGifSetGifVersion( CUtf8String version, bool gif89 );
		public extern static int EGifSpew( GifFileType* gifFile );
		public extern static int GifAddExtensionBlock( int* extensionBlockCount, ExtensionBlock** extensionBlocks, int function, uint len, byte* extData );
		public extern static void GifApplyTranslation( SavedImage* image, byte* translation );
		public extern static int GifBitSize( int n );
		public extern static void GifDrawBox( SavedImage* image, int x, int y, int w, int d, int color );
		public extern static void GifDrawBoxedText8x8( SavedImage* image, int x, int y, CUtf8String legend, int border, int bg, int fg );
		public extern static void GifDrawRectangle( SavedImage* image, int x, int y, int w, int d, int color );
		public extern static void GifDrawText8x8( SavedImage* image, int x, int y, CUtf8String legend, int color );
		public extern static sbyte* GifErrorString( int errorCode );
		public extern static void GifFreeExtensions( int* extensionBlockCount, ExtensionBlock** extensionBlocks );
		public extern static void GifFreeMapObject( ColorMapObject* object );
		public extern static void GifFreeSavedImages( GifFileType* gifFile );
		public extern static ColorMapObject* GifMakeMapObject( int colorCount, GifColorType* colorMap );
		public extern static SavedImage* GifMakeSavedImage( GifFileType* gifFile, SavedImage* copyFrom );
		public extern static int GifQuantizeBuffer( uint width, uint height, int* colorMapSize, byte* redInput, byte* greenInput, byte* blueInput, byte* outputBuffer, GifColorType* outputColorMap );
		public extern static ColorMapObject* GifUnionColorMap( ColorMapObject* colorIn1, ColorMapObject* colorIn2, byte* colorTransIn2 );
	}
	public enum GifRecordType : uint {
		UNDEFINED_RECORD_TYPE =   0,
		SCREEN_DESC_RECORD_TYPE = 1,
		IMAGE_DESC_RECORD_TYPE =  2,
		EXTENSION_RECORD_TYPE =   3,
		TERMINATE_RECORD_TYPE =   4,
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct ColorMapObject {
		[ExplicitOffset( Offset = 0 )]
		public int ColorCount;
		[ExplicitOffset( Offset = 4 )]
		public int BitsPerPixel;
		[ExplicitOffset( Offset = 8 )]
		public bool SortFlag;
		[ExplicitOffset( Offset = 12 )]
		public GifColorType* Colors;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct ExtensionBlock {
		[ExplicitOffset( Offset = 0 )]
		public int ByteCount;
		[ExplicitOffset( Offset = 4 )]
		public byte* Bytes;
		[ExplicitOffset( Offset = 8 )]
		public int Function;
	}
	[ExplicitSize( Size = 3 )]
	public partial struct GifColorType {
		[ExplicitOffset( Offset = 0 )]
		public byte Red;
		[ExplicitOffset( Offset = 1 )]
		public byte Green;
		[ExplicitOffset( Offset = 2 )]
		public byte Blue;
	}
	[ExplicitSize( Size = 76 )]
	[Alignment( Boundary = 4 )]
	public partial struct GifFileType {
		[ExplicitOffset( Offset = 0 )]
		public int SWidth;
		[ExplicitOffset( Offset = 4 )]
		public int SHeight;
		[ExplicitOffset( Offset = 8 )]
		public int SColorResolution;
		[ExplicitOffset( Offset = 12 )]
		public int SBackGroundColor;
		[ExplicitOffset( Offset = 16 )]
		public byte AspectByte;
		[ExplicitOffset( Offset = 20 )]
		public ColorMapObject* SColorMap;
		[ExplicitOffset( Offset = 24 )]
		public int ImageCount;
		[ExplicitOffset( Offset = 28 )]
		public GifImageDesc Image;
		[ExplicitOffset( Offset = 52 )]
		public SavedImage* SavedImages;
		[ExplicitOffset( Offset = 56 )]
		public int ExtensionBlockCount;
		[ExplicitOffset( Offset = 60 )]
		public ExtensionBlock* ExtensionBlocks;
		[ExplicitOffset( Offset = 64 )]
		public int Error;
		[ExplicitOffset( Offset = 68 )]
		public void* UserData;
		[ExplicitOffset( Offset = 72 )]
		public void* Private;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct GifImageDesc {
		[ExplicitOffset( Offset = 0 )]
		public int Left;
		[ExplicitOffset( Offset = 4 )]
		public int Top;
		[ExplicitOffset( Offset = 8 )]
		public int Width;
		[ExplicitOffset( Offset = 12 )]
		public int Height;
		[ExplicitOffset( Offset = 16 )]
		public bool Interlace;
		[ExplicitOffset( Offset = 20 )]
		public ColorMapObject* ColorMap;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct GraphicsControlBlock {
		[ExplicitOffset( Offset = 0 )]
		public int DisposalMode;
		[ExplicitOffset( Offset = 4 )]
		public bool UserInputFlag;
		[ExplicitOffset( Offset = 8 )]
		public int DelayTime;
		[ExplicitOffset( Offset = 12 )]
		public int TransparentColor;
	}
	[ExplicitSize( Size = 36 )]
	[Alignment( Boundary = 4 )]
	public partial struct SavedImage {
		[ExplicitOffset( Offset = 0 )]
		public GifImageDesc ImageDesc;
		[ExplicitOffset( Offset = 24 )]
		public byte* RasterBits;
		[ExplicitOffset( Offset = 28 )]
		public int ExtensionBlockCount;
		[ExplicitOffset( Offset = 32 )]
		public ExtensionBlock* ExtensionBlocks;
	}
}