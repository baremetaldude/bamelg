//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Diagnostics;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Platform.Glib {
	public functor int GSourceFunc( void* data );
	public functor int GDestroyNotify( void* data );

	public static partial struct GlibApi {
		public extern static GMemVTable* glib_mem_profiler_table;
	}

	public static partial struct GObjectApi {
		public extern static void* g_object_new( GType type, void* propertyName );

		public static T* g_object_new<T>() { return ( T* ) g_object_new( T.Class.TypeID, null ); }
		public static T* g_cast<T>( GObject* object ) { return ( T* ) GObjectApi.g_type_check_instance_cast( object, T.Class.TypeID ); }
	}

	[BreakConstructorDestructorChaining]
	public partial struct GObject {
		public void AddReference() { GObjectApi.g_object_ref( &this ); }
		public void ReleaseReference() { GObjectApi.g_object_unref( &this ); }

		public CUtf8String TypeName { get { return GObjectApi.g_type_name( g_class->g_type ); } }

		public uint ConnectSignalHandler<TThis>( CUtf8String name, Delegates.Action<TThis*> action ) {
			bitcast<RuntimeObjectBase>( action ).AddReference();
			return GObjectApi.g_signal_connect_data( &this, name, ( sender, data ) => { bitcast<Delegates.Action<TThis*>>( data )( cast<TThis*>( sender ) ); }, bitcast<void*>( action ), ( x, y ) => { bitcast<RuntimeObjectBase>( x ).ReleaseReference(); }, 1 );
		}

		public void DisconnectSignalHandler( uint id ) {
			if( GObjectApi.g_signal_handler_is_connected( &this, id ) )
				GObjectApi.g_signal_handler_disconnect( &this, id );
		}

		public static int RegisterClass<TBase, TCurrent>( Functors.Action<TCurrent&> instanceInit, Functors.Action<TCurrent.Class&> classInit ) {
			return GlibApi.g_type_register_static_simple( TBase.Class.TypeID, GlibApi.g_intern_static_string( typeof( TCurrent ).Name.GetChars() ), sizeof( TCurrent.Class ), bitcast<GClassInitFunc>( classInit ), sizeof( TCurrent ), bitcast<GInstanceInitFunc>( instanceInit ), 0 );
		}

		public GValue Property[CUtf8String name] {
			get {
				GValue result;
				GObjectApi.g_object_get_property( &this, name, result );
				return result;
			}
			set {
				GObjectApi.g_object_set_property( &this, name, value );
			}
		}

		public partial struct Class {
			public static GType Register( GType parent_type, Utf8String type_name, uint class_size, Functors.Action<void*, void*> class_init, uint instance_size, Functors.Action<GTypeInstance*, void*> instance_init ) {
				return GObjectApi.g_type_register_static_simple( parent_type, GlibApi.g_intern_static_string( type_name ), class_size, class_init, instance_size, instance_init, 0 );
			}

			public static GType Register( GType parent_type, Utf8String type_name, uint class_size, [In] System.Reflection.UserType.Method& class_init, uint instance_size, [In] System.Reflection.UserType.Method& instance_init ) {
				return Register( parent_type, type_name, class_size, bitcast<Functors.Action<void*, void*>>( class_init.Address ), instance_size, bitcast<Functors.Action<GTypeInstance*, void*>>( instance_init.Address ) );
			}
		}
	}

	public partial struct GClosure {
		public void AddReference() { GObjectApi.g_closure_ref( &this ); }
		public void ReleaseReference() { GObjectApi.g_closure_unref( &this ); }
	}

	// GValue usage:
	// using( var tmpValue = new GValue( userName ) )
	//		GtkApi.gtk_list_store_set_value( _model, iter, 1, tmpValue );
	
	// Not allowed to have destructor here since it can affect iterop structs
	public partial struct GValue : IDisposable {
		public GValue() {
			Memory.Clear( &this, sizeof( this ) );
		}

		public void Dispose() {
			GObjectApi.g_value_unset( &this );
		}

		public GValue( bool value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_BOOLEAN );
			Bool = value;
		}

		public GValue( sbyte value )
			: this() {

			GObjectApi.g_value_init( &this, GType.G_TYPE_CHAR );
			Int8 = value;
		}

		public GValue( byte value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_UCHAR );
			UInt8 = value;
		}

		public GValue( int value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_INT );
			Int32 = value;
		}

		public GValue( uint value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_UINT );
			UInt32 = value;
		}

		public GValue( long value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_INT64 );
			Int64 = value;
		}

		public GValue( ulong value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_UINT64 );
			UInt64 = value;
		}

		public GValue( float value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_FLOAT );
			Float = value;
		}

		public GValue( double value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_DOUBLE );
			Double = value;
		}

		public GValue( CUtf8String value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_STRING );
			String = value;
		}

		public GValue( Utf16String value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_STRING );
			String = ( Utf8String ) value;
		}

		public GValue( Utf32String value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_STRING );
			String = ( Utf8String ) value;
		}

		public GValue( void* value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_POINTER );
			Pointer = value;
		}

		public GValue( GObject* value )
			: this() {
			GObjectApi.g_value_init( &this, GType.G_TYPE_OBJECT );
			Object = value;
		}

		public static GValue FromStaticString( CUtf8String value ) {
			var result = new GValue();
			GObjectApi.g_value_init( &result, GType.G_TYPE_STRING );
			result.StaticString = value;
			return result;
		}

		public static implicit operator thistype( bool value ) { return new GValue( value ); }
		public static implicit operator thistype( sbyte value ) { return new GValue( value ); }
		public static implicit operator thistype( byte value ) { return new GValue( value ); }
		public static implicit operator thistype( int value ) { return new GValue( value ); }
		public static implicit operator thistype( uint value ) { return new GValue( value ); }
		public static implicit operator thistype( long value ) { return new GValue( value ); }
		public static implicit operator thistype( ulong value ) { return new GValue( value ); }
		public static implicit operator thistype( float value ) { return new GValue( value ); }
		public static implicit operator thistype( double value ) { return new GValue( value ); }

		// Dont' create memleak-like methods like
		// 'public static implicit operator thistype( CUtf8String value ) { return new GValue( value ); }'
		// Instead use something like:
		//  using( var gval = new GValue( someString ) ) {
		//      // use gval here
		//  }

		public bool Bool {
			get { return GObjectApi.g_value_get_boolean( &this ); }
			set { GObjectApi.g_value_set_boolean( &this, value ); }
		}

		public sbyte Int8 {
			get { return GObjectApi.g_value_get_char( &this ); }
			set { GObjectApi.g_value_set_char( &this, value ); }
		}

		public byte UInt8 {
			get { return GObjectApi.g_value_get_uchar( &this ); }
			set { GObjectApi.g_value_set_uchar( &this, value ); }
		}

		public int Int32 {
			get { return GObjectApi.g_value_get_int( &this ); }
			set { GObjectApi.g_value_set_int( &this, value ); }
		}

		public uint UInt32 {
			get { return GObjectApi.g_value_get_uint( &this ); }
			set { GObjectApi.g_value_set_uint( &this, value ); }
		}

		public long Int64 {
			get { return GObjectApi.g_value_get_int64( &this ); }
			set { GObjectApi.g_value_set_int64( &this, value ); }
		}

		public ulong UInt64 {
			get { return GObjectApi.g_value_get_uint64( &this ); }
			set { GObjectApi.g_value_set_uint64( &this, value ); }
		}

		public float Float {
			get { return GObjectApi.g_value_get_float( &this ); }
			set { GObjectApi.g_value_set_float( &this, value ); }
		}

		public double Double {
			get { return GObjectApi.g_value_get_double( &this ); }
			set { GObjectApi.g_value_set_double( &this, value ); }
		}

		public void* Pointer {
			get { return GObjectApi.g_value_get_pointer( &this ); }
			set { GObjectApi.g_value_set_pointer( &this, value ); }
		}

		public GObject* Object {
			get { return ( GObject* ) GObjectApi.g_value_get_object( &this ); }
			set { GObjectApi.g_value_set_object( &this, value ); }
		}

		public CUtf8String String {
			get { return GObjectApi.g_value_get_string( &this ); }
			set { GObjectApi.g_value_set_string( &this, value ); }
		}

		public CUtf8String StaticString {
			get { return GObjectApi.g_value_get_string( &this ); }
			set { GObjectApi.g_value_set_static_string( &this, value ); }
		}

		public GType GetType() {
			return GObjectApi.g_value_get_gtype( &this );
		}
	}

	// GValueScoped usage:
	// GtkApi.gtk_list_store_set_value( _model, iter, 1, new GValueScoped( userName ) );
	public partial struct GValueScoped : GValue {
		public GValueScoped() { }

		=GValueScoped() {
			Assert.Fail( "Copy not allowed" );
			Environment.Abort( 1 );
		}

		~GValueScoped() {
			Dispose();
		}

		public GValueScoped( bool value )
			: base( value ) { }

		public GValueScoped( sbyte value )
			: base( value ) { }

		public GValueScoped( byte value )
			: base( value ) { }

		public GValueScoped( int value )
			: base( value ) { }

		public GValueScoped( uint value )
			: base( value ) { }

		public GValueScoped( long value )
			: base( value ) { }

		public GValueScoped( ulong value )
			: base( value ) { }

		public GValueScoped( float value )
			: base( value ) { }

		public GValueScoped( double value )
			: base( value ) { }

		public GValueScoped( CUtf8String value )
			: base( value ) { }

		public GValueScoped( Utf16String value )
			: base( value ) { }

		public GValueScoped( Utf32String value )
			: base( value ) { }

		public GValueScoped( void* value )
			: base( value ) { }

		public GValueScoped( GObject* value )
			: base( value ) { }
	}

	public partial struct GMainContext {
		public static GMainContext* Default { get { return GlibApi.g_main_context_default(); } }

		public void EventLoopSubscribe() {
			GlibApi.g_main_context_set_poll_func( &this, poll_handler );
		}

		private static int poll_handler( GPollFD* passedHandles, uint count, int timeout ) {
			if( Platform.IO.EventLoop.Instance != null ) return Platform.IO.EventLoop.Instance.Poll( ( Platform.Libc.pollfd* ) passedHandles, count, timeout );
			return Platform.Libc.LibcApi.poll( ( Platform.Libc.pollfd* ) passedHandles, count, timeout );
		}
	}

	public partial struct GSource {
		public void AddReference() { GlibApi.g_source_ref( &this ); }
		public void ReleaseReference() { GlibApi.g_source_unref( &this ); }

		public void Detach() { GlibApi.g_source_destroy( &this ); }
	}

	public static struct GlibDispatcher {
		public static void BeginInvoke( Functors.Action action ) {
			GlibApi.g_idle_add( data => { bitcast<Functors.Action>( data )(); return false; }, bitcast<void*>( action ) );
		}

		public static void BeginInvoke( Delegates.Action action ) {
			var data = heapalloc Tuple<Delegates.Action> {
				Item1 = action
			};

			GlibApi.g_idle_add_full( GlibTaskPriority.G_PRIORITY_DEFAULT_IDLE, passedData => {
				var tuple = ( Tuple<Delegates.Action>* ) passedData;
				tuple->Item1();
				return false;
			}, data, passedData => {
				var tuple = ( Tuple<Delegates.Action>* ) passedData;
				heapfree tuple;
			} );
		}

		public static void BeginInvoke( TimeSpan timeout, Delegates.Action action ) {
			var data = heapalloc Tuple<Delegates.Action> {
				Item1 = action
			};

			GlibApi.g_timeout_add_full( GlibTaskPriority.G_PRIORITY_DEFAULT_IDLE, ( uint ) timeout.TotalMilliseconds, passedData => {
				var tuple = ( Tuple<Delegates.Action>* ) passedData;
				tuple->Item1();
				return false;
			}, data, passedData => {
				var tuple = ( Tuple<Delegates.Action>* ) passedData;
				heapfree tuple;
			} );
		}

		public static void BeginInvoke<T0>( Delegates.Action<T0> action, T0 p0 ) {
			var data = heapalloc Tuple<Delegates.Action<T0>, T0> {
				Item1 = action,
				Item2 = p0
			};

			GlibApi.g_idle_add_full( GlibTaskPriority.G_PRIORITY_DEFAULT_IDLE, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0>, T0>* ) passedData;
				tuple->Item1( tuple->Item2 );
				return false;
			}, data, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0>, T0>* ) passedData;
				heapfree tuple;
			} );
		}

		public static void BeginInvoke<T0>( TimeSpan timeout, Delegates.Action<T0> action, T0 p0 ) {
			var data = heapalloc Tuple<Delegates.Action<T0>, T0> {
				Item1 = action,
				Item2 = p0
			};

			GlibApi.g_timeout_add_full( GlibTaskPriority.G_PRIORITY_DEFAULT_IDLE, ( uint ) timeout.TotalMilliseconds, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0>, T0>* ) passedData;
				tuple->Item1( tuple->Item2 );
				return false;
			}, data, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0>, T0>* ) passedData;
				heapfree tuple;
			} );
		}

		public void BeginInvoke<T0, T1>( Delegates.Action<T0, T1> action, T0 p0, T1 p1 ) {
			var data = heapalloc Tuple<Delegates.Action<T0, T1>, T0, T1> {
				Item1 = action,
				Item2 = p0,
				Item3 = p1
			};

			GlibApi.g_idle_add_full( GlibTaskPriority.G_PRIORITY_DEFAULT_IDLE, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0, T1>, T0, T1>* ) passedData;
				tuple->Item1( tuple->Item2, tuple->Item3 );
				return false;
			}, data, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0, T1>, T0, T1>* ) passedData;
				heapfree tuple;
			} );
		}

		public void BeginInvoke<T0, T1>( TimeSpan timeout, Delegates.Action<T0, T1> action, T0 p0, T1 p1 ) {
			var data = heapalloc Tuple<Delegates.Action<T0, T1>, T0, T1> {
				Item1 = action,
				Item2 = p0,
				Item3 = p1
			};

			GlibApi.g_timeout_add_full( GlibTaskPriority.G_PRIORITY_DEFAULT_IDLE, ( uint ) timeout.TotalMilliseconds, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0, T1>, T0, T1>* ) passedData;
				tuple->Item1( tuple->Item2, tuple->Item3 );
				return false;
			}, data, passedData => {
				var tuple = ( Tuple<Delegates.Action<T0, T1>, T0, T1>* ) passedData;
				heapfree tuple;
			} );
		}
	}
}

namespace System {
	public static partial struct Assert {
		public static bool Check( Platform.Glib.GError* error, [In] CallerContext& callercontext = nullref ) {
			if( error != null ) {
				Console.Write( error->message );
				Console.Write( " at line " );
				Console.Write( callercontext.Row );

				PrintContextInfo( callercontext );
				return false;
			}

			return true;
		}
	}
}