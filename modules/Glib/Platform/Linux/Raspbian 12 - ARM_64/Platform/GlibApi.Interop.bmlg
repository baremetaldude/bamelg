//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

using Platform.Libc;

namespace Platform.Glib {
	[ExternLibrary( Image = "/usr/lib/aarch64-linux-gnu/libglib-2.0.so.0" )]
	public static partial struct GlibApi {
		public extern static GArray* g_array_append_vals( GArray* array, void* data, uint len );
		public extern static Boolean32 g_array_binary_search( GArray* array, void* target, Functors.Func<void*, void*, int> compareFunc, uint* outMatchIndex );
		public extern static GArray* g_array_copy( GArray* array );
		public extern static sbyte* g_array_free( GArray* array, Boolean32 freeSegment );
		public extern static uint g_array_get_element_size( GArray* array );
		public extern static GArray* g_array_insert_vals( GArray* array, uint index_, void* data, uint len );
		public extern static GArray* g_array_new( Boolean32 zeroTerminated, Boolean32 clear_, uint elementSize );
		public extern static GArray* g_array_prepend_vals( GArray* array, void* data, uint len );
		public extern static GArray* g_array_ref( GArray* array );
		public extern static GArray* g_array_remove_index( GArray* array, uint index_ );
		public extern static GArray* g_array_remove_index_fast( GArray* array, uint index_ );
		public extern static GArray* g_array_remove_range( GArray* array, uint index_, uint length );
		public extern static void g_array_set_clear_func( GArray* array, Functors.Action<void*> clearFunc );
		public extern static GArray* g_array_set_size( GArray* array, uint length );
		public extern static GArray* g_array_sized_new( Boolean32 zeroTerminated, Boolean32 clear_, uint elementSize, uint reservedSize );
		public extern static void g_array_sort( GArray* array, Functors.Func<void*, void*, int> compareFunc );
		public extern static void g_array_sort_with_data( GArray* array, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );
		public extern static void* g_array_steal( GArray* array, uintptr* len );
		public extern static void g_array_unref( GArray* array );
		public extern static GByteArray* g_byte_array_append( GByteArray* array, byte* data, uint len );
		public extern static byte* g_byte_array_free( GByteArray* array, Boolean32 freeSegment );
		public extern static GBytes* g_byte_array_free_to_bytes( GByteArray* array );
		public extern static GByteArray* g_byte_array_new();
		public extern static GByteArray* g_byte_array_new_take( byte* data, uintptr len );
		public extern static GByteArray* g_byte_array_prepend( GByteArray* array, byte* data, uint len );
		public extern static GByteArray* g_byte_array_ref( GByteArray* array );
		public extern static GByteArray* g_byte_array_remove_index( GByteArray* array, uint index_ );
		public extern static GByteArray* g_byte_array_remove_index_fast( GByteArray* array, uint index_ );
		public extern static GByteArray* g_byte_array_remove_range( GByteArray* array, uint index_, uint length );
		public extern static GByteArray* g_byte_array_set_size( GByteArray* array, uint length );
		public extern static GByteArray* g_byte_array_sized_new( uint reservedSize );
		public extern static void g_byte_array_sort( GByteArray* array, Functors.Func<void*, void*, int> compareFunc );
		public extern static void g_byte_array_sort_with_data( GByteArray* array, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );
		public extern static byte* g_byte_array_steal( GByteArray* array, uintptr* len );
		public extern static void g_byte_array_unref( GByteArray* array );
		public extern static void g_ptr_array_add( GPtrArray* array, void* data );
		public extern static GPtrArray* g_ptr_array_copy( GPtrArray* array, Functors.Func<void*, void*, void*> func, void* userData );
		public extern static void g_ptr_array_extend( GPtrArray* arrayToExtend, GPtrArray* array, Functors.Func<void*, void*, void*> func, void* userData );
		public extern static void g_ptr_array_extend_and_steal( GPtrArray* arrayToExtend, GPtrArray* array );
		public extern static Boolean32 g_ptr_array_find( GPtrArray* haystack, void* needle, uint* index_ );
		public extern static Boolean32 g_ptr_array_find_with_equal_func( GPtrArray* haystack, void* needle, Functors.Func<void*, void*, Boolean32> equalFunc, uint* index_ );
		public extern static void g_ptr_array_foreach( GPtrArray* array, Functors.Action<void*, void*> func, void* userData );
		public extern static void** g_ptr_array_free( GPtrArray* array, Boolean32 freeSeg );
		public extern static void g_ptr_array_insert( GPtrArray* array, int index_, void* data );
		public extern static Boolean32 g_ptr_array_is_null_terminated( GPtrArray* array );
		public extern static GPtrArray* g_ptr_array_new();
		public extern static GPtrArray* g_ptr_array_new_full( uint reservedSize, Functors.Action<void*> elementFreeFunc );
		public extern static GPtrArray* g_ptr_array_new_null_terminated( uint reservedSize, Functors.Action<void*> elementFreeFunc, Boolean32 nullTerminated );
		public extern static GPtrArray* g_ptr_array_new_with_free_func( Functors.Action<void*> elementFreeFunc );
		public extern static GPtrArray* g_ptr_array_ref( GPtrArray* array );
		public extern static Boolean32 g_ptr_array_remove( GPtrArray* array, void* data );
		public extern static Boolean32 g_ptr_array_remove_fast( GPtrArray* array, void* data );
		public extern static void* g_ptr_array_remove_index( GPtrArray* array, uint index_ );
		public extern static void* g_ptr_array_remove_index_fast( GPtrArray* array, uint index_ );
		public extern static GPtrArray* g_ptr_array_remove_range( GPtrArray* array, uint index_, uint length );
		public extern static void g_ptr_array_set_free_func( GPtrArray* array, Functors.Action<void*> elementFreeFunc );
		public extern static void g_ptr_array_set_size( GPtrArray* array, int length );
		public extern static GPtrArray* g_ptr_array_sized_new( uint reservedSize );
		public extern static void g_ptr_array_sort( GPtrArray* array, Functors.Func<void*, void*, int> compareFunc );
		public extern static void g_ptr_array_sort_with_data( GPtrArray* array, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );
		public extern static void** g_ptr_array_steal( GPtrArray* array, uintptr* len );
		public extern static void* g_ptr_array_steal_index( GPtrArray* array, uint index_ );
		public extern static void* g_ptr_array_steal_index_fast( GPtrArray* array, uint index_ );
		public extern static void g_ptr_array_unref( GPtrArray* array );

		public extern static int g_atomic_int_add( int* @atomic, int val );
		public extern static uint g_atomic_int_and( uint* @atomic, uint val );
		public extern static Boolean32 g_atomic_int_compare_and_exchange( int* @atomic, int oldval, int newval );
		public extern static Boolean32 g_atomic_int_compare_and_exchange_full( int* @atomic, int oldval, int newval, int* preval );
		public extern static Boolean32 g_atomic_int_dec_and_test( int* @atomic );
		public extern static int g_atomic_int_exchange( int* @atomic, int newval );
		public extern static int g_atomic_int_exchange_and_add( int* @atomic, int val );
		public extern static int g_atomic_int_get( int* @atomic );
		public extern static void g_atomic_int_inc( int* @atomic );
		public extern static uint g_atomic_int_or( uint* @atomic, uint val );
		public extern static void g_atomic_int_set( int* @atomic, int newval );
		public extern static uint g_atomic_int_xor( uint* @atomic, uint val );
		public extern static intptr g_atomic_pointer_add( void* @atomic, intptr val );
		public extern static uintptr g_atomic_pointer_and( void* @atomic, uintptr val );
		public extern static Boolean32 g_atomic_pointer_compare_and_exchange( void* @atomic, void* oldval, void* newval );
		public extern static Boolean32 g_atomic_pointer_compare_and_exchange_full( void* @atomic, void* oldval, void* newval, void* preval );
		public extern static void* g_atomic_pointer_exchange( void* @atomic, void* newval );
		public extern static void* g_atomic_pointer_get( void* @atomic );
		public extern static uintptr g_atomic_pointer_or( void* @atomic, uintptr val );
		public extern static void g_atomic_pointer_set( void* @atomic, void* newval );
		public extern static uintptr g_atomic_pointer_xor( void* @atomic, uintptr val );

		public extern static CUtf8String g_intern_static_string( CUtf8String @string );
		public extern static CUtf8String g_intern_string( CUtf8String @string );
		public extern static uint g_quark_from_static_string( CUtf8String @string );
		public extern static uint g_quark_from_string( CUtf8String @string );
		[BackendHintReadNone]
		public extern static sbyte* g_quark_to_string( uint quark );
		public extern static uint g_quark_try_string( CUtf8String @string );

		public extern static void g_clear_error( GError** err );
		public extern static GError* g_error_copy( GError* error );
		public extern static uint g_error_domain_register( CUtf8String errorTypeName, uintptr errorTypePrivateSize, Functors.Action<GError*> errorTypeInit, Functors.Action<GError*, GError*> errorTypeCopy, Functors.Action<GError*> errorTypeClear );
		public extern static uint g_error_domain_register_static( CUtf8String errorTypeName, uintptr errorTypePrivateSize, Functors.Action<GError*> errorTypeInit, Functors.Action<GError*, GError*> errorTypeCopy, Functors.Action<GError*> errorTypeClear );
		public extern static void g_error_free( GError* error );
		public extern static Boolean32 g_error_matches( GError* error, uint domain, int code );
		public extern static GError* g_error_new_literal( uint domain, int code, sbyte* message );
		public extern static void g_prefix_error_literal( GError** err, sbyte* prefix );
		public extern static void g_propagate_error( GError** dest, GError* src );
		public extern static void g_set_error_literal( GError** err, uint domain, int code, sbyte* message );

		public extern static void g_atexit( Functors.Action func );
		public extern static int g_bit_nth_lsf( uintptr mask, int nthBit );
		public extern static int g_bit_nth_msf( uintptr mask, int nthBit );
		public extern static uint g_bit_storage( uintptr number );
		public extern static sbyte* g_find_program_in_path( sbyte* program );
		public extern static sbyte* g_format_size( uintptr size );
		public extern static sbyte* g_format_size_for_display( intptr size );
		public extern static sbyte* g_format_size_full( uintptr size, GFormatSizeFlags flags );
		public extern static sbyte* g_get_application_name();
		public extern static sbyte* g_get_home_dir();
		public extern static sbyte* g_get_host_name();
		public extern static sbyte* g_get_os_info( CUtf8String keyName );
		public extern static sbyte* g_get_prgname();
		public extern static sbyte* g_get_real_name();
		public extern static sbyte** g_get_system_config_dirs();
		public extern static sbyte** g_get_system_data_dirs();
		public extern static sbyte* g_get_tmp_dir();
		public extern static sbyte* g_get_user_cache_dir();
		public extern static sbyte* g_get_user_config_dir();
		public extern static sbyte* g_get_user_data_dir();
		public extern static sbyte* g_get_user_name();
		public extern static sbyte* g_get_user_runtime_dir();
		public extern static sbyte* g_get_user_special_dir( GUserDirectory directory );
		public extern static sbyte* g_get_user_state_dir();
		public extern static void g_nullify_pointer( void** nullifyLocation );
		public extern static uint g_parse_debug_string( sbyte* @string, GDebugKey* keys, uint nkeys );
		public extern static void g_reload_user_special_dirs_cache();
		public extern static void g_set_application_name( CUtf8String applicationName );
		public extern static void g_set_prgname( CUtf8String prgname );

		public extern static void g_cond_broadcast( GCond* cond );
		public extern static void g_cond_clear( GCond* cond );
		public extern static void g_cond_init( GCond* cond );
		public extern static void g_cond_signal( GCond* cond );
		public extern static void g_cond_wait( GCond* cond, GMutex* mutex );
		public extern static Boolean32 g_cond_wait_until( GCond* cond, GMutex* mutex, intptr endTime );
		public extern static uint g_get_num_processors();
		public extern static void g_mutex_clear( GMutex* mutex );
		public extern static void g_mutex_init( GMutex* mutex );
		public extern static void g_mutex_lock( GMutex* mutex );
		public extern static Boolean32 g_mutex_trylock( GMutex* mutex );
		public extern static void g_mutex_unlock( GMutex* mutex );
		public extern static void* g_once_impl( GOnce* once, Functors.Func<void*, void*> func, void* arg );
		public extern static Boolean32 g_once_init_enter( void* location );
		public extern static void g_once_init_leave( void* location, uintptr result );
		public extern static void* g_private_get( GPrivate* key );
		public extern static void g_private_replace( GPrivate* key, void* value );
		public extern static void g_private_set( GPrivate* key, void* value );
		public extern static void g_rec_mutex_clear( GRecMutex* recMutex );
		public extern static void g_rec_mutex_init( GRecMutex* recMutex );
		public extern static void g_rec_mutex_lock( GRecMutex* recMutex );
		public extern static Boolean32 g_rec_mutex_trylock( GRecMutex* recMutex );
		public extern static void g_rec_mutex_unlock( GRecMutex* recMutex );
		public extern static void g_rw_lock_clear( GRWLock* rwLock );
		public extern static void g_rw_lock_init( GRWLock* rwLock );
		public extern static void g_rw_lock_reader_lock( GRWLock* rwLock );
		public extern static Boolean32 g_rw_lock_reader_trylock( GRWLock* rwLock );
		public extern static void g_rw_lock_reader_unlock( GRWLock* rwLock );
		public extern static void g_rw_lock_writer_lock( GRWLock* rwLock );
		public extern static Boolean32 g_rw_lock_writer_trylock( GRWLock* rwLock );
		public extern static void g_rw_lock_writer_unlock( GRWLock* rwLock );
		public extern static uint g_thread_error_quark();
		public extern static void g_thread_exit( void* retval );
		public extern static void* g_thread_join( GThread* thread );
		public extern static GThread* g_thread_new( CUtf8String name, Functors.Func<void*, void*> func, void* data );
		public extern static GThread* g_thread_ref( GThread* thread );
		public extern static GThread* g_thread_self();
		public extern static GThread* g_thread_try_new( CUtf8String name, Functors.Func<void*, void*> func, void* data, GError** error );
		public extern static void g_thread_unref( GThread* thread );
		public extern static void g_thread_yield();

		public extern static int g_async_queue_length( GAsyncQueue* queue );
		public extern static int g_async_queue_length_unlocked( GAsyncQueue* queue );
		public extern static void g_async_queue_lock( GAsyncQueue* queue );
		public extern static GAsyncQueue* g_async_queue_new();
		public extern static GAsyncQueue* g_async_queue_new_full( Functors.Action<void*> itemFreeFunc );
		public extern static void* g_async_queue_pop( GAsyncQueue* queue );
		public extern static void* g_async_queue_pop_unlocked( GAsyncQueue* queue );
		public extern static void g_async_queue_push( GAsyncQueue* queue, void* data );
		public extern static void g_async_queue_push_front( GAsyncQueue* queue, void* item );
		public extern static void g_async_queue_push_front_unlocked( GAsyncQueue* queue, void* item );
		public extern static void g_async_queue_push_sorted( GAsyncQueue* queue, void* data, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static void g_async_queue_push_sorted_unlocked( GAsyncQueue* queue, void* data, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static void g_async_queue_push_unlocked( GAsyncQueue* queue, void* data );
		public extern static GAsyncQueue* g_async_queue_ref( GAsyncQueue* queue );
		public extern static void g_async_queue_ref_unlocked( GAsyncQueue* queue );
		public extern static Boolean32 g_async_queue_remove( GAsyncQueue* queue, void* item );
		public extern static Boolean32 g_async_queue_remove_unlocked( GAsyncQueue* queue, void* item );
		public extern static void g_async_queue_sort( GAsyncQueue* queue, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static void g_async_queue_sort_unlocked( GAsyncQueue* queue, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static void* g_async_queue_timed_pop( GAsyncQueue* queue, GTimeVal* endTime );
		public extern static void* g_async_queue_timed_pop_unlocked( GAsyncQueue* queue, GTimeVal* endTime );
		public extern static void* g_async_queue_timeout_pop( GAsyncQueue* queue, uintptr timeout );
		public extern static void* g_async_queue_timeout_pop_unlocked( GAsyncQueue* queue, uintptr timeout );
		public extern static void* g_async_queue_try_pop( GAsyncQueue* queue );
		public extern static void* g_async_queue_try_pop_unlocked( GAsyncQueue* queue );
		public extern static void g_async_queue_unlock( GAsyncQueue* queue );
		public extern static void g_async_queue_unref( GAsyncQueue* queue );
		public extern static void g_async_queue_unref_and_unlock( GAsyncQueue* queue );

		public extern static void g_on_error_query( CUtf8String prgName );
		public extern static void g_on_error_stack_trace( CUtf8String prgName );

		public extern static byte* g_base64_decode( CUtf8String text, uintptr* outLen );
		public extern static byte* g_base64_decode_inplace( CUtf8String text, uintptr* outLen );
		public extern static uintptr g_base64_decode_step( sbyte* in, uintptr len, byte* out, int* state, uint* save );
		public extern static sbyte* g_base64_encode( byte* data, uintptr len );
		public extern static uintptr g_base64_encode_close( Boolean32 breakLines, sbyte* out, int* state, int* save );
		public extern static uintptr g_base64_encode_step( byte* in, uintptr len, Boolean32 breakLines, sbyte* out, int* state, int* save );

		public extern static void g_bit_lock( int* address, int lockBit );
		public extern static Boolean32 g_bit_trylock( int* address, int lockBit );
		public extern static void g_bit_unlock( int* address, int lockBit );
		public extern static void g_pointer_bit_lock( void* address, int lockBit );
		public extern static Boolean32 g_pointer_bit_trylock( void* address, int lockBit );
		public extern static void g_pointer_bit_unlock( void* address, int lockBit );

		public extern static int g_time_zone_adjust_time( GTimeZone* tz, GTimeType type, intptr* time_ );
		public extern static int g_time_zone_find_interval( GTimeZone* tz, GTimeType type, intptr time_ );
		public extern static sbyte* g_time_zone_get_abbreviation( GTimeZone* tz, int interval );
		public extern static sbyte* g_time_zone_get_identifier( GTimeZone* tz );
		public extern static int g_time_zone_get_offset( GTimeZone* tz, int interval );
		public extern static Boolean32 g_time_zone_is_dst( GTimeZone* tz, int interval );
		public extern static GTimeZone* g_time_zone_new( sbyte* identifier );
		public extern static GTimeZone* g_time_zone_new_identifier( sbyte* identifier );
		public extern static GTimeZone* g_time_zone_new_local();
		public extern static GTimeZone* g_time_zone_new_offset( int seconds );
		public extern static GTimeZone* g_time_zone_new_utc();
		public extern static GTimeZone* g_time_zone_ref( GTimeZone* tz );
		public extern static void g_time_zone_unref( GTimeZone* tz );

		public extern static GDateTime* g_date_time_add( GDateTime* datetime, intptr timespan );
		public extern static GDateTime* g_date_time_add_days( GDateTime* datetime, int days );
		public extern static GDateTime* g_date_time_add_full( GDateTime* datetime, int years, int months, int days, int hours, int minutes, double seconds );
		public extern static GDateTime* g_date_time_add_hours( GDateTime* datetime, int hours );
		public extern static GDateTime* g_date_time_add_minutes( GDateTime* datetime, int minutes );
		public extern static GDateTime* g_date_time_add_months( GDateTime* datetime, int months );
		public extern static GDateTime* g_date_time_add_seconds( GDateTime* datetime, double seconds );
		public extern static GDateTime* g_date_time_add_weeks( GDateTime* datetime, int weeks );
		public extern static GDateTime* g_date_time_add_years( GDateTime* datetime, int years );
		public extern static int g_date_time_compare( void* dt1, void* dt2 );
		public extern static intptr g_date_time_difference( GDateTime* end, GDateTime* begin );
		public extern static Boolean32 g_date_time_equal( void* dt1, void* dt2 );
		public extern static sbyte* g_date_time_format( GDateTime* datetime, sbyte* format );
		public extern static sbyte* g_date_time_format_iso8601( GDateTime* datetime );
		public extern static int g_date_time_get_day_of_month( GDateTime* datetime );
		public extern static int g_date_time_get_day_of_week( GDateTime* datetime );
		public extern static int g_date_time_get_day_of_year( GDateTime* datetime );
		public extern static int g_date_time_get_hour( GDateTime* datetime );
		public extern static int g_date_time_get_microsecond( GDateTime* datetime );
		public extern static int g_date_time_get_minute( GDateTime* datetime );
		public extern static int g_date_time_get_month( GDateTime* datetime );
		public extern static int g_date_time_get_second( GDateTime* datetime );
		public extern static double g_date_time_get_seconds( GDateTime* datetime );
		public extern static GTimeZone* g_date_time_get_timezone( GDateTime* datetime );
		public extern static sbyte* g_date_time_get_timezone_abbreviation( GDateTime* datetime );
		public extern static intptr g_date_time_get_utc_offset( GDateTime* datetime );
		public extern static int g_date_time_get_week_numbering_year( GDateTime* datetime );
		public extern static int g_date_time_get_week_of_year( GDateTime* datetime );
		public extern static int g_date_time_get_year( GDateTime* datetime );
		public extern static void g_date_time_get_ymd( GDateTime* datetime, int* year, int* month, int* day );
		public extern static uint g_date_time_hash( void* datetime );
		public extern static Boolean32 g_date_time_is_daylight_savings( GDateTime* datetime );
		public extern static GDateTime* g_date_time_new( GTimeZone* tz, int year, int month, int day, int hour, int minute, double seconds );
		public extern static GDateTime* g_date_time_new_from_iso8601( CUtf8String text, GTimeZone* defaultTz );
		public extern static GDateTime* g_date_time_new_from_timeval_local( GTimeVal* tv );
		public extern static GDateTime* g_date_time_new_from_timeval_utc( GTimeVal* tv );
		public extern static GDateTime* g_date_time_new_from_unix_local( intptr t );
		public extern static GDateTime* g_date_time_new_from_unix_utc( intptr t );
		public extern static GDateTime* g_date_time_new_local( int year, int month, int day, int hour, int minute, double seconds );
		public extern static GDateTime* g_date_time_new_now( GTimeZone* tz );
		public extern static GDateTime* g_date_time_new_now_local();
		public extern static GDateTime* g_date_time_new_now_utc();
		public extern static GDateTime* g_date_time_new_utc( int year, int month, int day, int hour, int minute, double seconds );
		public extern static GDateTime* g_date_time_ref( GDateTime* datetime );
		public extern static GDateTime* g_date_time_to_local( GDateTime* datetime );
		public extern static Boolean32 g_date_time_to_timeval( GDateTime* datetime, GTimeVal* tv );
		public extern static GDateTime* g_date_time_to_timezone( GDateTime* datetime, GTimeZone* tz );
		public extern static intptr g_date_time_to_unix( GDateTime* datetime );
		public extern static GDateTime* g_date_time_to_utc( GDateTime* datetime );
		public extern static void g_date_time_unref( GDateTime* datetime );

		public extern static void g_bookmark_file_add_application( GBookmarkFile* bookmark, sbyte* uri, CUtf8String name, sbyte* exec );
		public extern static void g_bookmark_file_add_group( GBookmarkFile* bookmark, sbyte* uri, sbyte* group );
		public extern static uint g_bookmark_file_error_quark();
		public extern static void g_bookmark_file_free( GBookmarkFile* bookmark );
		public extern static intptr g_bookmark_file_get_added( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static GDateTime* g_bookmark_file_get_added_date_time( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static Boolean32 g_bookmark_file_get_app_info( GBookmarkFile* bookmark, sbyte* uri, CUtf8String name, sbyte** exec, uint* count, intptr* stamp, GError** error );
		public extern static Boolean32 g_bookmark_file_get_application_info( GBookmarkFile* bookmark, sbyte* uri, CUtf8String name, sbyte** exec, uint* count, GDateTime** stamp, GError** error );
		public extern static sbyte** g_bookmark_file_get_applications( GBookmarkFile* bookmark, sbyte* uri, uintptr* length, GError** error );
		public extern static sbyte* g_bookmark_file_get_description( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static sbyte** g_bookmark_file_get_groups( GBookmarkFile* bookmark, sbyte* uri, uintptr* length, GError** error );
		public extern static Boolean32 g_bookmark_file_get_icon( GBookmarkFile* bookmark, sbyte* uri, sbyte** href, sbyte** mimeType, GError** error );
		public extern static Boolean32 g_bookmark_file_get_is_private( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static sbyte* g_bookmark_file_get_mime_type( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static intptr g_bookmark_file_get_modified( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static GDateTime* g_bookmark_file_get_modified_date_time( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static int g_bookmark_file_get_size( GBookmarkFile* bookmark );
		public extern static sbyte* g_bookmark_file_get_title( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static sbyte** g_bookmark_file_get_uris( GBookmarkFile* bookmark, uintptr* length );
		public extern static intptr g_bookmark_file_get_visited( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static GDateTime* g_bookmark_file_get_visited_date_time( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static Boolean32 g_bookmark_file_has_application( GBookmarkFile* bookmark, sbyte* uri, CUtf8String name, GError** error );
		public extern static Boolean32 g_bookmark_file_has_group( GBookmarkFile* bookmark, sbyte* uri, sbyte* group, GError** error );
		public extern static Boolean32 g_bookmark_file_has_item( GBookmarkFile* bookmark, sbyte* uri );
		public extern static Boolean32 g_bookmark_file_load_from_data( GBookmarkFile* bookmark, sbyte* data, uintptr length, GError** error );
		public extern static Boolean32 g_bookmark_file_load_from_data_dirs( GBookmarkFile* bookmark, sbyte* file, sbyte** fullPath, GError** error );
		public extern static Boolean32 g_bookmark_file_load_from_file( GBookmarkFile* bookmark, CUtf8String filename, GError** error );
		public extern static Boolean32 g_bookmark_file_move_item( GBookmarkFile* bookmark, sbyte* oldUri, sbyte* newUri, GError** error );
		public extern static GBookmarkFile* g_bookmark_file_new();
		public extern static Boolean32 g_bookmark_file_remove_application( GBookmarkFile* bookmark, sbyte* uri, CUtf8String name, GError** error );
		public extern static Boolean32 g_bookmark_file_remove_group( GBookmarkFile* bookmark, sbyte* uri, sbyte* group, GError** error );
		public extern static Boolean32 g_bookmark_file_remove_item( GBookmarkFile* bookmark, sbyte* uri, GError** error );
		public extern static void g_bookmark_file_set_added( GBookmarkFile* bookmark, sbyte* uri, intptr added );
		public extern static void g_bookmark_file_set_added_date_time( GBookmarkFile* bookmark, sbyte* uri, GDateTime* added );
		public extern static Boolean32 g_bookmark_file_set_app_info( GBookmarkFile* bookmark, sbyte* uri, CUtf8String name, sbyte* exec, int count, intptr stamp, GError** error );
		public extern static Boolean32 g_bookmark_file_set_application_info( GBookmarkFile* bookmark, sbyte* uri, CUtf8String name, sbyte* exec, int count, GDateTime* stamp, GError** error );
		public extern static void g_bookmark_file_set_description( GBookmarkFile* bookmark, sbyte* uri, CUtf8String description );
		public extern static void g_bookmark_file_set_groups( GBookmarkFile* bookmark, sbyte* uri, sbyte** groups, uintptr length );
		public extern static void g_bookmark_file_set_icon( GBookmarkFile* bookmark, sbyte* uri, sbyte* href, sbyte* mimeType );
		public extern static void g_bookmark_file_set_is_private( GBookmarkFile* bookmark, sbyte* uri, Boolean32 isPrivate );
		public extern static void g_bookmark_file_set_mime_type( GBookmarkFile* bookmark, sbyte* uri, sbyte* mimeType );
		public extern static void g_bookmark_file_set_modified( GBookmarkFile* bookmark, sbyte* uri, intptr modified );
		public extern static void g_bookmark_file_set_modified_date_time( GBookmarkFile* bookmark, sbyte* uri, GDateTime* modified );
		public extern static void g_bookmark_file_set_title( GBookmarkFile* bookmark, sbyte* uri, sbyte* title );
		public extern static void g_bookmark_file_set_visited( GBookmarkFile* bookmark, sbyte* uri, intptr visited );
		public extern static void g_bookmark_file_set_visited_date_time( GBookmarkFile* bookmark, sbyte* uri, GDateTime* visited );
		public extern static sbyte* g_bookmark_file_to_data( GBookmarkFile* bookmark, uintptr* length, GError** error );
		public extern static Boolean32 g_bookmark_file_to_file( GBookmarkFile* bookmark, CUtf8String filename, GError** error );

		public extern static int g_bytes_compare( void* bytes1, void* bytes2 );
		public extern static Boolean32 g_bytes_equal( void* bytes1, void* bytes2 );
		public extern static void* g_bytes_get_data( GBytes* bytes, uintptr* size );
		public extern static void* g_bytes_get_region( GBytes* bytes, uintptr elementSize, uintptr offset, uintptr nElements );
		public extern static uintptr g_bytes_get_size( GBytes* bytes );
		public extern static uint g_bytes_hash( void* bytes );
		public extern static GBytes* g_bytes_new( void* data, uintptr size );
		public extern static GBytes* g_bytes_new_from_bytes( GBytes* bytes, uintptr offset, uintptr length );
		public extern static GBytes* g_bytes_new_static( void* data, uintptr size );
		public extern static GBytes* g_bytes_new_take( void* data, uintptr size );
		public extern static GBytes* g_bytes_new_with_free_func( void* data, uintptr size, Functors.Action<void*> freeFunc, void* userData );
		public extern static GBytes* g_bytes_ref( GBytes* bytes );
		public extern static void g_bytes_unref( GBytes* bytes );
		public extern static GByteArray* g_bytes_unref_to_array( GBytes* bytes );
		public extern static void* g_bytes_unref_to_data( GBytes* bytes, uintptr* size );

		public extern static Boolean32 g_get_charset( sbyte** charset );
		public extern static sbyte* g_get_codeset();
		public extern static Boolean32 g_get_console_charset( sbyte** charset );
		public extern static sbyte** g_get_language_names();
		public extern static sbyte** g_get_language_names_with_category( CUtf8String categoryName );
		public extern static sbyte** g_get_locale_variants( sbyte* locale );

		public extern static GChecksum* g_checksum_copy( GChecksum* checksum );
		public extern static void g_checksum_free( GChecksum* checksum );
		public extern static void g_checksum_get_digest( GChecksum* checksum, byte* buffer, uintptr* digestLen );
		public extern static sbyte* g_checksum_get_string( GChecksum* checksum );
		public extern static GChecksum* g_checksum_new( GChecksumType checksumType );
		public extern static void g_checksum_reset( GChecksum* checksum );
		public extern static intptr g_checksum_type_get_length( GChecksumType checksumType );
		public extern static void g_checksum_update( GChecksum* checksum, byte* data, intptr length );
		public extern static sbyte* g_compute_checksum_for_bytes( GChecksumType checksumType, GBytes* data );
		public extern static sbyte* g_compute_checksum_for_data( GChecksumType checksumType, byte* data, uintptr length );
		public extern static sbyte* g_compute_checksum_for_string( GChecksumType checksumType, sbyte* str, intptr length );

		public extern static sbyte* g_convert( sbyte* str, intptr len, sbyte* toCodeset, sbyte* fromCodeset, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		public extern static uint g_convert_error_quark();
		public extern static sbyte* g_convert_with_fallback( sbyte* str, intptr len, sbyte* toCodeset, sbyte* fromCodeset, sbyte* fallback, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		public extern static sbyte* g_convert_with_iconv( sbyte* str, intptr len, GIConv* converter, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		public extern static sbyte* g_filename_display_basename( CUtf8String filename );
		public extern static sbyte* g_filename_display_name( CUtf8String filename );
		public extern static sbyte* g_filename_from_uri( sbyte* uri, sbyte** hostname, GError** error );
		public extern static sbyte* g_filename_from_utf8( sbyte* utf8string, intptr len, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		public extern static sbyte* g_filename_to_uri( CUtf8String filename, CUtf8String hostname, GError** error );
		public extern static sbyte* g_filename_to_utf8( sbyte* opsysstring, intptr len, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		public extern static Boolean32 g_get_filename_charsets( sbyte*** filenameCharsets );
		public extern static uintptr g_iconv( GIConv* converter, sbyte** inbuf, uintptr* inbytesLeft, sbyte** outbuf, uintptr* outbytesLeft );
		public extern static int g_iconv_close( GIConv* converter );
		public extern static GIConv* g_iconv_open( sbyte* toCodeset, sbyte* fromCodeset );
		public extern static sbyte* g_locale_from_utf8( sbyte* utf8string, intptr len, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		public extern static sbyte* g_locale_to_utf8( sbyte* opsysstring, intptr len, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		public extern static sbyte** g_uri_list_extract_uris( sbyte* uriList );

		public extern static void g_datalist_clear( GData** datalist );
		public extern static void g_datalist_foreach( GData** datalist, Functors.Action<uint, void*, void*> func, void* userData );
		public extern static void* g_datalist_get_data( GData** datalist, sbyte* key );
		public extern static uint g_datalist_get_flags( GData** datalist );
		public extern static void* g_datalist_id_dup_data( GData** datalist, uint keyId, Functors.Func<void*, void*, void*> dupFunc, void* userData );
		public extern static void* g_datalist_id_get_data( GData** datalist, uint keyId );
		public extern static void g_datalist_id_remove_multiple( GData** datalist, uint* keys, uintptr nKeys );
		public extern static void* g_datalist_id_remove_no_notify( GData** datalist, uint keyId );
		public extern static Boolean32 g_datalist_id_replace_data( GData** datalist, uint keyId, void* oldval, void* newval, Functors.Action<void*> destroy, Functors.Action<void*>* oldDestroy );
		public extern static void g_datalist_id_set_data_full( GData** datalist, uint keyId, void* data, Functors.Action<void*> destroyFunc );
		public extern static void g_datalist_init( GData** datalist );
		public extern static void g_datalist_set_flags( GData** datalist, uint flags );
		public extern static void g_datalist_unset_flags( GData** datalist, uint flags );
		public extern static void g_dataset_destroy( void* datasetLocation );
		public extern static void g_dataset_foreach( void* datasetLocation, Functors.Action<uint, void*, void*> func, void* userData );
		public extern static void* g_dataset_id_get_data( void* datasetLocation, uint keyId );
		public extern static void* g_dataset_id_remove_no_notify( void* datasetLocation, uint keyId );
		public extern static void g_dataset_id_set_data_full( void* datasetLocation, uint keyId, void* data, Functors.Action<void*> destroyFunc );

		public extern static void g_date_add_days( GDate* date, uint nDays );
		public extern static void g_date_add_months( GDate* date, uint nMonths );
		public extern static void g_date_add_years( GDate* date, uint nYears );
		public extern static void g_date_clamp( GDate* date, GDate* minDate, GDate* maxDate );
		public extern static void g_date_clear( GDate* date, uint nDates );
		public extern static int g_date_compare( GDate* lhs, GDate* rhs );
		public extern static GDate* g_date_copy( GDate* date );
		public extern static int g_date_days_between( GDate* date1, GDate* date2 );
		public extern static void g_date_free( GDate* date );
		public extern static byte g_date_get_day( GDate* date );
		public extern static uint g_date_get_day_of_year( GDate* date );
		[BackendHintReadNone]
		public extern static byte g_date_get_days_in_month( GDateMonth month, ushort year );
		public extern static uint g_date_get_iso8601_week_of_year( GDate* date );
		public extern static uint g_date_get_julian( GDate* date );
		public extern static uint g_date_get_monday_week_of_year( GDate* date );
		[BackendHintReadNone]
		public extern static byte g_date_get_monday_weeks_in_year( ushort year );
		public extern static GDateMonth g_date_get_month( GDate* date );
		public extern static uint g_date_get_sunday_week_of_year( GDate* date );
		[BackendHintReadNone]
		public extern static byte g_date_get_sunday_weeks_in_year( ushort year );
		public extern static GDateWeekday g_date_get_weekday( GDate* date );
		public extern static ushort g_date_get_year( GDate* date );
		public extern static Boolean32 g_date_is_first_of_month( GDate* date );
		public extern static Boolean32 g_date_is_last_of_month( GDate* date );
		[BackendHintReadNone]
		public extern static Boolean32 g_date_is_leap_year( ushort year );
		public extern static GDate* g_date_new();
		public extern static GDate* g_date_new_dmy( byte day, GDateMonth month, ushort year );
		public extern static GDate* g_date_new_julian( uint julianDay );
		public extern static void g_date_order( GDate* date1, GDate* date2 );
		public extern static void g_date_set_day( GDate* date, byte day );
		public extern static void g_date_set_dmy( GDate* date, byte day, GDateMonth month, ushort y );
		public extern static void g_date_set_julian( GDate* date, uint julianDate );
		public extern static void g_date_set_month( GDate* date, GDateMonth month );
		public extern static void g_date_set_parse( GDate* date, sbyte* str );
		public extern static void g_date_set_time( GDate* date, int time_ );
		public extern static void g_date_set_time_t( GDate* date, intptr timet );
		public extern static void g_date_set_time_val( GDate* date, GTimeVal* timeval );
		public extern static void g_date_set_year( GDate* date, ushort year );
		public extern static uintptr g_date_strftime( sbyte* s, uintptr slen, sbyte* format, GDate* date );
		public extern static void g_date_subtract_days( GDate* date, uint nDays );
		public extern static void g_date_subtract_months( GDate* date, uint nMonths );
		public extern static void g_date_subtract_years( GDate* date, uint nYears );
		public extern static void g_date_to_struct_tm( GDate* date, tm* tm );
		public extern static Boolean32 g_date_valid( GDate* date );
		[BackendHintReadNone]
		public extern static Boolean32 g_date_valid_day( byte day );
		[BackendHintReadNone]
		public extern static Boolean32 g_date_valid_dmy( byte day, GDateMonth month, ushort year );
		[BackendHintReadNone]
		public extern static Boolean32 g_date_valid_julian( uint julianDate );
		[BackendHintReadNone]
		public extern static Boolean32 g_date_valid_month( GDateMonth month );
		[BackendHintReadNone]
		public extern static Boolean32 g_date_valid_weekday( GDateWeekday weekday );
		[BackendHintReadNone]
		public extern static Boolean32 g_date_valid_year( ushort year );

		public extern static void g_dir_close( GDir* dir );
		public extern static GDir* g_dir_open( sbyte* path, uint flags, GError** error );
		public extern static sbyte* g_dir_read_name( GDir* dir );
		public extern static void g_dir_rewind( GDir* dir );

		public extern static sbyte* g_environ_getenv( sbyte** envp, sbyte* variable );
		public extern static sbyte** g_environ_setenv( sbyte** envp, sbyte* variable, sbyte* value, Boolean32 overwrite );
		public extern static sbyte** g_environ_unsetenv( sbyte** envp, sbyte* variable );
		public extern static sbyte** g_get_environ();
		public extern static sbyte* g_getenv( sbyte* variable );
		public extern static sbyte** g_listenv();
		public extern static Boolean32 g_setenv( sbyte* variable, sbyte* value, Boolean32 overwrite );
		public extern static void g_unsetenv( sbyte* variable );

		public extern static sbyte* g_basename( CUtf8String fileName );
		public extern static sbyte* g_build_filenamev( sbyte** args );
		public extern static sbyte* g_build_pathv( sbyte* separator, sbyte** args );
		public extern static sbyte* g_canonicalize_filename( CUtf8String filename, sbyte* relativeTo );
		public extern static sbyte* g_dir_make_tmp( sbyte* tmpl, GError** error );
		public extern static GFileError g_file_error_from_errno( int errNo );
		public extern static uint g_file_error_quark();
		public extern static Boolean32 g_file_get_contents( CUtf8String filename, sbyte** contents, uintptr* length, GError** error );
		public extern static int g_file_open_tmp( sbyte* tmpl, sbyte** nameUsed, GError** error );
		public extern static sbyte* g_file_read_link( CUtf8String filename, GError** error );
		public extern static Boolean32 g_file_set_contents( CUtf8String filename, sbyte* contents, intptr length, GError** error );
		public extern static Boolean32 g_file_set_contents_full( CUtf8String filename, sbyte* contents, intptr length, GFileSetContentsFlags flags, int mode, GError** error );
		public extern static Boolean32 g_file_test( CUtf8String filename, GFileTest test );
		public extern static sbyte* g_get_current_dir();
		public extern static int g_mkdir_with_parents( CUtf8String pathname, int mode );
		public extern static sbyte* g_mkdtemp( sbyte* tmpl );
		public extern static sbyte* g_mkdtemp_full( sbyte* tmpl, int mode );
		public extern static int g_mkstemp( sbyte* tmpl );
		public extern static int g_mkstemp_full( sbyte* tmpl, int flags, int mode );
		public extern static sbyte* g_path_get_basename( CUtf8String fileName );
		public extern static sbyte* g_path_get_dirname( CUtf8String fileName );
		public extern static Boolean32 g_path_is_absolute( CUtf8String fileName );
		public extern static sbyte* g_path_skip_root( CUtf8String fileName );

		public extern static sbyte* g_dcgettext( sbyte* domain, sbyte* msgid, int category );
		public extern static sbyte* g_dgettext( sbyte* domain, sbyte* msgid );
		public extern static sbyte* g_dngettext( sbyte* domain, sbyte* msgid, sbyte* msgidPlural, uintptr n );
		public extern static sbyte* g_dpgettext( sbyte* domain, sbyte* msgctxtid, uintptr msgidoffset );
		public extern static sbyte* g_dpgettext2( sbyte* domain, CUtf8String context, sbyte* msgid );
		public extern static sbyte* g_strip_context( sbyte* msgid, sbyte* msgval );

		public extern static void* g_aligned_alloc( uintptr nBlocks, uintptr nBlockBytes, uintptr alignment );
		public extern static void* g_aligned_alloc0( uintptr nBlocks, uintptr nBlockBytes, uintptr alignment );
		public extern static void g_aligned_free( void* mem );
		public extern static void g_clear_pointer( void** pp, Functors.Action<void*> destroy );
		public extern static void g_free( void* mem );
		public extern static void* g_malloc( uintptr nBytes );
		public extern static void* g_malloc_n( uintptr nBlocks, uintptr nBlockBytes );
		public extern static void* g_malloc0( uintptr nBytes );
		public extern static void* g_malloc0_n( uintptr nBlocks, uintptr nBlockBytes );
		public extern static Boolean32 g_mem_is_system_malloc();
		public extern static void g_mem_profile();
		public extern static void g_mem_set_vtable( GMemVTable* vtable );
		public extern static void* g_realloc( void* mem, uintptr nBytes );
		public extern static void* g_realloc_n( void* mem, uintptr nBlocks, uintptr nBlockBytes );
		public extern static void* g_try_malloc( uintptr nBytes );
		public extern static void* g_try_malloc_n( uintptr nBlocks, uintptr nBlockBytes );
		public extern static void* g_try_malloc0( uintptr nBytes );
		public extern static void* g_try_malloc0_n( uintptr nBlocks, uintptr nBlockBytes );
		public extern static void* g_try_realloc( void* mem, uintptr nBytes );
		public extern static void* g_try_realloc_n( void* mem, uintptr nBlocks, uintptr nBlockBytes );

		public extern static int g_node_child_index( GNode* node, void* data );
		public extern static int g_node_child_position( GNode* node, GNode* child );
		public extern static void g_node_children_foreach( GNode* node, GTraverseFlags flags, Functors.Action<GNode*, void*> func, void* data );
		public extern static GNode* g_node_copy( GNode* node );
		public extern static GNode* g_node_copy_deep( GNode* node, Functors.Func<void*, void*, void*> copyFunc, void* data );
		public extern static uint g_node_depth( GNode* node );
		public extern static void g_node_destroy( GNode* root );
		public extern static GNode* g_node_find( GNode* root, GTraverseType order, GTraverseFlags flags, void* data );
		public extern static GNode* g_node_find_child( GNode* node, GTraverseFlags flags, void* data );
		public extern static GNode* g_node_first_sibling( GNode* node );
		public extern static GNode* g_node_get_root( GNode* node );
		public extern static GNode* g_node_insert( GNode* parent, int position, GNode* node );
		public extern static GNode* g_node_insert_after( GNode* parent, GNode* sibling, GNode* node );
		public extern static GNode* g_node_insert_before( GNode* parent, GNode* sibling, GNode* node );
		public extern static Boolean32 g_node_is_ancestor( GNode* node, GNode* descendant );
		public extern static GNode* g_node_last_child( GNode* node );
		public extern static GNode* g_node_last_sibling( GNode* node );
		public extern static uint g_node_max_height( GNode* root );
		public extern static uint g_node_n_children( GNode* node );
		public extern static uint g_node_n_nodes( GNode* root, GTraverseFlags flags );
		public extern static GNode* g_node_new( void* data );
		public extern static GNode* g_node_nth_child( GNode* node, uint n );
		public extern static GNode* g_node_prepend( GNode* parent, GNode* node );
		public extern static void g_node_reverse_children( GNode* node );
		public extern static void g_node_traverse( GNode* root, GTraverseType order, GTraverseFlags flags, int maxDepth, Functors.Func<GNode*, void*, Boolean32> func, void* data );
		public extern static void g_node_unlink( GNode* node );

		public extern static void g_clear_list( GList** listPtr, Functors.Action<void*> destroy );
		public extern static GList* g_list_alloc();
		public extern static GList* g_list_append( GList* list, void* data );
		public extern static GList* g_list_concat( GList* list1, GList* list2 );
		public extern static GList* g_list_copy( GList* list );
		public extern static GList* g_list_copy_deep( GList* list, Functors.Func<void*, void*, void*> func, void* userData );
		public extern static GList* g_list_delete_link( GList* list, GList* link_ );
		public extern static GList* g_list_find( GList* list, void* data );
		public extern static GList* g_list_find_custom( GList* list, void* data, Functors.Func<void*, void*, int> func );
		public extern static GList* g_list_first( GList* list );
		public extern static void g_list_foreach( GList* list, Functors.Action<void*, void*> func, void* userData );
		public extern static void g_list_free( GList* list );
		public extern static void g_list_free_1( GList* list );
		public extern static void g_list_free_full( GList* list, Functors.Action<void*> freeFunc );
		public extern static int g_list_index( GList* list, void* data );
		public extern static GList* g_list_insert( GList* list, void* data, int position );
		public extern static GList* g_list_insert_before( GList* list, GList* sibling, void* data );
		public extern static GList* g_list_insert_before_link( GList* list, GList* sibling, GList* link_ );
		public extern static GList* g_list_insert_sorted( GList* list, void* data, Functors.Func<void*, void*, int> func );
		public extern static GList* g_list_insert_sorted_with_data( GList* list, void* data, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static GList* g_list_last( GList* list );
		public extern static uint g_list_length( GList* list );
		public extern static GList* g_list_nth( GList* list, uint n );
		public extern static void* g_list_nth_data( GList* list, uint n );
		public extern static GList* g_list_nth_prev( GList* list, uint n );
		public extern static int g_list_position( GList* list, GList* llink );
		public extern static GList* g_list_prepend( GList* list, void* data );
		public extern static GList* g_list_remove( GList* list, void* data );
		public extern static GList* g_list_remove_all( GList* list, void* data );
		public extern static GList* g_list_remove_link( GList* list, GList* llink );
		public extern static GList* g_list_reverse( GList* list );
		public extern static GList* g_list_sort( GList* list, Functors.Func<void*, void*, int> compareFunc );
		public extern static GList* g_list_sort_with_data( GList* list, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );

		[BackendHintReadNone]
		public extern static Boolean32 g_direct_equal( void* v1, void* v2 );
		[BackendHintReadNone]
		public extern static uint g_direct_hash( void* v );
		public extern static Boolean32 g_double_equal( void* v1, void* v2 );
		public extern static uint g_double_hash( void* v );
		public extern static Boolean32 g_hash_table_add( GHashTable* hashTable, void* key );
		public extern static Boolean32 g_hash_table_contains( GHashTable* hashTable, void* key );
		public extern static void g_hash_table_destroy( GHashTable* hashTable );
		public extern static void* g_hash_table_find( GHashTable* hashTable, Functors.Func<void*, void*, void*, Boolean32> predicate, void* userData );
		public extern static void g_hash_table_foreach( GHashTable* hashTable, Functors.Action<void*, void*, void*> func, void* userData );
		public extern static uint g_hash_table_foreach_remove( GHashTable* hashTable, Functors.Func<void*, void*, void*, Boolean32> func, void* userData );
		public extern static uint g_hash_table_foreach_steal( GHashTable* hashTable, Functors.Func<void*, void*, void*, Boolean32> func, void* userData );
		public extern static GList* g_hash_table_get_keys( GHashTable* hashTable );
		public extern static void** g_hash_table_get_keys_as_array( GHashTable* hashTable, uint* length );
		public extern static GList* g_hash_table_get_values( GHashTable* hashTable );
		public extern static Boolean32 g_hash_table_insert( GHashTable* hashTable, void* key, void* value );
		public extern static GHashTable* g_hash_table_iter_get_hash_table( GHashTableIter* iter );
		public extern static void g_hash_table_iter_init( GHashTableIter* iter, GHashTable* hashTable );
		public extern static Boolean32 g_hash_table_iter_next( GHashTableIter* iter, void** key, void** value );
		public extern static void g_hash_table_iter_remove( GHashTableIter* iter );
		public extern static void g_hash_table_iter_replace( GHashTableIter* iter, void* value );
		public extern static void g_hash_table_iter_steal( GHashTableIter* iter );
		public extern static void* g_hash_table_lookup( GHashTable* hashTable, void* key );
		public extern static Boolean32 g_hash_table_lookup_extended( GHashTable* hashTable, void* lookupKey, void** origKey, void** value );
		public extern static GHashTable* g_hash_table_new( Functors.Func<void*, uint> hashFunc, Functors.Func<void*, void*, Boolean32> keyEqualFunc );
		public extern static GHashTable* g_hash_table_new_full( Functors.Func<void*, uint> hashFunc, Functors.Func<void*, void*, Boolean32> keyEqualFunc, Functors.Action<void*> keyDestroyFunc, Functors.Action<void*> valueDestroyFunc );
		public extern static GHashTable* g_hash_table_new_similar( GHashTable* otherHashTable );
		public extern static GHashTable* g_hash_table_ref( GHashTable* hashTable );
		public extern static Boolean32 g_hash_table_remove( GHashTable* hashTable, void* key );
		public extern static void g_hash_table_remove_all( GHashTable* hashTable );
		public extern static Boolean32 g_hash_table_replace( GHashTable* hashTable, void* key, void* value );
		public extern static uint g_hash_table_size( GHashTable* hashTable );
		public extern static Boolean32 g_hash_table_steal( GHashTable* hashTable, void* key );
		public extern static void g_hash_table_steal_all( GHashTable* hashTable );
		public extern static Boolean32 g_hash_table_steal_extended( GHashTable* hashTable, void* lookupKey, void** stolenKey, void** stolenValue );
		public extern static void g_hash_table_unref( GHashTable* hashTable );
		public extern static Boolean32 g_int_equal( void* v1, void* v2 );
		public extern static uint g_int_hash( void* v );
		public extern static Boolean32 g_int64_equal( void* v1, void* v2 );
		public extern static uint g_int64_hash( void* v );
		public extern static Boolean32 g_str_equal( void* v1, void* v2 );
		public extern static uint g_str_hash( void* v );

		public extern static sbyte* g_compute_hmac_for_bytes( GChecksumType digestType, GBytes* key, GBytes* data );
		public extern static sbyte* g_compute_hmac_for_data( GChecksumType digestType, byte* key, uintptr keyLen, byte* data, uintptr length );
		public extern static sbyte* g_compute_hmac_for_string( GChecksumType digestType, byte* key, uintptr keyLen, sbyte* str, intptr length );
		public extern static GHmac* g_hmac_copy( GHmac* hmac );
		public extern static void g_hmac_get_digest( GHmac* hmac, byte* buffer, uintptr* digestLen );
		public extern static sbyte* g_hmac_get_string( GHmac* hmac );
		public extern static GHmac* g_hmac_new( GChecksumType digestType, byte* key, uintptr keyLen );
		public extern static GHmac* g_hmac_ref( GHmac* hmac );
		public extern static void g_hmac_unref( GHmac* hmac );
		public extern static void g_hmac_update( GHmac* hmac, byte* data, intptr length );

		public extern static GHook* g_hook_alloc( GHookList* hookList );
		public extern static int g_hook_compare_ids( GHook* newHook, GHook* sibling );
		public extern static Boolean32 g_hook_destroy( GHookList* hookList, uintptr hookId );
		public extern static void g_hook_destroy_link( GHookList* hookList, GHook* hook );
		public extern static GHook* g_hook_find( GHookList* hookList, Boolean32 needValids, Functors.Func<GHook*, void*, Boolean32> func, void* data );
		public extern static GHook* g_hook_find_data( GHookList* hookList, Boolean32 needValids, void* data );
		public extern static GHook* g_hook_find_func( GHookList* hookList, Boolean32 needValids, void* func );
		public extern static GHook* g_hook_find_func_data( GHookList* hookList, Boolean32 needValids, void* func, void* data );
		public extern static GHook* g_hook_first_valid( GHookList* hookList, Boolean32 mayBeInCall );
		public extern static void g_hook_free( GHookList* hookList, GHook* hook );
		public extern static GHook* g_hook_get( GHookList* hookList, uintptr hookId );
		public extern static void g_hook_insert_before( GHookList* hookList, GHook* sibling, GHook* hook );
		public extern static void g_hook_insert_sorted( GHookList* hookList, GHook* hook, Functors.Func<GHook*, GHook*, int> func );
		public extern static void g_hook_list_clear( GHookList* hookList );
		public extern static void g_hook_list_init( GHookList* hookList, uint hookSize );
		public extern static void g_hook_list_invoke( GHookList* hookList, Boolean32 mayRecurse );
		public extern static void g_hook_list_invoke_check( GHookList* hookList, Boolean32 mayRecurse );
		public extern static void g_hook_list_marshal( GHookList* hookList, Boolean32 mayRecurse, Functors.Action<GHook*, void*> marshaller, void* marshalData );
		public extern static void g_hook_list_marshal_check( GHookList* hookList, Boolean32 mayRecurse, Functors.Func<GHook*, void*, Boolean32> marshaller, void* marshalData );
		public extern static GHook* g_hook_next_valid( GHookList* hookList, GHook* hook, Boolean32 mayBeInCall );
		public extern static void g_hook_prepend( GHookList* hookList, GHook* hook );
		public extern static GHook* g_hook_ref( GHookList* hookList, GHook* hook );
		public extern static void g_hook_unref( GHookList* hookList, GHook* hook );

		public extern static Boolean32 g_hostname_is_ascii_encoded( CUtf8String hostname );
		public extern static Boolean32 g_hostname_is_ip_address( CUtf8String hostname );
		public extern static Boolean32 g_hostname_is_non_ascii( CUtf8String hostname );
		public extern static sbyte* g_hostname_to_ascii( CUtf8String hostname );
		public extern static sbyte* g_hostname_to_unicode( CUtf8String hostname );

		public extern static int g_poll( GPollFD* fds, uint nfds, int timeout );

		public extern static void g_clear_slist( GSList** slistPtr, Functors.Action<void*> destroy );
		public extern static GSList* g_slist_alloc();
		public extern static GSList* g_slist_append( GSList* list, void* data );
		public extern static GSList* g_slist_concat( GSList* list1, GSList* list2 );
		public extern static GSList* g_slist_copy( GSList* list );
		public extern static GSList* g_slist_copy_deep( GSList* list, Functors.Func<void*, void*, void*> func, void* userData );
		public extern static GSList* g_slist_delete_link( GSList* list, GSList* link_ );
		public extern static GSList* g_slist_find( GSList* list, void* data );
		public extern static GSList* g_slist_find_custom( GSList* list, void* data, Functors.Func<void*, void*, int> func );
		public extern static void g_slist_foreach( GSList* list, Functors.Action<void*, void*> func, void* userData );
		public extern static void g_slist_free( GSList* list );
		public extern static void g_slist_free_1( GSList* list );
		public extern static void g_slist_free_full( GSList* list, Functors.Action<void*> freeFunc );
		public extern static int g_slist_index( GSList* list, void* data );
		public extern static GSList* g_slist_insert( GSList* list, void* data, int position );
		public extern static GSList* g_slist_insert_before( GSList* slist, GSList* sibling, void* data );
		public extern static GSList* g_slist_insert_sorted( GSList* list, void* data, Functors.Func<void*, void*, int> func );
		public extern static GSList* g_slist_insert_sorted_with_data( GSList* list, void* data, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static GSList* g_slist_last( GSList* list );
		public extern static uint g_slist_length( GSList* list );
		public extern static GSList* g_slist_nth( GSList* list, uint n );
		public extern static void* g_slist_nth_data( GSList* list, uint n );
		public extern static int g_slist_position( GSList* list, GSList* llink );
		public extern static GSList* g_slist_prepend( GSList* list, void* data );
		public extern static GSList* g_slist_remove( GSList* list, void* data );
		public extern static GSList* g_slist_remove_all( GSList* list, void* data );
		public extern static GSList* g_slist_remove_link( GSList* list, GSList* link_ );
		public extern static GSList* g_slist_reverse( GSList* list );
		public extern static GSList* g_slist_sort( GSList* list, Functors.Func<void*, void*, int> compareFunc );
		public extern static GSList* g_slist_sort_with_data( GSList* list, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );

		public extern static uint g_child_watch_add( int pid, Functors.Action<int, int, void*> function, void* data );
		public extern static uint g_child_watch_add_full( int priority, int pid, Functors.Action<int, int, void*> function, void* data, Functors.Action<void*> notify );
		public extern static GSource* g_child_watch_source_new( int pid );
		public extern static void g_clear_handle_id( uint* tagPtr, Functors.Action<uint> clearFunc );
		public extern static void g_get_current_time( GTimeVal* result );
		public extern static intptr g_get_monotonic_time();
		public extern static intptr g_get_real_time();
		public extern static uint g_idle_add( Functors.Func<void*, Boolean32> function, void* data );
		public extern static uint g_idle_add_full( int priority, Functors.Func<void*, Boolean32> function, void* data, Functors.Action<void*> notify );
		public extern static uint g_idle_add_once( Functors.Action<void*> function, void* data );
		public extern static Boolean32 g_idle_remove_by_data( void* data );
		public extern static GSource* g_idle_source_new();
		public extern static Boolean32 g_main_context_acquire( GMainContext* context );
		public extern static void g_main_context_add_poll( GMainContext* context, GPollFD* fd, int priority );
		public extern static Boolean32 g_main_context_check( GMainContext* context, int maxPriority, GPollFD* fds, int nFds );
		public extern static GMainContext* g_main_context_default();
		public extern static void g_main_context_dispatch( GMainContext* context );
		public extern static GSource* g_main_context_find_source_by_funcs_user_data( GMainContext* context, GSourceFuncs* funcs, void* userData );
		public extern static GSource* g_main_context_find_source_by_id( GMainContext* context, uint sourceId );
		public extern static GSource* g_main_context_find_source_by_user_data( GMainContext* context, void* userData );
		public extern static Functors.Func<GPollFD*, uint, int, int> g_main_context_get_poll_func( GMainContext* context );
		public extern static GMainContext* g_main_context_get_thread_default();
		public extern static void g_main_context_invoke( GMainContext* context, Functors.Func<void*, Boolean32> function, void* data );
		public extern static void g_main_context_invoke_full( GMainContext* context, int priority, Functors.Func<void*, Boolean32> function, void* data, Functors.Action<void*> notify );
		public extern static Boolean32 g_main_context_is_owner( GMainContext* context );
		public extern static Boolean32 g_main_context_iteration( GMainContext* context, Boolean32 mayBlock );
		public extern static GMainContext* g_main_context_new();
		public extern static GMainContext* g_main_context_new_with_flags( GMainContextFlags flags );
		public extern static Boolean32 g_main_context_pending( GMainContext* context );
		public extern static void g_main_context_pop_thread_default( GMainContext* context );
		public extern static Boolean32 g_main_context_prepare( GMainContext* context, int* priority );
		public extern static void g_main_context_push_thread_default( GMainContext* context );
		public extern static int g_main_context_query( GMainContext* context, int maxPriority, int* timeout_, GPollFD* fds, int nFds );
		public extern static GMainContext* g_main_context_ref( GMainContext* context );
		public extern static GMainContext* g_main_context_ref_thread_default();
		public extern static void g_main_context_release( GMainContext* context );
		public extern static void g_main_context_remove_poll( GMainContext* context, GPollFD* fd );
		public extern static void g_main_context_set_poll_func( GMainContext* context, Functors.Func<GPollFD*, uint, int, int> func );
		public extern static void g_main_context_unref( GMainContext* context );
		public extern static Boolean32 g_main_context_wait( GMainContext* context, GCond* cond, GMutex* mutex );
		public extern static void g_main_context_wakeup( GMainContext* context );
		public extern static GSource* g_main_current_source();
		public extern static int g_main_depth();
		public extern static GMainContext* g_main_loop_get_context( GMainLoop* loop );
		public extern static Boolean32 g_main_loop_is_running( GMainLoop* loop );
		public extern static GMainLoop* g_main_loop_new( GMainContext* context, Boolean32 isRunning );
		public extern static void g_main_loop_quit( GMainLoop* loop );
		public extern static GMainLoop* g_main_loop_ref( GMainLoop* loop );
		public extern static void g_main_loop_run( GMainLoop* loop );
		public extern static void g_main_loop_unref( GMainLoop* loop );
		public extern static void g_source_add_child_source( GSource* source, GSource* childSource );
		public extern static void g_source_add_poll( GSource* source, GPollFD* fd );
		public extern static void* g_source_add_unix_fd( GSource* source, int fd, GIOCondition events );
		public extern static uint g_source_attach( GSource* source, GMainContext* context );
		public extern static void g_source_destroy( GSource* source );
		public extern static Boolean32 g_source_get_can_recurse( GSource* source );
		public extern static GMainContext* g_source_get_context( GSource* source );
		public extern static void g_source_get_current_time( GSource* source, GTimeVal* timeval );
		public extern static uint g_source_get_id( GSource* source );
		public extern static sbyte* g_source_get_name( GSource* source );
		public extern static int g_source_get_priority( GSource* source );
		public extern static intptr g_source_get_ready_time( GSource* source );
		public extern static intptr g_source_get_time( GSource* source );
		public extern static Boolean32 g_source_is_destroyed( GSource* source );
		public extern static void g_source_modify_unix_fd( GSource* source, void* tag, GIOCondition newEvents );
		public extern static GSource* g_source_new( GSourceFuncs* sourceFuncs, uint structSize );
		public extern static GIOCondition g_source_query_unix_fd( GSource* source, void* tag );
		public extern static GSource* g_source_ref( GSource* source );
		public extern static Boolean32 g_source_remove( uint tag );
		public extern static Boolean32 g_source_remove_by_funcs_user_data( GSourceFuncs* funcs, void* userData );
		public extern static Boolean32 g_source_remove_by_user_data( void* userData );
		public extern static void g_source_remove_child_source( GSource* source, GSource* childSource );
		public extern static void g_source_remove_poll( GSource* source, GPollFD* fd );
		public extern static void g_source_remove_unix_fd( GSource* source, void* tag );
		public extern static void g_source_set_callback( GSource* source, Functors.Func<void*, Boolean32> func, void* data, Functors.Action<void*> notify );
		public extern static void g_source_set_callback_indirect( GSource* source, void* callbackData, GSourceCallbackFuncs* callbackFuncs );
		public extern static void g_source_set_can_recurse( GSource* source, Boolean32 canRecurse );
		public extern static void g_source_set_dispose_function( GSource* source, Functors.Action<GSource*> dispose );
		public extern static void g_source_set_funcs( GSource* source, GSourceFuncs* funcs );
		public extern static void g_source_set_name( GSource* source, CUtf8String name );
		public extern static void g_source_set_name_by_id( uint tag, CUtf8String name );
		public extern static void g_source_set_priority( GSource* source, int priority );
		public extern static void g_source_set_ready_time( GSource* source, intptr readyTime );
		public extern static void g_source_set_static_name( GSource* source, CUtf8String name );
		public extern static void g_source_unref( GSource* source );
		public extern static uint g_timeout_add( uint interval, Functors.Func<void*, Boolean32> function, void* data );
		public extern static uint g_timeout_add_full( int priority, uint interval, Functors.Func<void*, Boolean32> function, void* data, Functors.Action<void*> notify );
		public extern static uint g_timeout_add_once( uint interval, Functors.Action<void*> function, void* data );
		public extern static uint g_timeout_add_seconds( uint interval, Functors.Func<void*, Boolean32> function, void* data );
		public extern static uint g_timeout_add_seconds_full( int priority, uint interval, Functors.Func<void*, Boolean32> function, void* data, Functors.Action<void*> notify );
		public extern static GSource* g_timeout_source_new( uint interval );
		public extern static GSource* g_timeout_source_new_seconds( uint interval );

		public extern static ushort* g_ucs4_to_utf16( uint* str, intptr len, intptr* itemsRead, intptr* itemsWritten, GError** error );
		public extern static sbyte* g_ucs4_to_utf8( uint* str, intptr len, intptr* itemsRead, intptr* itemsWritten, GError** error );
		[BackendHintReadNone]
		public extern static GUnicodeBreakType g_unichar_break_type( uint c );
		[BackendHintReadNone]
		public extern static int g_unichar_combining_class( uint uc );
		public extern static Boolean32 g_unichar_compose( uint a, uint b, uint* ch );
		public extern static Boolean32 g_unichar_decompose( uint ch, uint* a, uint* b );
		[BackendHintReadNone]
		public extern static int g_unichar_digit_value( uint c );
		public extern static uintptr g_unichar_fully_decompose( uint ch, Boolean32 compat, uint* result, uintptr resultLen );
		public extern static Boolean32 g_unichar_get_mirror_char( uint ch, uint* mirroredCh );
		[BackendHintReadNone]
		public extern static GUnicodeScript g_unichar_get_script( uint ch );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isalnum( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isalpha( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_iscntrl( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isdefined( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isdigit( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isgraph( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_islower( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_ismark( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isprint( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_ispunct( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isspace( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_istitle( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isupper( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_iswide( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_iswide_cjk( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_isxdigit( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_iszerowidth( uint c );
		public extern static int g_unichar_to_utf8( uint c, sbyte* outbuf );
		[BackendHintReadNone]
		public extern static uint g_unichar_tolower( uint c );
		[BackendHintReadNone]
		public extern static uint g_unichar_totitle( uint c );
		[BackendHintReadNone]
		public extern static uint g_unichar_toupper( uint c );
		[BackendHintReadNone]
		public extern static GUnicodeType g_unichar_type( uint c );
		[BackendHintReadNone]
		public extern static Boolean32 g_unichar_validate( uint ch );
		[BackendHintReadNone]
		public extern static int g_unichar_xdigit_value( uint c );
		public extern static uint* g_unicode_canonical_decomposition( uint ch, uintptr* resultLen );
		public extern static void g_unicode_canonical_ordering( uint* @string, uintptr len );
		public extern static GUnicodeScript g_unicode_script_from_iso15924( uint iso15924 );
		public extern static uint g_unicode_script_to_iso15924( GUnicodeScript script );
		public extern static uint* g_utf16_to_ucs4( ushort* str, intptr len, intptr* itemsRead, intptr* itemsWritten, GError** error );
		public extern static sbyte* g_utf16_to_utf8( ushort* str, intptr len, intptr* itemsRead, intptr* itemsWritten, GError** error );
		public extern static sbyte* g_utf8_casefold( sbyte* str, intptr len );
		[BackendHintReadOnly]
		public extern static int g_utf8_collate( sbyte* str1, sbyte* str2 );
		public extern static sbyte* g_utf8_collate_key( sbyte* str, intptr len );
		public extern static sbyte* g_utf8_collate_key_for_filename( sbyte* str, intptr len );
		[BackendHintReadOnly]
		public extern static sbyte* g_utf8_find_next_char( sbyte* p, sbyte* end );
		[BackendHintReadOnly]
		public extern static sbyte* g_utf8_find_prev_char( sbyte* str, sbyte* p );
		[BackendHintReadOnly]
		public extern static uint g_utf8_get_char( sbyte* p );
		[BackendHintReadOnly]
		public extern static uint g_utf8_get_char_validated( sbyte* p, intptr maxLen );
		public extern static sbyte* g_utf8_make_valid( sbyte* str, intptr len );
		public extern static sbyte* g_utf8_normalize( sbyte* str, intptr len, GNormalizeMode mode );
		[BackendHintReadOnly]
		public extern static sbyte* g_utf8_offset_to_pointer( sbyte* str, intptr offset );
		[BackendHintReadOnly]
		public extern static intptr g_utf8_pointer_to_offset( sbyte* str, sbyte* pos );
		[BackendHintReadOnly]
		public extern static sbyte* g_utf8_prev_char( sbyte* p );
		public extern static sbyte* g_utf8_strchr( sbyte* p, intptr len, uint c );
		public extern static sbyte* g_utf8_strdown( sbyte* str, intptr len );
		[BackendHintReadOnly]
		public extern static intptr g_utf8_strlen( sbyte* p, intptr max );
		public extern static sbyte* g_utf8_strncpy( sbyte* dest, sbyte* src, uintptr n );
		public extern static sbyte* g_utf8_strrchr( sbyte* p, intptr len, uint c );
		public extern static sbyte* g_utf8_strreverse( sbyte* str, intptr len );
		public extern static sbyte* g_utf8_strup( sbyte* str, intptr len );
		public extern static sbyte* g_utf8_substring( sbyte* str, intptr startPos, intptr endPos );
		public extern static uint* g_utf8_to_ucs4( sbyte* str, intptr len, intptr* itemsRead, intptr* itemsWritten, GError** error );
		public extern static uint* g_utf8_to_ucs4_fast( sbyte* str, intptr len, intptr* itemsWritten );
		public extern static ushort* g_utf8_to_utf16( sbyte* str, intptr len, intptr* itemsRead, intptr* itemsWritten, GError** error );
		public extern static Boolean32 g_utf8_validate( sbyte* str, intptr maxLen, sbyte** end );
		public extern static Boolean32 g_utf8_validate_len( sbyte* str, uintptr maxLen, sbyte** end );

		public extern static GString* g_string_append( GString* @string, sbyte* val );
		public extern static GString* g_string_append_c( GString* @string, sbyte c );
		public extern static GString* g_string_append_len( GString* @string, sbyte* val, intptr len );
		public extern static GString* g_string_append_unichar( GString* @string, uint wc );
		public extern static GString* g_string_append_uri_escaped( GString* @string, sbyte* unescaped, sbyte* reservedCharsAllowed, Boolean32 allowUtf8 );
		public extern static GString* g_string_ascii_down( GString* @string );
		public extern static GString* g_string_ascii_up( GString* @string );
		public extern static GString* g_string_assign( GString* @string, sbyte* rval );
		public extern static GString* g_string_down( GString* @string );
		public extern static Boolean32 g_string_equal( GString* v, GString* v2 );
		public extern static GString* g_string_erase( GString* @string, intptr pos, intptr len );
		public extern static sbyte* g_string_free( GString* @string, Boolean32 freeSegment );
		public extern static GBytes* g_string_free_to_bytes( GString* @string );
		public extern static uint g_string_hash( GString* str );
		public extern static GString* g_string_insert( GString* @string, intptr pos, sbyte* val );
		public extern static GString* g_string_insert_c( GString* @string, intptr pos, sbyte c );
		public extern static GString* g_string_insert_len( GString* @string, intptr pos, sbyte* val, intptr len );
		public extern static GString* g_string_insert_unichar( GString* @string, intptr pos, uint wc );
		public extern static GString* g_string_new( sbyte* init );
		public extern static GString* g_string_new_len( sbyte* init, intptr len );
		public extern static GString* g_string_overwrite( GString* @string, uintptr pos, sbyte* val );
		public extern static GString* g_string_overwrite_len( GString* @string, uintptr pos, sbyte* val, intptr len );
		public extern static GString* g_string_prepend( GString* @string, sbyte* val );
		public extern static GString* g_string_prepend_c( GString* @string, sbyte c );
		public extern static GString* g_string_prepend_len( GString* @string, sbyte* val, intptr len );
		public extern static GString* g_string_prepend_unichar( GString* @string, uint wc );
		public extern static uint g_string_replace( GString* @string, sbyte* find, sbyte* replace, uint limit );
		public extern static GString* g_string_set_size( GString* @string, uintptr len );
		public extern static GString* g_string_sized_new( uintptr dflSize );
		public extern static GString* g_string_truncate( GString* @string, uintptr len );
		public extern static GString* g_string_up( GString* @string );

		public extern static uint g_io_add_watch( GIOChannel* channel, GIOCondition condition, Functors.Func<GIOChannel*, GIOCondition, void*, Boolean32> func, void* userData );
		public extern static uint g_io_add_watch_full( GIOChannel* channel, int priority, GIOCondition condition, Functors.Func<GIOChannel*, GIOCondition, void*, Boolean32> func, void* userData, Functors.Action<void*> notify );
		public extern static void g_io_channel_close( GIOChannel* channel );
		public extern static GIOChannelError g_io_channel_error_from_errno( int en );
		public extern static uint g_io_channel_error_quark();
		public extern static GIOStatus g_io_channel_flush( GIOChannel* channel, GError** error );
		public extern static GIOCondition g_io_channel_get_buffer_condition( GIOChannel* channel );
		public extern static uintptr g_io_channel_get_buffer_size( GIOChannel* channel );
		public extern static Boolean32 g_io_channel_get_buffered( GIOChannel* channel );
		public extern static Boolean32 g_io_channel_get_close_on_unref( GIOChannel* channel );
		public extern static sbyte* g_io_channel_get_encoding( GIOChannel* channel );
		public extern static GIOFlags g_io_channel_get_flags( GIOChannel* channel );
		public extern static sbyte* g_io_channel_get_line_term( GIOChannel* channel, int* length );
		public extern static void g_io_channel_init( GIOChannel* channel );
		public extern static GIOChannel* g_io_channel_new_file( CUtf8String filename, sbyte* mode, GError** error );
		public extern static GIOError g_io_channel_read( GIOChannel* channel, sbyte* buf, uintptr count, uintptr* bytesRead );
		public extern static GIOStatus g_io_channel_read_chars( GIOChannel* channel, sbyte* buf, uintptr count, uintptr* bytesRead, GError** error );
		public extern static GIOStatus g_io_channel_read_line( GIOChannel* channel, sbyte** strReturn, uintptr* length, uintptr* terminatorPos, GError** error );
		public extern static GIOStatus g_io_channel_read_line_string( GIOChannel* channel, GString* buffer, uintptr* terminatorPos, GError** error );
		public extern static GIOStatus g_io_channel_read_to_end( GIOChannel* channel, sbyte** strReturn, uintptr* length, GError** error );
		public extern static GIOStatus g_io_channel_read_unichar( GIOChannel* channel, uint* thechar, GError** error );
		public extern static GIOChannel* g_io_channel_ref( GIOChannel* channel );
		public extern static GIOError g_io_channel_seek( GIOChannel* channel, intptr offset, GSeekType type );
		public extern static GIOStatus g_io_channel_seek_position( GIOChannel* channel, intptr offset, GSeekType type, GError** error );
		public extern static void g_io_channel_set_buffer_size( GIOChannel* channel, uintptr size );
		public extern static void g_io_channel_set_buffered( GIOChannel* channel, Boolean32 buffered );
		public extern static void g_io_channel_set_close_on_unref( GIOChannel* channel, Boolean32 doClose );
		public extern static GIOStatus g_io_channel_set_encoding( GIOChannel* channel, sbyte* encoding, GError** error );
		public extern static GIOStatus g_io_channel_set_flags( GIOChannel* channel, GIOFlags flags, GError** error );
		public extern static void g_io_channel_set_line_term( GIOChannel* channel, sbyte* lineTerm, int length );
		public extern static GIOStatus g_io_channel_shutdown( GIOChannel* channel, Boolean32 flush, GError** err );
		public extern static int g_io_channel_unix_get_fd( GIOChannel* channel );
		public extern static GIOChannel* g_io_channel_unix_new( int fd );
		public extern static void g_io_channel_unref( GIOChannel* channel );
		public extern static GIOError g_io_channel_write( GIOChannel* channel, sbyte* buf, uintptr count, uintptr* bytesWritten );
		public extern static GIOStatus g_io_channel_write_chars( GIOChannel* channel, sbyte* buf, intptr count, uintptr* bytesWritten, GError** error );
		public extern static GIOStatus g_io_channel_write_unichar( GIOChannel* channel, uint thechar, GError** error );
		public extern static GSource* g_io_create_watch( GIOChannel* channel, GIOCondition condition );

		public extern static uint g_key_file_error_quark();
		public extern static void g_key_file_free( GKeyFile* keyFile );
		public extern static Boolean32 g_key_file_get_boolean( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static Boolean32* g_key_file_get_boolean_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, uintptr* length, GError** error );
		public extern static sbyte* g_key_file_get_comment( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static double g_key_file_get_double( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static double* g_key_file_get_double_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, uintptr* length, GError** error );
		public extern static sbyte** g_key_file_get_groups( GKeyFile* keyFile, uintptr* length );
		public extern static intptr g_key_file_get_int64( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static int g_key_file_get_integer( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static int* g_key_file_get_integer_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, uintptr* length, GError** error );
		public extern static sbyte** g_key_file_get_keys( GKeyFile* keyFile, CUtf8String groupName, uintptr* length, GError** error );
		public extern static sbyte* g_key_file_get_locale_for_key( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte* locale );
		public extern static sbyte* g_key_file_get_locale_string( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte* locale, GError** error );
		public extern static sbyte** g_key_file_get_locale_string_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte* locale, uintptr* length, GError** error );
		public extern static sbyte* g_key_file_get_start_group( GKeyFile* keyFile );
		public extern static sbyte* g_key_file_get_string( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static sbyte** g_key_file_get_string_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, uintptr* length, GError** error );
		public extern static uintptr g_key_file_get_uint64( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static sbyte* g_key_file_get_value( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static Boolean32 g_key_file_has_group( GKeyFile* keyFile, CUtf8String groupName );
		public extern static Boolean32 g_key_file_has_key( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static Boolean32 g_key_file_load_from_bytes( GKeyFile* keyFile, GBytes* bytes, GKeyFileFlags flags, GError** error );
		public extern static Boolean32 g_key_file_load_from_data( GKeyFile* keyFile, sbyte* data, uintptr length, GKeyFileFlags flags, GError** error );
		public extern static Boolean32 g_key_file_load_from_data_dirs( GKeyFile* keyFile, sbyte* file, sbyte** fullPath, GKeyFileFlags flags, GError** error );
		public extern static Boolean32 g_key_file_load_from_dirs( GKeyFile* keyFile, sbyte* file, sbyte** searchDirs, sbyte** fullPath, GKeyFileFlags flags, GError** error );
		public extern static Boolean32 g_key_file_load_from_file( GKeyFile* keyFile, sbyte* file, GKeyFileFlags flags, GError** error );
		public extern static GKeyFile* g_key_file_new();
		public extern static GKeyFile* g_key_file_ref( GKeyFile* keyFile );
		public extern static Boolean32 g_key_file_remove_comment( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static Boolean32 g_key_file_remove_group( GKeyFile* keyFile, CUtf8String groupName, GError** error );
		public extern static Boolean32 g_key_file_remove_key( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, GError** error );
		public extern static Boolean32 g_key_file_save_to_file( GKeyFile* keyFile, CUtf8String filename, GError** error );
		public extern static void g_key_file_set_boolean( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, Boolean32 value );
		public extern static void g_key_file_set_boolean_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, Boolean32* list, uintptr length );
		public extern static Boolean32 g_key_file_set_comment( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, CUtf8String comment, GError** error );
		public extern static void g_key_file_set_double( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, double value );
		public extern static void g_key_file_set_double_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, double* list, uintptr length );
		public extern static void g_key_file_set_int64( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, intptr value );
		public extern static void g_key_file_set_integer( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, int value );
		public extern static void g_key_file_set_integer_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, int* list, uintptr length );
		public extern static void g_key_file_set_list_separator( GKeyFile* keyFile, sbyte separator );
		public extern static void g_key_file_set_locale_string( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte* locale, sbyte* @string );
		public extern static void g_key_file_set_locale_string_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte* locale, sbyte** list, uintptr length );
		public extern static void g_key_file_set_string( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte* @string );
		public extern static void g_key_file_set_string_list( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte** list, uintptr length );
		public extern static void g_key_file_set_uint64( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, uintptr value );
		public extern static void g_key_file_set_value( GKeyFile* keyFile, CUtf8String groupName, sbyte* key, sbyte* value );
		public extern static sbyte* g_key_file_to_data( GKeyFile* keyFile, uintptr* length, GError** error );
		public extern static void g_key_file_unref( GKeyFile* keyFile );

		public extern static void g_mapped_file_free( GMappedFile* file );
		public extern static GBytes* g_mapped_file_get_bytes( GMappedFile* file );
		public extern static sbyte* g_mapped_file_get_contents( GMappedFile* file );
		public extern static uintptr g_mapped_file_get_length( GMappedFile* file );
		public extern static GMappedFile* g_mapped_file_new( CUtf8String filename, Boolean32 writable, GError** error );
		public extern static GMappedFile* g_mapped_file_new_from_fd( int fd, Boolean32 writable, GError** error );
		public extern static GMappedFile* g_mapped_file_ref( GMappedFile* file );
		public extern static void g_mapped_file_unref( GMappedFile* file );

		public extern static uint g_markup_error_quark();
		public extern static sbyte* g_markup_escape_text( CUtf8String text, intptr length );
		public extern static Boolean32 g_markup_parse_context_end_parse( GMarkupParseContext* context, GError** error );
		public extern static void g_markup_parse_context_free( GMarkupParseContext* context );
		public extern static sbyte* g_markup_parse_context_get_element( GMarkupParseContext* context );
		public extern static GSList* g_markup_parse_context_get_element_stack( GMarkupParseContext* context );
		public extern static void g_markup_parse_context_get_position( GMarkupParseContext* context, int* lineNumber, int* charNumber );
		public extern static void* g_markup_parse_context_get_user_data( GMarkupParseContext* context );
		public extern static GMarkupParseContext* g_markup_parse_context_new( GMarkupParser* parser, GMarkupParseFlags flags, void* userData, Functors.Action<void*> userDataDnotify );
		public extern static Boolean32 g_markup_parse_context_parse( GMarkupParseContext* context, CUtf8String text, intptr textLen, GError** error );
		public extern static void* g_markup_parse_context_pop( GMarkupParseContext* context );
		public extern static void g_markup_parse_context_push( GMarkupParseContext* context, GMarkupParser* parser, void* userData );
		public extern static GMarkupParseContext* g_markup_parse_context_ref( GMarkupParseContext* context );
		public extern static void g_markup_parse_context_unref( GMarkupParseContext* context );

		public extern static GVariantType* g_variant_type_checked_( sbyte* p0 );
		public extern static GVariantType* g_variant_type_copy( GVariantType* type );
		public extern static sbyte* g_variant_type_dup_string( GVariantType* type );
		public extern static GVariantType* g_variant_type_element( GVariantType* type );
		public extern static Boolean32 g_variant_type_equal( void* type1, void* type2 );
		public extern static GVariantType* g_variant_type_first( GVariantType* type );
		public extern static void g_variant_type_free( GVariantType* type );
		public extern static uintptr g_variant_type_get_string_length( GVariantType* type );
		public extern static uint g_variant_type_hash( void* type );
		public extern static Boolean32 g_variant_type_is_array( GVariantType* type );
		public extern static Boolean32 g_variant_type_is_basic( GVariantType* type );
		public extern static Boolean32 g_variant_type_is_container( GVariantType* type );
		public extern static Boolean32 g_variant_type_is_definite( GVariantType* type );
		public extern static Boolean32 g_variant_type_is_dict_entry( GVariantType* type );
		public extern static Boolean32 g_variant_type_is_maybe( GVariantType* type );
		public extern static Boolean32 g_variant_type_is_subtype_of( GVariantType* type, GVariantType* supertype );
		public extern static Boolean32 g_variant_type_is_tuple( GVariantType* type );
		public extern static Boolean32 g_variant_type_is_variant( GVariantType* type );
		public extern static GVariantType* g_variant_type_key( GVariantType* type );
		public extern static uintptr g_variant_type_n_items( GVariantType* type );
		public extern static GVariantType* g_variant_type_new( sbyte* typeString );
		public extern static GVariantType* g_variant_type_new_array( GVariantType* element );
		public extern static GVariantType* g_variant_type_new_dict_entry( GVariantType* key, GVariantType* value );
		public extern static GVariantType* g_variant_type_new_maybe( GVariantType* element );
		public extern static GVariantType* g_variant_type_new_tuple( GVariantType** items, int length );
		public extern static GVariantType* g_variant_type_next( GVariantType* type );
		public extern static sbyte* g_variant_type_peek_string( GVariantType* type );
		public extern static uintptr g_variant_type_string_get_depth_( sbyte* typeString );
		public extern static Boolean32 g_variant_type_string_is_valid( sbyte* typeString );
		public extern static Boolean32 g_variant_type_string_scan( sbyte* @string, sbyte* limit, sbyte** endptr );
		public extern static GVariantType* g_variant_type_value( GVariantType* type );

		public extern static void g_variant_builder_add_value( GVariantBuilder* builder, GVariant* value );
		public extern static void g_variant_builder_clear( GVariantBuilder* builder );
		public extern static void g_variant_builder_close( GVariantBuilder* builder );
		public extern static GVariant* g_variant_builder_end( GVariantBuilder* builder );
		public extern static void g_variant_builder_init( GVariantBuilder* builder, GVariantType* type );
		public extern static GVariantBuilder* g_variant_builder_new( GVariantType* type );
		public extern static void g_variant_builder_open( GVariantBuilder* builder, GVariantType* type );
		public extern static GVariantBuilder* g_variant_builder_ref( GVariantBuilder* builder );
		public extern static void g_variant_builder_unref( GVariantBuilder* builder );
		public extern static GVariant* g_variant_byteswap( GVariant* value );
		public extern static Boolean32 g_variant_check_format_string( GVariant* value, sbyte* formatString, Boolean32 copyOnly );
		public extern static GVariantClass g_variant_classify( GVariant* value );
		public extern static int g_variant_compare( void* one, void* two );
		public extern static void g_variant_dict_clear( GVariantDict* dict );
		public extern static Boolean32 g_variant_dict_contains( GVariantDict* dict, sbyte* key );
		public extern static GVariant* g_variant_dict_end( GVariantDict* dict );
		public extern static void g_variant_dict_init( GVariantDict* dict, GVariant* fromAsv );
		public extern static void g_variant_dict_insert_value( GVariantDict* dict, sbyte* key, GVariant* value );
		public extern static GVariant* g_variant_dict_lookup_value( GVariantDict* dict, sbyte* key, GVariantType* expectedType );
		public extern static GVariantDict* g_variant_dict_new( GVariant* fromAsv );
		public extern static GVariantDict* g_variant_dict_ref( GVariantDict* dict );
		public extern static Boolean32 g_variant_dict_remove( GVariantDict* dict, sbyte* key );
		public extern static void g_variant_dict_unref( GVariantDict* dict );
		public extern static sbyte* g_variant_dup_bytestring( GVariant* value, uintptr* length );
		public extern static sbyte** g_variant_dup_bytestring_array( GVariant* value, uintptr* length );
		public extern static sbyte** g_variant_dup_objv( GVariant* value, uintptr* length );
		public extern static sbyte* g_variant_dup_string( GVariant* value, uintptr* length );
		public extern static sbyte** g_variant_dup_strv( GVariant* value, uintptr* length );
		public extern static Boolean32 g_variant_equal( void* one, void* two );
		public extern static Boolean32 g_variant_get_boolean( GVariant* value );
		public extern static byte g_variant_get_byte( GVariant* value );
		public extern static sbyte* g_variant_get_bytestring( GVariant* value );
		public extern static sbyte** g_variant_get_bytestring_array( GVariant* value, uintptr* length );
		public extern static GVariant* g_variant_get_child_value( GVariant* value, uintptr index_ );
		public extern static void* g_variant_get_data( GVariant* value );
		public extern static GBytes* g_variant_get_data_as_bytes( GVariant* value );
		public extern static double g_variant_get_double( GVariant* value );
		public extern static void* g_variant_get_fixed_array( GVariant* value, uintptr* nElements, uintptr elementSize );
		public extern static int g_variant_get_handle( GVariant* value );
		public extern static short g_variant_get_int16( GVariant* value );
		public extern static int g_variant_get_int32( GVariant* value );
		public extern static intptr g_variant_get_int64( GVariant* value );
		public extern static GVariant* g_variant_get_maybe( GVariant* value );
		public extern static GVariant* g_variant_get_normal_form( GVariant* value );
		public extern static sbyte** g_variant_get_objv( GVariant* value, uintptr* length );
		public extern static uintptr g_variant_get_size( GVariant* value );
		public extern static sbyte* g_variant_get_string( GVariant* value, uintptr* length );
		public extern static sbyte** g_variant_get_strv( GVariant* value, uintptr* length );
		public extern static GVariantType* g_variant_get_type( GVariant* value );
		public extern static sbyte* g_variant_get_type_string( GVariant* value );
		public extern static ushort g_variant_get_uint16( GVariant* value );
		public extern static uint g_variant_get_uint32( GVariant* value );
		public extern static uintptr g_variant_get_uint64( GVariant* value );
		public extern static GVariant* g_variant_get_variant( GVariant* value );
		public extern static uint g_variant_hash( void* value );
		public extern static Boolean32 g_variant_is_container( GVariant* value );
		public extern static Boolean32 g_variant_is_floating( GVariant* value );
		public extern static Boolean32 g_variant_is_normal_form( GVariant* value );
		public extern static Boolean32 g_variant_is_object_path( sbyte* @string );
		public extern static Boolean32 g_variant_is_of_type( GVariant* value, GVariantType* type );
		public extern static Boolean32 g_variant_is_signature( sbyte* @string );
		public extern static GVariantIter* g_variant_iter_copy( GVariantIter* iter );
		public extern static void g_variant_iter_free( GVariantIter* iter );
		public extern static uintptr g_variant_iter_init( GVariantIter* iter, GVariant* value );
		public extern static uintptr g_variant_iter_n_children( GVariantIter* iter );
		public extern static GVariantIter* g_variant_iter_new( GVariant* value );
		public extern static GVariant* g_variant_iter_next_value( GVariantIter* iter );
		public extern static GVariant* g_variant_lookup_value( GVariant* dictionary, sbyte* key, GVariantType* expectedType );
		public extern static uintptr g_variant_n_children( GVariant* value );
		public extern static GVariant* g_variant_new_array( GVariantType* childType, GVariant** children, uintptr nChildren );
		public extern static GVariant* g_variant_new_boolean( Boolean32 value );
		public extern static GVariant* g_variant_new_byte( byte value );
		public extern static GVariant* g_variant_new_bytestring( sbyte* @string );
		public extern static GVariant* g_variant_new_bytestring_array( sbyte** strv, intptr length );
		public extern static GVariant* g_variant_new_dict_entry( GVariant* key, GVariant* value );
		public extern static GVariant* g_variant_new_double( double value );
		public extern static GVariant* g_variant_new_fixed_array( GVariantType* elementType, void* elements, uintptr nElements, uintptr elementSize );
		public extern static GVariant* g_variant_new_from_bytes( GVariantType* type, GBytes* bytes, Boolean32 trusted );
		public extern static GVariant* g_variant_new_from_data( GVariantType* type, void* data, uintptr size, Boolean32 trusted, Functors.Action<void*> notify, void* userData );
		public extern static GVariant* g_variant_new_handle( int value );
		public extern static GVariant* g_variant_new_int16( short value );
		public extern static GVariant* g_variant_new_int32( int value );
		public extern static GVariant* g_variant_new_int64( intptr value );
		public extern static GVariant* g_variant_new_maybe( GVariantType* childType, GVariant* child );
		public extern static GVariant* g_variant_new_object_path( sbyte* objectPath );
		public extern static GVariant* g_variant_new_objv( sbyte** strv, intptr length );
		public extern static GVariant* g_variant_new_signature( sbyte* signature );
		public extern static GVariant* g_variant_new_string( sbyte* @string );
		public extern static GVariant* g_variant_new_strv( sbyte** strv, intptr length );
		public extern static GVariant* g_variant_new_take_string( sbyte* @string );
		public extern static GVariant* g_variant_new_tuple( GVariant** children, uintptr nChildren );
		public extern static GVariant* g_variant_new_uint16( ushort value );
		public extern static GVariant* g_variant_new_uint32( uint value );
		public extern static GVariant* g_variant_new_uint64( uintptr value );
		public extern static GVariant* g_variant_new_variant( GVariant* value );
		public extern static GVariant* g_variant_parse( GVariantType* type, CUtf8String text, sbyte* limit, sbyte** endptr, GError** error );
		public extern static sbyte* g_variant_parse_error_print_context( GError* error, sbyte* sourceStr );
		public extern static uint g_variant_parse_error_quark();
		public extern static uint g_variant_parser_get_error_quark();
		public extern static sbyte* g_variant_print( GVariant* value, Boolean32 typeAnnotate );
		public extern static GString* g_variant_print_string( GVariant* value, GString* @string, Boolean32 typeAnnotate );
		public extern static GVariant* g_variant_ref( GVariant* value );
		public extern static GVariant* g_variant_ref_sink( GVariant* value );
		public extern static void g_variant_store( GVariant* value, void* data );
		public extern static GVariant* g_variant_take_ref( GVariant* value );
		public extern static void g_variant_unref( GVariant* value );

		public extern static void g_assert_warning( sbyte* logDomain, sbyte* file, int line, sbyte* prettyFunction, sbyte* expression );
		public extern static void g_log_default_handler( sbyte* logDomain, GLogLevelFlags logLevel, sbyte* message, void* unusedData );
		public extern static Boolean32 g_log_get_debug_enabled();
		public extern static void g_log_remove_handler( sbyte* logDomain, uint handlerId );
		public extern static GLogLevelFlags g_log_set_always_fatal( GLogLevelFlags fatalMask );
		public extern static void g_log_set_debug_enabled( Boolean32 enabled );
		public extern static Functors.Action<sbyte*, GLogLevelFlags, sbyte*, void*> g_log_set_default_handler( Functors.Action<sbyte*, GLogLevelFlags, sbyte*, void*> logFunc, void* userData );
		public extern static GLogLevelFlags g_log_set_fatal_mask( sbyte* logDomain, GLogLevelFlags fatalMask );
		public extern static uint g_log_set_handler( sbyte* logDomain, GLogLevelFlags logLevels, Functors.Action<sbyte*, GLogLevelFlags, sbyte*, void*> logFunc, void* userData );
		public extern static uint g_log_set_handler_full( sbyte* logDomain, GLogLevelFlags logLevels, Functors.Action<sbyte*, GLogLevelFlags, sbyte*, void*> logFunc, void* userData, Functors.Action<void*> destroy );
		public extern static void g_log_set_writer_func( Functors.Func<GLogLevelFlags, GLogField*, uintptr, void*, GLogWriterOutput> func, void* userData, Functors.Action<void*> userDataFree );
		public extern static void g_log_structured_array( GLogLevelFlags logLevel, GLogField* fields, uintptr nFields );
		public extern static void g_log_variant( sbyte* logDomain, GLogLevelFlags logLevel, GVariant* fields );
		public extern static GLogWriterOutput g_log_writer_default( GLogLevelFlags logLevel, GLogField* fields, uintptr nFields, void* userData );
		public extern static void g_log_writer_default_set_use_stderr( Boolean32 useStderr );
		public extern static Boolean32 g_log_writer_default_would_drop( GLogLevelFlags logLevel, sbyte* logDomain );
		public extern static sbyte* g_log_writer_format_fields( GLogLevelFlags logLevel, GLogField* fields, uintptr nFields, Boolean32 useColor );
		public extern static Boolean32 g_log_writer_is_journald( int outputFd );
		public extern static GLogWriterOutput g_log_writer_journald( GLogLevelFlags logLevel, GLogField* fields, uintptr nFields, void* userData );
		public extern static GLogWriterOutput g_log_writer_standard_streams( GLogLevelFlags logLevel, GLogField* fields, uintptr nFields, void* userData );
		public extern static Boolean32 g_log_writer_supports_color( int outputFd );
		public extern static void g_return_if_fail_warning( sbyte* logDomain, sbyte* prettyFunction, sbyte* expression );
		public extern static Functors.Action<sbyte*> g_set_print_handler( Functors.Action<sbyte*> func );
		public extern static Functors.Action<sbyte*> g_set_printerr_handler( Functors.Action<sbyte*> func );
		public extern static void g_warn_message( sbyte* domain, sbyte* file, int line, sbyte* func, sbyte* warnexpr );

		public extern static void g_option_context_add_group( GOptionContext* context, GOptionGroup* group );
		public extern static void g_option_context_add_main_entries( GOptionContext* context, GOptionEntry* entries, sbyte* translationDomain );
		public extern static void g_option_context_free( GOptionContext* context );
		public extern static sbyte* g_option_context_get_description( GOptionContext* context );
		public extern static sbyte* g_option_context_get_help( GOptionContext* context, Boolean32 mainHelp, GOptionGroup* group );
		public extern static Boolean32 g_option_context_get_help_enabled( GOptionContext* context );
		public extern static Boolean32 g_option_context_get_ignore_unknown_options( GOptionContext* context );
		public extern static GOptionGroup* g_option_context_get_main_group( GOptionContext* context );
		public extern static Boolean32 g_option_context_get_strict_posix( GOptionContext* context );
		public extern static sbyte* g_option_context_get_summary( GOptionContext* context );
		public extern static GOptionContext* g_option_context_new( sbyte* parameterString );
		public extern static Boolean32 g_option_context_parse( GOptionContext* context, int* argc, sbyte*** argv, GError** error );
		public extern static Boolean32 g_option_context_parse_strv( GOptionContext* context, sbyte*** arguments, GError** error );
		public extern static void g_option_context_set_description( GOptionContext* context, CUtf8String description );
		public extern static void g_option_context_set_help_enabled( GOptionContext* context, Boolean32 helpEnabled );
		public extern static void g_option_context_set_ignore_unknown_options( GOptionContext* context, Boolean32 ignoreUnknown );
		public extern static void g_option_context_set_main_group( GOptionContext* context, GOptionGroup* group );
		public extern static void g_option_context_set_strict_posix( GOptionContext* context, Boolean32 strictPosix );
		public extern static void g_option_context_set_summary( GOptionContext* context, sbyte* summary );
		public extern static void g_option_context_set_translate_func( GOptionContext* context, Functors.Func<sbyte*, void*, sbyte*> func, void* data, Functors.Action<void*> destroyNotify );
		public extern static void g_option_context_set_translation_domain( GOptionContext* context, sbyte* domain );
		public extern static uint g_option_error_quark();
		public extern static void g_option_group_add_entries( GOptionGroup* group, GOptionEntry* entries );
		public extern static void g_option_group_free( GOptionGroup* group );
		public extern static GOptionGroup* g_option_group_new( CUtf8String name, CUtf8String description, CUtf8String helpDescription, void* userData, Functors.Action<void*> destroy );
		public extern static GOptionGroup* g_option_group_ref( GOptionGroup* group );
		public extern static void g_option_group_set_error_hook( GOptionGroup* group, Functors.Action<GOptionContext*, GOptionGroup*, void*, GError**> errorFunc );
		public extern static void g_option_group_set_parse_hooks( GOptionGroup* group, Functors.Func<GOptionContext*, GOptionGroup*, void*, GError**, Boolean32> preParseFunc, Functors.Func<GOptionContext*, GOptionGroup*, void*, GError**, Boolean32> postParseFunc );
		public extern static void g_option_group_set_translate_func( GOptionGroup* group, Functors.Func<sbyte*, void*, sbyte*> func, void* data, Functors.Action<void*> destroyNotify );
		public extern static void g_option_group_set_translation_domain( GOptionGroup* group, sbyte* domain );
		public extern static void g_option_group_unref( GOptionGroup* group );

		public extern static Boolean32 g_pattern_match( GPatternSpec* pspec, uint stringLength, sbyte* @string, sbyte* stringReversed );
		public extern static Boolean32 g_pattern_match_simple( sbyte* pattern, sbyte* @string );
		public extern static Boolean32 g_pattern_match_string( GPatternSpec* pspec, sbyte* @string );
		public extern static GPatternSpec* g_pattern_spec_copy( GPatternSpec* pspec );
		public extern static Boolean32 g_pattern_spec_equal( GPatternSpec* pspec1, GPatternSpec* pspec2 );
		public extern static void g_pattern_spec_free( GPatternSpec* pspec );
		public extern static Boolean32 g_pattern_spec_match( GPatternSpec* pspec, uintptr stringLength, sbyte* @string, sbyte* stringReversed );
		public extern static Boolean32 g_pattern_spec_match_string( GPatternSpec* pspec, sbyte* @string );
		public extern static GPatternSpec* g_pattern_spec_new( sbyte* pattern );

		[BackendHintReadNone]
		public extern static uint g_spaced_primes_closest( uint num );

		public extern static void g_qsort_with_data( void* pbase, int totalElems, uintptr size, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );

		public extern static void g_queue_clear( GQueue* queue );
		public extern static void g_queue_clear_full( GQueue* queue, Functors.Action<void*> freeFunc );
		public extern static GQueue* g_queue_copy( GQueue* queue );
		public extern static void g_queue_delete_link( GQueue* queue, GList* link_ );
		public extern static GList* g_queue_find( GQueue* queue, void* data );
		public extern static GList* g_queue_find_custom( GQueue* queue, void* data, Functors.Func<void*, void*, int> func );
		public extern static void g_queue_foreach( GQueue* queue, Functors.Action<void*, void*> func, void* userData );
		public extern static void g_queue_free( GQueue* queue );
		public extern static void g_queue_free_full( GQueue* queue, Functors.Action<void*> freeFunc );
		public extern static uint g_queue_get_length( GQueue* queue );
		public extern static int g_queue_index( GQueue* queue, void* data );
		public extern static void g_queue_init( GQueue* queue );
		public extern static void g_queue_insert_after( GQueue* queue, GList* sibling, void* data );
		public extern static void g_queue_insert_after_link( GQueue* queue, GList* sibling, GList* link_ );
		public extern static void g_queue_insert_before( GQueue* queue, GList* sibling, void* data );
		public extern static void g_queue_insert_before_link( GQueue* queue, GList* sibling, GList* link_ );
		public extern static void g_queue_insert_sorted( GQueue* queue, void* data, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static Boolean32 g_queue_is_empty( GQueue* queue );
		public extern static int g_queue_link_index( GQueue* queue, GList* link_ );
		public extern static GQueue* g_queue_new();
		public extern static void* g_queue_peek_head( GQueue* queue );
		public extern static GList* g_queue_peek_head_link( GQueue* queue );
		public extern static void* g_queue_peek_nth( GQueue* queue, uint n );
		public extern static GList* g_queue_peek_nth_link( GQueue* queue, uint n );
		public extern static void* g_queue_peek_tail( GQueue* queue );
		public extern static GList* g_queue_peek_tail_link( GQueue* queue );
		public extern static void* g_queue_pop_head( GQueue* queue );
		public extern static GList* g_queue_pop_head_link( GQueue* queue );
		public extern static void* g_queue_pop_nth( GQueue* queue, uint n );
		public extern static GList* g_queue_pop_nth_link( GQueue* queue, uint n );
		public extern static void* g_queue_pop_tail( GQueue* queue );
		public extern static GList* g_queue_pop_tail_link( GQueue* queue );
		public extern static void g_queue_push_head( GQueue* queue, void* data );
		public extern static void g_queue_push_head_link( GQueue* queue, GList* link_ );
		public extern static void g_queue_push_nth( GQueue* queue, void* data, int n );
		public extern static void g_queue_push_nth_link( GQueue* queue, int n, GList* link_ );
		public extern static void g_queue_push_tail( GQueue* queue, void* data );
		public extern static void g_queue_push_tail_link( GQueue* queue, GList* link_ );
		public extern static Boolean32 g_queue_remove( GQueue* queue, void* data );
		public extern static uint g_queue_remove_all( GQueue* queue, void* data );
		public extern static void g_queue_reverse( GQueue* queue );
		public extern static void g_queue_sort( GQueue* queue, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );
		public extern static void g_queue_unlink( GQueue* queue, GList* link_ );

		public extern static GRand* g_rand_copy( GRand* rand_ );
		public extern static double g_rand_double( GRand* rand_ );
		public extern static double g_rand_double_range( GRand* rand_, double begin, double end );
		public extern static void g_rand_free( GRand* rand_ );
		public extern static uint g_rand_int( GRand* rand_ );
		public extern static int g_rand_int_range( GRand* rand_, int begin, int end );
		public extern static GRand* g_rand_new();
		public extern static GRand* g_rand_new_with_seed( uint seed );
		public extern static GRand* g_rand_new_with_seed_array( uint* seed, uint seedLength );
		public extern static void g_rand_set_seed( GRand* rand_, uint seed );
		public extern static void g_rand_set_seed_array( GRand* rand_, uint* seed, uint seedLength );
		public extern static double g_random_double();
		public extern static double g_random_double_range( double begin, double end );
		public extern static uint g_random_int();
		public extern static int g_random_int_range( int begin, int end );
		public extern static void g_random_set_seed( uint seed );

		public extern static void* g_atomic_rc_box_acquire( void* memBlock );
		public extern static void* g_atomic_rc_box_alloc( uintptr blockSize );
		public extern static void* g_atomic_rc_box_alloc0( uintptr blockSize );
		public extern static void* g_atomic_rc_box_dup( uintptr blockSize, void* memBlock );
		public extern static uintptr g_atomic_rc_box_get_size( void* memBlock );
		public extern static void g_atomic_rc_box_release( void* memBlock );
		public extern static void g_atomic_rc_box_release_full( void* memBlock, Functors.Action<void*> clearFunc );
		public extern static void* g_rc_box_acquire( void* memBlock );
		public extern static void* g_rc_box_alloc( uintptr blockSize );
		public extern static void* g_rc_box_alloc0( uintptr blockSize );
		public extern static void* g_rc_box_dup( uintptr blockSize, void* memBlock );
		public extern static uintptr g_rc_box_get_size( void* memBlock );
		public extern static void g_rc_box_release( void* memBlock );
		public extern static void g_rc_box_release_full( void* memBlock, Functors.Action<void*> clearFunc );

		public extern static Boolean32 g_atomic_ref_count_compare( int* arc, int val );
		public extern static Boolean32 g_atomic_ref_count_dec( int* arc );
		public extern static void g_atomic_ref_count_inc( int* arc );
		public extern static void g_atomic_ref_count_init( int* arc );
		public extern static Boolean32 g_ref_count_compare( int* rc, int val );
		public extern static Boolean32 g_ref_count_dec( int* rc );
		public extern static void g_ref_count_inc( int* rc );
		public extern static void g_ref_count_init( int* rc );

		public extern static sbyte* g_ref_string_acquire( sbyte* str );
		public extern static uintptr g_ref_string_length( sbyte* str );
		public extern static sbyte* g_ref_string_new( sbyte* str );
		public extern static sbyte* g_ref_string_new_intern( sbyte* str );
		public extern static sbyte* g_ref_string_new_len( sbyte* str, intptr len );
		public extern static void g_ref_string_release( sbyte* str );

		public extern static sbyte* g_match_info_expand_references( GMatchInfo* matchInfo, sbyte* stringToExpand, GError** error );
		public extern static sbyte* g_match_info_fetch( GMatchInfo* matchInfo, int matchNum );
		public extern static sbyte** g_match_info_fetch_all( GMatchInfo* matchInfo );
		public extern static sbyte* g_match_info_fetch_named( GMatchInfo* matchInfo, CUtf8String name );
		public extern static Boolean32 g_match_info_fetch_named_pos( GMatchInfo* matchInfo, CUtf8String name, int* startPos, int* endPos );
		public extern static Boolean32 g_match_info_fetch_pos( GMatchInfo* matchInfo, int matchNum, int* startPos, int* endPos );
		public extern static void g_match_info_free( GMatchInfo* matchInfo );
		public extern static int g_match_info_get_match_count( GMatchInfo* matchInfo );
		public extern static GRegex* g_match_info_get_regex( GMatchInfo* matchInfo );
		public extern static sbyte* g_match_info_get_string( GMatchInfo* matchInfo );
		public extern static Boolean32 g_match_info_is_partial_match( GMatchInfo* matchInfo );
		public extern static Boolean32 g_match_info_matches( GMatchInfo* matchInfo );
		public extern static Boolean32 g_match_info_next( GMatchInfo* matchInfo, GError** error );
		public extern static GMatchInfo* g_match_info_ref( GMatchInfo* matchInfo );
		public extern static void g_match_info_unref( GMatchInfo* matchInfo );
		public extern static Boolean32 g_regex_check_replacement( sbyte* replacement, Boolean32* hasReferences, GError** error );
		public extern static uint g_regex_error_quark();
		public extern static sbyte* g_regex_escape_nul( sbyte* @string, int length );
		public extern static sbyte* g_regex_escape_string( sbyte* @string, int length );
		public extern static int g_regex_get_capture_count( GRegex* regex );
		public extern static GRegexCompileFlags g_regex_get_compile_flags( GRegex* regex );
		public extern static Boolean32 g_regex_get_has_cr_or_lf( GRegex* regex );
		public extern static GRegexMatchFlags g_regex_get_match_flags( GRegex* regex );
		public extern static int g_regex_get_max_backref( GRegex* regex );
		public extern static int g_regex_get_max_lookbehind( GRegex* regex );
		public extern static sbyte* g_regex_get_pattern( GRegex* regex );
		public extern static int g_regex_get_string_number( GRegex* regex, CUtf8String name );
		public extern static Boolean32 g_regex_match( GRegex* regex, sbyte* @string, GRegexMatchFlags matchOptions, GMatchInfo** matchInfo );
		public extern static Boolean32 g_regex_match_all( GRegex* regex, sbyte* @string, GRegexMatchFlags matchOptions, GMatchInfo** matchInfo );
		public extern static Boolean32 g_regex_match_all_full( GRegex* regex, sbyte* @string, intptr stringLen, int startPosition, GRegexMatchFlags matchOptions, GMatchInfo** matchInfo, GError** error );
		public extern static Boolean32 g_regex_match_full( GRegex* regex, sbyte* @string, intptr stringLen, int startPosition, GRegexMatchFlags matchOptions, GMatchInfo** matchInfo, GError** error );
		public extern static Boolean32 g_regex_match_simple( sbyte* pattern, sbyte* @string, GRegexCompileFlags compileOptions, GRegexMatchFlags matchOptions );
		public extern static GRegex* g_regex_new( sbyte* pattern, GRegexCompileFlags compileOptions, GRegexMatchFlags matchOptions, GError** error );
		public extern static GRegex* g_regex_ref( GRegex* regex );
		public extern static sbyte* g_regex_replace( GRegex* regex, sbyte* @string, intptr stringLen, int startPosition, sbyte* replacement, GRegexMatchFlags matchOptions, GError** error );
		public extern static sbyte* g_regex_replace_eval( GRegex* regex, sbyte* @string, intptr stringLen, int startPosition, GRegexMatchFlags matchOptions, Functors.Func<GMatchInfo*, GString*, void*, Boolean32> eval, void* userData, GError** error );
		public extern static sbyte* g_regex_replace_literal( GRegex* regex, sbyte* @string, intptr stringLen, int startPosition, sbyte* replacement, GRegexMatchFlags matchOptions, GError** error );
		public extern static sbyte** g_regex_split( GRegex* regex, sbyte* @string, GRegexMatchFlags matchOptions );
		public extern static sbyte** g_regex_split_full( GRegex* regex, sbyte* @string, intptr stringLen, int startPosition, GRegexMatchFlags matchOptions, int maxTokens, GError** error );
		public extern static sbyte** g_regex_split_simple( sbyte* pattern, sbyte* @string, GRegexCompileFlags compileOptions, GRegexMatchFlags matchOptions );
		public extern static void g_regex_unref( GRegex* regex );

		public extern static uint g_scanner_cur_line( GScanner* scanner );
		public extern static uint g_scanner_cur_position( GScanner* scanner );
		public extern static GTokenType g_scanner_cur_token( GScanner* scanner );
		public extern static GTokenValue g_scanner_cur_value( GScanner* scanner );
		public extern static void g_scanner_destroy( GScanner* scanner );
		public extern static Boolean32 g_scanner_eof( GScanner* scanner );
		public extern static GTokenType g_scanner_get_next_token( GScanner* scanner );
		public extern static void g_scanner_input_file( GScanner* scanner, int inputFd );
		public extern static void g_scanner_input_text( GScanner* scanner, CUtf8String text, uint textLen );
		public extern static void* g_scanner_lookup_symbol( GScanner* scanner, sbyte* symbol );
		public extern static GScanner* g_scanner_new( GScannerConfig* configTempl );
		public extern static GTokenType g_scanner_peek_next_token( GScanner* scanner );
		public extern static void g_scanner_scope_add_symbol( GScanner* scanner, uint scopeId, sbyte* symbol, void* value );
		public extern static void g_scanner_scope_foreach_symbol( GScanner* scanner, uint scopeId, Functors.Action<void*, void*, void*> func, void* userData );
		public extern static void* g_scanner_scope_lookup_symbol( GScanner* scanner, uint scopeId, sbyte* symbol );
		public extern static void g_scanner_scope_remove_symbol( GScanner* scanner, uint scopeId, sbyte* symbol );
		public extern static uint g_scanner_set_scope( GScanner* scanner, uint scopeId );
		public extern static void g_scanner_sync_file_offset( GScanner* scanner );
		public extern static void g_scanner_unexp_token( GScanner* scanner, GTokenType expectedToken, sbyte* identifierSpec, sbyte* symbolSpec, CUtf8String symbolName, sbyte* message, int isError );

		public extern static GSequenceIter* g_sequence_append( GSequence* seq, void* data );
		public extern static void g_sequence_foreach( GSequence* seq, Functors.Action<void*, void*> func, void* userData );
		public extern static void g_sequence_foreach_range( GSequenceIter* begin, GSequenceIter* end, Functors.Action<void*, void*> func, void* userData );
		public extern static void g_sequence_free( GSequence* seq );
		public extern static void* g_sequence_get( GSequenceIter* iter );
		public extern static GSequenceIter* g_sequence_get_begin_iter( GSequence* seq );
		public extern static GSequenceIter* g_sequence_get_end_iter( GSequence* seq );
		public extern static GSequenceIter* g_sequence_get_iter_at_pos( GSequence* seq, int pos );
		public extern static int g_sequence_get_length( GSequence* seq );
		public extern static GSequenceIter* g_sequence_insert_before( GSequenceIter* iter, void* data );
		public extern static GSequenceIter* g_sequence_insert_sorted( GSequence* seq, void* data, Functors.Func<void*, void*, void*, int> cmpFunc, void* cmpData );
		public extern static GSequenceIter* g_sequence_insert_sorted_iter( GSequence* seq, void* data, Functors.Func<GSequenceIter*, GSequenceIter*, void*, int> iterCmp, void* cmpData );
		public extern static Boolean32 g_sequence_is_empty( GSequence* seq );
		public extern static int g_sequence_iter_compare( GSequenceIter* a, GSequenceIter* b );
		public extern static int g_sequence_iter_get_position( GSequenceIter* iter );
		public extern static GSequence* g_sequence_iter_get_sequence( GSequenceIter* iter );
		public extern static Boolean32 g_sequence_iter_is_begin( GSequenceIter* iter );
		public extern static Boolean32 g_sequence_iter_is_end( GSequenceIter* iter );
		public extern static GSequenceIter* g_sequence_iter_move( GSequenceIter* iter, int delta );
		public extern static GSequenceIter* g_sequence_iter_next( GSequenceIter* iter );
		public extern static GSequenceIter* g_sequence_iter_prev( GSequenceIter* iter );
		public extern static GSequenceIter* g_sequence_lookup( GSequence* seq, void* data, Functors.Func<void*, void*, void*, int> cmpFunc, void* cmpData );
		public extern static GSequenceIter* g_sequence_lookup_iter( GSequence* seq, void* data, Functors.Func<GSequenceIter*, GSequenceIter*, void*, int> iterCmp, void* cmpData );
		public extern static void g_sequence_move( GSequenceIter* src, GSequenceIter* dest );
		public extern static void g_sequence_move_range( GSequenceIter* dest, GSequenceIter* begin, GSequenceIter* end );
		public extern static GSequence* g_sequence_new( Functors.Action<void*> dataDestroy );
		public extern static GSequenceIter* g_sequence_prepend( GSequence* seq, void* data );
		public extern static GSequenceIter* g_sequence_range_get_midpoint( GSequenceIter* begin, GSequenceIter* end );
		public extern static void g_sequence_remove( GSequenceIter* iter );
		public extern static void g_sequence_remove_range( GSequenceIter* begin, GSequenceIter* end );
		public extern static GSequenceIter* g_sequence_search( GSequence* seq, void* data, Functors.Func<void*, void*, void*, int> cmpFunc, void* cmpData );
		public extern static GSequenceIter* g_sequence_search_iter( GSequence* seq, void* data, Functors.Func<GSequenceIter*, GSequenceIter*, void*, int> iterCmp, void* cmpData );
		public extern static void g_sequence_set( GSequenceIter* iter, void* data );
		public extern static void g_sequence_sort( GSequence* seq, Functors.Func<void*, void*, void*, int> cmpFunc, void* cmpData );
		public extern static void g_sequence_sort_changed( GSequenceIter* iter, Functors.Func<void*, void*, void*, int> cmpFunc, void* cmpData );
		public extern static void g_sequence_sort_changed_iter( GSequenceIter* iter, Functors.Func<GSequenceIter*, GSequenceIter*, void*, int> iterCmp, void* cmpData );
		public extern static void g_sequence_sort_iter( GSequence* seq, Functors.Func<GSequenceIter*, GSequenceIter*, void*, int> cmpFunc, void* cmpData );
		public extern static void g_sequence_swap( GSequenceIter* a, GSequenceIter* b );

		public extern static uint g_shell_error_quark();
		public extern static Boolean32 g_shell_parse_argv( sbyte* commandLine, int* argcp, sbyte*** argvp, GError** error );
		public extern static sbyte* g_shell_quote( sbyte* unquotedString );
		public extern static sbyte* g_shell_unquote( sbyte* quotedString, GError** error );

		public extern static void* g_slice_alloc( uintptr blockSize );
		public extern static void* g_slice_alloc0( uintptr blockSize );
		public extern static void* g_slice_copy( uintptr blockSize, void* memBlock );
		public extern static void g_slice_free_chain_with_offset( uintptr blockSize, void* memChain, uintptr nextOffset );
		public extern static void g_slice_free1( uintptr blockSize, void* memBlock );
		public extern static intptr g_slice_get_config( GSliceConfig ckey );
		public extern static intptr* g_slice_get_config_state( GSliceConfig ckey, intptr address, uint* nValues );
		public extern static void g_slice_set_config( GSliceConfig ckey, intptr value );

		public extern static Boolean32 g_spawn_async( sbyte* workingDirectory, sbyte** argv, sbyte** envp, GSpawnFlags flags, Functors.Action<void*> childSetup, void* userData, int* childPid, GError** error );
		public extern static Boolean32 g_spawn_async_with_fds( sbyte* workingDirectory, sbyte** argv, sbyte** envp, GSpawnFlags flags, Functors.Action<void*> childSetup, void* userData, int* childPid, int stdinFd, int stdoutFd, int stderrFd, GError** error );
		public extern static Boolean32 g_spawn_async_with_pipes( sbyte* workingDirectory, sbyte** argv, sbyte** envp, GSpawnFlags flags, Functors.Action<void*> childSetup, void* userData, int* childPid, int* standardInput, int* standardOutput, int* standardError, GError** error );
		public extern static Boolean32 g_spawn_async_with_pipes_and_fds( sbyte* workingDirectory, sbyte** argv, sbyte** envp, GSpawnFlags flags, Functors.Action<void*> childSetup, void* userData, int stdinFd, int stdoutFd, int stderrFd, int* sourceFds, int* targetFds, uintptr nFds, int* childPidOut, int* stdinPipeOut, int* stdoutPipeOut, int* stderrPipeOut, GError** error );
		public extern static Boolean32 g_spawn_check_exit_status( int waitStatus, GError** error );
		public extern static Boolean32 g_spawn_check_wait_status( int waitStatus, GError** error );
		public extern static void g_spawn_close_pid( int pid );
		public extern static Boolean32 g_spawn_command_line_async( sbyte* commandLine, GError** error );
		public extern static Boolean32 g_spawn_command_line_sync( sbyte* commandLine, sbyte** standardOutput, sbyte** standardError, int* waitStatus, GError** error );
		public extern static uint g_spawn_error_quark();
		public extern static uint g_spawn_exit_error_quark();
		public extern static Boolean32 g_spawn_sync( sbyte* workingDirectory, sbyte** argv, sbyte** envp, GSpawnFlags flags, Functors.Action<void*> childSetup, void* userData, sbyte** standardOutput, sbyte** standardError, int* waitStatus, GError** error );

		[BackendHintReadNone]
		public extern static int g_ascii_digit_value( sbyte c );
		public extern static sbyte* g_ascii_dtostr( sbyte* buffer, int bufLen, double d );
		public extern static sbyte* g_ascii_formatd( sbyte* buffer, int bufLen, sbyte* format, double d );
		public extern static int g_ascii_strcasecmp( sbyte* s1, sbyte* s2 );
		public extern static sbyte* g_ascii_strdown( sbyte* str, intptr len );
		public extern static Boolean32 g_ascii_string_to_signed( sbyte* str, uint @base, intptr min, intptr max, intptr* outNum, GError** error );
		public extern static Boolean32 g_ascii_string_to_unsigned( sbyte* str, uint @base, uintptr min, uintptr max, uintptr* outNum, GError** error );
		public extern static int g_ascii_strncasecmp( sbyte* s1, sbyte* s2, uintptr n );
		public extern static double g_ascii_strtod( sbyte* nptr, sbyte** endptr );
		public extern static intptr g_ascii_strtoll( sbyte* nptr, sbyte** endptr, uint @base );
		public extern static uintptr g_ascii_strtoull( sbyte* nptr, sbyte** endptr, uint @base );
		public extern static sbyte* g_ascii_strup( sbyte* str, intptr len );
		[BackendHintReadNone]
		public extern static sbyte g_ascii_tolower( sbyte c );
		[BackendHintReadNone]
		public extern static sbyte g_ascii_toupper( sbyte c );
		[BackendHintReadNone]
		public extern static int g_ascii_xdigit_value( sbyte c );
		public extern static void* g_memdup( void* mem, uint byteSize );
		public extern static void* g_memdup2( void* mem, uintptr byteSize );
		public extern static uint g_number_parser_error_quark();
		public extern static sbyte* g_stpcpy( sbyte* dest, sbyte* src );
		public extern static Boolean32 g_str_has_prefix( sbyte* str, sbyte* prefix );
		public extern static Boolean32 g_str_has_suffix( sbyte* str, sbyte* suffix );
		public extern static Boolean32 g_str_is_ascii( sbyte* str );
		public extern static Boolean32 g_str_match_string( sbyte* searchTerm, sbyte* potentialHit, Boolean32 acceptAlternates );
		public extern static sbyte* g_str_to_ascii( sbyte* str, sbyte* fromLocale );
		public extern static sbyte** g_str_tokenize_and_fold( sbyte* @string, sbyte* translitLocale, sbyte*** asciiAlternates );
		public extern static sbyte* g_strcanon( sbyte* @string, sbyte* validChars, sbyte substitutor );
		public extern static int g_strcasecmp( sbyte* s1, sbyte* s2 );
		public extern static sbyte* g_strchomp( sbyte* @string );
		public extern static sbyte* g_strchug( sbyte* @string );
		public extern static sbyte* g_strcompress( sbyte* source );
		public extern static sbyte* g_strdelimit( sbyte* @string, sbyte* delimiters, sbyte newDelimiter );
		public extern static sbyte* g_strdown( sbyte* @string );
		public extern static sbyte* g_strdup( sbyte* str );
		public extern static sbyte** g_strdupv( sbyte** strArray );
		[BackendHintReadNone]
		public extern static sbyte* g_strerror( int errnum );
		public extern static sbyte* g_strescape( sbyte* source, sbyte* exceptions );
		public extern static void g_strfreev( sbyte** strArray );
		public extern static sbyte* g_strjoinv( sbyte* separator, sbyte** strArray );
		public extern static uintptr g_strlcat( sbyte* dest, sbyte* src, uintptr destSize );
		public extern static uintptr g_strlcpy( sbyte* dest, sbyte* src, uintptr destSize );
		public extern static int g_strncasecmp( sbyte* s1, sbyte* s2, uint n );
		public extern static sbyte* g_strndup( sbyte* str, uintptr n );
		public extern static sbyte* g_strnfill( uintptr length, sbyte fillChar );
		public extern static sbyte* g_strreverse( sbyte* @string );
		public extern static sbyte* g_strrstr( sbyte* haystack, sbyte* needle );
		public extern static sbyte* g_strrstr_len( sbyte* haystack, intptr haystackLen, sbyte* needle );
		[BackendHintReadNone]
		public extern static sbyte* g_strsignal( int signum );
		public extern static sbyte** g_strsplit( sbyte* @string, sbyte* delimiter, int maxTokens );
		public extern static sbyte** g_strsplit_set( sbyte* @string, sbyte* delimiters, int maxTokens );
		public extern static sbyte* g_strstr_len( sbyte* haystack, intptr haystackLen, sbyte* needle );
		public extern static double g_strtod( sbyte* nptr, sbyte** endptr );
		public extern static sbyte* g_strup( sbyte* @string );
		public extern static Boolean32 g_strv_contains( sbyte** strv, sbyte* str );
		public extern static Boolean32 g_strv_equal( sbyte** strv1, sbyte** strv2 );
		public extern static uint g_strv_length( sbyte** strArray );

		public extern static void g_string_chunk_clear( GStringChunk* chunk );
		public extern static void g_string_chunk_free( GStringChunk* chunk );
		public extern static sbyte* g_string_chunk_insert( GStringChunk* chunk, sbyte* @string );
		public extern static sbyte* g_string_chunk_insert_const( GStringChunk* chunk, sbyte* @string );
		public extern static sbyte* g_string_chunk_insert_len( GStringChunk* chunk, sbyte* @string, intptr len );
		public extern static GStringChunk* g_string_chunk_new( uintptr size );

		public extern static void g_strv_builder_add( GStrvBuilder* builder, sbyte* value );
		public extern static void g_strv_builder_addv( GStrvBuilder* builder, sbyte** value );
		public extern static sbyte** g_strv_builder_end( GStrvBuilder* builder );
		public extern static GStrvBuilder* g_strv_builder_new();
		public extern static GStrvBuilder* g_strv_builder_ref( GStrvBuilder* builder );
		public extern static void g_strv_builder_unref( GStrvBuilder* builder );

		public extern static void g_assertion_message( sbyte* domain, sbyte* file, int line, sbyte* func, sbyte* message );
		public extern static void g_assertion_message_cmpnum( sbyte* domain, sbyte* file, int line, sbyte* func, sbyte* expr, uint[4] arg1, sbyte* cmp, uint[4] arg2, sbyte numtype );
		public extern static void g_assertion_message_cmpstr( sbyte* domain, sbyte* file, int line, sbyte* func, sbyte* expr, sbyte* arg1, sbyte* cmp, sbyte* arg2 );
		public extern static void g_assertion_message_cmpstrv( sbyte* domain, sbyte* file, int line, sbyte* func, sbyte* expr, sbyte** arg1, sbyte** arg2, uintptr firstWrongIdx );
		public extern static void g_assertion_message_error( sbyte* domain, sbyte* file, int line, sbyte* func, sbyte* expr, GError* error, uint errorDomain, int errorCode );
		public extern static void g_assertion_message_expr( sbyte* domain, sbyte* file, int line, sbyte* func, sbyte* expr );
		public extern static int g_strcmp0( sbyte* str1, sbyte* str2 );
		public extern static void g_test_add_data_func( sbyte* testpath, void* testData, Functors.Action<void*> testFunc );
		public extern static void g_test_add_data_func_full( sbyte* testpath, void* testData, Functors.Action<void*> testFunc, Functors.Action<void*> dataFreeFunc );
		public extern static void g_test_add_func( sbyte* testpath, Functors.Action testFunc );
		public extern static void g_test_add_vtable( sbyte* testpath, uintptr dataSize, void* testData, Functors.Action<void*, void*> dataSetup, Functors.Action<void*, void*> dataTest, Functors.Action<void*, void*> dataTeardown );
		public extern static void g_test_assert_expected_messages_internal( sbyte* domain, sbyte* file, int line, sbyte* func );
		public extern static void g_test_bug( sbyte* bugUriSnippet );
		public extern static void g_test_bug_base( sbyte* uriPattern );
		public extern static void g_test_case_free( GTestCase* testCase );
		public extern static GTestCase* g_test_create_case( CUtf8String testName, uintptr dataSize, void* testData, Functors.Action<void*, void*> dataSetup, Functors.Action<void*, void*> dataTest, Functors.Action<void*, void*> dataTeardown );
		public extern static GTestSuite* g_test_create_suite( CUtf8String suiteName );
		public extern static void g_test_expect_message( sbyte* logDomain, GLogLevelFlags logLevel, sbyte* pattern );
		public extern static void g_test_fail();
		public extern static Boolean32 g_test_failed();
		public extern static sbyte* g_test_get_dir( GTestFileType fileType );
		public extern static sbyte* g_test_get_path();
		public extern static GTestSuite* g_test_get_root();
		public extern static void g_test_incomplete( sbyte* msg );
		public extern static void g_test_log_buffer_free( GTestLogBuffer* tbuffer );
		public extern static GTestLogBuffer* g_test_log_buffer_new();
		public extern static GTestLogMsg* g_test_log_buffer_pop( GTestLogBuffer* tbuffer );
		public extern static void g_test_log_buffer_push( GTestLogBuffer* tbuffer, uint nBytes, byte* bytes );
		public extern static void g_test_log_msg_free( GTestLogMsg* tmsg );
		public extern static void g_test_log_set_fatal_handler( Functors.Func<sbyte*, GLogLevelFlags, sbyte*, void*, Boolean32> logFunc, void* userData );
		public extern static sbyte* g_test_log_type_name( GTestLogType logType );
		public extern static void g_test_queue_destroy( Functors.Action<void*> destroyFunc, void* destroyData );
		public extern static void g_test_queue_free( void* gfreePointer );
		public extern static double g_test_rand_double();
		public extern static double g_test_rand_double_range( double rangeStart, double rangeEnd );
		public extern static int g_test_rand_int();
		public extern static int g_test_rand_int_range( int begin, int end );
		public extern static int g_test_run();
		public extern static int g_test_run_suite( GTestSuite* suite );
		public extern static void g_test_set_nonfatal_assertions();
		public extern static void g_test_skip( sbyte* msg );
		public extern static Boolean32 g_test_subprocess();
		public extern static void g_test_suite_add( GTestSuite* suite, GTestCase* testCase );
		public extern static void g_test_suite_add_suite( GTestSuite* suite, GTestSuite* nestedsuite );
		public extern static void g_test_suite_free( GTestSuite* suite );
		public extern static void g_test_summary( sbyte* summary );
		public extern static double g_test_timer_elapsed();
		public extern static double g_test_timer_last();
		public extern static void g_test_timer_start();
		public extern static void g_test_trap_assertions( sbyte* domain, sbyte* file, int line, sbyte* func, uintptr assertionFlags, sbyte* pattern );
		public extern static Boolean32 g_test_trap_fork( uintptr usecTimeout, GTestTrapFlags testTrapFlags );
		public extern static Boolean32 g_test_trap_has_passed();
		public extern static Boolean32 g_test_trap_reached_timeout();
		public extern static void g_test_trap_subprocess( sbyte* testPath, uintptr usecTimeout, GTestSubprocessFlags testFlags );

		public extern static void g_thread_pool_free( GThreadPool* pool, Boolean32 immediate, Boolean32 wait_ );
		public extern static uint g_thread_pool_get_max_idle_time();
		public extern static int g_thread_pool_get_max_threads( GThreadPool* pool );
		public extern static int g_thread_pool_get_max_unused_threads();
		public extern static uint g_thread_pool_get_num_threads( GThreadPool* pool );
		public extern static uint g_thread_pool_get_num_unused_threads();
		public extern static Boolean32 g_thread_pool_move_to_front( GThreadPool* pool, void* data );
		public extern static GThreadPool* g_thread_pool_new( Functors.Action<void*, void*> func, void* userData, int maxThreads, Boolean32 exclusive, GError** error );
		public extern static GThreadPool* g_thread_pool_new_full( Functors.Action<void*, void*> func, void* userData, Functors.Action<void*> itemFreeFunc, int maxThreads, Boolean32 exclusive, GError** error );
		public extern static Boolean32 g_thread_pool_push( GThreadPool* pool, void* data, GError** error );
		public extern static void g_thread_pool_set_max_idle_time( uint interval );
		public extern static Boolean32 g_thread_pool_set_max_threads( GThreadPool* pool, int maxThreads, GError** error );
		public extern static void g_thread_pool_set_max_unused_threads( int maxThreads );
		public extern static void g_thread_pool_set_sort_function( GThreadPool* pool, Functors.Func<void*, void*, void*, int> func, void* userData );
		public extern static void g_thread_pool_stop_unused_threads();
		public extern static uint g_thread_pool_unprocessed( GThreadPool* pool );

		public extern static void g_time_val_add( GTimeVal* time_, intptr microseconds );
		public extern static Boolean32 g_time_val_from_iso8601( sbyte* isoDate, GTimeVal* time_ );
		public extern static sbyte* g_time_val_to_iso8601( GTimeVal* time_ );
		public extern static void g_timer_continue( GTimer* timer );
		public extern static void g_timer_destroy( GTimer* timer );
		public extern static double g_timer_elapsed( GTimer* timer, uintptr* microseconds );
		public extern static Boolean32 g_timer_is_active( GTimer* timer );
		public extern static GTimer* g_timer_new();
		public extern static void g_timer_reset( GTimer* timer );
		public extern static void g_timer_start( GTimer* timer );
		public extern static void g_timer_stop( GTimer* timer );
		public extern static void g_usleep( uintptr microseconds );

		public extern static uint g_trash_stack_height( GTrashStack** stackP );
		public extern static void* g_trash_stack_peek( GTrashStack** stackP );
		public extern static void* g_trash_stack_pop( GTrashStack** stackP );
		public extern static void g_trash_stack_push( GTrashStack** stackP, void* dataP );

		public extern static void g_tree_destroy( GTree* tree );
		public extern static void g_tree_foreach( GTree* tree, Functors.Func<void*, void*, void*, Boolean32> func, void* userData );
		public extern static void g_tree_foreach_node( GTree* tree, Functors.Func<GTreeNode*, void*, Boolean32> func, void* userData );
		public extern static int g_tree_height( GTree* tree );
		public extern static void g_tree_insert( GTree* tree, void* key, void* value );
		public extern static GTreeNode* g_tree_insert_node( GTree* tree, void* key, void* value );
		public extern static void* g_tree_lookup( GTree* tree, void* key );
		public extern static Boolean32 g_tree_lookup_extended( GTree* tree, void* lookupKey, void** origKey, void** value );
		public extern static GTreeNode* g_tree_lookup_node( GTree* tree, void* key );
		public extern static GTreeNode* g_tree_lower_bound( GTree* tree, void* key );
		public extern static GTree* g_tree_new( Functors.Func<void*, void*, int> keyCompareFunc );
		public extern static GTree* g_tree_new_full( Functors.Func<void*, void*, void*, int> keyCompareFunc, void* keyCompareData, Functors.Action<void*> keyDestroyFunc, Functors.Action<void*> valueDestroyFunc );
		public extern static GTree* g_tree_new_with_data( Functors.Func<void*, void*, void*, int> keyCompareFunc, void* keyCompareData );
		public extern static int g_tree_nnodes( GTree* tree );
		public extern static GTreeNode* g_tree_node_first( GTree* tree );
		public extern static void* g_tree_node_key( GTreeNode* node );
		public extern static GTreeNode* g_tree_node_last( GTree* tree );
		public extern static GTreeNode* g_tree_node_next( GTreeNode* node );
		public extern static GTreeNode* g_tree_node_previous( GTreeNode* node );
		public extern static void* g_tree_node_value( GTreeNode* node );
		public extern static GTree* g_tree_ref( GTree* tree );
		public extern static Boolean32 g_tree_remove( GTree* tree, void* key );
		public extern static void g_tree_remove_all( GTree* tree );
		public extern static void g_tree_replace( GTree* tree, void* key, void* value );
		public extern static GTreeNode* g_tree_replace_node( GTree* tree, void* key, void* value );
		public extern static void* g_tree_search( GTree* tree, Functors.Func<void*, void*, int> searchFunc, void* userData );
		public extern static GTreeNode* g_tree_search_node( GTree* tree, Functors.Func<void*, void*, int> searchFunc, void* userData );
		public extern static Boolean32 g_tree_steal( GTree* tree, void* key );
		public extern static void g_tree_traverse( GTree* tree, Functors.Func<void*, void*, void*, Boolean32> traverseFunc, GTraverseType traverseType, void* userData );
		public extern static void g_tree_unref( GTree* tree );
		public extern static GTreeNode* g_tree_upper_bound( GTree* tree, void* key );

		public extern static GUri* g_uri_build( GUriFlags flags, sbyte* scheme, sbyte* userinfo, sbyte* host, int port, sbyte* path, sbyte* query, sbyte* fragment );
		public extern static GUri* g_uri_build_with_user( GUriFlags flags, sbyte* scheme, sbyte* user, sbyte* password, sbyte* authParams, sbyte* host, int port, sbyte* path, sbyte* query, sbyte* fragment );
		public extern static uint g_uri_error_quark();
		public extern static sbyte* g_uri_escape_bytes( byte* unescaped, uintptr length, sbyte* reservedCharsAllowed );
		public extern static sbyte* g_uri_escape_string( sbyte* unescaped, sbyte* reservedCharsAllowed, Boolean32 allowUtf8 );
		public extern static sbyte* g_uri_get_auth_params( GUri* uri );
		public extern static GUriFlags g_uri_get_flags( GUri* uri );
		public extern static sbyte* g_uri_get_fragment( GUri* uri );
		public extern static sbyte* g_uri_get_host( GUri* uri );
		public extern static sbyte* g_uri_get_password( GUri* uri );
		public extern static sbyte* g_uri_get_path( GUri* uri );
		public extern static int g_uri_get_port( GUri* uri );
		public extern static sbyte* g_uri_get_query( GUri* uri );
		public extern static sbyte* g_uri_get_scheme( GUri* uri );
		public extern static sbyte* g_uri_get_user( GUri* uri );
		public extern static sbyte* g_uri_get_userinfo( GUri* uri );
		public extern static Boolean32 g_uri_is_valid( sbyte* uriString, GUriFlags flags, GError** error );
		public extern static sbyte* g_uri_join( GUriFlags flags, sbyte* scheme, sbyte* userinfo, sbyte* host, int port, sbyte* path, sbyte* query, sbyte* fragment );
		public extern static sbyte* g_uri_join_with_user( GUriFlags flags, sbyte* scheme, sbyte* user, sbyte* password, sbyte* authParams, sbyte* host, int port, sbyte* path, sbyte* query, sbyte* fragment );
		public extern static void g_uri_params_iter_init( GUriParamsIter* iter, sbyte* params, intptr length, sbyte* separators, GUriParamsFlags flags );
		public extern static Boolean32 g_uri_params_iter_next( GUriParamsIter* iter, sbyte** attribute, sbyte** value, GError** error );
		public extern static GUri* g_uri_parse( sbyte* uriString, GUriFlags flags, GError** error );
		public extern static GHashTable* g_uri_parse_params( sbyte* params, intptr length, sbyte* separators, GUriParamsFlags flags, GError** error );
		public extern static GUri* g_uri_parse_relative( GUri* baseUri, sbyte* uriRef, GUriFlags flags, GError** error );
		public extern static sbyte* g_uri_parse_scheme( sbyte* uri );
		public extern static sbyte* g_uri_peek_scheme( sbyte* uri );
		public extern static GUri* g_uri_ref( GUri* uri );
		public extern static sbyte* g_uri_resolve_relative( sbyte* baseUriString, sbyte* uriRef, GUriFlags flags, GError** error );
		public extern static Boolean32 g_uri_split( sbyte* uriRef, GUriFlags flags, sbyte** scheme, sbyte** userinfo, sbyte** host, int* port, sbyte** path, sbyte** query, sbyte** fragment, GError** error );
		public extern static Boolean32 g_uri_split_network( sbyte* uriString, GUriFlags flags, sbyte** scheme, sbyte** host, int* port, GError** error );
		public extern static Boolean32 g_uri_split_with_user( sbyte* uriRef, GUriFlags flags, sbyte** scheme, sbyte** user, sbyte** password, sbyte** authParams, sbyte** host, int* port, sbyte** path, sbyte** query, sbyte** fragment, GError** error );
		public extern static sbyte* g_uri_to_string( GUri* uri );
		public extern static sbyte* g_uri_to_string_partial( GUri* uri, GUriHideFlags flags );
		public extern static GBytes* g_uri_unescape_bytes( sbyte* escapedString, intptr length, sbyte* illegalCharacters, GError** error );
		public extern static sbyte* g_uri_unescape_segment( sbyte* escapedString, sbyte* escapedStringEnd, sbyte* illegalCharacters );
		public extern static sbyte* g_uri_unescape_string( sbyte* escapedString, sbyte* illegalCharacters );
		public extern static void g_uri_unref( GUri* uri );

		public extern static Boolean32 g_uuid_string_is_valid( sbyte* str );
		public extern static sbyte* g_uuid_string_random();

		public extern static sbyte* glib_check_version( uint requiredMajor, uint requiredMinor, uint requiredMicro );

		public extern static void g_allocator_free( GAllocator* allocator );
		public extern static GAllocator* g_allocator_new( CUtf8String name, uint nPreallocs );
		public extern static void g_blow_chunks();
		public extern static void g_list_pop_allocator();
		public extern static void g_list_push_allocator( GAllocator* allocator );
		public extern static void* g_mem_chunk_alloc( GMemChunk* memChunk );
		public extern static void* g_mem_chunk_alloc0( GMemChunk* memChunk );
		public extern static void g_mem_chunk_clean( GMemChunk* memChunk );
		public extern static void g_mem_chunk_destroy( GMemChunk* memChunk );
		public extern static void g_mem_chunk_free( GMemChunk* memChunk, void* mem );
		public extern static void g_mem_chunk_info();
		public extern static GMemChunk* g_mem_chunk_new( CUtf8String name, int atomSize, uintptr areaSize, int type );
		public extern static void g_mem_chunk_print( GMemChunk* memChunk );
		public extern static void g_mem_chunk_reset( GMemChunk* memChunk );
		public extern static void g_node_pop_allocator();
		public extern static void g_node_push_allocator( GAllocator* allocator );
		public extern static void g_slist_pop_allocator();
		public extern static void g_slist_push_allocator( GAllocator* allocator );

		public extern static void g_cache_destroy( GCache* cache );
		public extern static void* g_cache_insert( GCache* cache, void* key );
		public extern static void g_cache_key_foreach( GCache* cache, Functors.Action<void*, void*, void*> func, void* userData );
		public extern static GCache* g_cache_new( Functors.Func<void*, void*> valueNewFunc, Functors.Action<void*> valueDestroyFunc, Functors.Func<void*, void*> keyDupFunc, Functors.Action<void*> keyDestroyFunc, Functors.Func<void*, uint> hashKeyFunc, Functors.Func<void*, uint> hashValueFunc, Functors.Func<void*, void*, Boolean32> keyEqualFunc );
		public extern static void g_cache_remove( GCache* cache, void* value );
		public extern static void g_cache_value_foreach( GCache* cache, Functors.Action<void*, void*, void*> func, void* userData );

		public extern static void g_completion_add_items( GCompletion* cmp, GList* items );
		public extern static void g_completion_clear_items( GCompletion* cmp );
		public extern static GList* g_completion_complete( GCompletion* cmp, sbyte* prefix, sbyte** newPrefix );
		public extern static GList* g_completion_complete_utf8( GCompletion* cmp, sbyte* prefix, sbyte** newPrefix );
		public extern static void g_completion_free( GCompletion* cmp );
		public extern static GCompletion* g_completion_new( Functors.Func<void*, sbyte*> func );
		public extern static void g_completion_remove_items( GCompletion* cmp, GList* items );
		public extern static void g_completion_set_compare( GCompletion* cmp, Functors.Func<sbyte*, sbyte*, uintptr, int> strncmpFunc );

		public extern static int g_relation_count( GRelation* relation, void* key, int field );
		public extern static int g_relation_delete( GRelation* relation, void* key, int field );
		public extern static void g_relation_destroy( GRelation* relation );
		public extern static void g_relation_index( GRelation* relation, int field, Functors.Func<void*, uint> hashFunc, Functors.Func<void*, void*, Boolean32> keyEqualFunc );
		public extern static GRelation* g_relation_new( int fields );
		public extern static void g_relation_print( GRelation* relation );
		public extern static GTuples* g_relation_select( GRelation* relation, void* key, int field );
		public extern static void g_tuples_destroy( GTuples* tuples );
		public extern static void* g_tuples_index( GTuples* tuples, int index_, int field );

		public extern static void g_cond_free( GCond* cond );
		public extern static GCond* g_cond_new();
		public extern static Boolean32 g_cond_timed_wait( GCond* cond, GMutex* mutex, GTimeVal* timeval );
		public extern static void g_mutex_free( GMutex* mutex );
		public extern static GMutex* g_mutex_new();
		public extern static Boolean32 g_once_init_enter_impl( uintptr* location );
		public extern static GPrivate* g_private_new( Functors.Action<void*> notify );
		public extern static void g_static_mutex_free( GStaticMutex* mutex );
		public extern static GMutex* g_static_mutex_get_mutex_impl( GStaticMutex* mutex );
		public extern static void g_static_mutex_init( GStaticMutex* mutex );
		public extern static void g_static_private_free( GStaticPrivate* privateKey );
		public extern static void* g_static_private_get( GStaticPrivate* privateKey );
		public extern static void g_static_private_init( GStaticPrivate* privateKey );
		public extern static void g_static_private_set( GStaticPrivate* privateKey, void* data, Functors.Action<void*> notify );
		public extern static void g_static_rec_mutex_free( GStaticRecMutex* mutex );
		public extern static void g_static_rec_mutex_init( GStaticRecMutex* mutex );
		public extern static void g_static_rec_mutex_lock( GStaticRecMutex* mutex );
		public extern static void g_static_rec_mutex_lock_full( GStaticRecMutex* mutex, uint depth );
		public extern static Boolean32 g_static_rec_mutex_trylock( GStaticRecMutex* mutex );
		public extern static void g_static_rec_mutex_unlock( GStaticRecMutex* mutex );
		public extern static uint g_static_rec_mutex_unlock_full( GStaticRecMutex* mutex );
		public extern static void g_static_rw_lock_free( GStaticRWLock* lock );
		public extern static void g_static_rw_lock_init( GStaticRWLock* lock );
		public extern static void g_static_rw_lock_reader_lock( GStaticRWLock* lock );
		public extern static Boolean32 g_static_rw_lock_reader_trylock( GStaticRWLock* lock );
		public extern static void g_static_rw_lock_reader_unlock( GStaticRWLock* lock );
		public extern static void g_static_rw_lock_writer_lock( GStaticRWLock* lock );
		public extern static Boolean32 g_static_rw_lock_writer_trylock( GStaticRWLock* lock );
		public extern static void g_static_rw_lock_writer_unlock( GStaticRWLock* lock );
		public extern static GThread* g_thread_create( Functors.Func<void*, void*> func, void* data, Boolean32 joinable, GError** error );
		public extern static GThread* g_thread_create_full( Functors.Func<void*, void*> func, void* data, uintptr stackSize, Boolean32 joinable, Boolean32 bound, GThreadPriority priority, GError** error );
		public extern static void g_thread_foreach( Functors.Action<void*, void*> threadFunc, void* userData );
		public extern static Boolean32 g_thread_get_initialized();
		public extern static void g_thread_set_priority( GThread* thread, GThreadPriority priority );
	}
	[ExternLibrary( Image = "/usr/lib/aarch64-linux-gnu/libgobject-2.0.so.0" )]
	public static partial struct GObjectApi {
		public extern static void g_type_add_class_cache_func( void* cacheData, Functors.Func<void*, GTypeClass*, Boolean32> cacheFunc );
		public extern static void g_type_add_class_private( uintptr classType, uintptr privateSize );
		public extern static int g_type_add_instance_private( uintptr classType, uintptr privateSize );
		public extern static void g_type_add_interface_check( void* checkData, Functors.Action<void*, void*> checkFunc );
		public extern static void g_type_add_interface_dynamic( uintptr instanceType, uintptr interfaceType, GTypePlugin* plugin );
		public extern static void g_type_add_interface_static( uintptr instanceType, uintptr interfaceType, GInterfaceInfo* info );
		public extern static GTypeClass* g_type_check_class_cast( GTypeClass* gClass, uintptr isAType );
		[BackendHintReadOnly]
		public extern static Boolean32 g_type_check_class_is_a( GTypeClass* gClass, uintptr isAType );
		[BackendHintReadOnly]
		public extern static Boolean32 g_type_check_instance( GTypeInstance* instance );
		public extern static GTypeInstance* g_type_check_instance_cast( GTypeInstance* instance, uintptr ifaceType );
		[BackendHintReadOnly]
		public extern static Boolean32 g_type_check_instance_is_a( GTypeInstance* instance, uintptr ifaceType );
		[BackendHintReadOnly]
		public extern static Boolean32 g_type_check_instance_is_fundamentally_a( GTypeInstance* instance, uintptr fundamentalType );
		[BackendHintReadNone]
		public extern static Boolean32 g_type_check_is_value_type( uintptr type );
		[BackendHintReadOnly]
		public extern static Boolean32 g_type_check_value( GValue* value );
		[BackendHintReadOnly]
		public extern static Boolean32 g_type_check_value_holds( GValue* value, uintptr type );
		public extern static uintptr* g_type_children( uintptr type, uint* nChildren );
		public extern static void g_type_class_add_private( void* gClass, uintptr privateSize );
		public extern static void g_type_class_adjust_private_offset( void* gClass, int* privateSizeOrOffset );
		public extern static int g_type_class_get_instance_private_offset( void* gClass );
		public extern static void* g_type_class_get_private( GTypeClass* klass, uintptr privateType );
		public extern static void* g_type_class_peek( uintptr type );
		public extern static void* g_type_class_peek_parent( void* gClass );
		public extern static void* g_type_class_peek_static( uintptr type );
		public extern static void* g_type_class_ref( uintptr type );
		public extern static void g_type_class_unref( void* gClass );
		public extern static void g_type_class_unref_uncached( void* gClass );
		public extern static GTypeInstance* g_type_create_instance( uintptr type );
		public extern static void* g_type_default_interface_peek( uintptr gType );
		public extern static void* g_type_default_interface_ref( uintptr gType );
		public extern static void g_type_default_interface_unref( void* gIface );
		public extern static uint g_type_depth( uintptr type );
		public extern static void g_type_ensure( uintptr type );
		public extern static void g_type_free_instance( GTypeInstance* instance );
		public extern static uintptr g_type_from_name( CUtf8String name );
		public extern static uintptr g_type_fundamental( uintptr typeId );
		public extern static uintptr g_type_fundamental_next();
		public extern static int g_type_get_instance_count( uintptr type );
		public extern static GTypePlugin* g_type_get_plugin( uintptr type );
		public extern static void* g_type_get_qdata( uintptr type, uint quark );
		public extern static uint g_type_get_type_registration_serial();
		public extern static void g_type_init();
		public extern static void g_type_init_with_debug_flags( GTypeDebugFlags debugFlags );
		public extern static void* g_type_instance_get_private( GTypeInstance* instance, uintptr privateType );
		public extern static void g_type_interface_add_prerequisite( uintptr interfaceType, uintptr prerequisiteType );
		public extern static GTypePlugin* g_type_interface_get_plugin( uintptr instanceType, uintptr interfaceType );
		public extern static uintptr g_type_interface_instantiatable_prerequisite( uintptr interfaceType );
		public extern static void* g_type_interface_peek( void* instanceClass, uintptr ifaceType );
		public extern static void* g_type_interface_peek_parent( void* gIface );
		public extern static uintptr* g_type_interface_prerequisites( uintptr interfaceType, uint* nPrerequisites );
		public extern static uintptr* g_type_interfaces( uintptr type, uint* nInterfaces );
		public extern static Boolean32 g_type_is_a( uintptr type, uintptr isAType );
		public extern static CUtf8String g_type_name( uintptr type );
		public extern static CUtf8String g_type_name_from_class( GTypeClass* gClass );
		public extern static CUtf8String g_type_name_from_instance( GTypeInstance* instance );
		public extern static uintptr g_type_next_base( uintptr leafType, uintptr rootType );
		public extern static uintptr g_type_parent( uintptr type );
		public extern static uint g_type_qname( uintptr type );
		public extern static void g_type_query( uintptr type, GTypeQuery* query );
		public extern static uintptr g_type_register_dynamic( uintptr parentType, CUtf8String typeName, GTypePlugin* plugin, GTypeFlags flags );
		public extern static uintptr g_type_register_fundamental( uintptr typeId, CUtf8String typeName, GTypeInfo* info, GTypeFundamentalInfo* finfo, GTypeFlags flags );
		public extern static uintptr g_type_register_static( uintptr parentType, CUtf8String typeName, GTypeInfo* info, GTypeFlags flags );
		public extern static uintptr g_type_register_static_simple( uintptr parentType, CUtf8String typeName, uint classSize, Functors.Action<void*, void*> classInit, uint instanceSize, Functors.Action<GTypeInstance*, void*> instanceInit, GTypeFlags flags );
		public extern static void g_type_remove_class_cache_func( void* cacheData, Functors.Func<void*, GTypeClass*, Boolean32> cacheFunc );
		public extern static void g_type_remove_interface_check( void* checkData, Functors.Action<void*, void*> checkFunc );
		public extern static void g_type_set_qdata( uintptr type, uint quark, void* data );
		[BackendHintReadNone]
		public extern static Boolean32 g_type_test_flags( uintptr type, uint flags );
		public extern static GTypeValueTable* g_type_value_table_peek( uintptr type );

		public extern static void g_value_copy( GValue* srcValue, GValue* destValue );
		public extern static Boolean32 g_value_fits_pointer( GValue* value );
		public extern static GValue* g_value_init( GValue* value, uintptr gType );
		public extern static void g_value_init_from_instance( GValue* value, void* instance );
		public extern static void* g_value_peek_pointer( GValue* value );
		public extern static void g_value_register_transform_func( uintptr srcType, uintptr destType, Functors.Action<GValue*, GValue*> transformFunc );
		public extern static GValue* g_value_reset( GValue* value );
		public extern static void g_value_set_instance( GValue* value, void* instance );
		public extern static Boolean32 g_value_transform( GValue* srcValue, GValue* destValue );
		public extern static Boolean32 g_value_type_compatible( uintptr srcType, uintptr destType );
		public extern static Boolean32 g_value_type_transformable( uintptr srcType, uintptr destType );
		public extern static void g_value_unset( GValue* value );

		public extern static sbyte* g_param_spec_get_blurb( GParamSpec* pspec );
		public extern static GValue* g_param_spec_get_default_value( GParamSpec* pspec );
		public extern static sbyte* g_param_spec_get_name( GParamSpec* pspec );
		public extern static uint g_param_spec_get_name_quark( GParamSpec* pspec );
		public extern static sbyte* g_param_spec_get_nick( GParamSpec* pspec );
		public extern static void* g_param_spec_get_qdata( GParamSpec* pspec, uint quark );
		public extern static GParamSpec* g_param_spec_get_redirect_target( GParamSpec* pspec );
		public extern static void* g_param_spec_internal( uintptr paramType, CUtf8String name, sbyte* nick, sbyte* blurb, GParamFlags flags );
		public extern static Boolean32 g_param_spec_is_valid_name( CUtf8String name );
		public extern static void g_param_spec_pool_insert( GParamSpecPool* pool, GParamSpec* pspec, uintptr ownerType );
		public extern static GParamSpec** g_param_spec_pool_list( GParamSpecPool* pool, uintptr ownerType, uint* nPspecsP );
		public extern static GList* g_param_spec_pool_list_owned( GParamSpecPool* pool, uintptr ownerType );
		public extern static GParamSpec* g_param_spec_pool_lookup( GParamSpecPool* pool, CUtf8String paramName, uintptr ownerType, Boolean32 walkAncestors );
		public extern static GParamSpecPool* g_param_spec_pool_new( Boolean32 typePrefixing );
		public extern static void g_param_spec_pool_remove( GParamSpecPool* pool, GParamSpec* pspec );
		public extern static GParamSpec* g_param_spec_ref( GParamSpec* pspec );
		public extern static GParamSpec* g_param_spec_ref_sink( GParamSpec* pspec );
		public extern static void g_param_spec_set_qdata( GParamSpec* pspec, uint quark, void* data );
		public extern static void g_param_spec_set_qdata_full( GParamSpec* pspec, uint quark, void* data, Functors.Action<void*> destroy );
		public extern static void g_param_spec_sink( GParamSpec* pspec );
		public extern static void* g_param_spec_steal_qdata( GParamSpec* pspec, uint quark );
		public extern static void g_param_spec_unref( GParamSpec* pspec );
		public extern static uintptr g_param_type_register_static( CUtf8String name, GParamSpecTypeInfo* pspecInfo );
		public extern static Boolean32 g_param_value_convert( GParamSpec* pspec, GValue* srcValue, GValue* destValue, Boolean32 strictValidation );
		public extern static Boolean32 g_param_value_defaults( GParamSpec* pspec, GValue* value );
		public extern static Boolean32 g_param_value_is_valid( GParamSpec* pspec, GValue* value );
		public extern static void g_param_value_set_default( GParamSpec* pspec, GValue* value );
		public extern static Boolean32 g_param_value_validate( GParamSpec* pspec, GValue* value );
		public extern static int g_param_values_cmp( GParamSpec* pspec, GValue* value1, GValue* value2 );
		public extern static GParamSpec* g_value_dup_param( GValue* value );
		public extern static GParamSpec* g_value_get_param( GValue* value );
		public extern static void g_value_set_param( GValue* value, GParamSpec* param );
		public extern static void g_value_set_param_take_ownership( GValue* value, GParamSpec* param );
		public extern static void g_value_take_param( GValue* value, GParamSpec* param );

		public extern static void g_cclosure_marshal_generic( GClosure* closure, GValue* returnGvalue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static GClosure* g_cclosure_new( Functors.Action callbackFunc, void* userData, Functors.Action<void*, GClosure*> destroyData );
		public extern static GClosure* g_cclosure_new_swap( Functors.Action callbackFunc, void* userData, Functors.Action<void*, GClosure*> destroyData );
		public extern static void g_closure_add_finalize_notifier( GClosure* closure, void* notifyData, Functors.Action<void*, GClosure*> notifyFunc );
		public extern static void g_closure_add_invalidate_notifier( GClosure* closure, void* notifyData, Functors.Action<void*, GClosure*> notifyFunc );
		public extern static void g_closure_add_marshal_guards( GClosure* closure, void* preMarshalData, Functors.Action<void*, GClosure*> preMarshalNotify, void* postMarshalData, Functors.Action<void*, GClosure*> postMarshalNotify );
		public extern static void g_closure_invalidate( GClosure* closure );
		public extern static void g_closure_invoke( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint );
		public extern static GClosure* g_closure_new_simple( uint sizeofClosure, void* data );
		public extern static GClosure* g_closure_ref( GClosure* closure );
		public extern static void g_closure_remove_finalize_notifier( GClosure* closure, void* notifyData, Functors.Action<void*, GClosure*> notifyFunc );
		public extern static void g_closure_remove_invalidate_notifier( GClosure* closure, void* notifyData, Functors.Action<void*, GClosure*> notifyFunc );
		public extern static void g_closure_set_marshal( GClosure* closure, Functors.Action<GClosure*, GValue*, uint, GValue*, void*, void*> marshal );
		public extern static void g_closure_set_meta_marshal( GClosure* closure, void* marshalData, Functors.Action<GClosure*, GValue*, uint, GValue*, void*, void*> metaMarshal );
		public extern static void g_closure_sink( GClosure* closure );
		public extern static void g_closure_unref( GClosure* closure );
		public extern static GClosure* g_signal_type_cclosure_new( uintptr itype, uint structOffset );

		public extern static void g_cclosure_marshal_BOOLEAN__BOXED_BOXED( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_BOOLEAN__FLAGS( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_STRING__OBJECT_POINTER( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__BOOLEAN( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__BOXED( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__CHAR( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__DOUBLE( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__ENUM( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__FLAGS( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__FLOAT( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__INT( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__LONG( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__OBJECT( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__PARAM( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__POINTER( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__STRING( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__UCHAR( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__UINT( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__UINT_POINTER( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__ULONG( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__VARIANT( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );
		public extern static void g_cclosure_marshal_VOID__VOID( GClosure* closure, GValue* returnValue, uint nParamValues, GValue* paramValues, void* invocationHint, void* marshalData );

		public extern static void g_clear_signal_handler( uintptr* handlerIdPtr, void* instance );
		public extern static Boolean32 g_signal_accumulator_first_wins( GSignalInvocationHint* ihint, GValue* returnAccu, GValue* handlerReturn, void* dummy );
		public extern static Boolean32 g_signal_accumulator_true_handled( GSignalInvocationHint* ihint, GValue* returnAccu, GValue* handlerReturn, void* dummy );
		public extern static uintptr g_signal_add_emission_hook( uint signalId, uint detail, Functors.Func<GSignalInvocationHint*, uint, GValue*, void*, Boolean32> hookFunc, void* hookData, Functors.Action<void*> dataDestroy );
		public extern static void g_signal_chain_from_overridden( GValue* instanceAndParams, GValue* returnValue );
		public extern static uintptr g_signal_connect_closure( void* instance, CUtf8String detailedSignal, GClosure* closure, Boolean32 after );
		public extern static uintptr g_signal_connect_closure_by_id( void* instance, uint signalId, uint detail, GClosure* closure, Boolean32 after );
		public extern static uintptr g_signal_connect_data( void* instance, CUtf8String detailedSignal, Functors.Action<void*, void*> cHandler, void* data, Functors.Action<void*, GClosure*> destroyData, GConnectFlags connectFlags );
		public extern static void g_signal_emitv( GValue* instanceAndParams, uint signalId, uint detail, GValue* returnValue );
		public extern static GSignalInvocationHint* g_signal_get_invocation_hint( void* instance );
		public extern static void g_signal_handler_block( void* instance, uintptr handlerId );
		public extern static void g_signal_handler_disconnect( void* instance, uintptr handlerId );
		public extern static uintptr g_signal_handler_find( void* instance, GSignalMatchType mask, uint signalId, uint detail, GClosure* closure, void* func, void* data );
		public extern static Boolean32 g_signal_handler_is_connected( void* instance, uintptr handlerId );
		public extern static void g_signal_handler_unblock( void* instance, uintptr handlerId );
		public extern static uint g_signal_handlers_block_matched( void* instance, GSignalMatchType mask, uint signalId, uint detail, GClosure* closure, void* func, void* data );
		public extern static void g_signal_handlers_destroy( void* instance );
		public extern static uint g_signal_handlers_disconnect_matched( void* instance, GSignalMatchType mask, uint signalId, uint detail, GClosure* closure, void* func, void* data );
		public extern static uint g_signal_handlers_unblock_matched( void* instance, GSignalMatchType mask, uint signalId, uint detail, GClosure* closure, void* func, void* data );
		public extern static Boolean32 g_signal_has_handler_pending( void* instance, uint signalId, uint detail, Boolean32 mayBeBlocked );
		public extern static Boolean32 g_signal_is_valid_name( CUtf8String name );
		public extern static uint* g_signal_list_ids( uintptr itype, uint* nIds );
		public extern static uint g_signal_lookup( CUtf8String name, uintptr itype );
		public extern static sbyte* g_signal_name( uint signalId );
		public extern static uint g_signal_newv( CUtf8String signalName, uintptr itype, GSignalFlags signalFlags, GClosure* classClosure, Functors.Func<GSignalInvocationHint*, GValue*, GValue*, void*, Boolean32> accumulator, void* accuData, Functors.Action<GClosure*, GValue*, uint, GValue*, void*, void*> cMarshaller, uintptr returnType, uint nParams, uintptr* paramTypes );
		public extern static void g_signal_override_class_closure( uint signalId, uintptr instanceType, GClosure* classClosure );
		public extern static void g_signal_override_class_handler( CUtf8String signalName, uintptr instanceType, Functors.Action classHandler );
		public extern static Boolean32 g_signal_parse_name( sbyte* detailedSignal, uintptr itype, uint* signalIdP, uint* detailP, Boolean32 forceDetailQuark );
		public extern static void g_signal_query( uint signalId, GSignalQuery* query );
		public extern static void g_signal_remove_emission_hook( uint signalId, uintptr hookId );
		// public extern static void g_signal_set_va_marshaller( uint signalId, uintptr instanceType, Functors.Action<GClosure*, GValue*, void*, va_list, void*, int, uintptr*> vaMarshaller );
		public extern static void g_signal_stop_emission( void* instance, uint signalId, uint detail );
		public extern static void g_signal_stop_emission_by_name( void* instance, sbyte* detailedSignal );

		[BackendHintReadNone]
		public extern static GType g_array_get_type();
		[BackendHintReadNone]
		public extern static GType g_byte_array_get_type();
		[BackendHintReadNone]
		public extern static GType g_bytes_get_type();
		[BackendHintReadNone]
		public extern static GType g_checksum_get_type();
		[BackendHintReadNone]
		public extern static GType g_date_get_type();
		[BackendHintReadNone]
		public extern static GType g_date_time_get_type();
		[BackendHintReadNone]
		public extern static GType g_error_get_type();
		[BackendHintReadNone]
		public extern static GType g_gstring_get_type();
		[BackendHintReadNone]
		public extern static GType g_hash_table_get_type();
		[BackendHintReadNone]
		public extern static GType g_io_channel_get_type();
		[BackendHintReadNone]
		public extern static GType g_io_condition_get_type();
		[BackendHintReadNone]
		public extern static GType g_key_file_get_type();
		[BackendHintReadNone]
		public extern static GType g_main_context_get_type();
		[BackendHintReadNone]
		public extern static GType g_main_loop_get_type();
		[BackendHintReadNone]
		public extern static GType g_mapped_file_get_type();
		[BackendHintReadNone]
		public extern static GType g_markup_parse_context_get_type();
		[BackendHintReadNone]
		public extern static GType g_match_info_get_type();
		[BackendHintReadNone]
		public extern static GType g_option_group_get_type();
		[BackendHintReadNone]
		public extern static GType g_pattern_spec_get_type();
		[BackendHintReadNone]
		public extern static GType g_pollfd_get_type();
		[BackendHintReadNone]
		public extern static GType g_ptr_array_get_type();
		[BackendHintReadNone]
		public extern static GType g_regex_get_type();
		[BackendHintReadNone]
		public extern static GType g_source_get_type();
		[BackendHintReadNone]
		public extern static GType g_strv_get_type();
		[BackendHintReadNone]
		public extern static GType g_thread_get_type();
		[BackendHintReadNone]
		public extern static GType g_time_zone_get_type();
		[BackendHintReadNone]
		public extern static GType g_tree_get_type();
		[BackendHintReadNone]
		public extern static GType g_uri_get_type();
		[BackendHintReadNone]
		public extern static GType g_variant_builder_get_type();
		[BackendHintReadNone]
		public extern static GType g_variant_dict_get_type();
		[BackendHintReadNone]
		public extern static uintptr g_variant_get_gtype();
		[BackendHintReadNone]
		public extern static uintptr g_variant_type_get_gtype();

		public extern static void* g_boxed_copy( uintptr boxedType, void* srcBoxed );
		public extern static void g_boxed_free( uintptr boxedType, void* boxed );
		public extern static uintptr g_boxed_type_register_static( CUtf8String name, Functors.Func<void*, void*> boxedCopy, Functors.Action<void*> boxedFree );
		[BackendHintReadNone]
		public extern static GType g_closure_get_type();
		public extern static void* g_value_dup_boxed( GValue* value );
		public extern static void* g_value_get_boxed( GValue* value );
		[BackendHintReadNone]
		public extern static GType g_value_get_type();
		public extern static void g_value_set_boxed( GValue* value, void* vBoxed );
		public extern static void g_value_set_boxed_take_ownership( GValue* value, void* vBoxed );
		public extern static void g_value_set_static_boxed( GValue* value, void* vBoxed );
		public extern static void g_value_take_boxed( GValue* value, void* vBoxed );

		public extern static GClosure* g_cclosure_new_object( Functors.Action callbackFunc, GObject* object );
		public extern static GClosure* g_cclosure_new_object_swap( Functors.Action callbackFunc, GObject* object );
		public extern static void g_clear_object( GObject** objectPtr );
		public extern static GClosure* g_closure_new_object( uint sizeofClosure, GObject* object );
		public extern static GType g_initially_unowned_get_type();
		public extern static void g_object_add_toggle_ref( GObject* object, Functors.Action<void*, GObject*, Boolean32> notify, void* data );
		public extern static void g_object_add_weak_pointer( GObject* object, void** weakPointerLocation );
		public extern static GParamSpec* g_object_class_find_property( GObject.Class* oclass, CUtf8String propertyName );
		public extern static void g_object_class_install_properties( GObject.Class* oclass, uint nPspecs, GParamSpec** pspecs );
		public extern static void g_object_class_install_property( GObject.Class* oclass, uint propertyId, GParamSpec* pspec );
		public extern static GParamSpec** g_object_class_list_properties( GObject.Class* oclass, uint* nProperties );
		public extern static void g_object_class_override_property( GObject.Class* oclass, uint propertyId, CUtf8String name );
		public extern static uintptr g_object_compat_control( uintptr what, void* data );
		public extern static void* g_object_dup_data( GObject* object, sbyte* key, Functors.Func<void*, void*, void*> dupFunc, void* userData );
		public extern static void* g_object_dup_qdata( GObject* object, uint quark, Functors.Func<void*, void*, void*> dupFunc, void* userData );
		public extern static void g_object_force_floating( GObject* object );
		public extern static void g_object_freeze_notify( GObject* object );
		public extern static void* g_object_get_data( GObject* object, sbyte* key );
		public extern static void g_object_get_property( GObject* object, CUtf8String propertyName, GValue* value );
		public extern static void* g_object_get_qdata( GObject* object, uint quark );
		[BackendHintReadNone]
		public extern static GType g_object_get_type();
		public extern static void g_object_getv( GObject* object, uint nProperties, sbyte** names, GValue* values );
		public extern static GParamSpec* g_object_interface_find_property( void* gIface, CUtf8String propertyName );
		public extern static void g_object_interface_install_property( void* gIface, GParamSpec* pspec );
		public extern static GParamSpec** g_object_interface_list_properties( void* gIface, uint* nPropertiesP );
		public extern static Boolean32 g_object_is_floating( void* object );
		public extern static GObject* g_object_new_with_properties( uintptr objectType, uint nProperties, sbyte** names, GValue* values );
		public extern static void* g_object_newv( uintptr objectType, uint nParameters, GParameter* parameters );
		public extern static void g_object_notify( GObject* object, CUtf8String propertyName );
		public extern static void g_object_notify_by_pspec( GObject* object, GParamSpec* pspec );
		public extern static void* g_object_ref( void* object );
		public extern static void* g_object_ref_sink( void* object );
		public extern static void g_object_remove_toggle_ref( GObject* object, Functors.Action<void*, GObject*, Boolean32> notify, void* data );
		public extern static void g_object_remove_weak_pointer( GObject* object, void** weakPointerLocation );
		public extern static Boolean32 g_object_replace_data( GObject* object, sbyte* key, void* oldval, void* newval, Functors.Action<void*> destroy, Functors.Action<void*>* oldDestroy );
		public extern static Boolean32 g_object_replace_qdata( GObject* object, uint quark, void* oldval, void* newval, Functors.Action<void*> destroy, Functors.Action<void*>* oldDestroy );
		public extern static void g_object_run_dispose( GObject* object );
		public extern static void g_object_set_data( GObject* object, sbyte* key, void* data );
		public extern static void g_object_set_data_full( GObject* object, sbyte* key, void* data, Functors.Action<void*> destroy );
		public extern static void g_object_set_property( GObject* object, CUtf8String propertyName, GValue* value );
		public extern static void g_object_set_qdata( GObject* object, uint quark, void* data );
		public extern static void g_object_set_qdata_full( GObject* object, uint quark, void* data, Functors.Action<void*> destroy );
		public extern static void g_object_setv( GObject* object, uint nProperties, sbyte** names, GValue* values );
		public extern static void* g_object_steal_data( GObject* object, sbyte* key );
		public extern static void* g_object_steal_qdata( GObject* object, uint quark );
		public extern static void* g_object_take_ref( void* object );
		public extern static void g_object_thaw_notify( GObject* object );
		public extern static void g_object_unref( void* object );
		public extern static void g_object_watch_closure( GObject* object, GClosure* closure );
		public extern static void g_object_weak_ref( GObject* object, Functors.Action<void*, GObject*> notify, void* data );
		public extern static void g_object_weak_unref( GObject* object, Functors.Action<void*, GObject*> notify, void* data );
		public extern static uintptr g_signal_connect_object( void* instance, sbyte* detailedSignal, Functors.Action cHandler, void* gobject, GConnectFlags connectFlags );
		public extern static void* g_value_dup_object( GValue* value );
		public extern static void* g_value_get_object( GValue* value );
		public extern static void g_value_set_object( GValue* value, void* vObject );
		public extern static void g_value_set_object_take_ownership( GValue* value, void* vObject );
		public extern static void g_value_take_object( GValue* value, void* vObject );
		public extern static void g_weak_ref_clear( GWeakRef* weakRef );
		public extern static void* g_weak_ref_get( GWeakRef* weakRef );
		public extern static void g_weak_ref_init( GWeakRef* weakRef, void* object );
		public extern static void g_weak_ref_set( GWeakRef* weakRef, void* object );

		public extern static GObject* g_binding_dup_source( GBinding* binding );
		public extern static GObject* g_binding_dup_target( GBinding* binding );
		[BackendHintReadNone]
		public extern static GType g_binding_flags_get_type();
		public extern static GBindingFlags g_binding_get_flags( GBinding* binding );
		public extern static GObject* g_binding_get_source( GBinding* binding );
		public extern static sbyte* g_binding_get_source_property( GBinding* binding );
		public extern static GObject* g_binding_get_target( GBinding* binding );
		public extern static sbyte* g_binding_get_target_property( GBinding* binding );
		[BackendHintReadNone]
		public extern static GType g_binding_get_type();
		public extern static void g_binding_unbind( GBinding* binding );
		public extern static GBinding* g_object_bind_property( void* source, sbyte* sourceProperty, void* target, sbyte* targetProperty, GBindingFlags flags );
		public extern static GBinding* g_object_bind_property_full( void* source, sbyte* sourceProperty, void* target, sbyte* targetProperty, GBindingFlags flags, Functors.Func<GBinding*, GValue*, GValue*, void*, Boolean32> transformTo, Functors.Func<GBinding*, GValue*, GValue*, void*, Boolean32> transformFrom, void* userData, Functors.Action<void*> notify );
		public extern static GBinding* g_object_bind_property_with_closures( void* source, sbyte* sourceProperty, void* target, sbyte* targetProperty, GBindingFlags flags, GClosure* transformTo, GClosure* transformFrom );

		public extern static void g_binding_group_bind( GBindingGroup* self, sbyte* sourceProperty, void* target, sbyte* targetProperty, GBindingFlags flags );
		public extern static void g_binding_group_bind_full( GBindingGroup* self, sbyte* sourceProperty, void* target, sbyte* targetProperty, GBindingFlags flags, Functors.Func<GBinding*, GValue*, GValue*, void*, Boolean32> transformTo, Functors.Func<GBinding*, GValue*, GValue*, void*, Boolean32> transformFrom, void* userData, Functors.Action<void*> userDataDestroy );
		public extern static void g_binding_group_bind_with_closures( GBindingGroup* self, sbyte* sourceProperty, void* target, sbyte* targetProperty, GBindingFlags flags, GClosure* transformTo, GClosure* transformFrom );
		public extern static void* g_binding_group_dup_source( GBindingGroup* self );
		[BackendHintReadNone]
		public extern static GType g_binding_group_get_type();
		public extern static GBindingGroup* g_binding_group_new();
		public extern static void g_binding_group_set_source( GBindingGroup* self, void* source );

		public extern static void g_enum_complete_type_info( uintptr gEnumType, GTypeInfo* info, GEnumValue* constValues );
		public extern static GEnumValue* g_enum_get_value( GEnumClass* enumClass, int value );
		public extern static GEnumValue* g_enum_get_value_by_name( GEnumClass* enumClass, CUtf8String name );
		public extern static GEnumValue* g_enum_get_value_by_nick( GEnumClass* enumClass, sbyte* nick );
		public extern static uintptr g_enum_register_static( CUtf8String name, GEnumValue* constStaticValues );
		public extern static sbyte* g_enum_to_string( uintptr gEnumType, int value );
		public extern static void g_flags_complete_type_info( uintptr gFlagsType, GTypeInfo* info, GFlagsValue* constValues );
		public extern static GFlagsValue* g_flags_get_first_value( GFlagsClass* flagsClass, uint value );
		public extern static GFlagsValue* g_flags_get_value_by_name( GFlagsClass* flagsClass, CUtf8String name );
		public extern static GFlagsValue* g_flags_get_value_by_nick( GFlagsClass* flagsClass, sbyte* nick );
		public extern static uintptr g_flags_register_static( CUtf8String name, GFlagsValue* constStaticValues );
		public extern static sbyte* g_flags_to_string( uintptr flagsType, uint value );
		public extern static int g_value_get_enum( GValue* value );
		public extern static uint g_value_get_flags( GValue* value );
		public extern static void g_value_set_enum( GValue* value, int vEnum );
		public extern static void g_value_set_flags( GValue* value, uint vFlags );

		[BackendHintReadNone]
		public extern static GType g_normalize_mode_get_type();
		[BackendHintReadNone]
		public extern static GType g_unicode_break_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_unicode_script_get_type();
		[BackendHintReadNone]
		public extern static GType g_unicode_type_get_type();

		public extern static GParamSpec* g_param_spec_boolean( CUtf8String name, sbyte* nick, sbyte* blurb, Boolean32 defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_boxed( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr boxedType, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_char( CUtf8String name, sbyte* nick, sbyte* blurb, sbyte minimum, sbyte maximum, sbyte defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_double( CUtf8String name, sbyte* nick, sbyte* blurb, double minimum, double maximum, double defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_enum( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr enumType, int defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_flags( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr flagsType, uint defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_float( CUtf8String name, sbyte* nick, sbyte* blurb, float minimum, float maximum, float defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_gtype( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr isAType, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_int( CUtf8String name, sbyte* nick, sbyte* blurb, int minimum, int maximum, int defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_int64( CUtf8String name, sbyte* nick, sbyte* blurb, intptr minimum, intptr maximum, intptr defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_long( CUtf8String name, sbyte* nick, sbyte* blurb, intptr minimum, intptr maximum, intptr defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_object( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr objectType, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_override( CUtf8String name, GParamSpec* overridden );
		public extern static GParamSpec* g_param_spec_param( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr paramType, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_pointer( CUtf8String name, sbyte* nick, sbyte* blurb, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_string( CUtf8String name, sbyte* nick, sbyte* blurb, sbyte* defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_uchar( CUtf8String name, sbyte* nick, sbyte* blurb, byte minimum, byte maximum, byte defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_uint( CUtf8String name, sbyte* nick, sbyte* blurb, uint minimum, uint maximum, uint defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_uint64( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr minimum, uintptr maximum, uintptr defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_ulong( CUtf8String name, sbyte* nick, sbyte* blurb, uintptr minimum, uintptr maximum, uintptr defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_unichar( CUtf8String name, sbyte* nick, sbyte* blurb, uint defaultValue, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_value_array( CUtf8String name, sbyte* nick, sbyte* blurb, GParamSpec* elementSpec, GParamFlags flags );
		public extern static GParamSpec* g_param_spec_variant( CUtf8String name, sbyte* nick, sbyte* blurb, GVariantType* type, GVariant* defaultValue, GParamFlags flags );

		public extern static void g_signal_group_block( GSignalGroup* self );
		public extern static void g_signal_group_connect( GSignalGroup* self, sbyte* detailedSignal, Functors.Action cHandler, void* data );
		public extern static void g_signal_group_connect_after( GSignalGroup* self, sbyte* detailedSignal, Functors.Action cHandler, void* data );
		public extern static void g_signal_group_connect_closure( GSignalGroup* self, sbyte* detailedSignal, GClosure* closure, Boolean32 after );
		public extern static void g_signal_group_connect_data( GSignalGroup* self, sbyte* detailedSignal, Functors.Action cHandler, void* data, Functors.Action<void*, GClosure*> notify, GConnectFlags flags );
		public extern static void g_signal_group_connect_object( GSignalGroup* self, sbyte* detailedSignal, Functors.Action cHandler, void* object, GConnectFlags flags );
		public extern static void g_signal_group_connect_swapped( GSignalGroup* self, sbyte* detailedSignal, Functors.Action cHandler, void* data );
		public extern static void* g_signal_group_dup_target( GSignalGroup* self );
		[BackendHintReadNone]
		public extern static GType g_signal_group_get_type();
		public extern static GSignalGroup* g_signal_group_new( uintptr targetType );
		public extern static void g_signal_group_set_target( GSignalGroup* self, void* target );
		public extern static void g_signal_group_unblock( GSignalGroup* self );

		public extern static void g_source_set_closure( GSource* source, GClosure* closure );
		public extern static void g_source_set_dummy_callback( GSource* source );

		public extern static void g_type_module_add_interface( GTypeModule* module, uintptr instanceType, uintptr interfaceType, GInterfaceInfo* interfaceInfo );
		[BackendHintReadNone]
		public extern static GType g_type_module_get_type();
		public extern static uintptr g_type_module_register_enum( GTypeModule* module, CUtf8String name, GEnumValue* constStaticValues );
		public extern static uintptr g_type_module_register_flags( GTypeModule* module, CUtf8String name, GFlagsValue* constStaticValues );
		public extern static uintptr g_type_module_register_type( GTypeModule* module, uintptr parentType, CUtf8String typeName, GTypeInfo* typeInfo, GTypeFlags flags );
		public extern static void g_type_module_set_name( GTypeModule* module, CUtf8String name );
		public extern static void g_type_module_unuse( GTypeModule* module );
		public extern static Boolean32 g_type_module_use( GTypeModule* module );

		public extern static void g_type_plugin_complete_interface_info( GTypePlugin* plugin, uintptr instanceType, uintptr interfaceType, GInterfaceInfo* info );
		public extern static void g_type_plugin_complete_type_info( GTypePlugin* plugin, uintptr gType, GTypeInfo* info, GTypeValueTable* valueTable );
		[BackendHintReadNone]
		public extern static GType g_type_plugin_get_type();
		public extern static void g_type_plugin_unuse( GTypePlugin* plugin );
		public extern static void g_type_plugin_use( GTypePlugin* plugin );

		public extern static GValueArray* g_value_array_append( GValueArray* valueArray, GValue* value );
		public extern static GValueArray* g_value_array_copy( GValueArray* valueArray );
		public extern static void g_value_array_free( GValueArray* valueArray );
		public extern static GValue* g_value_array_get_nth( GValueArray* valueArray, uint index_ );
		[BackendHintReadNone]
		public extern static GType g_value_array_get_type();
		public extern static GValueArray* g_value_array_insert( GValueArray* valueArray, uint index_, GValue* value );
		public extern static GValueArray* g_value_array_new( uint nPrealloced );
		public extern static GValueArray* g_value_array_prepend( GValueArray* valueArray, GValue* value );
		public extern static GValueArray* g_value_array_remove( GValueArray* valueArray, uint index_ );
		public extern static GValueArray* g_value_array_sort( GValueArray* valueArray, Functors.Func<void*, void*, int> compareFunc );
		public extern static GValueArray* g_value_array_sort_with_data( GValueArray* valueArray, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );

		public extern static GType g_gtype_get_type();
		public extern static uintptr g_pointer_type_register_static( CUtf8String name );
		public extern static sbyte* g_strdup_value_contents( GValue* value );
		public extern static sbyte* g_value_dup_string( GValue* value );
		public extern static GVariant* g_value_dup_variant( GValue* value );
		public extern static Boolean32 g_value_get_boolean( GValue* value );
		public extern static sbyte g_value_get_char( GValue* value );
		public extern static double g_value_get_double( GValue* value );
		public extern static float g_value_get_float( GValue* value );
		public extern static uintptr g_value_get_gtype( GValue* value );
		public extern static int g_value_get_int( GValue* value );
		public extern static intptr g_value_get_int64( GValue* value );
		public extern static intptr g_value_get_long( GValue* value );
		public extern static void* g_value_get_pointer( GValue* value );
		public extern static sbyte g_value_get_schar( GValue* value );
		public extern static CUtf8String g_value_get_string( GValue* value );
		public extern static byte g_value_get_uchar( GValue* value );
		public extern static uint g_value_get_uint( GValue* value );
		public extern static uintptr g_value_get_uint64( GValue* value );
		public extern static uintptr g_value_get_ulong( GValue* value );
		public extern static GVariant* g_value_get_variant( GValue* value );
		public extern static void g_value_set_boolean( GValue* value, Boolean32 vBoolean );
		public extern static void g_value_set_char( GValue* value, sbyte vChar );
		public extern static void g_value_set_double( GValue* value, double vDouble );
		public extern static void g_value_set_float( GValue* value, float vFloat );
		public extern static void g_value_set_gtype( GValue* value, uintptr vGtype );
		public extern static void g_value_set_int( GValue* value, int vInt );
		public extern static void g_value_set_int64( GValue* value, intptr vInt64 );
		public extern static void g_value_set_interned_string( GValue* value, sbyte* vString );
		public extern static void g_value_set_long( GValue* value, intptr vLong );
		public extern static void g_value_set_pointer( GValue* value, void* vPointer );
		public extern static void g_value_set_schar( GValue* value, sbyte vChar );
		public extern static void g_value_set_static_string( GValue* value, CUtf8String vString );
		public extern static void g_value_set_string( GValue* value, CUtf8String vString );
		public extern static void g_value_set_string_take_ownership( GValue* value, sbyte* vString );
		public extern static void g_value_set_uchar( GValue* value, byte vUchar );
		public extern static void g_value_set_uint( GValue* value, uint vUint );
		public extern static void g_value_set_uint64( GValue* value, uintptr vUint64 );
		public extern static void g_value_set_ulong( GValue* value, uintptr vUlong );
		public extern static void g_value_set_variant( GValue* value, GVariant* variant );
		public extern static void g_value_take_string( GValue* value, sbyte* vString );
		public extern static void g_value_take_variant( GValue* value, GVariant* variant );
	}
	[ExternLibrary( Image = "/usr/lib/aarch64-linux-gnu/libgmodule-2.0.so.0" )]
	public static partial struct GModuleApi {
		public extern static sbyte* g_module_build_path( sbyte* directory, CUtf8String moduleName );
		public extern static Boolean32 g_module_close( GModule* module );
		public extern static sbyte* g_module_error();
		public extern static uint g_module_error_quark();
		public extern static void g_module_make_resident( GModule* module );
		public extern static sbyte* g_module_name( GModule* module );
		public extern static GModule* g_module_open( CUtf8String fileName, GModuleFlags flags );
		public extern static GModule* g_module_open_full( CUtf8String fileName, GModuleFlags flags, GError** error );
		[BackendHintReadNone]
		public extern static Boolean32 g_module_supported();
		public extern static Boolean32 g_module_symbol( GModule* module, CUtf8String symbolName, void** symbol );
	}
	[ExternLibrary( Image = "/usr/lib/aarch64-linux-gnu/libgthread-2.0.so.0" )]
	public static partial struct GThreadApi {
		public extern static void g_thread_init( void* vtable );
		public extern static void g_thread_init_with_errorcheck_mutexes( void* vtable );
	}
	[ExternLibrary( Image = "/usr/lib/aarch64-linux-gnu/libgio-2.0.so.0" )]
	public static partial struct GIO {
		public extern static void g_action_activate( GAction* action, GVariant* parameter );
		public extern static void g_action_change_state( GAction* action, GVariant* value );
		public extern static Boolean32 g_action_get_enabled( GAction* action );
		public extern static sbyte* g_action_get_name( GAction* action );
		public extern static GVariantType* g_action_get_parameter_type( GAction* action );
		public extern static GVariant* g_action_get_state( GAction* action );
		public extern static GVariant* g_action_get_state_hint( GAction* action );
		public extern static GVariantType* g_action_get_state_type( GAction* action );
		[BackendHintReadNone]
		public extern static GType g_action_get_type();
		public extern static Boolean32 g_action_name_is_valid( CUtf8String actionName );
		public extern static Boolean32 g_action_parse_detailed_name( CUtf8String detailedName, sbyte** actionName, GVariant** targetValue, GError** error );
		public extern static sbyte* g_action_print_detailed_name( CUtf8String actionName, GVariant* targetValue );

		public extern static void g_action_group_action_added( GActionGroup* actionGroup, CUtf8String actionName );
		public extern static void g_action_group_action_enabled_changed( GActionGroup* actionGroup, CUtf8String actionName, Boolean32 enabled );
		public extern static void g_action_group_action_removed( GActionGroup* actionGroup, CUtf8String actionName );
		public extern static void g_action_group_action_state_changed( GActionGroup* actionGroup, CUtf8String actionName, GVariant* state );
		public extern static void g_action_group_activate_action( GActionGroup* actionGroup, CUtf8String actionName, GVariant* parameter );
		public extern static void g_action_group_change_action_state( GActionGroup* actionGroup, CUtf8String actionName, GVariant* value );
		public extern static Boolean32 g_action_group_get_action_enabled( GActionGroup* actionGroup, CUtf8String actionName );
		public extern static GVariantType* g_action_group_get_action_parameter_type( GActionGroup* actionGroup, CUtf8String actionName );
		public extern static GVariant* g_action_group_get_action_state( GActionGroup* actionGroup, CUtf8String actionName );
		public extern static GVariant* g_action_group_get_action_state_hint( GActionGroup* actionGroup, CUtf8String actionName );
		public extern static GVariantType* g_action_group_get_action_state_type( GActionGroup* actionGroup, CUtf8String actionName );
		[BackendHintReadNone]
		public extern static GType g_action_group_get_type();
		public extern static Boolean32 g_action_group_has_action( GActionGroup* actionGroup, CUtf8String actionName );
		public extern static sbyte** g_action_group_list_actions( GActionGroup* actionGroup );
		public extern static Boolean32 g_action_group_query_action( GActionGroup* actionGroup, CUtf8String actionName, Boolean32* enabled, GVariantType** parameterType, GVariantType** stateType, GVariant** stateHint, GVariant** state );

		public extern static uint g_dbus_connection_export_action_group( GDBusConnection* connection, sbyte* objectPath, GActionGroup* actionGroup, GError** error );
		public extern static void g_dbus_connection_unexport_action_group( GDBusConnection* connection, uint exportId );

		public extern static void g_action_map_add_action( GActionMap* actionMap, GAction* action );
		public extern static void g_action_map_add_action_entries( GActionMap* actionMap, GActionEntry* entries, int nEntries, void* userData );
		[BackendHintReadNone]
		public extern static GType g_action_map_get_type();
		public extern static GAction* g_action_map_lookup_action( GActionMap* actionMap, CUtf8String actionName );
		public extern static void g_action_map_remove_action( GActionMap* actionMap, CUtf8String actionName );

		public extern static Boolean32 g_app_info_add_supports_type( GAppInfo* appinfo, sbyte* contentType, GError** error );
		public extern static Boolean32 g_app_info_can_delete( GAppInfo* appinfo );
		public extern static Boolean32 g_app_info_can_remove_supports_type( GAppInfo* appinfo );
		public extern static GAppInfo* g_app_info_create_from_commandline( sbyte* commandline, CUtf8String applicationName, GAppInfoCreateFlags flags, GError** error );
		public extern static Boolean32 g_app_info_delete( GAppInfo* appinfo );
		public extern static GAppInfo* g_app_info_dup( GAppInfo* appinfo );
		public extern static Boolean32 g_app_info_equal( GAppInfo* appinfo1, GAppInfo* appinfo2 );
		public extern static GList* g_app_info_get_all();
		public extern static GList* g_app_info_get_all_for_type( sbyte* contentType );
		public extern static sbyte* g_app_info_get_commandline( GAppInfo* appinfo );
		public extern static GAppInfo* g_app_info_get_default_for_type( sbyte* contentType, Boolean32 mustSupportUris );
		public extern static void g_app_info_get_default_for_type_async( sbyte* contentType, Boolean32 mustSupportUris, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GAppInfo* g_app_info_get_default_for_type_finish( GAsyncResult* result, GError** error );
		public extern static GAppInfo* g_app_info_get_default_for_uri_scheme( sbyte* uriScheme );
		public extern static void g_app_info_get_default_for_uri_scheme_async( sbyte* uriScheme, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GAppInfo* g_app_info_get_default_for_uri_scheme_finish( GAsyncResult* result, GError** error );
		public extern static sbyte* g_app_info_get_description( GAppInfo* appinfo );
		public extern static sbyte* g_app_info_get_display_name( GAppInfo* appinfo );
		public extern static sbyte* g_app_info_get_executable( GAppInfo* appinfo );
		public extern static GList* g_app_info_get_fallback_for_type( sbyte* contentType );
		public extern static GIcon* g_app_info_get_icon( GAppInfo* appinfo );
		public extern static sbyte* g_app_info_get_id( GAppInfo* appinfo );
		public extern static sbyte* g_app_info_get_name( GAppInfo* appinfo );
		public extern static GList* g_app_info_get_recommended_for_type( sbyte* contentType );
		public extern static sbyte** g_app_info_get_supported_types( GAppInfo* appinfo );
		[BackendHintReadNone]
		public extern static GType g_app_info_get_type();
		public extern static Boolean32 g_app_info_launch( GAppInfo* appinfo, GList* files, GAppLaunchContext* context, GError** error );
		public extern static Boolean32 g_app_info_launch_default_for_uri( sbyte* uri, GAppLaunchContext* context, GError** error );
		public extern static void g_app_info_launch_default_for_uri_async( sbyte* uri, GAppLaunchContext* context, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_app_info_launch_default_for_uri_finish( GAsyncResult* result, GError** error );
		public extern static Boolean32 g_app_info_launch_uris( GAppInfo* appinfo, GList* uris, GAppLaunchContext* context, GError** error );
		public extern static void g_app_info_launch_uris_async( GAppInfo* appinfo, GList* uris, GAppLaunchContext* context, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_app_info_launch_uris_finish( GAppInfo* appinfo, GAsyncResult* result, GError** error );
		public extern static GAppInfoMonitor* g_app_info_monitor_get();
		public extern static GType g_app_info_monitor_get_type();
		public extern static Boolean32 g_app_info_remove_supports_type( GAppInfo* appinfo, sbyte* contentType, GError** error );
		public extern static void g_app_info_reset_type_associations( sbyte* contentType );
		public extern static Boolean32 g_app_info_set_as_default_for_extension( GAppInfo* appinfo, sbyte* extension, GError** error );
		public extern static Boolean32 g_app_info_set_as_default_for_type( GAppInfo* appinfo, sbyte* contentType, GError** error );
		public extern static Boolean32 g_app_info_set_as_last_used_for_type( GAppInfo* appinfo, sbyte* contentType, GError** error );
		public extern static Boolean32 g_app_info_should_show( GAppInfo* appinfo );
		public extern static Boolean32 g_app_info_supports_files( GAppInfo* appinfo );
		public extern static Boolean32 g_app_info_supports_uris( GAppInfo* appinfo );
		public extern static sbyte* g_app_launch_context_get_display( GAppLaunchContext* context, GAppInfo* info, GList* files );
		public extern static sbyte** g_app_launch_context_get_environment( GAppLaunchContext* context );
		public extern static sbyte* g_app_launch_context_get_startup_notify_id( GAppLaunchContext* context, GAppInfo* info, GList* files );
		[BackendHintReadNone]
		public extern static GType g_app_launch_context_get_type();
		public extern static void g_app_launch_context_launch_failed( GAppLaunchContext* context, sbyte* startupNotifyId );
		public extern static GAppLaunchContext* g_app_launch_context_new();
		public extern static void g_app_launch_context_setenv( GAppLaunchContext* context, sbyte* variable, sbyte* value );
		public extern static void g_app_launch_context_unsetenv( GAppLaunchContext* context, sbyte* variable );

		public extern static void g_application_activate( GApplication* application );
		public extern static void g_application_add_main_option( GApplication* application, CUtf8String longName, sbyte shortName, GOptionFlags flags, GOptionArg arg, CUtf8String description, CUtf8String argDescription );
		public extern static void g_application_add_main_option_entries( GApplication* application, GOptionEntry* entries );
		public extern static void g_application_add_option_group( GApplication* application, GOptionGroup* group );
		public extern static void g_application_bind_busy_property( GApplication* application, void* object, sbyte* property );
		public extern static sbyte* g_application_get_application_id( GApplication* application );
		public extern static GDBusConnection* g_application_get_dbus_connection( GApplication* application );
		public extern static sbyte* g_application_get_dbus_object_path( GApplication* application );
		public extern static GApplication* g_application_get_default();
		public extern static GApplicationFlags g_application_get_flags( GApplication* application );
		public extern static uint g_application_get_inactivity_timeout( GApplication* application );
		public extern static Boolean32 g_application_get_is_busy( GApplication* application );
		public extern static Boolean32 g_application_get_is_registered( GApplication* application );
		public extern static Boolean32 g_application_get_is_remote( GApplication* application );
		public extern static sbyte* g_application_get_resource_base_path( GApplication* application );
		[BackendHintReadNone]
		public extern static GType g_application_get_type();
		public extern static void g_application_hold( GApplication* application );
		public extern static Boolean32 g_application_id_is_valid( sbyte* applicationId );
		public extern static void g_application_mark_busy( GApplication* application );
		public extern static GApplication* g_application_new( sbyte* applicationId, GApplicationFlags flags );
		public extern static void g_application_open( GApplication* application, GFile** files, int nFiles, sbyte* hint );
		public extern static void g_application_quit( GApplication* application );
		public extern static Boolean32 g_application_register( GApplication* application, GCancellable* cancellable, GError** error );
		public extern static void g_application_release( GApplication* application );
		public extern static int g_application_run( GApplication* application, int argc, sbyte** argv );
		public extern static void g_application_send_notification( GApplication* application, sbyte* id, GNotification* notification );
		public extern static void g_application_set_action_group( GApplication* application, GActionGroup* actionGroup );
		public extern static void g_application_set_application_id( GApplication* application, sbyte* applicationId );
		public extern static void g_application_set_default( GApplication* application );
		public extern static void g_application_set_flags( GApplication* application, GApplicationFlags flags );
		public extern static void g_application_set_inactivity_timeout( GApplication* application, uint inactivityTimeout );
		public extern static void g_application_set_option_context_description( GApplication* application, CUtf8String description );
		public extern static void g_application_set_option_context_parameter_string( GApplication* application, sbyte* parameterString );
		public extern static void g_application_set_option_context_summary( GApplication* application, sbyte* summary );
		public extern static void g_application_set_resource_base_path( GApplication* application, sbyte* resourcePath );
		public extern static void g_application_unbind_busy_property( GApplication* application, void* object, sbyte* property );
		public extern static void g_application_unmark_busy( GApplication* application );
		public extern static void g_application_withdraw_notification( GApplication* application, sbyte* id );

		public extern static GFile* g_application_command_line_create_file_for_arg( GApplicationCommandLine* cmdline, sbyte* arg );
		public extern static sbyte** g_application_command_line_get_arguments( GApplicationCommandLine* cmdline, int* argc );
		public extern static sbyte* g_application_command_line_get_cwd( GApplicationCommandLine* cmdline );
		public extern static sbyte** g_application_command_line_get_environ( GApplicationCommandLine* cmdline );
		public extern static int g_application_command_line_get_exit_status( GApplicationCommandLine* cmdline );
		public extern static Boolean32 g_application_command_line_get_is_remote( GApplicationCommandLine* cmdline );
		public extern static GVariantDict* g_application_command_line_get_options_dict( GApplicationCommandLine* cmdline );
		public extern static GVariant* g_application_command_line_get_platform_data( GApplicationCommandLine* cmdline );
		public extern static GInputStream* g_application_command_line_get_stdin( GApplicationCommandLine* cmdline );
		[BackendHintReadNone]
		public extern static GType g_application_command_line_get_type();
		public extern static sbyte* g_application_command_line_getenv( GApplicationCommandLine* cmdline, CUtf8String name );
		public extern static void g_application_command_line_set_exit_status( GApplicationCommandLine* cmdline, int exitStatus );

		[BackendHintReadNone]
		public extern static GType g_initable_get_type();
		public extern static Boolean32 g_initable_init( GInitable* initable, GCancellable* cancellable, GError** error );
		public extern static void* g_initable_newv( uintptr objectType, uint nParameters, GParameter* parameters, GCancellable* cancellable, GError** error );

		[BackendHintReadNone]
		public extern static GType g_async_initable_get_type();
		public extern static void g_async_initable_init_async( GAsyncInitable* initable, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_async_initable_init_finish( GAsyncInitable* initable, GAsyncResult* res, GError** error );
		public extern static GObject* g_async_initable_new_finish( GAsyncInitable* initable, GAsyncResult* res, GError** error );
		public extern static void g_async_initable_newv_async( uintptr objectType, uint nParameters, GParameter* parameters, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );

		public extern static GObject* g_async_result_get_source_object( GAsyncResult* res );
		[BackendHintReadNone]
		public extern static GType g_async_result_get_type();
		public extern static void* g_async_result_get_user_data( GAsyncResult* res );
		public extern static Boolean32 g_async_result_is_tagged( GAsyncResult* res, void* sourceTag );
		public extern static Boolean32 g_async_result_legacy_propagate_error( GAsyncResult* res, GError** error );

		public extern static void g_input_stream_clear_pending( GInputStream* stream );
		public extern static Boolean32 g_input_stream_close( GInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static void g_input_stream_close_async( GInputStream* stream, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_input_stream_close_finish( GInputStream* stream, GAsyncResult* result, GError** error );
		[BackendHintReadNone]
		public extern static GType g_input_stream_get_type();
		public extern static Boolean32 g_input_stream_has_pending( GInputStream* stream );
		public extern static Boolean32 g_input_stream_is_closed( GInputStream* stream );
		public extern static intptr g_input_stream_read( GInputStream* stream, void* buffer, uintptr count, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_input_stream_read_all( GInputStream* stream, void* buffer, uintptr count, uintptr* bytesRead, GCancellable* cancellable, GError** error );
		public extern static void g_input_stream_read_all_async( GInputStream* stream, void* buffer, uintptr count, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_input_stream_read_all_finish( GInputStream* stream, GAsyncResult* result, uintptr* bytesRead, GError** error );
		public extern static void g_input_stream_read_async( GInputStream* stream, void* buffer, uintptr count, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GBytes* g_input_stream_read_bytes( GInputStream* stream, uintptr count, GCancellable* cancellable, GError** error );
		public extern static void g_input_stream_read_bytes_async( GInputStream* stream, uintptr count, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GBytes* g_input_stream_read_bytes_finish( GInputStream* stream, GAsyncResult* result, GError** error );
		public extern static intptr g_input_stream_read_finish( GInputStream* stream, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_input_stream_set_pending( GInputStream* stream, GError** error );
		public extern static intptr g_input_stream_skip( GInputStream* stream, uintptr count, GCancellable* cancellable, GError** error );
		public extern static void g_input_stream_skip_async( GInputStream* stream, uintptr count, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static intptr g_input_stream_skip_finish( GInputStream* stream, GAsyncResult* result, GError** error );

		public extern static GInputStream* g_filter_input_stream_get_base_stream( GFilterInputStream* stream );
		public extern static Boolean32 g_filter_input_stream_get_close_base_stream( GFilterInputStream* stream );
		[BackendHintReadNone]
		public extern static GType g_filter_input_stream_get_type();
		public extern static void g_filter_input_stream_set_close_base_stream( GFilterInputStream* stream, Boolean32 closeBase );

		public extern static intptr g_buffered_input_stream_fill( GBufferedInputStream* stream, intptr count, GCancellable* cancellable, GError** error );
		public extern static void g_buffered_input_stream_fill_async( GBufferedInputStream* stream, intptr count, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static intptr g_buffered_input_stream_fill_finish( GBufferedInputStream* stream, GAsyncResult* result, GError** error );
		public extern static uintptr g_buffered_input_stream_get_available( GBufferedInputStream* stream );
		public extern static uintptr g_buffered_input_stream_get_buffer_size( GBufferedInputStream* stream );
		[BackendHintReadNone]
		public extern static GType g_buffered_input_stream_get_type();
		public extern static GInputStream* g_buffered_input_stream_new( GInputStream* baseStream );
		public extern static GInputStream* g_buffered_input_stream_new_sized( GInputStream* baseStream, uintptr size );
		public extern static uintptr g_buffered_input_stream_peek( GBufferedInputStream* stream, void* buffer, uintptr offset, uintptr count );
		public extern static void* g_buffered_input_stream_peek_buffer( GBufferedInputStream* stream, uintptr* count );
		public extern static int g_buffered_input_stream_read_byte( GBufferedInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static void g_buffered_input_stream_set_buffer_size( GBufferedInputStream* stream, uintptr size );

		public extern static void g_output_stream_clear_pending( GOutputStream* stream );
		public extern static Boolean32 g_output_stream_close( GOutputStream* stream, GCancellable* cancellable, GError** error );
		public extern static void g_output_stream_close_async( GOutputStream* stream, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_output_stream_close_finish( GOutputStream* stream, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_output_stream_flush( GOutputStream* stream, GCancellable* cancellable, GError** error );
		public extern static void g_output_stream_flush_async( GOutputStream* stream, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_output_stream_flush_finish( GOutputStream* stream, GAsyncResult* result, GError** error );
		[BackendHintReadNone]
		public extern static GType g_output_stream_get_type();
		public extern static Boolean32 g_output_stream_has_pending( GOutputStream* stream );
		public extern static Boolean32 g_output_stream_is_closed( GOutputStream* stream );
		public extern static Boolean32 g_output_stream_is_closing( GOutputStream* stream );
		public extern static Boolean32 g_output_stream_set_pending( GOutputStream* stream, GError** error );
		public extern static intptr g_output_stream_splice( GOutputStream* stream, GInputStream* source, GOutputStreamSpliceFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_output_stream_splice_async( GOutputStream* stream, GInputStream* source, GOutputStreamSpliceFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static intptr g_output_stream_splice_finish( GOutputStream* stream, GAsyncResult* result, GError** error );
		public extern static intptr g_output_stream_write( GOutputStream* stream, void* buffer, uintptr count, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_output_stream_write_all( GOutputStream* stream, void* buffer, uintptr count, uintptr* bytesWritten, GCancellable* cancellable, GError** error );
		public extern static void g_output_stream_write_all_async( GOutputStream* stream, void* buffer, uintptr count, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_output_stream_write_all_finish( GOutputStream* stream, GAsyncResult* result, uintptr* bytesWritten, GError** error );
		public extern static void g_output_stream_write_async( GOutputStream* stream, void* buffer, uintptr count, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static intptr g_output_stream_write_bytes( GOutputStream* stream, GBytes* bytes, GCancellable* cancellable, GError** error );
		public extern static void g_output_stream_write_bytes_async( GOutputStream* stream, GBytes* bytes, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static intptr g_output_stream_write_bytes_finish( GOutputStream* stream, GAsyncResult* result, GError** error );
		public extern static intptr g_output_stream_write_finish( GOutputStream* stream, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_output_stream_writev( GOutputStream* stream, GOutputVector* vectors, uintptr nVectors, uintptr* bytesWritten, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_output_stream_writev_all( GOutputStream* stream, GOutputVector* vectors, uintptr nVectors, uintptr* bytesWritten, GCancellable* cancellable, GError** error );
		public extern static void g_output_stream_writev_all_async( GOutputStream* stream, GOutputVector* vectors, uintptr nVectors, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_output_stream_writev_all_finish( GOutputStream* stream, GAsyncResult* result, uintptr* bytesWritten, GError** error );
		public extern static void g_output_stream_writev_async( GOutputStream* stream, GOutputVector* vectors, uintptr nVectors, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_output_stream_writev_finish( GOutputStream* stream, GAsyncResult* result, uintptr* bytesWritten, GError** error );

		public extern static GOutputStream* g_filter_output_stream_get_base_stream( GFilterOutputStream* stream );
		public extern static Boolean32 g_filter_output_stream_get_close_base_stream( GFilterOutputStream* stream );
		[BackendHintReadNone]
		public extern static GType g_filter_output_stream_get_type();
		public extern static void g_filter_output_stream_set_close_base_stream( GFilterOutputStream* stream, Boolean32 closeBase );

		public extern static Boolean32 g_buffered_output_stream_get_auto_grow( GBufferedOutputStream* stream );
		public extern static uintptr g_buffered_output_stream_get_buffer_size( GBufferedOutputStream* stream );
		[BackendHintReadNone]
		public extern static GType g_buffered_output_stream_get_type();
		public extern static GOutputStream* g_buffered_output_stream_new( GOutputStream* baseStream );
		public extern static GOutputStream* g_buffered_output_stream_new_sized( GOutputStream* baseStream, uintptr size );
		public extern static void g_buffered_output_stream_set_auto_grow( GBufferedOutputStream* stream, Boolean32 autoGrow );
		public extern static void g_buffered_output_stream_set_buffer_size( GBufferedOutputStream* stream, uintptr size );

		public extern static GBytes* g_bytes_icon_get_bytes( GBytesIcon* icon );
		[BackendHintReadNone]
		public extern static GType g_bytes_icon_get_type();
		public extern static GIcon* g_bytes_icon_new( GBytes* bytes );

		public extern static void g_cancellable_cancel( GCancellable* cancellable );
		public extern static uintptr g_cancellable_connect( GCancellable* cancellable, Functors.Action callback, void* data, Functors.Action<void*> dataDestroyFunc );
		public extern static void g_cancellable_disconnect( GCancellable* cancellable, uintptr handlerId );
		public extern static GCancellable* g_cancellable_get_current();
		public extern static int g_cancellable_get_fd( GCancellable* cancellable );
		[BackendHintReadNone]
		public extern static GType g_cancellable_get_type();
		public extern static Boolean32 g_cancellable_is_cancelled( GCancellable* cancellable );
		public extern static Boolean32 g_cancellable_make_pollfd( GCancellable* cancellable, GPollFD* pollfd );
		public extern static GCancellable* g_cancellable_new();
		public extern static void g_cancellable_pop_current( GCancellable* cancellable );
		public extern static void g_cancellable_push_current( GCancellable* cancellable );
		public extern static void g_cancellable_release_fd( GCancellable* cancellable );
		public extern static void g_cancellable_reset( GCancellable* cancellable );
		public extern static Boolean32 g_cancellable_set_error_if_cancelled( GCancellable* cancellable, GError** error );
		public extern static GSource* g_cancellable_source_new( GCancellable* cancellable );

		public extern static GConverterResult g_converter_convert( GConverter* converter, void* inbuf, uintptr inbufSize, void* outbuf, uintptr outbufSize, GConverterFlags flags, uintptr* bytesRead, uintptr* bytesWritten, GError** error );
		[BackendHintReadNone]
		public extern static GType g_converter_get_type();
		public extern static void g_converter_reset( GConverter* converter );

		public extern static uint g_charset_converter_get_num_fallbacks( GCharsetConverter* converter );
		[BackendHintReadNone]
		public extern static GType g_charset_converter_get_type();
		public extern static Boolean32 g_charset_converter_get_use_fallback( GCharsetConverter* converter );
		public extern static GCharsetConverter* g_charset_converter_new( sbyte* toCharset, sbyte* fromCharset, GError** error );
		public extern static void g_charset_converter_set_use_fallback( GCharsetConverter* converter, Boolean32 useFallback );

		public extern static Boolean32 g_content_type_can_be_executable( sbyte* type );
		public extern static Boolean32 g_content_type_equals( sbyte* type1, sbyte* type2 );
		public extern static sbyte* g_content_type_from_mime_type( sbyte* mimeType );
		public extern static sbyte* g_content_type_get_description( sbyte* type );
		public extern static sbyte* g_content_type_get_generic_icon_name( sbyte* type );
		public extern static GIcon* g_content_type_get_icon( sbyte* type );
		public extern static sbyte** g_content_type_get_mime_dirs();
		public extern static sbyte* g_content_type_get_mime_type( sbyte* type );
		public extern static GIcon* g_content_type_get_symbolic_icon( sbyte* type );
		public extern static sbyte* g_content_type_guess( CUtf8String filename, byte* data, uintptr dataSize, Boolean32* resultUncertain );
		public extern static sbyte** g_content_type_guess_for_tree( GFile* root );
		public extern static Boolean32 g_content_type_is_a( sbyte* type, sbyte* supertype );
		public extern static Boolean32 g_content_type_is_mime_type( sbyte* type, sbyte* mimeType );
		public extern static Boolean32 g_content_type_is_unknown( sbyte* type );
		public extern static void g_content_type_set_mime_dirs( sbyte** dirs );
		public extern static GList* g_content_types_get_registered();

		public extern static GConverter* g_converter_input_stream_get_converter( GConverterInputStream* converterStream );
		[BackendHintReadNone]
		public extern static GType g_converter_input_stream_get_type();
		public extern static GInputStream* g_converter_input_stream_new( GInputStream* baseStream, GConverter* converter );

		public extern static GConverter* g_converter_output_stream_get_converter( GConverterOutputStream* converterStream );
		[BackendHintReadNone]
		public extern static GType g_converter_output_stream_get_type();
		public extern static GOutputStream* g_converter_output_stream_new( GOutputStream* baseStream, GConverter* converter );

		public extern static void* g_credentials_get_native( GCredentials* credentials, GCredentialsType nativeType );
		[BackendHintReadNone]
		public extern static GType g_credentials_get_type();
		public extern static int g_credentials_get_unix_pid( GCredentials* credentials, GError** error );
		public extern static uint g_credentials_get_unix_user( GCredentials* credentials, GError** error );
		public extern static Boolean32 g_credentials_is_same_user( GCredentials* credentials, GCredentials* otherCredentials, GError** error );
		public extern static GCredentials* g_credentials_new();
		public extern static void g_credentials_set_native( GCredentials* credentials, GCredentialsType nativeType, void* native );
		public extern static Boolean32 g_credentials_set_unix_user( GCredentials* credentials, uint uid, GError** error );
		public extern static sbyte* g_credentials_to_string( GCredentials* credentials );

		public extern static GIOCondition g_datagram_based_condition_check( GDatagramBased* datagramBased, GIOCondition condition );
		public extern static Boolean32 g_datagram_based_condition_wait( GDatagramBased* datagramBased, GIOCondition condition, intptr timeout, GCancellable* cancellable, GError** error );
		public extern static GSource* g_datagram_based_create_source( GDatagramBased* datagramBased, GIOCondition condition, GCancellable* cancellable );
		public extern static GType g_datagram_based_get_type();
		public extern static int g_datagram_based_receive_messages( GDatagramBased* datagramBased, GInputMessage* messages, uint numMessages, int flags, intptr timeout, GCancellable* cancellable, GError** error );
		public extern static int g_datagram_based_send_messages( GDatagramBased* datagramBased, GOutputMessage* messages, uint numMessages, int flags, intptr timeout, GCancellable* cancellable, GError** error );

		public extern static GDataStreamByteOrder g_data_input_stream_get_byte_order( GDataInputStream* stream );
		public extern static GDataStreamNewlineType g_data_input_stream_get_newline_type( GDataInputStream* stream );
		[BackendHintReadNone]
		public extern static GType g_data_input_stream_get_type();
		public extern static GDataInputStream* g_data_input_stream_new( GInputStream* baseStream );
		public extern static byte g_data_input_stream_read_byte( GDataInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static short g_data_input_stream_read_int16( GDataInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static int g_data_input_stream_read_int32( GDataInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static intptr g_data_input_stream_read_int64( GDataInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static sbyte* g_data_input_stream_read_line( GDataInputStream* stream, uintptr* length, GCancellable* cancellable, GError** error );
		public extern static void g_data_input_stream_read_line_async( GDataInputStream* stream, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static sbyte* g_data_input_stream_read_line_finish( GDataInputStream* stream, GAsyncResult* result, uintptr* length, GError** error );
		public extern static sbyte* g_data_input_stream_read_line_finish_utf8( GDataInputStream* stream, GAsyncResult* result, uintptr* length, GError** error );
		public extern static sbyte* g_data_input_stream_read_line_utf8( GDataInputStream* stream, uintptr* length, GCancellable* cancellable, GError** error );
		public extern static ushort g_data_input_stream_read_uint16( GDataInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static uint g_data_input_stream_read_uint32( GDataInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static uintptr g_data_input_stream_read_uint64( GDataInputStream* stream, GCancellable* cancellable, GError** error );
		public extern static sbyte* g_data_input_stream_read_until( GDataInputStream* stream, sbyte* stopChars, uintptr* length, GCancellable* cancellable, GError** error );
		public extern static void g_data_input_stream_read_until_async( GDataInputStream* stream, sbyte* stopChars, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static sbyte* g_data_input_stream_read_until_finish( GDataInputStream* stream, GAsyncResult* result, uintptr* length, GError** error );
		public extern static sbyte* g_data_input_stream_read_upto( GDataInputStream* stream, sbyte* stopChars, intptr stopCharsLen, uintptr* length, GCancellable* cancellable, GError** error );
		public extern static void g_data_input_stream_read_upto_async( GDataInputStream* stream, sbyte* stopChars, intptr stopCharsLen, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static sbyte* g_data_input_stream_read_upto_finish( GDataInputStream* stream, GAsyncResult* result, uintptr* length, GError** error );
		public extern static void g_data_input_stream_set_byte_order( GDataInputStream* stream, GDataStreamByteOrder order );
		public extern static void g_data_input_stream_set_newline_type( GDataInputStream* stream, GDataStreamNewlineType type );

		public extern static GDataStreamByteOrder g_data_output_stream_get_byte_order( GDataOutputStream* stream );
		[BackendHintReadNone]
		public extern static GType g_data_output_stream_get_type();
		public extern static GDataOutputStream* g_data_output_stream_new( GOutputStream* baseStream );
		public extern static Boolean32 g_data_output_stream_put_byte( GDataOutputStream* stream, byte data, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_data_output_stream_put_int16( GDataOutputStream* stream, short data, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_data_output_stream_put_int32( GDataOutputStream* stream, int data, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_data_output_stream_put_int64( GDataOutputStream* stream, intptr data, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_data_output_stream_put_string( GDataOutputStream* stream, sbyte* str, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_data_output_stream_put_uint16( GDataOutputStream* stream, ushort data, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_data_output_stream_put_uint32( GDataOutputStream* stream, uint data, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_data_output_stream_put_uint64( GDataOutputStream* stream, uintptr data, GCancellable* cancellable, GError** error );
		public extern static void g_data_output_stream_set_byte_order( GDataOutputStream* stream, GDataStreamByteOrder order );

		public extern static GDBusActionGroup* g_dbus_action_group_get( GDBusConnection* connection, CUtf8String busName, sbyte* objectPath );
		[BackendHintReadNone]
		public extern static GType g_dbus_action_group_get_type();

		public extern static sbyte* g_dbus_address_escape_value( sbyte* @string );
		public extern static sbyte* g_dbus_address_get_for_bus_sync( GBusType busType, GCancellable* cancellable, GError** error );
		public extern static void g_dbus_address_get_stream( sbyte* address, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GIOStream* g_dbus_address_get_stream_finish( GAsyncResult* res, sbyte** outGuid, GError** error );
		public extern static GIOStream* g_dbus_address_get_stream_sync( sbyte* address, sbyte** outGuid, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_dbus_is_address( sbyte* @string );
		public extern static Boolean32 g_dbus_is_supported_address( sbyte* @string, GError** error );

		public extern static Boolean32 g_dbus_auth_observer_allow_mechanism( GDBusAuthObserver* observer, sbyte* mechanism );
		public extern static Boolean32 g_dbus_auth_observer_authorize_authenticated_peer( GDBusAuthObserver* observer, GIOStream* stream, GCredentials* credentials );
		[BackendHintReadNone]
		public extern static GType g_dbus_auth_observer_get_type();
		public extern static GDBusAuthObserver* g_dbus_auth_observer_new();

		public extern static void g_bus_get( GBusType busType, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusConnection* g_bus_get_finish( GAsyncResult* res, GError** error );
		public extern static GDBusConnection* g_bus_get_sync( GBusType busType, GCancellable* cancellable, GError** error );
		public extern static uint g_dbus_connection_add_filter( GDBusConnection* connection, Functors.Func<GDBusConnection*, GDBusMessage*, Boolean32, void*, GDBusMessage*> filterFunction, void* userData, Functors.Action<void*> userDataFreeFunc );
		public extern static void g_dbus_connection_call( GDBusConnection* connection, CUtf8String busName, sbyte* objectPath, CUtf8String interfaceName, CUtf8String methodName, GVariant* parameters, GVariantType* replyType, GDBusCallFlags flags, int timeoutMsec, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GVariant* g_dbus_connection_call_finish( GDBusConnection* connection, GAsyncResult* res, GError** error );
		public extern static GVariant* g_dbus_connection_call_sync( GDBusConnection* connection, CUtf8String busName, sbyte* objectPath, CUtf8String interfaceName, CUtf8String methodName, GVariant* parameters, GVariantType* replyType, GDBusCallFlags flags, int timeoutMsec, GCancellable* cancellable, GError** error );
		public extern static void g_dbus_connection_call_with_unix_fd_list( GDBusConnection* connection, CUtf8String busName, sbyte* objectPath, CUtf8String interfaceName, CUtf8String methodName, GVariant* parameters, GVariantType* replyType, GDBusCallFlags flags, int timeoutMsec, GUnixFDList* fdList, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GVariant* g_dbus_connection_call_with_unix_fd_list_finish( GDBusConnection* connection, GUnixFDList** outFdList, GAsyncResult* res, GError** error );
		public extern static GVariant* g_dbus_connection_call_with_unix_fd_list_sync( GDBusConnection* connection, CUtf8String busName, sbyte* objectPath, CUtf8String interfaceName, CUtf8String methodName, GVariant* parameters, GVariantType* replyType, GDBusCallFlags flags, int timeoutMsec, GUnixFDList* fdList, GUnixFDList** outFdList, GCancellable* cancellable, GError** error );
		public extern static void g_dbus_connection_close( GDBusConnection* connection, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_dbus_connection_close_finish( GDBusConnection* connection, GAsyncResult* res, GError** error );
		public extern static Boolean32 g_dbus_connection_close_sync( GDBusConnection* connection, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_dbus_connection_emit_signal( GDBusConnection* connection, CUtf8String destinationBusName, sbyte* objectPath, CUtf8String interfaceName, CUtf8String signalName, GVariant* parameters, GError** error );
		public extern static void g_dbus_connection_flush( GDBusConnection* connection, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_dbus_connection_flush_finish( GDBusConnection* connection, GAsyncResult* res, GError** error );
		public extern static Boolean32 g_dbus_connection_flush_sync( GDBusConnection* connection, GCancellable* cancellable, GError** error );
		public extern static GDBusCapabilityFlags g_dbus_connection_get_capabilities( GDBusConnection* connection );
		public extern static Boolean32 g_dbus_connection_get_exit_on_close( GDBusConnection* connection );
		public extern static GDBusConnectionFlags g_dbus_connection_get_flags( GDBusConnection* connection );
		public extern static sbyte* g_dbus_connection_get_guid( GDBusConnection* connection );
		public extern static uint g_dbus_connection_get_last_serial( GDBusConnection* connection );
		public extern static GCredentials* g_dbus_connection_get_peer_credentials( GDBusConnection* connection );
		public extern static GIOStream* g_dbus_connection_get_stream( GDBusConnection* connection );
		[BackendHintReadNone]
		public extern static GType g_dbus_connection_get_type();
		public extern static sbyte* g_dbus_connection_get_unique_name( GDBusConnection* connection );
		public extern static Boolean32 g_dbus_connection_is_closed( GDBusConnection* connection );
		public extern static void g_dbus_connection_new( GIOStream* stream, sbyte* guid, GDBusConnectionFlags flags, GDBusAuthObserver* observer, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusConnection* g_dbus_connection_new_finish( GAsyncResult* res, GError** error );
		public extern static void g_dbus_connection_new_for_address( sbyte* address, GDBusConnectionFlags flags, GDBusAuthObserver* observer, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusConnection* g_dbus_connection_new_for_address_finish( GAsyncResult* res, GError** error );
		public extern static GDBusConnection* g_dbus_connection_new_for_address_sync( sbyte* address, GDBusConnectionFlags flags, GDBusAuthObserver* observer, GCancellable* cancellable, GError** error );
		public extern static GDBusConnection* g_dbus_connection_new_sync( GIOStream* stream, sbyte* guid, GDBusConnectionFlags flags, GDBusAuthObserver* observer, GCancellable* cancellable, GError** error );
		public extern static uint g_dbus_connection_register_object( GDBusConnection* connection, sbyte* objectPath, GDBusInterfaceInfo* interfaceInfo, GDBusInterfaceVTable* vtable, void* userData, Functors.Action<void*> userDataFreeFunc, GError** error );
		public extern static uint g_dbus_connection_register_object_with_closures( GDBusConnection* connection, sbyte* objectPath, GDBusInterfaceInfo* interfaceInfo, GClosure* methodCallClosure, GClosure* getPropertyClosure, GClosure* setPropertyClosure, GError** error );
		public extern static uint g_dbus_connection_register_subtree( GDBusConnection* connection, sbyte* objectPath, GDBusSubtreeVTable* vtable, GDBusSubtreeFlags flags, void* userData, Functors.Action<void*> userDataFreeFunc, GError** error );
		public extern static void g_dbus_connection_remove_filter( GDBusConnection* connection, uint filterId );
		public extern static Boolean32 g_dbus_connection_send_message( GDBusConnection* connection, GDBusMessage* message, GDBusSendMessageFlags flags, uint* outSerial, GError** error );
		public extern static void g_dbus_connection_send_message_with_reply( GDBusConnection* connection, GDBusMessage* message, GDBusSendMessageFlags flags, int timeoutMsec, uint* outSerial, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusMessage* g_dbus_connection_send_message_with_reply_finish( GDBusConnection* connection, GAsyncResult* res, GError** error );
		public extern static GDBusMessage* g_dbus_connection_send_message_with_reply_sync( GDBusConnection* connection, GDBusMessage* message, GDBusSendMessageFlags flags, int timeoutMsec, uint* outSerial, GCancellable* cancellable, GError** error );
		public extern static void g_dbus_connection_set_exit_on_close( GDBusConnection* connection, Boolean32 exitOnClose );
		public extern static uint g_dbus_connection_signal_subscribe( GDBusConnection* connection, sbyte* sender, CUtf8String interfaceName, sbyte* member, sbyte* objectPath, sbyte* arg0, GDBusSignalFlags flags, Functors.Action<GDBusConnection*, sbyte*, sbyte*, sbyte*, sbyte*, GVariant*, void*> callback, void* userData, Functors.Action<void*> userDataFreeFunc );
		public extern static void g_dbus_connection_signal_unsubscribe( GDBusConnection* connection, uint subscriptionId );
		public extern static void g_dbus_connection_start_message_processing( GDBusConnection* connection );
		public extern static Boolean32 g_dbus_connection_unregister_object( GDBusConnection* connection, uint registrationId );
		public extern static Boolean32 g_dbus_connection_unregister_subtree( GDBusConnection* connection, uint registrationId );

		public extern static sbyte* g_dbus_error_encode_gerror( GError* error );
		public extern static sbyte* g_dbus_error_get_remote_error( GError* error );
		public extern static Boolean32 g_dbus_error_is_remote_error( GError* error );
		public extern static GError* g_dbus_error_new_for_dbus_error( CUtf8String dbusErrorName, sbyte* dbusErrorMessage );
		public extern static uint g_dbus_error_quark();
		public extern static Boolean32 g_dbus_error_register_error( uint errorDomain, int errorCode, CUtf8String dbusErrorName );
		public extern static void g_dbus_error_register_error_domain( CUtf8String errorDomainQuarkName, uintptr* quarkVolatile, GDBusErrorEntry* entries, uint numEntries );
		public extern static Boolean32 g_dbus_error_strip_remote_error( GError* error );
		public extern static Boolean32 g_dbus_error_unregister_error( uint errorDomain, int errorCode, CUtf8String dbusErrorName );

		public extern static GDBusObject* g_dbus_interface_dup_object( GDBusInterface* interface_ );
		public extern static GDBusInterfaceInfo* g_dbus_interface_get_info( GDBusInterface* interface_ );
		public extern static GDBusObject* g_dbus_interface_get_object( GDBusInterface* interface_ );
		[BackendHintReadNone]
		public extern static GType g_dbus_interface_get_type();
		public extern static void g_dbus_interface_set_object( GDBusInterface* interface_, GDBusObject* object );

		public extern static Boolean32 g_dbus_interface_skeleton_export( GDBusInterfaceSkeleton* interface_, GDBusConnection* connection, sbyte* objectPath, GError** error );
		public extern static void g_dbus_interface_skeleton_flush( GDBusInterfaceSkeleton* interface_ );
		public extern static GDBusConnection* g_dbus_interface_skeleton_get_connection( GDBusInterfaceSkeleton* interface_ );
		public extern static GList* g_dbus_interface_skeleton_get_connections( GDBusInterfaceSkeleton* interface_ );
		public extern static GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags( GDBusInterfaceSkeleton* interface_ );
		public extern static GDBusInterfaceInfo* g_dbus_interface_skeleton_get_info( GDBusInterfaceSkeleton* interface_ );
		public extern static sbyte* g_dbus_interface_skeleton_get_object_path( GDBusInterfaceSkeleton* interface_ );
		public extern static GVariant* g_dbus_interface_skeleton_get_properties( GDBusInterfaceSkeleton* interface_ );
		[BackendHintReadNone]
		public extern static GType g_dbus_interface_skeleton_get_type();
		public extern static GDBusInterfaceVTable* g_dbus_interface_skeleton_get_vtable( GDBusInterfaceSkeleton* interface_ );
		public extern static Boolean32 g_dbus_interface_skeleton_has_connection( GDBusInterfaceSkeleton* interface_, GDBusConnection* connection );
		public extern static void g_dbus_interface_skeleton_set_flags( GDBusInterfaceSkeleton* interface_, GDBusInterfaceSkeletonFlags flags );
		public extern static void g_dbus_interface_skeleton_unexport( GDBusInterfaceSkeleton* interface_ );
		public extern static void g_dbus_interface_skeleton_unexport_from_connection( GDBusInterfaceSkeleton* interface_, GDBusConnection* connection );

		[BackendHintReadNone]
		public extern static GType g_dbus_annotation_info_get_type();
		public extern static sbyte* g_dbus_annotation_info_lookup( GDBusAnnotationInfo** annotations, CUtf8String name );
		public extern static GDBusAnnotationInfo* g_dbus_annotation_info_ref( GDBusAnnotationInfo* info );
		public extern static void g_dbus_annotation_info_unref( GDBusAnnotationInfo* info );
		[BackendHintReadNone]
		public extern static GType g_dbus_arg_info_get_type();
		public extern static GDBusArgInfo* g_dbus_arg_info_ref( GDBusArgInfo* info );
		public extern static void g_dbus_arg_info_unref( GDBusArgInfo* info );
		public extern static void g_dbus_interface_info_cache_build( GDBusInterfaceInfo* info );
		public extern static void g_dbus_interface_info_cache_release( GDBusInterfaceInfo* info );
		public extern static void g_dbus_interface_info_generate_xml( GDBusInterfaceInfo* info, uint indent, GString* stringBuilder );
		[BackendHintReadNone]
		public extern static GType g_dbus_interface_info_get_type();
		public extern static GDBusMethodInfo* g_dbus_interface_info_lookup_method( GDBusInterfaceInfo* info, CUtf8String name );
		public extern static GDBusPropertyInfo* g_dbus_interface_info_lookup_property( GDBusInterfaceInfo* info, CUtf8String name );
		public extern static GDBusSignalInfo* g_dbus_interface_info_lookup_signal( GDBusInterfaceInfo* info, CUtf8String name );
		public extern static GDBusInterfaceInfo* g_dbus_interface_info_ref( GDBusInterfaceInfo* info );
		public extern static void g_dbus_interface_info_unref( GDBusInterfaceInfo* info );
		[BackendHintReadNone]
		public extern static GType g_dbus_method_info_get_type();
		public extern static GDBusMethodInfo* g_dbus_method_info_ref( GDBusMethodInfo* info );
		public extern static void g_dbus_method_info_unref( GDBusMethodInfo* info );
		public extern static void g_dbus_node_info_generate_xml( GDBusNodeInfo* info, uint indent, GString* stringBuilder );
		[BackendHintReadNone]
		public extern static GType g_dbus_node_info_get_type();
		public extern static GDBusInterfaceInfo* g_dbus_node_info_lookup_interface( GDBusNodeInfo* info, CUtf8String name );
		public extern static GDBusNodeInfo* g_dbus_node_info_new_for_xml( sbyte* xmlData, GError** error );
		public extern static GDBusNodeInfo* g_dbus_node_info_ref( GDBusNodeInfo* info );
		public extern static void g_dbus_node_info_unref( GDBusNodeInfo* info );
		[BackendHintReadNone]
		public extern static GType g_dbus_property_info_get_type();
		public extern static GDBusPropertyInfo* g_dbus_property_info_ref( GDBusPropertyInfo* info );
		public extern static void g_dbus_property_info_unref( GDBusPropertyInfo* info );
		[BackendHintReadNone]
		public extern static GType g_dbus_signal_info_get_type();
		public extern static GDBusSignalInfo* g_dbus_signal_info_ref( GDBusSignalInfo* info );
		public extern static void g_dbus_signal_info_unref( GDBusSignalInfo* info );

		public extern static GDBusMenuModel* g_dbus_menu_model_get( GDBusConnection* connection, CUtf8String busName, sbyte* objectPath );
		[BackendHintReadNone]
		public extern static GType g_dbus_menu_model_get_type();

		public extern static intptr g_dbus_message_bytes_needed( byte* blob, uintptr blobLen, GError** error );
		public extern static GDBusMessage* g_dbus_message_copy( GDBusMessage* message, GError** error );
		public extern static sbyte* g_dbus_message_get_arg0( GDBusMessage* message );
		public extern static GVariant* g_dbus_message_get_body( GDBusMessage* message );
		public extern static GDBusMessageByteOrder g_dbus_message_get_byte_order( GDBusMessage* message );
		public extern static sbyte* g_dbus_message_get_destination( GDBusMessage* message );
		public extern static sbyte* g_dbus_message_get_error_name( GDBusMessage* message );
		public extern static GDBusMessageFlags g_dbus_message_get_flags( GDBusMessage* message );
		public extern static GVariant* g_dbus_message_get_header( GDBusMessage* message, GDBusMessageHeaderField headerField );
		public extern static byte* g_dbus_message_get_header_fields( GDBusMessage* message );
		public extern static sbyte* g_dbus_message_get_interface( GDBusMessage* message );
		public extern static Boolean32 g_dbus_message_get_locked( GDBusMessage* message );
		public extern static sbyte* g_dbus_message_get_member( GDBusMessage* message );
		public extern static GDBusMessageType g_dbus_message_get_message_type( GDBusMessage* message );
		public extern static uint g_dbus_message_get_num_unix_fds( GDBusMessage* message );
		public extern static sbyte* g_dbus_message_get_path( GDBusMessage* message );
		public extern static uint g_dbus_message_get_reply_serial( GDBusMessage* message );
		public extern static sbyte* g_dbus_message_get_sender( GDBusMessage* message );
		public extern static uint g_dbus_message_get_serial( GDBusMessage* message );
		public extern static sbyte* g_dbus_message_get_signature( GDBusMessage* message );
		[BackendHintReadNone]
		public extern static GType g_dbus_message_get_type();
		public extern static GUnixFDList* g_dbus_message_get_unix_fd_list( GDBusMessage* message );
		public extern static void g_dbus_message_lock( GDBusMessage* message );
		public extern static GDBusMessage* g_dbus_message_new();
		public extern static GDBusMessage* g_dbus_message_new_from_blob( byte* blob, uintptr blobLen, GDBusCapabilityFlags capabilities, GError** error );
		public extern static GDBusMessage* g_dbus_message_new_method_call( CUtf8String name, sbyte* path, sbyte* interface_, sbyte* method );
		public extern static GDBusMessage* g_dbus_message_new_method_error_literal( GDBusMessage* methodCallMessage, CUtf8String errorName, sbyte* errorMessage );
		public extern static GDBusMessage* g_dbus_message_new_method_reply( GDBusMessage* methodCallMessage );
		public extern static GDBusMessage* g_dbus_message_new_signal( sbyte* path, sbyte* interface_, sbyte* signal );
		public extern static sbyte* g_dbus_message_print( GDBusMessage* message, uint indent );
		public extern static void g_dbus_message_set_body( GDBusMessage* message, GVariant* body );
		public extern static void g_dbus_message_set_byte_order( GDBusMessage* message, GDBusMessageByteOrder byteOrder );
		public extern static void g_dbus_message_set_destination( GDBusMessage* message, sbyte* value );
		public extern static void g_dbus_message_set_error_name( GDBusMessage* message, sbyte* value );
		public extern static void g_dbus_message_set_flags( GDBusMessage* message, GDBusMessageFlags flags );
		public extern static void g_dbus_message_set_header( GDBusMessage* message, GDBusMessageHeaderField headerField, GVariant* value );
		public extern static void g_dbus_message_set_interface( GDBusMessage* message, sbyte* value );
		public extern static void g_dbus_message_set_member( GDBusMessage* message, sbyte* value );
		public extern static void g_dbus_message_set_message_type( GDBusMessage* message, GDBusMessageType type );
		public extern static void g_dbus_message_set_num_unix_fds( GDBusMessage* message, uint value );
		public extern static void g_dbus_message_set_path( GDBusMessage* message, sbyte* value );
		public extern static void g_dbus_message_set_reply_serial( GDBusMessage* message, uint value );
		public extern static void g_dbus_message_set_sender( GDBusMessage* message, sbyte* value );
		public extern static void g_dbus_message_set_serial( GDBusMessage* message, uint serial );
		public extern static void g_dbus_message_set_signature( GDBusMessage* message, sbyte* value );
		public extern static void g_dbus_message_set_unix_fd_list( GDBusMessage* message, GUnixFDList* fdList );
		public extern static byte* g_dbus_message_to_blob( GDBusMessage* message, uintptr* outSize, GDBusCapabilityFlags capabilities, GError** error );
		public extern static Boolean32 g_dbus_message_to_gerror( GDBusMessage* message, GError** error );

		public extern static GDBusConnection* g_dbus_method_invocation_get_connection( GDBusMethodInvocation* invocation );
		public extern static sbyte* g_dbus_method_invocation_get_interface_name( GDBusMethodInvocation* invocation );
		public extern static GDBusMessage* g_dbus_method_invocation_get_message( GDBusMethodInvocation* invocation );
		public extern static GDBusMethodInfo* g_dbus_method_invocation_get_method_info( GDBusMethodInvocation* invocation );
		public extern static sbyte* g_dbus_method_invocation_get_method_name( GDBusMethodInvocation* invocation );
		public extern static sbyte* g_dbus_method_invocation_get_object_path( GDBusMethodInvocation* invocation );
		public extern static GVariant* g_dbus_method_invocation_get_parameters( GDBusMethodInvocation* invocation );
		public extern static GDBusPropertyInfo* g_dbus_method_invocation_get_property_info( GDBusMethodInvocation* invocation );
		public extern static sbyte* g_dbus_method_invocation_get_sender( GDBusMethodInvocation* invocation );
		[BackendHintReadNone]
		public extern static GType g_dbus_method_invocation_get_type();
		public extern static void* g_dbus_method_invocation_get_user_data( GDBusMethodInvocation* invocation );
		public extern static void g_dbus_method_invocation_return_dbus_error( GDBusMethodInvocation* invocation, CUtf8String errorName, sbyte* errorMessage );
		public extern static void g_dbus_method_invocation_return_error_literal( GDBusMethodInvocation* invocation, uint domain, int code, sbyte* message );
		public extern static void g_dbus_method_invocation_return_gerror( GDBusMethodInvocation* invocation, GError* error );
		public extern static void g_dbus_method_invocation_return_value( GDBusMethodInvocation* invocation, GVariant* parameters );
		public extern static void g_dbus_method_invocation_return_value_with_unix_fd_list( GDBusMethodInvocation* invocation, GVariant* parameters, GUnixFDList* fdList );
		public extern static void g_dbus_method_invocation_take_error( GDBusMethodInvocation* invocation, GError* error );

		public extern static uint g_bus_own_name( GBusType busType, CUtf8String name, GBusNameOwnerFlags flags, Functors.Action<GDBusConnection*, sbyte*, void*> busAcquiredHandler, Functors.Action<GDBusConnection*, sbyte*, void*> nameAcquiredHandler, Functors.Action<GDBusConnection*, sbyte*, void*> nameLostHandler, void* userData, Functors.Action<void*> userDataFreeFunc );
		public extern static uint g_bus_own_name_on_connection( GDBusConnection* connection, CUtf8String name, GBusNameOwnerFlags flags, Functors.Action<GDBusConnection*, sbyte*, void*> nameAcquiredHandler, Functors.Action<GDBusConnection*, sbyte*, void*> nameLostHandler, void* userData, Functors.Action<void*> userDataFreeFunc );
		public extern static uint g_bus_own_name_on_connection_with_closures( GDBusConnection* connection, CUtf8String name, GBusNameOwnerFlags flags, GClosure* nameAcquiredClosure, GClosure* nameLostClosure );
		public extern static uint g_bus_own_name_with_closures( GBusType busType, CUtf8String name, GBusNameOwnerFlags flags, GClosure* busAcquiredClosure, GClosure* nameAcquiredClosure, GClosure* nameLostClosure );
		public extern static void g_bus_unown_name( uint ownerId );

		public extern static void g_bus_unwatch_name( uint watcherId );
		public extern static uint g_bus_watch_name( GBusType busType, CUtf8String name, GBusNameWatcherFlags flags, Functors.Action<GDBusConnection*, sbyte*, sbyte*, void*> nameAppearedHandler, Functors.Action<GDBusConnection*, sbyte*, void*> nameVanishedHandler, void* userData, Functors.Action<void*> userDataFreeFunc );
		public extern static uint g_bus_watch_name_on_connection( GDBusConnection* connection, CUtf8String name, GBusNameWatcherFlags flags, Functors.Action<GDBusConnection*, sbyte*, sbyte*, void*> nameAppearedHandler, Functors.Action<GDBusConnection*, sbyte*, void*> nameVanishedHandler, void* userData, Functors.Action<void*> userDataFreeFunc );
		public extern static uint g_bus_watch_name_on_connection_with_closures( GDBusConnection* connection, CUtf8String name, GBusNameWatcherFlags flags, GClosure* nameAppearedClosure, GClosure* nameVanishedClosure );
		public extern static uint g_bus_watch_name_with_closures( GBusType busType, CUtf8String name, GBusNameWatcherFlags flags, GClosure* nameAppearedClosure, GClosure* nameVanishedClosure );

		public extern static GDBusInterface* g_dbus_object_get_interface( GDBusObject* object, CUtf8String interfaceName );
		public extern static GList* g_dbus_object_get_interfaces( GDBusObject* object );
		public extern static sbyte* g_dbus_object_get_object_path( GDBusObject* object );
		[BackendHintReadNone]
		public extern static GType g_dbus_object_get_type();

		public extern static GDBusInterface* g_dbus_object_manager_get_interface( GDBusObjectManager* manager, sbyte* objectPath, CUtf8String interfaceName );
		public extern static GDBusObject* g_dbus_object_manager_get_object( GDBusObjectManager* manager, sbyte* objectPath );
		public extern static sbyte* g_dbus_object_manager_get_object_path( GDBusObjectManager* manager );
		public extern static GList* g_dbus_object_manager_get_objects( GDBusObjectManager* manager );
		[BackendHintReadNone]
		public extern static GType g_dbus_object_manager_get_type();

		public extern static GDBusConnection* g_dbus_object_manager_client_get_connection( GDBusObjectManagerClient* manager );
		public extern static GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags( GDBusObjectManagerClient* manager );
		public extern static sbyte* g_dbus_object_manager_client_get_name( GDBusObjectManagerClient* manager );
		public extern static sbyte* g_dbus_object_manager_client_get_name_owner( GDBusObjectManagerClient* manager );
		[BackendHintReadNone]
		public extern static GType g_dbus_object_manager_client_get_type();
		public extern static void g_dbus_object_manager_client_new( GDBusConnection* connection, GDBusObjectManagerClientFlags flags, CUtf8String name, sbyte* objectPath, Functors.Func<GDBusObjectManagerClient*, sbyte*, sbyte*, void*, uintptr> getProxyTypeFunc, void* getProxyTypeUserData, Functors.Action<void*> getProxyTypeDestroyNotify, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusObjectManager* g_dbus_object_manager_client_new_finish( GAsyncResult* res, GError** error );
		public extern static void g_dbus_object_manager_client_new_for_bus( GBusType busType, GDBusObjectManagerClientFlags flags, CUtf8String name, sbyte* objectPath, Functors.Func<GDBusObjectManagerClient*, sbyte*, sbyte*, void*, uintptr> getProxyTypeFunc, void* getProxyTypeUserData, Functors.Action<void*> getProxyTypeDestroyNotify, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_finish( GAsyncResult* res, GError** error );
		public extern static GDBusObjectManager* g_dbus_object_manager_client_new_for_bus_sync( GBusType busType, GDBusObjectManagerClientFlags flags, CUtf8String name, sbyte* objectPath, Functors.Func<GDBusObjectManagerClient*, sbyte*, sbyte*, void*, uintptr> getProxyTypeFunc, void* getProxyTypeUserData, Functors.Action<void*> getProxyTypeDestroyNotify, GCancellable* cancellable, GError** error );
		public extern static GDBusObjectManager* g_dbus_object_manager_client_new_sync( GDBusConnection* connection, GDBusObjectManagerClientFlags flags, CUtf8String name, sbyte* objectPath, Functors.Func<GDBusObjectManagerClient*, sbyte*, sbyte*, void*, uintptr> getProxyTypeFunc, void* getProxyTypeUserData, Functors.Action<void*> getProxyTypeDestroyNotify, GCancellable* cancellable, GError** error );

		public extern static void g_dbus_object_manager_server_export( GDBusObjectManagerServer* manager, GDBusObjectSkeleton* object );
		public extern static void g_dbus_object_manager_server_export_uniquely( GDBusObjectManagerServer* manager, GDBusObjectSkeleton* object );
		public extern static GDBusConnection* g_dbus_object_manager_server_get_connection( GDBusObjectManagerServer* manager );
		[BackendHintReadNone]
		public extern static GType g_dbus_object_manager_server_get_type();
		public extern static Boolean32 g_dbus_object_manager_server_is_exported( GDBusObjectManagerServer* manager, GDBusObjectSkeleton* object );
		public extern static GDBusObjectManagerServer* g_dbus_object_manager_server_new( sbyte* objectPath );
		public extern static void g_dbus_object_manager_server_set_connection( GDBusObjectManagerServer* manager, GDBusConnection* connection );
		public extern static Boolean32 g_dbus_object_manager_server_unexport( GDBusObjectManagerServer* manager, sbyte* objectPath );

		public extern static GDBusConnection* g_dbus_object_proxy_get_connection( GDBusObjectProxy* proxy );
		[BackendHintReadNone]
		public extern static GType g_dbus_object_proxy_get_type();
		public extern static GDBusObjectProxy* g_dbus_object_proxy_new( GDBusConnection* connection, sbyte* objectPath );

		public extern static void g_dbus_object_skeleton_add_interface( GDBusObjectSkeleton* object, GDBusInterfaceSkeleton* interface_ );
		public extern static void g_dbus_object_skeleton_flush( GDBusObjectSkeleton* object );
		[BackendHintReadNone]
		public extern static GType g_dbus_object_skeleton_get_type();
		public extern static GDBusObjectSkeleton* g_dbus_object_skeleton_new( sbyte* objectPath );
		public extern static void g_dbus_object_skeleton_remove_interface( GDBusObjectSkeleton* object, GDBusInterfaceSkeleton* interface_ );
		public extern static void g_dbus_object_skeleton_remove_interface_by_name( GDBusObjectSkeleton* object, CUtf8String interfaceName );
		public extern static void g_dbus_object_skeleton_set_object_path( GDBusObjectSkeleton* object, sbyte* objectPath );

		public extern static void g_dbus_proxy_call( GDBusProxy* proxy, CUtf8String methodName, GVariant* parameters, GDBusCallFlags flags, int timeoutMsec, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GVariant* g_dbus_proxy_call_finish( GDBusProxy* proxy, GAsyncResult* res, GError** error );
		public extern static GVariant* g_dbus_proxy_call_sync( GDBusProxy* proxy, CUtf8String methodName, GVariant* parameters, GDBusCallFlags flags, int timeoutMsec, GCancellable* cancellable, GError** error );
		public extern static void g_dbus_proxy_call_with_unix_fd_list( GDBusProxy* proxy, CUtf8String methodName, GVariant* parameters, GDBusCallFlags flags, int timeoutMsec, GUnixFDList* fdList, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GVariant* g_dbus_proxy_call_with_unix_fd_list_finish( GDBusProxy* proxy, GUnixFDList** outFdList, GAsyncResult* res, GError** error );
		public extern static GVariant* g_dbus_proxy_call_with_unix_fd_list_sync( GDBusProxy* proxy, CUtf8String methodName, GVariant* parameters, GDBusCallFlags flags, int timeoutMsec, GUnixFDList* fdList, GUnixFDList** outFdList, GCancellable* cancellable, GError** error );
		public extern static GVariant* g_dbus_proxy_get_cached_property( GDBusProxy* proxy, CUtf8String propertyName );
		public extern static sbyte** g_dbus_proxy_get_cached_property_names( GDBusProxy* proxy );
		public extern static GDBusConnection* g_dbus_proxy_get_connection( GDBusProxy* proxy );
		public extern static int g_dbus_proxy_get_default_timeout( GDBusProxy* proxy );
		public extern static GDBusProxyFlags g_dbus_proxy_get_flags( GDBusProxy* proxy );
		public extern static GDBusInterfaceInfo* g_dbus_proxy_get_interface_info( GDBusProxy* proxy );
		public extern static sbyte* g_dbus_proxy_get_interface_name( GDBusProxy* proxy );
		public extern static sbyte* g_dbus_proxy_get_name( GDBusProxy* proxy );
		public extern static sbyte* g_dbus_proxy_get_name_owner( GDBusProxy* proxy );
		public extern static sbyte* g_dbus_proxy_get_object_path( GDBusProxy* proxy );
		[BackendHintReadNone]
		public extern static GType g_dbus_proxy_get_type();
		public extern static void g_dbus_proxy_new( GDBusConnection* connection, GDBusProxyFlags flags, GDBusInterfaceInfo* info, CUtf8String name, sbyte* objectPath, CUtf8String interfaceName, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusProxy* g_dbus_proxy_new_finish( GAsyncResult* res, GError** error );
		public extern static void g_dbus_proxy_new_for_bus( GBusType busType, GDBusProxyFlags flags, GDBusInterfaceInfo* info, CUtf8String name, sbyte* objectPath, CUtf8String interfaceName, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GDBusProxy* g_dbus_proxy_new_for_bus_finish( GAsyncResult* res, GError** error );
		public extern static GDBusProxy* g_dbus_proxy_new_for_bus_sync( GBusType busType, GDBusProxyFlags flags, GDBusInterfaceInfo* info, CUtf8String name, sbyte* objectPath, CUtf8String interfaceName, GCancellable* cancellable, GError** error );
		public extern static GDBusProxy* g_dbus_proxy_new_sync( GDBusConnection* connection, GDBusProxyFlags flags, GDBusInterfaceInfo* info, CUtf8String name, sbyte* objectPath, CUtf8String interfaceName, GCancellable* cancellable, GError** error );
		public extern static void g_dbus_proxy_set_cached_property( GDBusProxy* proxy, CUtf8String propertyName, GVariant* value );
		public extern static void g_dbus_proxy_set_default_timeout( GDBusProxy* proxy, int timeoutMsec );
		public extern static void g_dbus_proxy_set_interface_info( GDBusProxy* proxy, GDBusInterfaceInfo* info );

		public extern static sbyte* g_dbus_server_get_client_address( GDBusServer* server );
		public extern static GDBusServerFlags g_dbus_server_get_flags( GDBusServer* server );
		public extern static sbyte* g_dbus_server_get_guid( GDBusServer* server );
		[BackendHintReadNone]
		public extern static GType g_dbus_server_get_type();
		public extern static Boolean32 g_dbus_server_is_active( GDBusServer* server );
		public extern static GDBusServer* g_dbus_server_new_sync( sbyte* address, GDBusServerFlags flags, sbyte* guid, GDBusAuthObserver* observer, GCancellable* cancellable, GError** error );
		public extern static void g_dbus_server_start( GDBusServer* server );
		public extern static void g_dbus_server_stop( GDBusServer* server );

		public extern static sbyte* g_dbus_escape_object_path( sbyte* s );
		public extern static sbyte* g_dbus_escape_object_path_bytestring( byte* bytes );
		public extern static sbyte* g_dbus_generate_guid();
		public extern static GVariant* g_dbus_gvalue_to_gvariant( GValue* gvalue, GVariantType* type );
		public extern static void g_dbus_gvariant_to_gvalue( GVariant* value, GValue* outGvalue );
		public extern static Boolean32 g_dbus_is_error_name( sbyte* @string );
		public extern static Boolean32 g_dbus_is_guid( sbyte* @string );
		public extern static Boolean32 g_dbus_is_interface_name( sbyte* @string );
		public extern static Boolean32 g_dbus_is_member_name( sbyte* @string );
		public extern static Boolean32 g_dbus_is_name( sbyte* @string );
		public extern static Boolean32 g_dbus_is_unique_name( sbyte* @string );
		public extern static byte* g_dbus_unescape_object_path( sbyte* s );

		public extern static Boolean32 g_debug_controller_get_debug_enabled( GDebugController* self );
		public extern static GType g_debug_controller_get_type();
		public extern static void g_debug_controller_set_debug_enabled( GDebugController* self, Boolean32 debugEnabled );

		public extern static GType g_debug_controller_dbus_get_type();
		public extern static GDebugControllerDBus* g_debug_controller_dbus_new( GDBusConnection* connection, GCancellable* cancellable, GError** error );
		public extern static void g_debug_controller_dbus_stop( GDebugControllerDBus* self );

		public extern static Boolean32 g_drive_can_eject( GDrive* drive );
		public extern static Boolean32 g_drive_can_poll_for_media( GDrive* drive );
		public extern static Boolean32 g_drive_can_start( GDrive* drive );
		public extern static Boolean32 g_drive_can_start_degraded( GDrive* drive );
		public extern static Boolean32 g_drive_can_stop( GDrive* drive );
		public extern static void g_drive_eject( GDrive* drive, GMountUnmountFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_drive_eject_finish( GDrive* drive, GAsyncResult* result, GError** error );
		public extern static void g_drive_eject_with_operation( GDrive* drive, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_drive_eject_with_operation_finish( GDrive* drive, GAsyncResult* result, GError** error );
		public extern static sbyte** g_drive_enumerate_identifiers( GDrive* drive );
		public extern static GIcon* g_drive_get_icon( GDrive* drive );
		public extern static sbyte* g_drive_get_identifier( GDrive* drive, sbyte* kind );
		public extern static sbyte* g_drive_get_name( GDrive* drive );
		public extern static sbyte* g_drive_get_sort_key( GDrive* drive );
		public extern static GDriveStartStopType g_drive_get_start_stop_type( GDrive* drive );
		public extern static GIcon* g_drive_get_symbolic_icon( GDrive* drive );
		[BackendHintReadNone]
		public extern static GType g_drive_get_type();
		public extern static GList* g_drive_get_volumes( GDrive* drive );
		public extern static Boolean32 g_drive_has_media( GDrive* drive );
		public extern static Boolean32 g_drive_has_volumes( GDrive* drive );
		public extern static Boolean32 g_drive_is_media_check_automatic( GDrive* drive );
		public extern static Boolean32 g_drive_is_media_removable( GDrive* drive );
		public extern static Boolean32 g_drive_is_removable( GDrive* drive );
		public extern static void g_drive_poll_for_media( GDrive* drive, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_drive_poll_for_media_finish( GDrive* drive, GAsyncResult* result, GError** error );
		public extern static void g_drive_start( GDrive* drive, GDriveStartFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_drive_start_finish( GDrive* drive, GAsyncResult* result, GError** error );
		public extern static void g_drive_stop( GDrive* drive, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_drive_stop_finish( GDrive* drive, GAsyncResult* result, GError** error );

		public extern static Boolean32 g_dtls_connection_close( GDtlsConnection* conn, GCancellable* cancellable, GError** error );
		public extern static void g_dtls_connection_close_async( GDtlsConnection* conn, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_dtls_connection_close_finish( GDtlsConnection* conn, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_dtls_connection_emit_accept_certificate( GDtlsConnection* conn, GTlsCertificate* peerCert, GTlsCertificateFlags errors );
		public extern static GTlsCertificate* g_dtls_connection_get_certificate( GDtlsConnection* conn );
		public extern static Boolean32 g_dtls_connection_get_channel_binding_data( GDtlsConnection* conn, GTlsChannelBindingType type, GByteArray* data, GError** error );
		public extern static sbyte* g_dtls_connection_get_ciphersuite_name( GDtlsConnection* conn );
		public extern static GTlsDatabase* g_dtls_connection_get_database( GDtlsConnection* conn );
		public extern static GTlsInteraction* g_dtls_connection_get_interaction( GDtlsConnection* conn );
		public extern static sbyte* g_dtls_connection_get_negotiated_protocol( GDtlsConnection* conn );
		public extern static GTlsCertificate* g_dtls_connection_get_peer_certificate( GDtlsConnection* conn );
		public extern static GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors( GDtlsConnection* conn );
		public extern static GTlsProtocolVersion g_dtls_connection_get_protocol_version( GDtlsConnection* conn );
		public extern static GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode( GDtlsConnection* conn );
		public extern static Boolean32 g_dtls_connection_get_require_close_notify( GDtlsConnection* conn );
		[BackendHintReadNone]
		public extern static GType g_dtls_connection_get_type();
		public extern static Boolean32 g_dtls_connection_handshake( GDtlsConnection* conn, GCancellable* cancellable, GError** error );
		public extern static void g_dtls_connection_handshake_async( GDtlsConnection* conn, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_dtls_connection_handshake_finish( GDtlsConnection* conn, GAsyncResult* result, GError** error );
		public extern static void g_dtls_connection_set_advertised_protocols( GDtlsConnection* conn, sbyte** protocols );
		public extern static void g_dtls_connection_set_certificate( GDtlsConnection* conn, GTlsCertificate* certificate );
		public extern static void g_dtls_connection_set_database( GDtlsConnection* conn, GTlsDatabase* database );
		public extern static void g_dtls_connection_set_interaction( GDtlsConnection* conn, GTlsInteraction* interaction );
		public extern static void g_dtls_connection_set_rehandshake_mode( GDtlsConnection* conn, GTlsRehandshakeMode mode );
		public extern static void g_dtls_connection_set_require_close_notify( GDtlsConnection* conn, Boolean32 requireCloseNotify );
		public extern static Boolean32 g_dtls_connection_shutdown( GDtlsConnection* conn, Boolean32 shutdownRead, Boolean32 shutdownWrite, GCancellable* cancellable, GError** error );
		public extern static void g_dtls_connection_shutdown_async( GDtlsConnection* conn, Boolean32 shutdownRead, Boolean32 shutdownWrite, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_dtls_connection_shutdown_finish( GDtlsConnection* conn, GAsyncResult* result, GError** error );

		public extern static GList* g_dtls_client_connection_get_accepted_cas( GDtlsClientConnection* conn );
		public extern static GSocketConnectable* g_dtls_client_connection_get_server_identity( GDtlsClientConnection* conn );
		[BackendHintReadNone]
		public extern static GType g_dtls_client_connection_get_type();
		public extern static GTlsCertificateFlags g_dtls_client_connection_get_validation_flags( GDtlsClientConnection* conn );
		public extern static GDatagramBased* g_dtls_client_connection_new( GDatagramBased* baseSocket, GSocketConnectable* serverIdentity, GError** error );
		public extern static void g_dtls_client_connection_set_server_identity( GDtlsClientConnection* conn, GSocketConnectable* identity );
		public extern static void g_dtls_client_connection_set_validation_flags( GDtlsClientConnection* conn, GTlsCertificateFlags flags );

		[BackendHintReadNone]
		public extern static GType g_dtls_server_connection_get_type();
		public extern static GDatagramBased* g_dtls_server_connection_new( GDatagramBased* baseSocket, GTlsCertificate* certificate, GError** error );

		public extern static GIcon* g_icon_deserialize( GVariant* value );
		public extern static Boolean32 g_icon_equal( GIcon* icon1, GIcon* icon2 );
		[BackendHintReadNone]
		public extern static GType g_icon_get_type();
		public extern static uint g_icon_hash( void* icon );
		public extern static GIcon* g_icon_new_for_string( sbyte* str, GError** error );
		public extern static GVariant* g_icon_serialize( GIcon* icon );
		public extern static sbyte* g_icon_to_string( GIcon* icon );

		public extern static GIcon* g_emblem_get_icon( GEmblem* emblem );
		public extern static GEmblemOrigin g_emblem_get_origin( GEmblem* emblem );
		[BackendHintReadNone]
		public extern static GType g_emblem_get_type();
		public extern static GEmblem* g_emblem_new( GIcon* icon );
		public extern static GEmblem* g_emblem_new_with_origin( GIcon* icon, GEmblemOrigin origin );

		public extern static void g_emblemed_icon_add_emblem( GEmblemedIcon* emblemed, GEmblem* emblem );
		public extern static void g_emblemed_icon_clear_emblems( GEmblemedIcon* emblemed );
		public extern static GList* g_emblemed_icon_get_emblems( GEmblemedIcon* emblemed );
		public extern static GIcon* g_emblemed_icon_get_icon( GEmblemedIcon* emblemed );
		[BackendHintReadNone]
		public extern static GType g_emblemed_icon_get_type();
		public extern static GIcon* g_emblemed_icon_new( GIcon* icon, GEmblem* emblem );

		public extern static GFileOutputStream* g_file_append_to( GFile* file, GFileCreateFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_append_to_async( GFile* file, GFileCreateFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileOutputStream* g_file_append_to_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static sbyte* g_file_build_attribute_list_for_copy( GFile* file, GFileCopyFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_copy( GFile* source, GFile* destination, GFileCopyFlags flags, GCancellable* cancellable, Functors.Action<intptr, intptr, void*> progressCallback, void* progressCallbackData, GError** error );
		public extern static void g_file_copy_async( GFile* source, GFile* destination, GFileCopyFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<intptr, intptr, void*> progressCallback, void* progressCallbackData, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_copy_attributes( GFile* source, GFile* destination, GFileCopyFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_copy_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFileOutputStream* g_file_create( GFile* file, GFileCreateFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_create_async( GFile* file, GFileCreateFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileOutputStream* g_file_create_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFileIOStream* g_file_create_readwrite( GFile* file, GFileCreateFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_create_readwrite_async( GFile* file, GFileCreateFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileIOStream* g_file_create_readwrite_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static Boolean32 g_file_delete( GFile* file, GCancellable* cancellable, GError** error );
		public extern static void g_file_delete_async( GFile* file, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_delete_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static GFile* g_file_dup( GFile* file );
		public extern static void g_file_eject_mountable( GFile* file, GMountUnmountFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_eject_mountable_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static void g_file_eject_mountable_with_operation( GFile* file, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_eject_mountable_with_operation_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static GFileEnumerator* g_file_enumerate_children( GFile* file, sbyte* attributes, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_enumerate_children_async( GFile* file, sbyte* attributes, GFileQueryInfoFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileEnumerator* g_file_enumerate_children_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static Boolean32 g_file_equal( GFile* file1, GFile* file2 );
		public extern static GMount* g_file_find_enclosing_mount( GFile* file, GCancellable* cancellable, GError** error );
		public extern static void g_file_find_enclosing_mount_async( GFile* file, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GMount* g_file_find_enclosing_mount_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static sbyte* g_file_get_basename( GFile* file );
		public extern static GFile* g_file_get_child( GFile* file, CUtf8String name );
		public extern static GFile* g_file_get_child_for_display_name( GFile* file, CUtf8String displayName, GError** error );
		public extern static GFile* g_file_get_parent( GFile* file );
		public extern static sbyte* g_file_get_parse_name( GFile* file );
		public extern static sbyte* g_file_get_path( GFile* file );
		public extern static sbyte* g_file_get_relative_path( GFile* parent, GFile* descendant );
		[BackendHintReadNone]
		public extern static GType g_file_get_type();
		public extern static sbyte* g_file_get_uri( GFile* file );
		public extern static sbyte* g_file_get_uri_scheme( GFile* file );
		public extern static Boolean32 g_file_has_parent( GFile* file, GFile* parent );
		public extern static Boolean32 g_file_has_prefix( GFile* file, GFile* prefix );
		public extern static Boolean32 g_file_has_uri_scheme( GFile* file, sbyte* uriScheme );
		public extern static uint g_file_hash( void* file );
		public extern static Boolean32 g_file_is_native( GFile* file );
		public extern static GBytes* g_file_load_bytes( GFile* file, GCancellable* cancellable, sbyte** etagOut, GError** error );
		public extern static void g_file_load_bytes_async( GFile* file, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GBytes* g_file_load_bytes_finish( GFile* file, GAsyncResult* result, sbyte** etagOut, GError** error );
		public extern static Boolean32 g_file_load_contents( GFile* file, GCancellable* cancellable, sbyte** contents, uintptr* length, sbyte** etagOut, GError** error );
		public extern static void g_file_load_contents_async( GFile* file, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_load_contents_finish( GFile* file, GAsyncResult* res, sbyte** contents, uintptr* length, sbyte** etagOut, GError** error );
		public extern static void g_file_load_partial_contents_async( GFile* file, GCancellable* cancellable, Functors.Func<sbyte*, intptr, void*, Boolean32> readMoreCallback, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_load_partial_contents_finish( GFile* file, GAsyncResult* res, sbyte** contents, uintptr* length, sbyte** etagOut, GError** error );
		public extern static Boolean32 g_file_make_directory( GFile* file, GCancellable* cancellable, GError** error );
		public extern static void g_file_make_directory_async( GFile* file, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_make_directory_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_file_make_directory_with_parents( GFile* file, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_make_symbolic_link( GFile* file, sbyte* symlinkValue, GCancellable* cancellable, GError** error );
		public extern static void g_file_make_symbolic_link_async( GFile* file, sbyte* symlinkValue, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_make_symbolic_link_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_file_measure_disk_usage( GFile* file, GFileMeasureFlags flags, GCancellable* cancellable, Functors.Action<Boolean32, uintptr, uintptr, uintptr, void*> progressCallback, void* progressData, uintptr* diskUsage, uintptr* numDirs, uintptr* numFiles, GError** error );
		public extern static void g_file_measure_disk_usage_async( GFile* file, GFileMeasureFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<Boolean32, uintptr, uintptr, uintptr, void*> progressCallback, void* progressData, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_measure_disk_usage_finish( GFile* file, GAsyncResult* result, uintptr* diskUsage, uintptr* numDirs, uintptr* numFiles, GError** error );
		public extern static GFileMonitor* g_file_monitor( GFile* file, GFileMonitorFlags flags, GCancellable* cancellable, GError** error );
		public extern static GFileMonitor* g_file_monitor_directory( GFile* file, GFileMonitorFlags flags, GCancellable* cancellable, GError** error );
		public extern static GFileMonitor* g_file_monitor_file( GFile* file, GFileMonitorFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_mount_enclosing_volume( GFile* location, GMountMountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_mount_enclosing_volume_finish( GFile* location, GAsyncResult* result, GError** error );
		public extern static void g_file_mount_mountable( GFile* file, GMountMountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFile* g_file_mount_mountable_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_file_move( GFile* source, GFile* destination, GFileCopyFlags flags, GCancellable* cancellable, Functors.Action<intptr, intptr, void*> progressCallback, void* progressCallbackData, GError** error );
		public extern static void g_file_move_async( GFile* source, GFile* destination, GFileCopyFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<intptr, intptr, void*> progressCallback, void* progressCallbackData, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_move_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static GFile* g_file_new_for_commandline_arg( sbyte* arg );
		public extern static GFile* g_file_new_for_commandline_arg_and_cwd( sbyte* arg, sbyte* cwd );
		public extern static GFile* g_file_new_for_path( sbyte* path );
		public extern static GFile* g_file_new_for_uri( sbyte* uri );
		public extern static GFile* g_file_new_tmp( sbyte* tmpl, GFileIOStream** iostream, GError** error );
		public extern static void g_file_new_tmp_async( sbyte* tmpl, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static void g_file_new_tmp_dir_async( sbyte* tmpl, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFile* g_file_new_tmp_dir_finish( GAsyncResult* result, GError** error );
		public extern static GFile* g_file_new_tmp_finish( GAsyncResult* result, GFileIOStream** iostream, GError** error );
		public extern static GFileIOStream* g_file_open_readwrite( GFile* file, GCancellable* cancellable, GError** error );
		public extern static void g_file_open_readwrite_async( GFile* file, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileIOStream* g_file_open_readwrite_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFile* g_file_parse_name( CUtf8String parseName );
		public extern static sbyte* g_file_peek_path( GFile* file );
		public extern static void g_file_poll_mountable( GFile* file, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_poll_mountable_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static GAppInfo* g_file_query_default_handler( GFile* file, GCancellable* cancellable, GError** error );
		public extern static void g_file_query_default_handler_async( GFile* file, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GAppInfo* g_file_query_default_handler_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_file_query_exists( GFile* file, GCancellable* cancellable );
		public extern static GFileType g_file_query_file_type( GFile* file, GFileQueryInfoFlags flags, GCancellable* cancellable );
		public extern static GFileInfo* g_file_query_filesystem_info( GFile* file, sbyte* attributes, GCancellable* cancellable, GError** error );
		public extern static void g_file_query_filesystem_info_async( GFile* file, sbyte* attributes, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileInfo* g_file_query_filesystem_info_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFileInfo* g_file_query_info( GFile* file, sbyte* attributes, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_query_info_async( GFile* file, sbyte* attributes, GFileQueryInfoFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileInfo* g_file_query_info_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFileAttributeInfoList* g_file_query_settable_attributes( GFile* file, GCancellable* cancellable, GError** error );
		public extern static GFileAttributeInfoList* g_file_query_writable_namespaces( GFile* file, GCancellable* cancellable, GError** error );
		public extern static GFileInputStream* g_file_read( GFile* file, GCancellable* cancellable, GError** error );
		public extern static void g_file_read_async( GFile* file, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileInputStream* g_file_read_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFileOutputStream* g_file_replace( GFile* file, sbyte* etag, Boolean32 makeBackup, GFileCreateFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_replace_async( GFile* file, sbyte* etag, Boolean32 makeBackup, GFileCreateFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_replace_contents( GFile* file, sbyte* contents, uintptr length, sbyte* etag, Boolean32 makeBackup, GFileCreateFlags flags, sbyte** newEtag, GCancellable* cancellable, GError** error );
		public extern static void g_file_replace_contents_async( GFile* file, sbyte* contents, uintptr length, sbyte* etag, Boolean32 makeBackup, GFileCreateFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static void g_file_replace_contents_bytes_async( GFile* file, GBytes* contents, sbyte* etag, Boolean32 makeBackup, GFileCreateFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_replace_contents_finish( GFile* file, GAsyncResult* res, sbyte** newEtag, GError** error );
		public extern static GFileOutputStream* g_file_replace_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFileIOStream* g_file_replace_readwrite( GFile* file, sbyte* etag, Boolean32 makeBackup, GFileCreateFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_replace_readwrite_async( GFile* file, sbyte* etag, Boolean32 makeBackup, GFileCreateFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileIOStream* g_file_replace_readwrite_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static GFile* g_file_resolve_relative_path( GFile* file, sbyte* relativePath );
		public extern static Boolean32 g_file_set_attribute( GFile* file, sbyte* attribute, GFileAttributeType type, void* valueP, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_set_attribute_byte_string( GFile* file, sbyte* attribute, sbyte* value, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_set_attribute_int32( GFile* file, sbyte* attribute, int value, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_set_attribute_int64( GFile* file, sbyte* attribute, intptr value, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_set_attribute_string( GFile* file, sbyte* attribute, sbyte* value, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_set_attribute_uint32( GFile* file, sbyte* attribute, uint value, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_file_set_attribute_uint64( GFile* file, sbyte* attribute, uintptr value, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_file_set_attributes_async( GFile* file, GFileInfo* info, GFileQueryInfoFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_set_attributes_finish( GFile* file, GAsyncResult* result, GFileInfo** info, GError** error );
		public extern static Boolean32 g_file_set_attributes_from_info( GFile* file, GFileInfo* info, GFileQueryInfoFlags flags, GCancellable* cancellable, GError** error );
		public extern static GFile* g_file_set_display_name( GFile* file, CUtf8String displayName, GCancellable* cancellable, GError** error );
		public extern static void g_file_set_display_name_async( GFile* file, CUtf8String displayName, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFile* g_file_set_display_name_finish( GFile* file, GAsyncResult* res, GError** error );
		public extern static void g_file_start_mountable( GFile* file, GDriveStartFlags flags, GMountOperation* startOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_start_mountable_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static void g_file_stop_mountable( GFile* file, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_stop_mountable_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_file_supports_thread_contexts( GFile* file );
		public extern static Boolean32 g_file_trash( GFile* file, GCancellable* cancellable, GError** error );
		public extern static void g_file_trash_async( GFile* file, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_trash_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static void g_file_unmount_mountable( GFile* file, GMountUnmountFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_unmount_mountable_finish( GFile* file, GAsyncResult* result, GError** error );
		public extern static void g_file_unmount_mountable_with_operation( GFile* file, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_unmount_mountable_with_operation_finish( GFile* file, GAsyncResult* result, GError** error );

		public extern static void g_file_attribute_info_list_add( GFileAttributeInfoList* list, CUtf8String name, GFileAttributeType type, GFileAttributeInfoFlags flags );
		public extern static GFileAttributeInfoList* g_file_attribute_info_list_dup( GFileAttributeInfoList* list );
		public extern static GType g_file_attribute_info_list_get_type();
		public extern static GFileAttributeInfo* g_file_attribute_info_list_lookup( GFileAttributeInfoList* list, CUtf8String name );
		public extern static GFileAttributeInfoList* g_file_attribute_info_list_new();
		public extern static GFileAttributeInfoList* g_file_attribute_info_list_ref( GFileAttributeInfoList* list );
		public extern static void g_file_attribute_info_list_unref( GFileAttributeInfoList* list );

		public extern static Boolean32 g_file_enumerator_close( GFileEnumerator* enumerator, GCancellable* cancellable, GError** error );
		public extern static void g_file_enumerator_close_async( GFileEnumerator* enumerator, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_file_enumerator_close_finish( GFileEnumerator* enumerator, GAsyncResult* result, GError** error );
		public extern static GFile* g_file_enumerator_get_child( GFileEnumerator* enumerator, GFileInfo* info );
		public extern static GFile* g_file_enumerator_get_container( GFileEnumerator* enumerator );
		[BackendHintReadNone]
		public extern static GType g_file_enumerator_get_type();
		public extern static Boolean32 g_file_enumerator_has_pending( GFileEnumerator* enumerator );
		public extern static Boolean32 g_file_enumerator_is_closed( GFileEnumerator* enumerator );
		public extern static Boolean32 g_file_enumerator_iterate( GFileEnumerator* direnum, GFileInfo** outInfo, GFile** outChild, GCancellable* cancellable, GError** error );
		public extern static GFileInfo* g_file_enumerator_next_file( GFileEnumerator* enumerator, GCancellable* cancellable, GError** error );
		public extern static void g_file_enumerator_next_files_async( GFileEnumerator* enumerator, int numFiles, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GList* g_file_enumerator_next_files_finish( GFileEnumerator* enumerator, GAsyncResult* result, GError** error );
		public extern static void g_file_enumerator_set_pending( GFileEnumerator* enumerator, Boolean32 pending );

		public extern static GFile* g_file_icon_get_file( GFileIcon* icon );
		[BackendHintReadNone]
		public extern static GType g_file_icon_get_type();
		public extern static GIcon* g_file_icon_new( GFile* file );

		public extern static Boolean32 g_file_attribute_matcher_enumerate_namespace( GFileAttributeMatcher* matcher, sbyte* ns );
		public extern static sbyte* g_file_attribute_matcher_enumerate_next( GFileAttributeMatcher* matcher );
		[BackendHintReadNone]
		public extern static GType g_file_attribute_matcher_get_type();
		public extern static Boolean32 g_file_attribute_matcher_matches( GFileAttributeMatcher* matcher, sbyte* attribute );
		public extern static Boolean32 g_file_attribute_matcher_matches_only( GFileAttributeMatcher* matcher, sbyte* attribute );
		public extern static GFileAttributeMatcher* g_file_attribute_matcher_new( sbyte* attributes );
		public extern static GFileAttributeMatcher* g_file_attribute_matcher_ref( GFileAttributeMatcher* matcher );
		public extern static GFileAttributeMatcher* g_file_attribute_matcher_subtract( GFileAttributeMatcher* matcher, GFileAttributeMatcher* subtract );
		public extern static sbyte* g_file_attribute_matcher_to_string( GFileAttributeMatcher* matcher );
		public extern static void g_file_attribute_matcher_unref( GFileAttributeMatcher* matcher );
		public extern static void g_file_info_clear_status( GFileInfo* info );
		public extern static void g_file_info_copy_into( GFileInfo* srcInfo, GFileInfo* destInfo );
		public extern static GFileInfo* g_file_info_dup( GFileInfo* other );
		public extern static GDateTime* g_file_info_get_access_date_time( GFileInfo* info );
		public extern static sbyte* g_file_info_get_attribute_as_string( GFileInfo* info, sbyte* attribute );
		public extern static Boolean32 g_file_info_get_attribute_boolean( GFileInfo* info, sbyte* attribute );
		public extern static sbyte* g_file_info_get_attribute_byte_string( GFileInfo* info, sbyte* attribute );
		public extern static Boolean32 g_file_info_get_attribute_data( GFileInfo* info, sbyte* attribute, GFileAttributeType* type, void** valuePp, GFileAttributeStatus* status );
		public extern static int g_file_info_get_attribute_int32( GFileInfo* info, sbyte* attribute );
		public extern static intptr g_file_info_get_attribute_int64( GFileInfo* info, sbyte* attribute );
		public extern static GObject* g_file_info_get_attribute_object( GFileInfo* info, sbyte* attribute );
		public extern static GFileAttributeStatus g_file_info_get_attribute_status( GFileInfo* info, sbyte* attribute );
		public extern static sbyte* g_file_info_get_attribute_string( GFileInfo* info, sbyte* attribute );
		public extern static sbyte** g_file_info_get_attribute_stringv( GFileInfo* info, sbyte* attribute );
		public extern static GFileAttributeType g_file_info_get_attribute_type( GFileInfo* info, sbyte* attribute );
		public extern static uint g_file_info_get_attribute_uint32( GFileInfo* info, sbyte* attribute );
		public extern static uintptr g_file_info_get_attribute_uint64( GFileInfo* info, sbyte* attribute );
		public extern static sbyte* g_file_info_get_content_type( GFileInfo* info );
		public extern static GDateTime* g_file_info_get_creation_date_time( GFileInfo* info );
		public extern static GDateTime* g_file_info_get_deletion_date( GFileInfo* info );
		public extern static sbyte* g_file_info_get_display_name( GFileInfo* info );
		public extern static sbyte* g_file_info_get_edit_name( GFileInfo* info );
		public extern static sbyte* g_file_info_get_etag( GFileInfo* info );
		public extern static GFileType g_file_info_get_file_type( GFileInfo* info );
		public extern static GIcon* g_file_info_get_icon( GFileInfo* info );
		public extern static Boolean32 g_file_info_get_is_backup( GFileInfo* info );
		public extern static Boolean32 g_file_info_get_is_hidden( GFileInfo* info );
		public extern static Boolean32 g_file_info_get_is_symlink( GFileInfo* info );
		public extern static GDateTime* g_file_info_get_modification_date_time( GFileInfo* info );
		public extern static void g_file_info_get_modification_time( GFileInfo* info, GTimeVal* result );
		public extern static sbyte* g_file_info_get_name( GFileInfo* info );
		public extern static intptr g_file_info_get_size( GFileInfo* info );
		public extern static int g_file_info_get_sort_order( GFileInfo* info );
		public extern static GIcon* g_file_info_get_symbolic_icon( GFileInfo* info );
		public extern static sbyte* g_file_info_get_symlink_target( GFileInfo* info );
		[BackendHintReadNone]
		public extern static GType g_file_info_get_type();
		public extern static Boolean32 g_file_info_has_attribute( GFileInfo* info, sbyte* attribute );
		public extern static Boolean32 g_file_info_has_namespace( GFileInfo* info, CUtf8String nameSpace );
		public extern static sbyte** g_file_info_list_attributes( GFileInfo* info, CUtf8String nameSpace );
		public extern static GFileInfo* g_file_info_new();
		public extern static void g_file_info_remove_attribute( GFileInfo* info, sbyte* attribute );
		public extern static void g_file_info_set_access_date_time( GFileInfo* info, GDateTime* atime );
		public extern static void g_file_info_set_attribute( GFileInfo* info, sbyte* attribute, GFileAttributeType type, void* valueP );
		public extern static void g_file_info_set_attribute_boolean( GFileInfo* info, sbyte* attribute, Boolean32 attrValue );
		public extern static void g_file_info_set_attribute_byte_string( GFileInfo* info, sbyte* attribute, sbyte* attrValue );
		public extern static void g_file_info_set_attribute_int32( GFileInfo* info, sbyte* attribute, int attrValue );
		public extern static void g_file_info_set_attribute_int64( GFileInfo* info, sbyte* attribute, intptr attrValue );
		public extern static void g_file_info_set_attribute_mask( GFileInfo* info, GFileAttributeMatcher* mask );
		public extern static void g_file_info_set_attribute_object( GFileInfo* info, sbyte* attribute, GObject* attrValue );
		public extern static Boolean32 g_file_info_set_attribute_status( GFileInfo* info, sbyte* attribute, GFileAttributeStatus status );
		public extern static void g_file_info_set_attribute_string( GFileInfo* info, sbyte* attribute, sbyte* attrValue );
		public extern static void g_file_info_set_attribute_stringv( GFileInfo* info, sbyte* attribute, sbyte** attrValue );
		public extern static void g_file_info_set_attribute_uint32( GFileInfo* info, sbyte* attribute, uint attrValue );
		public extern static void g_file_info_set_attribute_uint64( GFileInfo* info, sbyte* attribute, uintptr attrValue );
		public extern static void g_file_info_set_content_type( GFileInfo* info, sbyte* contentType );
		public extern static void g_file_info_set_creation_date_time( GFileInfo* info, GDateTime* creationTime );
		public extern static void g_file_info_set_display_name( GFileInfo* info, CUtf8String displayName );
		public extern static void g_file_info_set_edit_name( GFileInfo* info, CUtf8String editName );
		public extern static void g_file_info_set_file_type( GFileInfo* info, GFileType type );
		public extern static void g_file_info_set_icon( GFileInfo* info, GIcon* icon );
		public extern static void g_file_info_set_is_hidden( GFileInfo* info, Boolean32 isHidden );
		public extern static void g_file_info_set_is_symlink( GFileInfo* info, Boolean32 isSymlink );
		public extern static void g_file_info_set_modification_date_time( GFileInfo* info, GDateTime* mtime );
		public extern static void g_file_info_set_modification_time( GFileInfo* info, GTimeVal* mtime );
		public extern static void g_file_info_set_name( GFileInfo* info, CUtf8String name );
		public extern static void g_file_info_set_size( GFileInfo* info, intptr size );
		public extern static void g_file_info_set_sort_order( GFileInfo* info, int sortOrder );
		public extern static void g_file_info_set_symbolic_icon( GFileInfo* info, GIcon* icon );
		public extern static void g_file_info_set_symlink_target( GFileInfo* info, sbyte* symlinkTarget );
		public extern static void g_file_info_unset_attribute_mask( GFileInfo* info );

		[BackendHintReadNone]
		public extern static GType g_file_input_stream_get_type();
		public extern static GFileInfo* g_file_input_stream_query_info( GFileInputStream* stream, sbyte* attributes, GCancellable* cancellable, GError** error );
		public extern static void g_file_input_stream_query_info_async( GFileInputStream* stream, sbyte* attributes, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileInfo* g_file_input_stream_query_info_finish( GFileInputStream* stream, GAsyncResult* result, GError** error );

		public extern static GIOErrorEnum g_io_error_from_errno( int errNo );
		public extern static GIOErrorEnum g_io_error_from_file_error( GFileError fileError );
		public extern static uint g_io_error_quark();

		public extern static void g_io_stream_clear_pending( GIOStream* stream );
		public extern static Boolean32 g_io_stream_close( GIOStream* stream, GCancellable* cancellable, GError** error );
		public extern static void g_io_stream_close_async( GIOStream* stream, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_io_stream_close_finish( GIOStream* stream, GAsyncResult* result, GError** error );
		public extern static GInputStream* g_io_stream_get_input_stream( GIOStream* stream );
		public extern static GOutputStream* g_io_stream_get_output_stream( GIOStream* stream );
		[BackendHintReadNone]
		public extern static GType g_io_stream_get_type();
		public extern static Boolean32 g_io_stream_has_pending( GIOStream* stream );
		public extern static Boolean32 g_io_stream_is_closed( GIOStream* stream );
		public extern static Boolean32 g_io_stream_set_pending( GIOStream* stream, GError** error );
		public extern static void g_io_stream_splice_async( GIOStream* stream1, GIOStream* stream2, GIOStreamSpliceFlags flags, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_io_stream_splice_finish( GAsyncResult* result, GError** error );

		public extern static sbyte* g_file_io_stream_get_etag( GFileIOStream* stream );
		[BackendHintReadNone]
		public extern static GType g_file_io_stream_get_type();
		public extern static GFileInfo* g_file_io_stream_query_info( GFileIOStream* stream, sbyte* attributes, GCancellable* cancellable, GError** error );
		public extern static void g_file_io_stream_query_info_async( GFileIOStream* stream, sbyte* attributes, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileInfo* g_file_io_stream_query_info_finish( GFileIOStream* stream, GAsyncResult* result, GError** error );

		public extern static Boolean32 g_file_monitor_cancel( GFileMonitor* monitor );
		public extern static void g_file_monitor_emit_event( GFileMonitor* monitor, GFile* child, GFile* otherFile, GFileMonitorEvent eventType );
		[BackendHintReadNone]
		public extern static GType g_file_monitor_get_type();
		public extern static Boolean32 g_file_monitor_is_cancelled( GFileMonitor* monitor );
		public extern static void g_file_monitor_set_rate_limit( GFileMonitor* monitor, int limitMsecs );

		public extern static sbyte* g_filename_completer_get_completion_suffix( GFilenameCompleter* completer, CUtf8String initialText );
		public extern static sbyte** g_filename_completer_get_completions( GFilenameCompleter* completer, CUtf8String initialText );
		[BackendHintReadNone]
		public extern static GType g_filename_completer_get_type();
		public extern static GFilenameCompleter* g_filename_completer_new();
		public extern static void g_filename_completer_set_dirs_only( GFilenameCompleter* completer, Boolean32 dirsOnly );

		public extern static sbyte* g_file_output_stream_get_etag( GFileOutputStream* stream );
		[BackendHintReadNone]
		public extern static GType g_file_output_stream_get_type();
		public extern static GFileInfo* g_file_output_stream_query_info( GFileOutputStream* stream, sbyte* attributes, GCancellable* cancellable, GError** error );
		public extern static void g_file_output_stream_query_info_async( GFileOutputStream* stream, sbyte* attributes, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GFileInfo* g_file_output_stream_query_info_finish( GFileOutputStream* stream, GAsyncResult* result, GError** error );

		public extern static Boolean32 g_inet_address_equal( GInetAddress* address, GInetAddress* otherAddress );
		public extern static GSocketFamily g_inet_address_get_family( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_any( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_link_local( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_loopback( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_mc_global( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_mc_link_local( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_mc_node_local( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_mc_org_local( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_mc_site_local( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_multicast( GInetAddress* address );
		public extern static Boolean32 g_inet_address_get_is_site_local( GInetAddress* address );
		public extern static uintptr g_inet_address_get_native_size( GInetAddress* address );
		[BackendHintReadNone]
		public extern static GType g_inet_address_get_type();
		public extern static GInetAddress* g_inet_address_new_any( GSocketFamily family );
		public extern static GInetAddress* g_inet_address_new_from_bytes( byte* bytes, GSocketFamily family );
		public extern static GInetAddress* g_inet_address_new_from_string( sbyte* @string );
		public extern static GInetAddress* g_inet_address_new_loopback( GSocketFamily family );
		public extern static byte* g_inet_address_to_bytes( GInetAddress* address );
		public extern static sbyte* g_inet_address_to_string( GInetAddress* address );

		public extern static Boolean32 g_inet_address_mask_equal( GInetAddressMask* mask, GInetAddressMask* mask2 );
		public extern static GInetAddress* g_inet_address_mask_get_address( GInetAddressMask* mask );
		public extern static GSocketFamily g_inet_address_mask_get_family( GInetAddressMask* mask );
		public extern static uint g_inet_address_mask_get_length( GInetAddressMask* mask );
		[BackendHintReadNone]
		public extern static GType g_inet_address_mask_get_type();
		public extern static Boolean32 g_inet_address_mask_matches( GInetAddressMask* mask, GInetAddress* address );
		public extern static GInetAddressMask* g_inet_address_mask_new( GInetAddress* addr, uint length, GError** error );
		public extern static GInetAddressMask* g_inet_address_mask_new_from_string( sbyte* maskString, GError** error );
		public extern static sbyte* g_inet_address_mask_to_string( GInetAddressMask* mask );

		public extern static GSocketFamily g_socket_address_get_family( GSocketAddress* address );
		public extern static intptr g_socket_address_get_native_size( GSocketAddress* address );
		[BackendHintReadNone]
		public extern static GType g_socket_address_get_type();
		public extern static GSocketAddress* g_socket_address_new_from_native( void* native, uintptr len );
		public extern static Boolean32 g_socket_address_to_native( GSocketAddress* address, void* dest, uintptr destlen, GError** error );

		public extern static GInetAddress* g_inet_socket_address_get_address( GInetSocketAddress* address );
		public extern static uint g_inet_socket_address_get_flowinfo( GInetSocketAddress* address );
		public extern static ushort g_inet_socket_address_get_port( GInetSocketAddress* address );
		public extern static uint g_inet_socket_address_get_scope_id( GInetSocketAddress* address );
		[BackendHintReadNone]
		public extern static GType g_inet_socket_address_get_type();
		public extern static GSocketAddress* g_inet_socket_address_new( GInetAddress* address, ushort port );
		public extern static GSocketAddress* g_inet_socket_address_new_from_string( sbyte* address, uint port );

		[BackendHintReadNone]
		public extern static GType g_app_info_create_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_application_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_ask_password_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_bus_name_owner_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_bus_name_watcher_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_bus_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_converter_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_converter_result_get_type();
		[BackendHintReadNone]
		public extern static GType g_credentials_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_data_stream_byte_order_get_type();
		[BackendHintReadNone]
		public extern static GType g_data_stream_newline_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_call_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_capability_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_connection_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_error_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_interface_skeleton_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_message_byte_order_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_message_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_message_header_field_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_message_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_object_manager_client_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_property_info_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_proxy_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_send_message_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_server_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_signal_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_dbus_subtree_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_drive_start_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_drive_start_stop_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_emblem_origin_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_attribute_info_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_attribute_status_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_attribute_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_copy_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_create_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_measure_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_monitor_event_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_monitor_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_query_info_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_file_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_filesystem_preview_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_io_error_enum_get_type();
		[BackendHintReadNone]
		public extern static GType g_io_module_scope_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_io_stream_splice_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_memory_monitor_warning_level_get_type();
		[BackendHintReadNone]
		public extern static GType g_mount_mount_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_mount_operation_result_get_type();
		[BackendHintReadNone]
		public extern static GType g_mount_unmount_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_network_connectivity_get_type();
		[BackendHintReadNone]
		public extern static GType g_notification_priority_get_type();
		[BackendHintReadNone]
		public extern static GType g_output_stream_splice_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_password_save_get_type();
		[BackendHintReadNone]
		public extern static GType g_pollable_return_get_type();
		[BackendHintReadNone]
		public extern static GType g_resolver_error_get_type();
		[BackendHintReadNone]
		public extern static GType g_resolver_name_lookup_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_resolver_record_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_resource_error_get_type();
		[BackendHintReadNone]
		public extern static GType g_resource_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_resource_lookup_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_settings_bind_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_socket_client_event_get_type();
		[BackendHintReadNone]
		public extern static GType g_socket_family_get_type();
		[BackendHintReadNone]
		public extern static GType g_socket_listener_event_get_type();
		[BackendHintReadNone]
		public extern static GType g_socket_msg_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_socket_protocol_get_type();
		[BackendHintReadNone]
		public extern static GType g_socket_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_subprocess_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_test_dbus_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_authentication_mode_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_certificate_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_certificate_request_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_channel_binding_error_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_channel_binding_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_database_lookup_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_database_verify_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_error_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_interaction_result_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_password_flags_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_protocol_version_get_type();
		[BackendHintReadNone]
		public extern static GType g_tls_rehandshake_mode_get_type();
		[BackendHintReadNone]
		public extern static GType g_unix_socket_address_type_get_type();
		[BackendHintReadNone]
		public extern static GType g_zlib_compressor_format_get_type();

		public extern static sbyte* g_io_extension_get_name( GIOExtension* extension );
		public extern static int g_io_extension_get_priority( GIOExtension* extension );
		public extern static GType g_io_extension_get_type( GIOExtension* extension );
		public extern static GIOExtension* g_io_extension_point_get_extension_by_name( GIOExtensionPoint* extensionPoint, CUtf8String name );
		public extern static GList* g_io_extension_point_get_extensions( GIOExtensionPoint* extensionPoint );
		public extern static uintptr g_io_extension_point_get_required_type( GIOExtensionPoint* extensionPoint );
		public extern static GIOExtension* g_io_extension_point_implement( CUtf8String extensionPointName, uintptr type, CUtf8String extensionName, int priority );
		public extern static GIOExtensionPoint* g_io_extension_point_lookup( CUtf8String name );
		public extern static GIOExtensionPoint* g_io_extension_point_register( CUtf8String name );
		public extern static void g_io_extension_point_set_required_type( GIOExtensionPoint* extensionPoint, uintptr type );
		public extern static GTypeClass* g_io_extension_ref_class( GIOExtension* extension );
		[BackendHintReadNone]
		public extern static GType g_io_module_get_type();
		public extern static GIOModule* g_io_module_new( CUtf8String filename );
		public extern static void g_io_module_scope_block( GIOModuleScope* scope, CUtf8String basename );
		public extern static void g_io_module_scope_free( GIOModuleScope* scope );
		public extern static GIOModuleScope* g_io_module_scope_new( GIOModuleScopeFlags flags );
		public extern static GList* g_io_modules_load_all_in_directory( CUtf8String dirname );
		public extern static GList* g_io_modules_load_all_in_directory_with_scope( CUtf8String dirname, GIOModuleScope* scope );
		public extern static void g_io_modules_scan_all_in_directory( CUtf8String dirname );
		public extern static void g_io_modules_scan_all_in_directory_with_scope( CUtf8String dirname, GIOModuleScope* scope );

		public extern static void g_io_scheduler_cancel_all_jobs();
		public extern static Boolean32 g_io_scheduler_job_send_to_mainloop( GIOSchedulerJob* job, Functors.Func<void*, Boolean32> func, void* userData, Functors.Action<void*> notify );
		public extern static void g_io_scheduler_job_send_to_mainloop_async( GIOSchedulerJob* job, Functors.Func<void*, Boolean32> func, void* userData, Functors.Action<void*> notify );
		public extern static void g_io_scheduler_push_job( Functors.Func<GIOSchedulerJob*, GCancellable*, void*, Boolean32> jobFunc, void* userData, Functors.Action<void*> notify, int ioPriority, GCancellable* cancellable );

		public extern static void* g_list_model_get_item( GListModel* list, uint position );
		public extern static uintptr g_list_model_get_item_type( GListModel* list );
		public extern static uint g_list_model_get_n_items( GListModel* list );
		public extern static GObject* g_list_model_get_object( GListModel* list, uint position );
		public extern static GType g_list_model_get_type();
		public extern static void g_list_model_items_changed( GListModel* list, uint position, uint removed, uint added );

		public extern static void g_list_store_append( GListStore* store, void* item );
		public extern static Boolean32 g_list_store_find( GListStore* store, void* item, uint* position );
		public extern static Boolean32 g_list_store_find_with_equal_func( GListStore* store, void* item, Functors.Func<void*, void*, Boolean32> equalFunc, uint* position );
		public extern static Boolean32 g_list_store_find_with_equal_func_full( GListStore* store, void* item, Functors.Func<void*, void*, void*, Boolean32> equalFunc, void* userData, uint* position );
		public extern static GType g_list_store_get_type();
		public extern static void g_list_store_insert( GListStore* store, uint position, void* item );
		public extern static uint g_list_store_insert_sorted( GListStore* store, void* item, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );
		public extern static GListStore* g_list_store_new( uintptr itemType );
		public extern static void g_list_store_remove( GListStore* store, uint position );
		public extern static void g_list_store_remove_all( GListStore* store );
		public extern static void g_list_store_sort( GListStore* store, Functors.Func<void*, void*, void*, int> compareFunc, void* userData );
		public extern static void g_list_store_splice( GListStore* store, uint position, uint nRemovals, void** additions, uint nAdditions );

		[BackendHintReadNone]
		public extern static GType g_loadable_icon_get_type();
		public extern static GInputStream* g_loadable_icon_load( GLoadableIcon* icon, int size, sbyte** type, GCancellable* cancellable, GError** error );
		public extern static void g_loadable_icon_load_async( GLoadableIcon* icon, int size, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GInputStream* g_loadable_icon_load_finish( GLoadableIcon* icon, GAsyncResult* res, sbyte** type, GError** error );

		public extern static void g_memory_input_stream_add_bytes( GMemoryInputStream* stream, GBytes* bytes );
		public extern static void g_memory_input_stream_add_data( GMemoryInputStream* stream, void* data, intptr len, Functors.Action<void*> destroy );
		[BackendHintReadNone]
		public extern static GType g_memory_input_stream_get_type();
		public extern static GInputStream* g_memory_input_stream_new();
		public extern static GInputStream* g_memory_input_stream_new_from_bytes( GBytes* bytes );
		public extern static GInputStream* g_memory_input_stream_new_from_data( void* data, intptr len, Functors.Action<void*> destroy );

		public extern static GMemoryMonitor* g_memory_monitor_dup_default();
		public extern static GType g_memory_monitor_get_type();

		public extern static void* g_memory_output_stream_get_data( GMemoryOutputStream* ostream );
		public extern static uintptr g_memory_output_stream_get_data_size( GMemoryOutputStream* ostream );
		public extern static uintptr g_memory_output_stream_get_size( GMemoryOutputStream* ostream );
		[BackendHintReadNone]
		public extern static GType g_memory_output_stream_get_type();
		public extern static GOutputStream* g_memory_output_stream_new( void* data, uintptr size, Functors.Func<void*, uintptr, void*> reallocFunction, Functors.Action<void*> destroyFunction );
		public extern static GOutputStream* g_memory_output_stream_new_resizable();
		public extern static GBytes* g_memory_output_stream_steal_as_bytes( GMemoryOutputStream* ostream );
		public extern static void* g_memory_output_stream_steal_data( GMemoryOutputStream* ostream );

		public extern static sbyte* g_menu_attribute_iter_get_name( GMenuAttributeIter* iter );
		public extern static Boolean32 g_menu_attribute_iter_get_next( GMenuAttributeIter* iter, sbyte** outName, GVariant** value );
		[BackendHintReadNone]
		public extern static GType g_menu_attribute_iter_get_type();
		public extern static GVariant* g_menu_attribute_iter_get_value( GMenuAttributeIter* iter );
		public extern static Boolean32 g_menu_attribute_iter_next( GMenuAttributeIter* iter );
		public extern static sbyte* g_menu_link_iter_get_name( GMenuLinkIter* iter );
		public extern static Boolean32 g_menu_link_iter_get_next( GMenuLinkIter* iter, sbyte** outLink, GMenuModel** value );
		[BackendHintReadNone]
		public extern static GType g_menu_link_iter_get_type();
		public extern static GMenuModel* g_menu_link_iter_get_value( GMenuLinkIter* iter );
		public extern static Boolean32 g_menu_link_iter_next( GMenuLinkIter* iter );
		public extern static GVariant* g_menu_model_get_item_attribute_value( GMenuModel* model, int itemIndex, sbyte* attribute, GVariantType* expectedType );
		public extern static GMenuModel* g_menu_model_get_item_link( GMenuModel* model, int itemIndex, sbyte* link );
		public extern static int g_menu_model_get_n_items( GMenuModel* model );
		[BackendHintReadNone]
		public extern static GType g_menu_model_get_type();
		public extern static Boolean32 g_menu_model_is_mutable( GMenuModel* model );
		public extern static void g_menu_model_items_changed( GMenuModel* model, int position, int removed, int added );
		public extern static GMenuAttributeIter* g_menu_model_iterate_item_attributes( GMenuModel* model, int itemIndex );
		public extern static GMenuLinkIter* g_menu_model_iterate_item_links( GMenuModel* model, int itemIndex );

		public extern static void g_menu_append( GMenu* menu, sbyte* label, sbyte* detailedAction );
		public extern static void g_menu_append_item( GMenu* menu, GMenuItem* item );
		public extern static void g_menu_append_section( GMenu* menu, sbyte* label, GMenuModel* section );
		public extern static void g_menu_append_submenu( GMenu* menu, sbyte* label, GMenuModel* submenu );
		public extern static void g_menu_freeze( GMenu* menu );
		[BackendHintReadNone]
		public extern static GType g_menu_get_type();
		public extern static void g_menu_insert( GMenu* menu, int position, sbyte* label, sbyte* detailedAction );
		public extern static void g_menu_insert_item( GMenu* menu, int position, GMenuItem* item );
		public extern static void g_menu_insert_section( GMenu* menu, int position, sbyte* label, GMenuModel* section );
		public extern static void g_menu_insert_submenu( GMenu* menu, int position, sbyte* label, GMenuModel* submenu );
		public extern static GVariant* g_menu_item_get_attribute_value( GMenuItem* menuItem, sbyte* attribute, GVariantType* expectedType );
		public extern static GMenuModel* g_menu_item_get_link( GMenuItem* menuItem, sbyte* link );
		[BackendHintReadNone]
		public extern static GType g_menu_item_get_type();
		public extern static GMenuItem* g_menu_item_new( sbyte* label, sbyte* detailedAction );
		public extern static GMenuItem* g_menu_item_new_from_model( GMenuModel* model, int itemIndex );
		public extern static GMenuItem* g_menu_item_new_section( sbyte* label, GMenuModel* section );
		public extern static GMenuItem* g_menu_item_new_submenu( sbyte* label, GMenuModel* submenu );
		public extern static void g_menu_item_set_action_and_target_value( GMenuItem* menuItem, sbyte* action, GVariant* targetValue );
		public extern static void g_menu_item_set_attribute_value( GMenuItem* menuItem, sbyte* attribute, GVariant* value );
		public extern static void g_menu_item_set_detailed_action( GMenuItem* menuItem, sbyte* detailedAction );
		public extern static void g_menu_item_set_icon( GMenuItem* menuItem, GIcon* icon );
		public extern static void g_menu_item_set_label( GMenuItem* menuItem, sbyte* label );
		public extern static void g_menu_item_set_link( GMenuItem* menuItem, sbyte* link, GMenuModel* model );
		public extern static void g_menu_item_set_section( GMenuItem* menuItem, GMenuModel* section );
		public extern static void g_menu_item_set_submenu( GMenuItem* menuItem, GMenuModel* submenu );
		public extern static GMenu* g_menu_new();
		public extern static void g_menu_prepend( GMenu* menu, sbyte* label, sbyte* detailedAction );
		public extern static void g_menu_prepend_item( GMenu* menu, GMenuItem* item );
		public extern static void g_menu_prepend_section( GMenu* menu, sbyte* label, GMenuModel* section );
		public extern static void g_menu_prepend_submenu( GMenu* menu, sbyte* label, GMenuModel* submenu );
		public extern static void g_menu_remove( GMenu* menu, int position );
		public extern static void g_menu_remove_all( GMenu* menu );

		public extern static uint g_dbus_connection_export_menu_model( GDBusConnection* connection, sbyte* objectPath, GMenuModel* menu, GError** error );
		public extern static void g_dbus_connection_unexport_menu_model( GDBusConnection* connection, uint exportId );

		public extern static Boolean32 g_mount_can_eject( GMount* mount );
		public extern static Boolean32 g_mount_can_unmount( GMount* mount );
		public extern static void g_mount_eject( GMount* mount, GMountUnmountFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_mount_eject_finish( GMount* mount, GAsyncResult* result, GError** error );
		public extern static void g_mount_eject_with_operation( GMount* mount, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_mount_eject_with_operation_finish( GMount* mount, GAsyncResult* result, GError** error );
		public extern static GFile* g_mount_get_default_location( GMount* mount );
		public extern static GDrive* g_mount_get_drive( GMount* mount );
		public extern static GIcon* g_mount_get_icon( GMount* mount );
		public extern static sbyte* g_mount_get_name( GMount* mount );
		public extern static GFile* g_mount_get_root( GMount* mount );
		public extern static sbyte* g_mount_get_sort_key( GMount* mount );
		public extern static GIcon* g_mount_get_symbolic_icon( GMount* mount );
		[BackendHintReadNone]
		public extern static GType g_mount_get_type();
		public extern static sbyte* g_mount_get_uuid( GMount* mount );
		public extern static GVolume* g_mount_get_volume( GMount* mount );
		public extern static void g_mount_guess_content_type( GMount* mount, Boolean32 forceRescan, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static sbyte** g_mount_guess_content_type_finish( GMount* mount, GAsyncResult* result, GError** error );
		public extern static sbyte** g_mount_guess_content_type_sync( GMount* mount, Boolean32 forceRescan, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_mount_is_shadowed( GMount* mount );
		public extern static void g_mount_remount( GMount* mount, GMountMountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_mount_remount_finish( GMount* mount, GAsyncResult* result, GError** error );
		public extern static void g_mount_shadow( GMount* mount );
		public extern static void g_mount_unmount( GMount* mount, GMountUnmountFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_mount_unmount_finish( GMount* mount, GAsyncResult* result, GError** error );
		public extern static void g_mount_unmount_with_operation( GMount* mount, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_mount_unmount_with_operation_finish( GMount* mount, GAsyncResult* result, GError** error );
		public extern static void g_mount_unshadow( GMount* mount );

		public extern static Boolean32 g_mount_operation_get_anonymous( GMountOperation* op );
		public extern static int g_mount_operation_get_choice( GMountOperation* op );
		public extern static sbyte* g_mount_operation_get_domain( GMountOperation* op );
		public extern static Boolean32 g_mount_operation_get_is_tcrypt_hidden_volume( GMountOperation* op );
		public extern static Boolean32 g_mount_operation_get_is_tcrypt_system_volume( GMountOperation* op );
		public extern static sbyte* g_mount_operation_get_password( GMountOperation* op );
		public extern static GPasswordSave g_mount_operation_get_password_save( GMountOperation* op );
		public extern static uint g_mount_operation_get_pim( GMountOperation* op );
		[BackendHintReadNone]
		public extern static GType g_mount_operation_get_type();
		public extern static sbyte* g_mount_operation_get_username( GMountOperation* op );
		public extern static GMountOperation* g_mount_operation_new();
		public extern static void g_mount_operation_reply( GMountOperation* op, GMountOperationResult result );
		public extern static void g_mount_operation_set_anonymous( GMountOperation* op, Boolean32 anonymous );
		public extern static void g_mount_operation_set_choice( GMountOperation* op, int choice );
		public extern static void g_mount_operation_set_domain( GMountOperation* op, sbyte* domain );
		public extern static void g_mount_operation_set_is_tcrypt_hidden_volume( GMountOperation* op, Boolean32 hiddenVolume );
		public extern static void g_mount_operation_set_is_tcrypt_system_volume( GMountOperation* op, Boolean32 systemVolume );
		public extern static void g_mount_operation_set_password( GMountOperation* op, sbyte* password );
		public extern static void g_mount_operation_set_password_save( GMountOperation* op, GPasswordSave save );
		public extern static void g_mount_operation_set_pim( GMountOperation* op, uint pim );
		public extern static void g_mount_operation_set_username( GMountOperation* op, CUtf8String username );

		[BackendHintReadNone]
		public extern static GType g_native_socket_address_get_type();
		public extern static GSocketAddress* g_native_socket_address_new( void* native, uintptr len );

		public extern static GVolume* g_volume_monitor_adopt_orphan_mount( GMount* mount );
		public extern static GVolumeMonitor* g_volume_monitor_get();
		public extern static GList* g_volume_monitor_get_connected_drives( GVolumeMonitor* volumeMonitor );
		public extern static GMount* g_volume_monitor_get_mount_for_uuid( GVolumeMonitor* volumeMonitor, sbyte* uuid );
		public extern static GList* g_volume_monitor_get_mounts( GVolumeMonitor* volumeMonitor );
		[BackendHintReadNone]
		public extern static GType g_volume_monitor_get_type();
		public extern static GVolume* g_volume_monitor_get_volume_for_uuid( GVolumeMonitor* volumeMonitor, sbyte* uuid );
		public extern static GList* g_volume_monitor_get_volumes( GVolumeMonitor* volumeMonitor );

		[BackendHintReadNone]
		public extern static GType g_native_volume_monitor_get_type();

		public extern static sbyte* g_network_address_get_hostname( GNetworkAddress* addr );
		public extern static ushort g_network_address_get_port( GNetworkAddress* addr );
		public extern static sbyte* g_network_address_get_scheme( GNetworkAddress* addr );
		[BackendHintReadNone]
		public extern static GType g_network_address_get_type();
		public extern static GSocketConnectable* g_network_address_new( CUtf8String hostname, ushort port );
		public extern static GSocketConnectable* g_network_address_new_loopback( ushort port );
		public extern static GSocketConnectable* g_network_address_parse( sbyte* hostAndPort, ushort defaultPort, GError** error );
		public extern static GSocketConnectable* g_network_address_parse_uri( sbyte* uri, ushort defaultPort, GError** error );

		public extern static Boolean32 g_network_monitor_can_reach( GNetworkMonitor* monitor, GSocketConnectable* connectable, GCancellable* cancellable, GError** error );
		public extern static void g_network_monitor_can_reach_async( GNetworkMonitor* monitor, GSocketConnectable* connectable, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_network_monitor_can_reach_finish( GNetworkMonitor* monitor, GAsyncResult* result, GError** error );
		public extern static GNetworkConnectivity g_network_monitor_get_connectivity( GNetworkMonitor* monitor );
		public extern static GNetworkMonitor* g_network_monitor_get_default();
		public extern static Boolean32 g_network_monitor_get_network_available( GNetworkMonitor* monitor );
		public extern static Boolean32 g_network_monitor_get_network_metered( GNetworkMonitor* monitor );
		[BackendHintReadNone]
		public extern static GType g_network_monitor_get_type();

		public extern static sbyte* g_network_service_get_domain( GNetworkService* srv );
		public extern static sbyte* g_network_service_get_protocol( GNetworkService* srv );
		public extern static sbyte* g_network_service_get_scheme( GNetworkService* srv );
		public extern static sbyte* g_network_service_get_service( GNetworkService* srv );
		[BackendHintReadNone]
		public extern static GType g_network_service_get_type();
		public extern static GSocketConnectable* g_network_service_new( sbyte* service, sbyte* protocol, sbyte* domain );
		public extern static void g_network_service_set_scheme( GNetworkService* srv, sbyte* scheme );

		public extern static void g_notification_add_button( GNotification* notification, sbyte* label, sbyte* detailedAction );
		public extern static void g_notification_add_button_with_target_value( GNotification* notification, sbyte* label, sbyte* action, GVariant* target );
		[BackendHintReadNone]
		public extern static GType g_notification_get_type();
		public extern static GNotification* g_notification_new( sbyte* title );
		public extern static void g_notification_set_body( GNotification* notification, sbyte* body );
		public extern static void g_notification_set_category( GNotification* notification, sbyte* category );
		public extern static void g_notification_set_default_action( GNotification* notification, sbyte* detailedAction );
		public extern static void g_notification_set_default_action_and_target_value( GNotification* notification, sbyte* action, GVariant* target );
		public extern static void g_notification_set_icon( GNotification* notification, GIcon* icon );
		public extern static void g_notification_set_priority( GNotification* notification, GNotificationPriority priority );
		public extern static void g_notification_set_title( GNotification* notification, sbyte* title );
		public extern static void g_notification_set_urgent( GNotification* notification, Boolean32 urgent );

		public extern static Boolean32 g_permission_acquire( GPermission* permission, GCancellable* cancellable, GError** error );
		public extern static void g_permission_acquire_async( GPermission* permission, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_permission_acquire_finish( GPermission* permission, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_permission_get_allowed( GPermission* permission );
		public extern static Boolean32 g_permission_get_can_acquire( GPermission* permission );
		public extern static Boolean32 g_permission_get_can_release( GPermission* permission );
		public extern static GType g_permission_get_type();
		public extern static void g_permission_impl_update( GPermission* permission, Boolean32 allowed, Boolean32 canAcquire, Boolean32 canRelease );
		public extern static Boolean32 g_permission_release( GPermission* permission, GCancellable* cancellable, GError** error );
		public extern static void g_permission_release_async( GPermission* permission, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_permission_release_finish( GPermission* permission, GAsyncResult* result, GError** error );

		public extern static Boolean32 g_pollable_input_stream_can_poll( GPollableInputStream* stream );
		public extern static GSource* g_pollable_input_stream_create_source( GPollableInputStream* stream, GCancellable* cancellable );
		[BackendHintReadNone]
		public extern static GType g_pollable_input_stream_get_type();
		public extern static Boolean32 g_pollable_input_stream_is_readable( GPollableInputStream* stream );
		public extern static intptr g_pollable_input_stream_read_nonblocking( GPollableInputStream* stream, void* buffer, uintptr count, GCancellable* cancellable, GError** error );

		public extern static Boolean32 g_pollable_output_stream_can_poll( GPollableOutputStream* stream );
		public extern static GSource* g_pollable_output_stream_create_source( GPollableOutputStream* stream, GCancellable* cancellable );
		[BackendHintReadNone]
		public extern static GType g_pollable_output_stream_get_type();
		public extern static Boolean32 g_pollable_output_stream_is_writable( GPollableOutputStream* stream );
		public extern static intptr g_pollable_output_stream_write_nonblocking( GPollableOutputStream* stream, void* buffer, uintptr count, GCancellable* cancellable, GError** error );
		public extern static GPollableReturn g_pollable_output_stream_writev_nonblocking( GPollableOutputStream* stream, GOutputVector* vectors, uintptr nVectors, uintptr* bytesWritten, GCancellable* cancellable, GError** error );

		public extern static GSource* g_pollable_source_new( GObject* pollableStream );
		public extern static GSource* g_pollable_source_new_full( void* pollableStream, GSource* childSource, GCancellable* cancellable );
		public extern static intptr g_pollable_stream_read( GInputStream* stream, void* buffer, uintptr count, Boolean32 blocking, GCancellable* cancellable, GError** error );
		public extern static intptr g_pollable_stream_write( GOutputStream* stream, void* buffer, uintptr count, Boolean32 blocking, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_pollable_stream_write_all( GOutputStream* stream, void* buffer, uintptr count, Boolean32 blocking, uintptr* bytesWritten, GCancellable* cancellable, GError** error );

		public extern static GPowerProfileMonitor* g_power_profile_monitor_dup_default();
		public extern static Boolean32 g_power_profile_monitor_get_power_saver_enabled( GPowerProfileMonitor* monitor );
		public extern static GType g_power_profile_monitor_get_type();

		[BackendHintReadNone]
		public extern static GType g_property_action_get_type();
		public extern static GPropertyAction* g_property_action_new( CUtf8String name, void* object, CUtf8String propertyName );

		public extern static GIOStream* g_proxy_connect( GProxy* proxy, GIOStream* connection, GProxyAddress* proxyAddress, GCancellable* cancellable, GError** error );
		public extern static void g_proxy_connect_async( GProxy* proxy, GIOStream* connection, GProxyAddress* proxyAddress, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GIOStream* g_proxy_connect_finish( GProxy* proxy, GAsyncResult* result, GError** error );
		public extern static GProxy* g_proxy_get_default_for_protocol( sbyte* protocol );
		[BackendHintReadNone]
		public extern static GType g_proxy_get_type();
		public extern static Boolean32 g_proxy_supports_hostname( GProxy* proxy );

		public extern static sbyte* g_proxy_address_get_destination_hostname( GProxyAddress* proxy );
		public extern static ushort g_proxy_address_get_destination_port( GProxyAddress* proxy );
		public extern static sbyte* g_proxy_address_get_destination_protocol( GProxyAddress* proxy );
		public extern static sbyte* g_proxy_address_get_password( GProxyAddress* proxy );
		public extern static sbyte* g_proxy_address_get_protocol( GProxyAddress* proxy );
		[BackendHintReadNone]
		public extern static GType g_proxy_address_get_type();
		public extern static sbyte* g_proxy_address_get_uri( GProxyAddress* proxy );
		public extern static sbyte* g_proxy_address_get_username( GProxyAddress* proxy );
		public extern static GSocketAddress* g_proxy_address_new( GInetAddress* inetaddr, ushort port, sbyte* protocol, CUtf8String destHostname, ushort destPort, CUtf8String username, sbyte* password );

		[BackendHintReadNone]
		public extern static GType g_socket_address_enumerator_get_type();
		public extern static GSocketAddress* g_socket_address_enumerator_next( GSocketAddressEnumerator* enumerator, GCancellable* cancellable, GError** error );
		public extern static void g_socket_address_enumerator_next_async( GSocketAddressEnumerator* enumerator, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GSocketAddress* g_socket_address_enumerator_next_finish( GSocketAddressEnumerator* enumerator, GAsyncResult* result, GError** error );

		[BackendHintReadNone]
		public extern static GType g_proxy_address_enumerator_get_type();

		public extern static GProxyResolver* g_proxy_resolver_get_default();
		[BackendHintReadNone]
		public extern static GType g_proxy_resolver_get_type();
		public extern static Boolean32 g_proxy_resolver_is_supported( GProxyResolver* resolver );
		public extern static sbyte** g_proxy_resolver_lookup( GProxyResolver* resolver, sbyte* uri, GCancellable* cancellable, GError** error );
		public extern static void g_proxy_resolver_lookup_async( GProxyResolver* resolver, sbyte* uri, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static sbyte** g_proxy_resolver_lookup_finish( GProxyResolver* resolver, GAsyncResult* result, GError** error );

		public extern static void g_remote_action_group_activate_action_full( GRemoteActionGroup* remote, CUtf8String actionName, GVariant* parameter, GVariant* platformData );
		public extern static void g_remote_action_group_change_action_state_full( GRemoteActionGroup* remote, CUtf8String actionName, GVariant* value, GVariant* platformData );
		[BackendHintReadNone]
		public extern static GType g_remote_action_group_get_type();

		public extern static uint g_resolver_error_quark();
		public extern static void g_resolver_free_addresses( GList* addresses );
		public extern static void g_resolver_free_targets( GList* targets );
		public extern static GResolver* g_resolver_get_default();
		[BackendHintReadNone]
		public extern static GType g_resolver_get_type();
		public extern static sbyte* g_resolver_lookup_by_address( GResolver* resolver, GInetAddress* address, GCancellable* cancellable, GError** error );
		public extern static void g_resolver_lookup_by_address_async( GResolver* resolver, GInetAddress* address, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static sbyte* g_resolver_lookup_by_address_finish( GResolver* resolver, GAsyncResult* result, GError** error );
		public extern static GList* g_resolver_lookup_by_name( GResolver* resolver, CUtf8String hostname, GCancellable* cancellable, GError** error );
		public extern static void g_resolver_lookup_by_name_async( GResolver* resolver, CUtf8String hostname, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GList* g_resolver_lookup_by_name_finish( GResolver* resolver, GAsyncResult* result, GError** error );
		public extern static GList* g_resolver_lookup_by_name_with_flags( GResolver* resolver, CUtf8String hostname, GResolverNameLookupFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_resolver_lookup_by_name_with_flags_async( GResolver* resolver, CUtf8String hostname, GResolverNameLookupFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GList* g_resolver_lookup_by_name_with_flags_finish( GResolver* resolver, GAsyncResult* result, GError** error );
		public extern static GList* g_resolver_lookup_records( GResolver* resolver, CUtf8String rrname, GResolverRecordType recordType, GCancellable* cancellable, GError** error );
		public extern static void g_resolver_lookup_records_async( GResolver* resolver, CUtf8String rrname, GResolverRecordType recordType, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GList* g_resolver_lookup_records_finish( GResolver* resolver, GAsyncResult* result, GError** error );
		public extern static GList* g_resolver_lookup_service( GResolver* resolver, sbyte* service, sbyte* protocol, sbyte* domain, GCancellable* cancellable, GError** error );
		public extern static void g_resolver_lookup_service_async( GResolver* resolver, sbyte* service, sbyte* protocol, sbyte* domain, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GList* g_resolver_lookup_service_finish( GResolver* resolver, GAsyncResult* result, GError** error );
		public extern static void g_resolver_set_default( GResolver* resolver );

		public extern static sbyte** g_resource_enumerate_children( GResource* resource, sbyte* path, GResourceLookupFlags lookupFlags, GError** error );
		public extern static uint g_resource_error_quark();
		public extern static Boolean32 g_resource_get_info( GResource* resource, sbyte* path, GResourceLookupFlags lookupFlags, uintptr* size, uint* flags, GError** error );
		[BackendHintReadNone]
		public extern static GType g_resource_get_type();
		public extern static GResource* g_resource_load( CUtf8String filename, GError** error );
		public extern static GBytes* g_resource_lookup_data( GResource* resource, sbyte* path, GResourceLookupFlags lookupFlags, GError** error );
		public extern static GResource* g_resource_new_from_data( GBytes* data, GError** error );
		public extern static GInputStream* g_resource_open_stream( GResource* resource, sbyte* path, GResourceLookupFlags lookupFlags, GError** error );
		public extern static GResource* g_resource_ref( GResource* resource );
		public extern static void g_resource_unref( GResource* resource );
		public extern static sbyte** g_resources_enumerate_children( sbyte* path, GResourceLookupFlags lookupFlags, GError** error );
		public extern static Boolean32 g_resources_get_info( sbyte* path, GResourceLookupFlags lookupFlags, uintptr* size, uint* flags, GError** error );
		public extern static GBytes* g_resources_lookup_data( sbyte* path, GResourceLookupFlags lookupFlags, GError** error );
		public extern static GInputStream* g_resources_open_stream( sbyte* path, GResourceLookupFlags lookupFlags, GError** error );
		public extern static void g_resources_register( GResource* resource );
		public extern static void g_resources_unregister( GResource* resource );
		public extern static void g_static_resource_fini( GStaticResource* staticResource );
		public extern static GResource* g_static_resource_get_resource( GStaticResource* staticResource );
		public extern static void g_static_resource_init( GStaticResource* staticResource );

		public extern static Boolean32 g_seekable_can_seek( GSeekable* seekable );
		public extern static Boolean32 g_seekable_can_truncate( GSeekable* seekable );
		[BackendHintReadNone]
		public extern static GType g_seekable_get_type();
		public extern static Boolean32 g_seekable_seek( GSeekable* seekable, intptr offset, GSeekType type, GCancellable* cancellable, GError** error );
		public extern static intptr g_seekable_tell( GSeekable* seekable );
		public extern static Boolean32 g_seekable_truncate( GSeekable* seekable, intptr offset, GCancellable* cancellable, GError** error );

		public extern static sbyte* g_settings_schema_get_id( GSettingsSchema* schema );
		public extern static GSettingsSchemaKey* g_settings_schema_get_key( GSettingsSchema* schema, CUtf8String name );
		public extern static sbyte* g_settings_schema_get_path( GSettingsSchema* schema );
		[BackendHintReadNone]
		public extern static GType g_settings_schema_get_type();
		public extern static Boolean32 g_settings_schema_has_key( GSettingsSchema* schema, CUtf8String name );
		public extern static GVariant* g_settings_schema_key_get_default_value( GSettingsSchemaKey* key );
		public extern static sbyte* g_settings_schema_key_get_description( GSettingsSchemaKey* key );
		public extern static sbyte* g_settings_schema_key_get_name( GSettingsSchemaKey* key );
		public extern static GVariant* g_settings_schema_key_get_range( GSettingsSchemaKey* key );
		public extern static sbyte* g_settings_schema_key_get_summary( GSettingsSchemaKey* key );
		[BackendHintReadNone]
		public extern static GType g_settings_schema_key_get_type();
		public extern static GVariantType* g_settings_schema_key_get_value_type( GSettingsSchemaKey* key );
		public extern static Boolean32 g_settings_schema_key_range_check( GSettingsSchemaKey* key, GVariant* value );
		public extern static GSettingsSchemaKey* g_settings_schema_key_ref( GSettingsSchemaKey* key );
		public extern static void g_settings_schema_key_unref( GSettingsSchemaKey* key );
		public extern static sbyte** g_settings_schema_list_children( GSettingsSchema* schema );
		public extern static sbyte** g_settings_schema_list_keys( GSettingsSchema* schema );
		public extern static GSettingsSchema* g_settings_schema_ref( GSettingsSchema* schema );
		public extern static GSettingsSchemaSource* g_settings_schema_source_get_default();
		[BackendHintReadNone]
		public extern static GType g_settings_schema_source_get_type();
		public extern static void g_settings_schema_source_list_schemas( GSettingsSchemaSource* source, Boolean32 recursive, sbyte*** nonRelocatable, sbyte*** relocatable );
		public extern static GSettingsSchema* g_settings_schema_source_lookup( GSettingsSchemaSource* source, sbyte* schemaId, Boolean32 recursive );
		public extern static GSettingsSchemaSource* g_settings_schema_source_new_from_directory( sbyte* directory, GSettingsSchemaSource* parent, Boolean32 trusted, GError** error );
		public extern static GSettingsSchemaSource* g_settings_schema_source_ref( GSettingsSchemaSource* source );
		public extern static void g_settings_schema_source_unref( GSettingsSchemaSource* source );
		public extern static void g_settings_schema_unref( GSettingsSchema* schema );

		public extern static void g_settings_apply( GSettings* settings );
		public extern static void g_settings_bind( GSettings* settings, sbyte* key, void* object, sbyte* property, GSettingsBindFlags flags );
		public extern static void g_settings_bind_with_mapping( GSettings* settings, sbyte* key, void* object, sbyte* property, GSettingsBindFlags flags, Functors.Func<GValue*, GVariant*, void*, Boolean32> getMapping, Functors.Func<GValue*, GVariantType*, void*, GVariant*> setMapping, void* userData, Functors.Action<void*> destroy );
		public extern static void g_settings_bind_writable( GSettings* settings, sbyte* key, void* object, sbyte* property, Boolean32 inverted );
		public extern static GAction* g_settings_create_action( GSettings* settings, sbyte* key );
		public extern static void g_settings_delay( GSettings* settings );
		public extern static Boolean32 g_settings_get_boolean( GSettings* settings, sbyte* key );
		public extern static GSettings* g_settings_get_child( GSettings* settings, CUtf8String name );
		public extern static GVariant* g_settings_get_default_value( GSettings* settings, sbyte* key );
		public extern static double g_settings_get_double( GSettings* settings, sbyte* key );
		public extern static int g_settings_get_enum( GSettings* settings, sbyte* key );
		public extern static uint g_settings_get_flags( GSettings* settings, sbyte* key );
		public extern static Boolean32 g_settings_get_has_unapplied( GSettings* settings );
		public extern static int g_settings_get_int( GSettings* settings, sbyte* key );
		public extern static intptr g_settings_get_int64( GSettings* settings, sbyte* key );
		public extern static void* g_settings_get_mapped( GSettings* settings, sbyte* key, Functors.Func<GVariant*, void**, void*, Boolean32> mapping, void* userData );
		public extern static GVariant* g_settings_get_range( GSettings* settings, sbyte* key );
		public extern static sbyte* g_settings_get_string( GSettings* settings, sbyte* key );
		public extern static sbyte** g_settings_get_strv( GSettings* settings, sbyte* key );
		public extern static GType g_settings_get_type();
		public extern static uint g_settings_get_uint( GSettings* settings, sbyte* key );
		public extern static uintptr g_settings_get_uint64( GSettings* settings, sbyte* key );
		public extern static GVariant* g_settings_get_user_value( GSettings* settings, sbyte* key );
		public extern static GVariant* g_settings_get_value( GSettings* settings, sbyte* key );
		public extern static Boolean32 g_settings_is_writable( GSettings* settings, CUtf8String name );
		public extern static sbyte** g_settings_list_children( GSettings* settings );
		public extern static sbyte** g_settings_list_keys( GSettings* settings );
		public extern static sbyte** g_settings_list_relocatable_schemas();
		public extern static sbyte** g_settings_list_schemas();
		public extern static GSettings* g_settings_new( sbyte* schemaId );
		public extern static GSettings* g_settings_new_full( GSettingsSchema* schema, GSettingsBackend* backend, sbyte* path );
		public extern static GSettings* g_settings_new_with_backend( sbyte* schemaId, GSettingsBackend* backend );
		public extern static GSettings* g_settings_new_with_backend_and_path( sbyte* schemaId, GSettingsBackend* backend, sbyte* path );
		public extern static GSettings* g_settings_new_with_path( sbyte* schemaId, sbyte* path );
		public extern static Boolean32 g_settings_range_check( GSettings* settings, sbyte* key, GVariant* value );
		public extern static void g_settings_reset( GSettings* settings, sbyte* key );
		public extern static void g_settings_revert( GSettings* settings );
		public extern static Boolean32 g_settings_set_boolean( GSettings* settings, sbyte* key, Boolean32 value );
		public extern static Boolean32 g_settings_set_double( GSettings* settings, sbyte* key, double value );
		public extern static Boolean32 g_settings_set_enum( GSettings* settings, sbyte* key, int value );
		public extern static Boolean32 g_settings_set_flags( GSettings* settings, sbyte* key, uint value );
		public extern static Boolean32 g_settings_set_int( GSettings* settings, sbyte* key, int value );
		public extern static Boolean32 g_settings_set_int64( GSettings* settings, sbyte* key, intptr value );
		public extern static Boolean32 g_settings_set_string( GSettings* settings, sbyte* key, sbyte* value );
		public extern static Boolean32 g_settings_set_strv( GSettings* settings, sbyte* key, sbyte** value );
		public extern static Boolean32 g_settings_set_uint( GSettings* settings, sbyte* key, uint value );
		public extern static Boolean32 g_settings_set_uint64( GSettings* settings, sbyte* key, uintptr value );
		public extern static Boolean32 g_settings_set_value( GSettings* settings, sbyte* key, GVariant* value );
		public extern static void g_settings_sync();
		public extern static void g_settings_unbind( void* object, sbyte* property );

		[BackendHintReadNone]
		public extern static GType g_simple_action_get_type();
		public extern static GSimpleAction* g_simple_action_new( CUtf8String name, GVariantType* parameterType );
		public extern static GSimpleAction* g_simple_action_new_stateful( CUtf8String name, GVariantType* parameterType, GVariant* state );
		public extern static void g_simple_action_set_enabled( GSimpleAction* simple, Boolean32 enabled );
		public extern static void g_simple_action_set_state( GSimpleAction* simple, GVariant* value );
		public extern static void g_simple_action_set_state_hint( GSimpleAction* simple, GVariant* stateHint );

		public extern static void g_simple_action_group_add_entries( GSimpleActionGroup* simple, GActionEntry* entries, int nEntries, void* userData );
		[BackendHintReadNone]
		public extern static GType g_simple_action_group_get_type();
		public extern static void g_simple_action_group_insert( GSimpleActionGroup* simple, GAction* action );
		public extern static GAction* g_simple_action_group_lookup( GSimpleActionGroup* simple, CUtf8String actionName );
		public extern static GSimpleActionGroup* g_simple_action_group_new();
		public extern static void g_simple_action_group_remove( GSimpleActionGroup* simple, CUtf8String actionName );

		public extern static void g_simple_async_report_gerror_in_idle( GObject* object, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData, GError* error );
		public extern static void g_simple_async_report_take_gerror_in_idle( GObject* object, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData, GError* error );
		public extern static void g_simple_async_result_complete( GSimpleAsyncResult* simple );
		public extern static void g_simple_async_result_complete_in_idle( GSimpleAsyncResult* simple );
		public extern static Boolean32 g_simple_async_result_get_op_res_gboolean( GSimpleAsyncResult* simple );
		public extern static void* g_simple_async_result_get_op_res_gpointer( GSimpleAsyncResult* simple );
		public extern static intptr g_simple_async_result_get_op_res_gssize( GSimpleAsyncResult* simple );
		public extern static void* g_simple_async_result_get_source_tag( GSimpleAsyncResult* simple );
		[BackendHintReadNone]
		public extern static GType g_simple_async_result_get_type();
		public extern static Boolean32 g_simple_async_result_is_valid( GAsyncResult* result, GObject* source, void* sourceTag );
		public extern static GSimpleAsyncResult* g_simple_async_result_new( GObject* sourceObject, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData, void* sourceTag );
		public extern static GSimpleAsyncResult* g_simple_async_result_new_from_error( GObject* sourceObject, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData, GError* error );
		public extern static GSimpleAsyncResult* g_simple_async_result_new_take_error( GObject* sourceObject, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData, GError* error );
		public extern static Boolean32 g_simple_async_result_propagate_error( GSimpleAsyncResult* simple, GError** dest );
		public extern static void g_simple_async_result_run_in_thread( GSimpleAsyncResult* simple, Functors.Action<GSimpleAsyncResult*, GObject*, GCancellable*> func, int ioPriority, GCancellable* cancellable );
		public extern static void g_simple_async_result_set_check_cancellable( GSimpleAsyncResult* simple, GCancellable* checkCancellable );
		public extern static void g_simple_async_result_set_from_error( GSimpleAsyncResult* simple, GError* error );
		public extern static void g_simple_async_result_set_handle_cancellation( GSimpleAsyncResult* simple, Boolean32 handleCancellation );
		public extern static void g_simple_async_result_set_op_res_gboolean( GSimpleAsyncResult* simple, Boolean32 opRes );
		public extern static void g_simple_async_result_set_op_res_gpointer( GSimpleAsyncResult* simple, void* opRes, Functors.Action<void*> destroyOpRes );
		public extern static void g_simple_async_result_set_op_res_gssize( GSimpleAsyncResult* simple, intptr opRes );
		public extern static void g_simple_async_result_take_error( GSimpleAsyncResult* simple, GError* error );

		[BackendHintReadNone]
		public extern static GType g_simple_io_stream_get_type();
		public extern static GIOStream* g_simple_io_stream_new( GInputStream* inputStream, GOutputStream* outputStream );

		public extern static GType g_simple_permission_get_type();
		public extern static GPermission* g_simple_permission_new( Boolean32 allowed );

		[BackendHintReadNone]
		public extern static GType g_simple_proxy_resolver_get_type();
		public extern static GProxyResolver* g_simple_proxy_resolver_new( sbyte* defaultProxy, sbyte** ignoreHosts );
		public extern static void g_simple_proxy_resolver_set_default_proxy( GSimpleProxyResolver* resolver, sbyte* defaultProxy );
		public extern static void g_simple_proxy_resolver_set_ignore_hosts( GSimpleProxyResolver* resolver, sbyte** ignoreHosts );
		public extern static void g_simple_proxy_resolver_set_uri_proxy( GSimpleProxyResolver* resolver, sbyte* uriScheme, sbyte* proxy );

		public extern static GSocket* g_socket_accept( GSocket* socket, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_socket_bind( GSocket* socket, GSocketAddress* address, Boolean32 allowReuse, GError** error );
		public extern static Boolean32 g_socket_check_connect_result( GSocket* socket, GError** error );
		public extern static Boolean32 g_socket_close( GSocket* socket, GError** error );
		public extern static GIOCondition g_socket_condition_check( GSocket* socket, GIOCondition condition );
		public extern static Boolean32 g_socket_condition_timed_wait( GSocket* socket, GIOCondition condition, intptr timeoutUs, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_socket_condition_wait( GSocket* socket, GIOCondition condition, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_socket_connect( GSocket* socket, GSocketAddress* address, GCancellable* cancellable, GError** error );
		public extern static GSource* g_socket_create_source( GSocket* socket, GIOCondition condition, GCancellable* cancellable );
		public extern static intptr g_socket_get_available_bytes( GSocket* socket );
		public extern static Boolean32 g_socket_get_blocking( GSocket* socket );
		public extern static Boolean32 g_socket_get_broadcast( GSocket* socket );
		public extern static GCredentials* g_socket_get_credentials( GSocket* socket, GError** error );
		public extern static GSocketFamily g_socket_get_family( GSocket* socket );
		public extern static int g_socket_get_fd( GSocket* socket );
		public extern static Boolean32 g_socket_get_keepalive( GSocket* socket );
		public extern static int g_socket_get_listen_backlog( GSocket* socket );
		public extern static GSocketAddress* g_socket_get_local_address( GSocket* socket, GError** error );
		public extern static Boolean32 g_socket_get_multicast_loopback( GSocket* socket );
		public extern static uint g_socket_get_multicast_ttl( GSocket* socket );
		public extern static Boolean32 g_socket_get_option( GSocket* socket, int level, int optname, int* value, GError** error );
		public extern static GSocketProtocol g_socket_get_protocol( GSocket* socket );
		public extern static GSocketAddress* g_socket_get_remote_address( GSocket* socket, GError** error );
		public extern static GSocketType g_socket_get_socket_type( GSocket* socket );
		public extern static uint g_socket_get_timeout( GSocket* socket );
		public extern static uint g_socket_get_ttl( GSocket* socket );
		[BackendHintReadNone]
		public extern static GType g_socket_get_type();
		public extern static Boolean32 g_socket_is_closed( GSocket* socket );
		public extern static Boolean32 g_socket_is_connected( GSocket* socket );
		public extern static Boolean32 g_socket_join_multicast_group( GSocket* socket, GInetAddress* group, Boolean32 sourceSpecific, sbyte* iface, GError** error );
		public extern static Boolean32 g_socket_join_multicast_group_ssm( GSocket* socket, GInetAddress* group, GInetAddress* sourceSpecific, sbyte* iface, GError** error );
		public extern static Boolean32 g_socket_leave_multicast_group( GSocket* socket, GInetAddress* group, Boolean32 sourceSpecific, sbyte* iface, GError** error );
		public extern static Boolean32 g_socket_leave_multicast_group_ssm( GSocket* socket, GInetAddress* group, GInetAddress* sourceSpecific, sbyte* iface, GError** error );
		public extern static Boolean32 g_socket_listen( GSocket* socket, GError** error );
		public extern static GSocket* g_socket_new( GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError** error );
		public extern static GSocket* g_socket_new_from_fd( int fd, GError** error );
		public extern static intptr g_socket_receive( GSocket* socket, sbyte* buffer, uintptr size, GCancellable* cancellable, GError** error );
		public extern static intptr g_socket_receive_from( GSocket* socket, GSocketAddress** address, sbyte* buffer, uintptr size, GCancellable* cancellable, GError** error );
		public extern static intptr g_socket_receive_message( GSocket* socket, GSocketAddress** address, GInputVector* vectors, int numVectors, GSocketControlMessage*** messages, int* numMessages, int* flags, GCancellable* cancellable, GError** error );
		public extern static int g_socket_receive_messages( GSocket* socket, GInputMessage* messages, uint numMessages, int flags, GCancellable* cancellable, GError** error );
		public extern static intptr g_socket_receive_with_blocking( GSocket* socket, sbyte* buffer, uintptr size, Boolean32 blocking, GCancellable* cancellable, GError** error );
		public extern static intptr g_socket_send( GSocket* socket, sbyte* buffer, uintptr size, GCancellable* cancellable, GError** error );
		public extern static intptr g_socket_send_message( GSocket* socket, GSocketAddress* address, GOutputVector* vectors, int numVectors, GSocketControlMessage** messages, int numMessages, int flags, GCancellable* cancellable, GError** error );
		public extern static GPollableReturn g_socket_send_message_with_timeout( GSocket* socket, GSocketAddress* address, GOutputVector* vectors, int numVectors, GSocketControlMessage** messages, int numMessages, int flags, intptr timeoutUs, uintptr* bytesWritten, GCancellable* cancellable, GError** error );
		public extern static int g_socket_send_messages( GSocket* socket, GOutputMessage* messages, uint numMessages, int flags, GCancellable* cancellable, GError** error );
		public extern static intptr g_socket_send_to( GSocket* socket, GSocketAddress* address, sbyte* buffer, uintptr size, GCancellable* cancellable, GError** error );
		public extern static intptr g_socket_send_with_blocking( GSocket* socket, sbyte* buffer, uintptr size, Boolean32 blocking, GCancellable* cancellable, GError** error );
		public extern static void g_socket_set_blocking( GSocket* socket, Boolean32 blocking );
		public extern static void g_socket_set_broadcast( GSocket* socket, Boolean32 broadcast );
		public extern static void g_socket_set_keepalive( GSocket* socket, Boolean32 keepalive );
		public extern static void g_socket_set_listen_backlog( GSocket* socket, int backlog );
		public extern static void g_socket_set_multicast_loopback( GSocket* socket, Boolean32 loopback );
		public extern static void g_socket_set_multicast_ttl( GSocket* socket, uint ttl );
		public extern static Boolean32 g_socket_set_option( GSocket* socket, int level, int optname, int value, GError** error );
		public extern static void g_socket_set_timeout( GSocket* socket, uint timeout );
		public extern static void g_socket_set_ttl( GSocket* socket, uint ttl );
		public extern static Boolean32 g_socket_shutdown( GSocket* socket, Boolean32 shutdownRead, Boolean32 shutdownWrite, GError** error );
		public extern static Boolean32 g_socket_speaks_ipv4( GSocket* socket );

		public extern static void g_socket_client_add_application_proxy( GSocketClient* client, sbyte* protocol );
		public extern static GSocketConnection* g_socket_client_connect( GSocketClient* client, GSocketConnectable* connectable, GCancellable* cancellable, GError** error );
		public extern static void g_socket_client_connect_async( GSocketClient* client, GSocketConnectable* connectable, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GSocketConnection* g_socket_client_connect_finish( GSocketClient* client, GAsyncResult* result, GError** error );
		public extern static GSocketConnection* g_socket_client_connect_to_host( GSocketClient* client, sbyte* hostAndPort, ushort defaultPort, GCancellable* cancellable, GError** error );
		public extern static void g_socket_client_connect_to_host_async( GSocketClient* client, sbyte* hostAndPort, ushort defaultPort, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GSocketConnection* g_socket_client_connect_to_host_finish( GSocketClient* client, GAsyncResult* result, GError** error );
		public extern static GSocketConnection* g_socket_client_connect_to_service( GSocketClient* client, sbyte* domain, sbyte* service, GCancellable* cancellable, GError** error );
		public extern static void g_socket_client_connect_to_service_async( GSocketClient* client, sbyte* domain, sbyte* service, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GSocketConnection* g_socket_client_connect_to_service_finish( GSocketClient* client, GAsyncResult* result, GError** error );
		public extern static GSocketConnection* g_socket_client_connect_to_uri( GSocketClient* client, sbyte* uri, ushort defaultPort, GCancellable* cancellable, GError** error );
		public extern static void g_socket_client_connect_to_uri_async( GSocketClient* client, sbyte* uri, ushort defaultPort, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GSocketConnection* g_socket_client_connect_to_uri_finish( GSocketClient* client, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_socket_client_get_enable_proxy( GSocketClient* client );
		public extern static GSocketFamily g_socket_client_get_family( GSocketClient* client );
		public extern static GSocketAddress* g_socket_client_get_local_address( GSocketClient* client );
		public extern static GSocketProtocol g_socket_client_get_protocol( GSocketClient* client );
		public extern static GProxyResolver* g_socket_client_get_proxy_resolver( GSocketClient* client );
		public extern static GSocketType g_socket_client_get_socket_type( GSocketClient* client );
		public extern static uint g_socket_client_get_timeout( GSocketClient* client );
		public extern static Boolean32 g_socket_client_get_tls( GSocketClient* client );
		public extern static GTlsCertificateFlags g_socket_client_get_tls_validation_flags( GSocketClient* client );
		[BackendHintReadNone]
		public extern static GType g_socket_client_get_type();
		public extern static GSocketClient* g_socket_client_new();
		public extern static void g_socket_client_set_enable_proxy( GSocketClient* client, Boolean32 enable );
		public extern static void g_socket_client_set_family( GSocketClient* client, GSocketFamily family );
		public extern static void g_socket_client_set_local_address( GSocketClient* client, GSocketAddress* address );
		public extern static void g_socket_client_set_protocol( GSocketClient* client, GSocketProtocol protocol );
		public extern static void g_socket_client_set_proxy_resolver( GSocketClient* client, GProxyResolver* proxyResolver );
		public extern static void g_socket_client_set_socket_type( GSocketClient* client, GSocketType type );
		public extern static void g_socket_client_set_timeout( GSocketClient* client, uint timeout );
		public extern static void g_socket_client_set_tls( GSocketClient* client, Boolean32 tls );
		public extern static void g_socket_client_set_tls_validation_flags( GSocketClient* client, GTlsCertificateFlags flags );

		public extern static GSocketAddressEnumerator* g_socket_connectable_enumerate( GSocketConnectable* connectable );
		[BackendHintReadNone]
		public extern static GType g_socket_connectable_get_type();
		public extern static GSocketAddressEnumerator* g_socket_connectable_proxy_enumerate( GSocketConnectable* connectable );
		public extern static sbyte* g_socket_connectable_to_string( GSocketConnectable* connectable );

		public extern static Boolean32 g_socket_connection_connect( GSocketConnection* connection, GSocketAddress* address, GCancellable* cancellable, GError** error );
		public extern static void g_socket_connection_connect_async( GSocketConnection* connection, GSocketAddress* address, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_socket_connection_connect_finish( GSocketConnection* connection, GAsyncResult* result, GError** error );
		public extern static GSocketConnection* g_socket_connection_factory_create_connection( GSocket* socket );
		public extern static uintptr g_socket_connection_factory_lookup_type( GSocketFamily family, GSocketType type, int protocolId );
		public extern static void g_socket_connection_factory_register_type( uintptr gType, GSocketFamily family, GSocketType type, int protocol );
		public extern static GSocketAddress* g_socket_connection_get_local_address( GSocketConnection* connection, GError** error );
		public extern static GSocketAddress* g_socket_connection_get_remote_address( GSocketConnection* connection, GError** error );
		public extern static GSocket* g_socket_connection_get_socket( GSocketConnection* connection );
		[BackendHintReadNone]
		public extern static GType g_socket_connection_get_type();
		public extern static Boolean32 g_socket_connection_is_connected( GSocketConnection* connection );

		public extern static GSocketControlMessage* g_socket_control_message_deserialize( int level, int type, uintptr size, void* data );
		public extern static int g_socket_control_message_get_level( GSocketControlMessage* message );
		public extern static int g_socket_control_message_get_msg_type( GSocketControlMessage* message );
		public extern static uintptr g_socket_control_message_get_size( GSocketControlMessage* message );
		[BackendHintReadNone]
		public extern static GType g_socket_control_message_get_type();
		public extern static void g_socket_control_message_serialize( GSocketControlMessage* message, void* data );

		public extern static GSocketConnection* g_socket_listener_accept( GSocketListener* listener, GObject** sourceObject, GCancellable* cancellable, GError** error );
		public extern static void g_socket_listener_accept_async( GSocketListener* listener, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GSocketConnection* g_socket_listener_accept_finish( GSocketListener* listener, GAsyncResult* result, GObject** sourceObject, GError** error );
		public extern static GSocket* g_socket_listener_accept_socket( GSocketListener* listener, GObject** sourceObject, GCancellable* cancellable, GError** error );
		public extern static void g_socket_listener_accept_socket_async( GSocketListener* listener, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GSocket* g_socket_listener_accept_socket_finish( GSocketListener* listener, GAsyncResult* result, GObject** sourceObject, GError** error );
		public extern static Boolean32 g_socket_listener_add_address( GSocketListener* listener, GSocketAddress* address, GSocketType type, GSocketProtocol protocol, GObject* sourceObject, GSocketAddress** effectiveAddress, GError** error );
		public extern static ushort g_socket_listener_add_any_inet_port( GSocketListener* listener, GObject* sourceObject, GError** error );
		public extern static Boolean32 g_socket_listener_add_inet_port( GSocketListener* listener, ushort port, GObject* sourceObject, GError** error );
		public extern static Boolean32 g_socket_listener_add_socket( GSocketListener* listener, GSocket* socket, GObject* sourceObject, GError** error );
		public extern static void g_socket_listener_close( GSocketListener* listener );
		[BackendHintReadNone]
		public extern static GType g_socket_listener_get_type();
		public extern static GSocketListener* g_socket_listener_new();
		public extern static void g_socket_listener_set_backlog( GSocketListener* listener, int listenBacklog );

		public extern static GType g_socket_service_get_type();
		public extern static Boolean32 g_socket_service_is_active( GSocketService* service );
		public extern static GSocketService* g_socket_service_new();
		public extern static void g_socket_service_start( GSocketService* service );
		public extern static void g_socket_service_stop( GSocketService* service );

		public extern static GSrvTarget* g_srv_target_copy( GSrvTarget* target );
		public extern static void g_srv_target_free( GSrvTarget* target );
		public extern static sbyte* g_srv_target_get_hostname( GSrvTarget* target );
		public extern static ushort g_srv_target_get_port( GSrvTarget* target );
		public extern static ushort g_srv_target_get_priority( GSrvTarget* target );
		[BackendHintReadNone]
		public extern static GType g_srv_target_get_type();
		public extern static ushort g_srv_target_get_weight( GSrvTarget* target );
		public extern static GList* g_srv_target_list_sort( GList* targets );
		public extern static GSrvTarget* g_srv_target_new( CUtf8String hostname, ushort port, ushort priority, ushort weight );

		public extern static Boolean32 g_subprocess_communicate( GSubprocess* subprocess, GBytes* stdinBuf, GCancellable* cancellable, GBytes** stdoutBuf, GBytes** stderrBuf, GError** error );
		public extern static void g_subprocess_communicate_async( GSubprocess* subprocess, GBytes* stdinBuf, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_subprocess_communicate_finish( GSubprocess* subprocess, GAsyncResult* result, GBytes** stdoutBuf, GBytes** stderrBuf, GError** error );
		public extern static Boolean32 g_subprocess_communicate_utf8( GSubprocess* subprocess, sbyte* stdinBuf, GCancellable* cancellable, sbyte** stdoutBuf, sbyte** stderrBuf, GError** error );
		public extern static void g_subprocess_communicate_utf8_async( GSubprocess* subprocess, sbyte* stdinBuf, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_subprocess_communicate_utf8_finish( GSubprocess* subprocess, GAsyncResult* result, sbyte** stdoutBuf, sbyte** stderrBuf, GError** error );
		public extern static void g_subprocess_force_exit( GSubprocess* subprocess );
		public extern static int g_subprocess_get_exit_status( GSubprocess* subprocess );
		public extern static sbyte* g_subprocess_get_identifier( GSubprocess* subprocess );
		public extern static Boolean32 g_subprocess_get_if_exited( GSubprocess* subprocess );
		public extern static Boolean32 g_subprocess_get_if_signaled( GSubprocess* subprocess );
		public extern static int g_subprocess_get_status( GSubprocess* subprocess );
		public extern static GInputStream* g_subprocess_get_stderr_pipe( GSubprocess* subprocess );
		public extern static GOutputStream* g_subprocess_get_stdin_pipe( GSubprocess* subprocess );
		public extern static GInputStream* g_subprocess_get_stdout_pipe( GSubprocess* subprocess );
		public extern static Boolean32 g_subprocess_get_successful( GSubprocess* subprocess );
		public extern static int g_subprocess_get_term_sig( GSubprocess* subprocess );
		[BackendHintReadNone]
		public extern static GType g_subprocess_get_type();
		public extern static GSubprocess* g_subprocess_newv( sbyte** argv, GSubprocessFlags flags, GError** error );
		public extern static void g_subprocess_send_signal( GSubprocess* subprocess, int signalNum );
		public extern static Boolean32 g_subprocess_wait( GSubprocess* subprocess, GCancellable* cancellable, GError** error );
		public extern static void g_subprocess_wait_async( GSubprocess* subprocess, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_subprocess_wait_check( GSubprocess* subprocess, GCancellable* cancellable, GError** error );
		public extern static void g_subprocess_wait_check_async( GSubprocess* subprocess, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_subprocess_wait_check_finish( GSubprocess* subprocess, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_subprocess_wait_finish( GSubprocess* subprocess, GAsyncResult* result, GError** error );

		public extern static void g_subprocess_launcher_close( GSubprocessLauncher* self );
		[BackendHintReadNone]
		public extern static GType g_subprocess_launcher_get_type();
		public extern static sbyte* g_subprocess_launcher_getenv( GSubprocessLauncher* self, sbyte* variable );
		public extern static GSubprocessLauncher* g_subprocess_launcher_new( GSubprocessFlags flags );
		public extern static void g_subprocess_launcher_set_child_setup( GSubprocessLauncher* self, Functors.Action<void*> childSetup, void* userData, Functors.Action<void*> destroyNotify );
		public extern static void g_subprocess_launcher_set_cwd( GSubprocessLauncher* self, sbyte* cwd );
		public extern static void g_subprocess_launcher_set_environ( GSubprocessLauncher* self, sbyte** env );
		public extern static void g_subprocess_launcher_set_flags( GSubprocessLauncher* self, GSubprocessFlags flags );
		public extern static void g_subprocess_launcher_set_stderr_file_path( GSubprocessLauncher* self, sbyte* path );
		public extern static void g_subprocess_launcher_set_stdin_file_path( GSubprocessLauncher* self, sbyte* path );
		public extern static void g_subprocess_launcher_set_stdout_file_path( GSubprocessLauncher* self, sbyte* path );
		public extern static void g_subprocess_launcher_setenv( GSubprocessLauncher* self, sbyte* variable, sbyte* value, Boolean32 overwrite );
		public extern static GSubprocess* g_subprocess_launcher_spawnv( GSubprocessLauncher* self, sbyte** argv, GError** error );
		public extern static void g_subprocess_launcher_take_fd( GSubprocessLauncher* self, int sourceFd, int targetFd );
		public extern static void g_subprocess_launcher_take_stderr_fd( GSubprocessLauncher* self, int fd );
		public extern static void g_subprocess_launcher_take_stdin_fd( GSubprocessLauncher* self, int fd );
		public extern static void g_subprocess_launcher_take_stdout_fd( GSubprocessLauncher* self, int fd );
		public extern static void g_subprocess_launcher_unsetenv( GSubprocessLauncher* self, sbyte* variable );

		public extern static void g_task_attach_source( GTask* task, GSource* source, Functors.Func<void*, Boolean32> callback );
		public extern static GCancellable* g_task_get_cancellable( GTask* task );
		public extern static Boolean32 g_task_get_check_cancellable( GTask* task );
		public extern static Boolean32 g_task_get_completed( GTask* task );
		public extern static GMainContext* g_task_get_context( GTask* task );
		public extern static sbyte* g_task_get_name( GTask* task );
		public extern static int g_task_get_priority( GTask* task );
		public extern static Boolean32 g_task_get_return_on_cancel( GTask* task );
		public extern static void* g_task_get_source_object( GTask* task );
		public extern static void* g_task_get_source_tag( GTask* task );
		public extern static void* g_task_get_task_data( GTask* task );
		[BackendHintReadNone]
		public extern static GType g_task_get_type();
		public extern static Boolean32 g_task_had_error( GTask* task );
		public extern static Boolean32 g_task_is_valid( void* result, void* sourceObject );
		public extern static GTask* g_task_new( void* sourceObject, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* callbackData );
		public extern static Boolean32 g_task_propagate_boolean( GTask* task, GError** error );
		public extern static intptr g_task_propagate_int( GTask* task, GError** error );
		public extern static void* g_task_propagate_pointer( GTask* task, GError** error );
		public extern static Boolean32 g_task_propagate_value( GTask* task, GValue* value, GError** error );
		public extern static void g_task_report_error( void* sourceObject, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* callbackData, void* sourceTag, GError* error );
		public extern static void g_task_return_boolean( GTask* task, Boolean32 result );
		public extern static void g_task_return_error( GTask* task, GError* error );
		public extern static Boolean32 g_task_return_error_if_cancelled( GTask* task );
		public extern static void g_task_return_int( GTask* task, intptr result );
		public extern static void g_task_return_pointer( GTask* task, void* result, Functors.Action<void*> resultDestroy );
		public extern static void g_task_return_value( GTask* task, GValue* result );
		public extern static void g_task_run_in_thread( GTask* task, Functors.Action<GTask*, void*, void*, GCancellable*> taskFunc );
		public extern static void g_task_run_in_thread_sync( GTask* task, Functors.Action<GTask*, void*, void*, GCancellable*> taskFunc );
		public extern static void g_task_set_check_cancellable( GTask* task, Boolean32 checkCancellable );
		public extern static void g_task_set_name( GTask* task, CUtf8String name );
		public extern static void g_task_set_priority( GTask* task, int priority );
		public extern static Boolean32 g_task_set_return_on_cancel( GTask* task, Boolean32 returnOnCancel );
		public extern static void g_task_set_source_tag( GTask* task, void* sourceTag );
		public extern static void g_task_set_task_data( GTask* task, void* taskData, Functors.Action<void*> taskDataDestroy );

		public extern static Boolean32 g_tcp_connection_get_graceful_disconnect( GTcpConnection* connection );
		[BackendHintReadNone]
		public extern static GType g_tcp_connection_get_type();
		public extern static void g_tcp_connection_set_graceful_disconnect( GTcpConnection* connection, Boolean32 gracefulDisconnect );

		public extern static GIOStream* g_tcp_wrapper_connection_get_base_io_stream( GTcpWrapperConnection* conn );
		[BackendHintReadNone]
		public extern static GType g_tcp_wrapper_connection_get_type();
		public extern static GSocketConnection* g_tcp_wrapper_connection_new( GIOStream* baseIoStream, GSocket* socket );

		public extern static void g_test_dbus_add_service_dir( GTestDBus* self, sbyte* path );
		public extern static void g_test_dbus_down( GTestDBus* self );
		public extern static sbyte* g_test_dbus_get_bus_address( GTestDBus* self );
		public extern static GTestDBusFlags g_test_dbus_get_flags( GTestDBus* self );
		[BackendHintReadNone]
		public extern static GType g_test_dbus_get_type();
		public extern static GTestDBus* g_test_dbus_new( GTestDBusFlags flags );
		public extern static void g_test_dbus_stop( GTestDBus* self );
		public extern static void g_test_dbus_unset();
		public extern static void g_test_dbus_up( GTestDBus* self );

		public extern static void g_themed_icon_append_name( GThemedIcon* icon, CUtf8String iconname );
		public extern static sbyte** g_themed_icon_get_names( GThemedIcon* icon );
		[BackendHintReadNone]
		public extern static GType g_themed_icon_get_type();
		public extern static GIcon* g_themed_icon_new( CUtf8String iconname );
		public extern static GIcon* g_themed_icon_new_from_names( sbyte** iconnames, int len );
		public extern static GIcon* g_themed_icon_new_with_default_fallbacks( CUtf8String iconname );
		public extern static void g_themed_icon_prepend_name( GThemedIcon* icon, CUtf8String iconname );

		public extern static GType g_threaded_socket_service_get_type();
		public extern static GSocketService* g_threaded_socket_service_new( int maxThreads );

		public extern static uintptr g_tls_backend_get_certificate_type( GTlsBackend* backend );
		public extern static uintptr g_tls_backend_get_client_connection_type( GTlsBackend* backend );
		public extern static GTlsBackend* g_tls_backend_get_default();
		public extern static GTlsDatabase* g_tls_backend_get_default_database( GTlsBackend* backend );
		public extern static uintptr g_tls_backend_get_dtls_client_connection_type( GTlsBackend* backend );
		public extern static uintptr g_tls_backend_get_dtls_server_connection_type( GTlsBackend* backend );
		public extern static uintptr g_tls_backend_get_file_database_type( GTlsBackend* backend );
		public extern static uintptr g_tls_backend_get_server_connection_type( GTlsBackend* backend );
		[BackendHintReadNone]
		public extern static GType g_tls_backend_get_type();
		public extern static void g_tls_backend_set_default_database( GTlsBackend* backend, GTlsDatabase* database );
		public extern static Boolean32 g_tls_backend_supports_dtls( GTlsBackend* backend );
		public extern static Boolean32 g_tls_backend_supports_tls( GTlsBackend* backend );

		public extern static GPtrArray* g_tls_certificate_get_dns_names( GTlsCertificate* cert );
		public extern static GPtrArray* g_tls_certificate_get_ip_addresses( GTlsCertificate* cert );
		public extern static GTlsCertificate* g_tls_certificate_get_issuer( GTlsCertificate* cert );
		public extern static sbyte* g_tls_certificate_get_issuer_name( GTlsCertificate* cert );
		public extern static GDateTime* g_tls_certificate_get_not_valid_after( GTlsCertificate* cert );
		public extern static GDateTime* g_tls_certificate_get_not_valid_before( GTlsCertificate* cert );
		public extern static sbyte* g_tls_certificate_get_subject_name( GTlsCertificate* cert );
		[BackendHintReadNone]
		public extern static GType g_tls_certificate_get_type();
		public extern static Boolean32 g_tls_certificate_is_same( GTlsCertificate* certOne, GTlsCertificate* certTwo );
		public extern static GList* g_tls_certificate_list_new_from_file( sbyte* file, GError** error );
		public extern static GTlsCertificate* g_tls_certificate_new_from_file( sbyte* file, GError** error );
		public extern static GTlsCertificate* g_tls_certificate_new_from_file_with_password( sbyte* file, sbyte* password, GError** error );
		public extern static GTlsCertificate* g_tls_certificate_new_from_files( sbyte* certFile, sbyte* keyFile, GError** error );
		public extern static GTlsCertificate* g_tls_certificate_new_from_pem( sbyte* data, intptr length, GError** error );
		public extern static GTlsCertificate* g_tls_certificate_new_from_pkcs11_uris( sbyte* pkcs11Uri, sbyte* privateKeyPkcs11Uri, GError** error );
		public extern static GTlsCertificate* g_tls_certificate_new_from_pkcs12( byte* data, uintptr length, sbyte* password, GError** error );
		public extern static GTlsCertificateFlags g_tls_certificate_verify( GTlsCertificate* cert, GSocketConnectable* identity, GTlsCertificate* trustedCa );

		public extern static uint g_tls_channel_binding_error_quark();
		public extern static Boolean32 g_tls_connection_emit_accept_certificate( GTlsConnection* conn, GTlsCertificate* peerCert, GTlsCertificateFlags errors );
		public extern static GTlsCertificate* g_tls_connection_get_certificate( GTlsConnection* conn );
		public extern static Boolean32 g_tls_connection_get_channel_binding_data( GTlsConnection* conn, GTlsChannelBindingType type, GByteArray* data, GError** error );
		public extern static sbyte* g_tls_connection_get_ciphersuite_name( GTlsConnection* conn );
		public extern static GTlsDatabase* g_tls_connection_get_database( GTlsConnection* conn );
		public extern static GTlsInteraction* g_tls_connection_get_interaction( GTlsConnection* conn );
		public extern static sbyte* g_tls_connection_get_negotiated_protocol( GTlsConnection* conn );
		public extern static GTlsCertificate* g_tls_connection_get_peer_certificate( GTlsConnection* conn );
		public extern static GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors( GTlsConnection* conn );
		public extern static GTlsProtocolVersion g_tls_connection_get_protocol_version( GTlsConnection* conn );
		public extern static GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode( GTlsConnection* conn );
		public extern static Boolean32 g_tls_connection_get_require_close_notify( GTlsConnection* conn );
		[BackendHintReadNone]
		public extern static GType g_tls_connection_get_type();
		public extern static Boolean32 g_tls_connection_get_use_system_certdb( GTlsConnection* conn );
		public extern static Boolean32 g_tls_connection_handshake( GTlsConnection* conn, GCancellable* cancellable, GError** error );
		public extern static void g_tls_connection_handshake_async( GTlsConnection* conn, int ioPriority, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_tls_connection_handshake_finish( GTlsConnection* conn, GAsyncResult* result, GError** error );
		public extern static void g_tls_connection_set_advertised_protocols( GTlsConnection* conn, sbyte** protocols );
		public extern static void g_tls_connection_set_certificate( GTlsConnection* conn, GTlsCertificate* certificate );
		public extern static void g_tls_connection_set_database( GTlsConnection* conn, GTlsDatabase* database );
		public extern static void g_tls_connection_set_interaction( GTlsConnection* conn, GTlsInteraction* interaction );
		public extern static void g_tls_connection_set_rehandshake_mode( GTlsConnection* conn, GTlsRehandshakeMode mode );
		public extern static void g_tls_connection_set_require_close_notify( GTlsConnection* conn, Boolean32 requireCloseNotify );
		public extern static void g_tls_connection_set_use_system_certdb( GTlsConnection* conn, Boolean32 useSystemCertdb );
		public extern static uint g_tls_error_quark();

		public extern static void g_tls_client_connection_copy_session_state( GTlsClientConnection* conn, GTlsClientConnection* source );
		public extern static GList* g_tls_client_connection_get_accepted_cas( GTlsClientConnection* conn );
		public extern static GSocketConnectable* g_tls_client_connection_get_server_identity( GTlsClientConnection* conn );
		[BackendHintReadNone]
		public extern static GType g_tls_client_connection_get_type();
		public extern static Boolean32 g_tls_client_connection_get_use_ssl3( GTlsClientConnection* conn );
		public extern static GTlsCertificateFlags g_tls_client_connection_get_validation_flags( GTlsClientConnection* conn );
		public extern static GIOStream* g_tls_client_connection_new( GIOStream* baseIoStream, GSocketConnectable* serverIdentity, GError** error );
		public extern static void g_tls_client_connection_set_server_identity( GTlsClientConnection* conn, GSocketConnectable* identity );
		public extern static void g_tls_client_connection_set_use_ssl3( GTlsClientConnection* conn, Boolean32 useSsl3 );
		public extern static void g_tls_client_connection_set_validation_flags( GTlsClientConnection* conn, GTlsCertificateFlags flags );

		public extern static sbyte* g_tls_database_create_certificate_handle( GTlsDatabase* self, GTlsCertificate* certificate );
		[BackendHintReadNone]
		public extern static GType g_tls_database_get_type();
		public extern static GTlsCertificate* g_tls_database_lookup_certificate_for_handle( GTlsDatabase* self, sbyte* handle, GTlsInteraction* interaction, GTlsDatabaseLookupFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_tls_database_lookup_certificate_for_handle_async( GTlsDatabase* self, sbyte* handle, GTlsInteraction* interaction, GTlsDatabaseLookupFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish( GTlsDatabase* self, GAsyncResult* result, GError** error );
		public extern static GTlsCertificate* g_tls_database_lookup_certificate_issuer( GTlsDatabase* self, GTlsCertificate* certificate, GTlsInteraction* interaction, GTlsDatabaseLookupFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_tls_database_lookup_certificate_issuer_async( GTlsDatabase* self, GTlsCertificate* certificate, GTlsInteraction* interaction, GTlsDatabaseLookupFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish( GTlsDatabase* self, GAsyncResult* result, GError** error );
		public extern static GList* g_tls_database_lookup_certificates_issued_by( GTlsDatabase* self, GByteArray* issuerRawDn, GTlsInteraction* interaction, GTlsDatabaseLookupFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_tls_database_lookup_certificates_issued_by_async( GTlsDatabase* self, GByteArray* issuerRawDn, GTlsInteraction* interaction, GTlsDatabaseLookupFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GList* g_tls_database_lookup_certificates_issued_by_finish( GTlsDatabase* self, GAsyncResult* result, GError** error );
		public extern static GTlsCertificateFlags g_tls_database_verify_chain( GTlsDatabase* self, GTlsCertificate* chain, sbyte* purpose, GSocketConnectable* identity, GTlsInteraction* interaction, GTlsDatabaseVerifyFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_tls_database_verify_chain_async( GTlsDatabase* self, GTlsCertificate* chain, sbyte* purpose, GSocketConnectable* identity, GTlsInteraction* interaction, GTlsDatabaseVerifyFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GTlsCertificateFlags g_tls_database_verify_chain_finish( GTlsDatabase* self, GAsyncResult* result, GError** error );

		[BackendHintReadNone]
		public extern static GType g_tls_file_database_get_type();
		public extern static GTlsDatabase* g_tls_file_database_new( sbyte* anchors, GError** error );

		public extern static GTlsInteractionResult g_tls_interaction_ask_password( GTlsInteraction* interaction, GTlsPassword* password, GCancellable* cancellable, GError** error );
		public extern static void g_tls_interaction_ask_password_async( GTlsInteraction* interaction, GTlsPassword* password, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GTlsInteractionResult g_tls_interaction_ask_password_finish( GTlsInteraction* interaction, GAsyncResult* result, GError** error );
		[BackendHintReadNone]
		public extern static GType g_tls_interaction_get_type();
		public extern static GTlsInteractionResult g_tls_interaction_invoke_ask_password( GTlsInteraction* interaction, GTlsPassword* password, GCancellable* cancellable, GError** error );
		public extern static GTlsInteractionResult g_tls_interaction_invoke_request_certificate( GTlsInteraction* interaction, GTlsConnection* connection, GTlsCertificateRequestFlags flags, GCancellable* cancellable, GError** error );
		public extern static GTlsInteractionResult g_tls_interaction_request_certificate( GTlsInteraction* interaction, GTlsConnection* connection, GTlsCertificateRequestFlags flags, GCancellable* cancellable, GError** error );
		public extern static void g_tls_interaction_request_certificate_async( GTlsInteraction* interaction, GTlsConnection* connection, GTlsCertificateRequestFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GTlsInteractionResult g_tls_interaction_request_certificate_finish( GTlsInteraction* interaction, GAsyncResult* result, GError** error );

		public extern static sbyte* g_tls_password_get_description( GTlsPassword* password );
		public extern static GTlsPasswordFlags g_tls_password_get_flags( GTlsPassword* password );
		[BackendHintReadNone]
		public extern static GType g_tls_password_get_type();
		public extern static byte* g_tls_password_get_value( GTlsPassword* password, uintptr* length );
		public extern static sbyte* g_tls_password_get_warning( GTlsPassword* password );
		public extern static GTlsPassword* g_tls_password_new( GTlsPasswordFlags flags, CUtf8String description );
		public extern static void g_tls_password_set_description( GTlsPassword* password, CUtf8String description );
		public extern static void g_tls_password_set_flags( GTlsPassword* password, GTlsPasswordFlags flags );
		public extern static void g_tls_password_set_value( GTlsPassword* password, byte* value, intptr length );
		public extern static void g_tls_password_set_value_full( GTlsPassword* password, byte* value, intptr length, Functors.Action<void*> destroy );
		public extern static void g_tls_password_set_warning( GTlsPassword* password, sbyte* warning );

		[BackendHintReadNone]
		public extern static GType g_tls_server_connection_get_type();
		public extern static GIOStream* g_tls_server_connection_new( GIOStream* baseIoStream, GTlsCertificate* certificate, GError** error );

		public extern static GType g_unix_connection_get_type();
		public extern static GCredentials* g_unix_connection_receive_credentials( GUnixConnection* connection, GCancellable* cancellable, GError** error );
		public extern static void g_unix_connection_receive_credentials_async( GUnixConnection* connection, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static GCredentials* g_unix_connection_receive_credentials_finish( GUnixConnection* connection, GAsyncResult* result, GError** error );
		public extern static int g_unix_connection_receive_fd( GUnixConnection* connection, GCancellable* cancellable, GError** error );
		public extern static Boolean32 g_unix_connection_send_credentials( GUnixConnection* connection, GCancellable* cancellable, GError** error );
		public extern static void g_unix_connection_send_credentials_async( GUnixConnection* connection, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_unix_connection_send_credentials_finish( GUnixConnection* connection, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_unix_connection_send_fd( GUnixConnection* connection, int fd, GCancellable* cancellable, GError** error );

		public extern static GCredentials* g_unix_credentials_message_get_credentials( GUnixCredentialsMessage* message );
		[BackendHintReadNone]
		public extern static GType g_unix_credentials_message_get_type();
		public extern static Boolean32 g_unix_credentials_message_is_supported();
		public extern static GSocketControlMessage* g_unix_credentials_message_new();
		public extern static GSocketControlMessage* g_unix_credentials_message_new_with_credentials( GCredentials* credentials );

		public extern static int g_unix_fd_list_append( GUnixFDList* list, int fd, GError** error );
		public extern static int g_unix_fd_list_get( GUnixFDList* list, int index_, GError** error );
		public extern static int g_unix_fd_list_get_length( GUnixFDList* list );
		[BackendHintReadNone]
		public extern static GType g_unix_fd_list_get_type();
		public extern static GUnixFDList* g_unix_fd_list_new();
		public extern static GUnixFDList* g_unix_fd_list_new_from_array( int* fds, int nFds );
		public extern static int* g_unix_fd_list_peek_fds( GUnixFDList* list, int* length );
		public extern static int* g_unix_fd_list_steal_fds( GUnixFDList* list, int* length );

		public extern static Boolean32 g_unix_socket_address_abstract_names_supported();
		public extern static GUnixSocketAddressType g_unix_socket_address_get_address_type( GUnixSocketAddress* address );
		public extern static Boolean32 g_unix_socket_address_get_is_abstract( GUnixSocketAddress* address );
		public extern static sbyte* g_unix_socket_address_get_path( GUnixSocketAddress* address );
		public extern static uintptr g_unix_socket_address_get_path_len( GUnixSocketAddress* address );
		[BackendHintReadNone]
		public extern static GType g_unix_socket_address_get_type();
		public extern static GSocketAddress* g_unix_socket_address_new( sbyte* path );
		public extern static GSocketAddress* g_unix_socket_address_new_abstract( sbyte* path, int pathLen );
		public extern static GSocketAddress* g_unix_socket_address_new_with_type( sbyte* path, int pathLen, GUnixSocketAddressType type );

		public extern static GVfs* g_vfs_get_default();
		public extern static GFile* g_vfs_get_file_for_path( GVfs* vfs, sbyte* path );
		public extern static GFile* g_vfs_get_file_for_uri( GVfs* vfs, sbyte* uri );
		public extern static GVfs* g_vfs_get_local();
		public extern static sbyte** g_vfs_get_supported_uri_schemes( GVfs* vfs );
		[BackendHintReadNone]
		public extern static GType g_vfs_get_type();
		public extern static Boolean32 g_vfs_is_active( GVfs* vfs );
		public extern static GFile* g_vfs_parse_name( GVfs* vfs, CUtf8String parseName );
		public extern static Boolean32 g_vfs_register_uri_scheme( GVfs* vfs, sbyte* scheme, Functors.Func<GVfs*, sbyte*, void*, GFile*> uriFunc, void* uriData, Functors.Action<void*> uriDestroy, Functors.Func<GVfs*, sbyte*, void*, GFile*> parseNameFunc, void* parseNameData, Functors.Action<void*> parseNameDestroy );
		public extern static Boolean32 g_vfs_unregister_uri_scheme( GVfs* vfs, sbyte* scheme );

		public extern static Boolean32 g_volume_can_eject( GVolume* volume );
		public extern static Boolean32 g_volume_can_mount( GVolume* volume );
		public extern static void g_volume_eject( GVolume* volume, GMountUnmountFlags flags, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_volume_eject_finish( GVolume* volume, GAsyncResult* result, GError** error );
		public extern static void g_volume_eject_with_operation( GVolume* volume, GMountUnmountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_volume_eject_with_operation_finish( GVolume* volume, GAsyncResult* result, GError** error );
		public extern static sbyte** g_volume_enumerate_identifiers( GVolume* volume );
		public extern static GFile* g_volume_get_activation_root( GVolume* volume );
		public extern static GDrive* g_volume_get_drive( GVolume* volume );
		public extern static GIcon* g_volume_get_icon( GVolume* volume );
		public extern static sbyte* g_volume_get_identifier( GVolume* volume, sbyte* kind );
		public extern static GMount* g_volume_get_mount( GVolume* volume );
		public extern static sbyte* g_volume_get_name( GVolume* volume );
		public extern static sbyte* g_volume_get_sort_key( GVolume* volume );
		public extern static GIcon* g_volume_get_symbolic_icon( GVolume* volume );
		[BackendHintReadNone]
		public extern static GType g_volume_get_type();
		public extern static sbyte* g_volume_get_uuid( GVolume* volume );
		public extern static void g_volume_mount( GVolume* volume, GMountMountFlags flags, GMountOperation* mountOperation, GCancellable* cancellable, Functors.Action<GObject*, GAsyncResult*, void*> callback, void* userData );
		public extern static Boolean32 g_volume_mount_finish( GVolume* volume, GAsyncResult* result, GError** error );
		public extern static Boolean32 g_volume_should_automount( GVolume* volume );

		public extern static GFileInfo* g_zlib_compressor_get_file_info( GZlibCompressor* compressor );
		[BackendHintReadNone]
		public extern static GType g_zlib_compressor_get_type();
		public extern static GZlibCompressor* g_zlib_compressor_new( GZlibCompressorFormat format, int level );
		public extern static void g_zlib_compressor_set_file_info( GZlibCompressor* compressor, GFileInfo* fileInfo );

		public extern static GFileInfo* g_zlib_decompressor_get_file_info( GZlibDecompressor* decompressor );
		[BackendHintReadNone]
		public extern static GType g_zlib_decompressor_get_type();
		public extern static GZlibDecompressor* g_zlib_decompressor_new( GZlibCompressorFormat format );
	}
	[Flags]
	public enum GAppInfoCreateFlags : uint {
		G_APP_INFO_CREATE_NONE =                          0,
		G_APP_INFO_CREATE_NEEDS_TERMINAL =                1,
		G_APP_INFO_CREATE_SUPPORTS_URIS =                 2,
		G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4,
	}
	[Flags]
	public enum GApplicationFlags : uint {
		G_APPLICATION_FLAGS_NONE =           0,
		G_APPLICATION_DEFAULT_FLAGS =        0,
		G_APPLICATION_IS_SERVICE =           1,
		G_APPLICATION_IS_LAUNCHER =          2,
		G_APPLICATION_HANDLES_OPEN =         4,
		G_APPLICATION_HANDLES_COMMAND_LINE = 8,
		G_APPLICATION_SEND_ENVIRONMENT =    16,
		G_APPLICATION_NON_UNIQUE =          32,
		G_APPLICATION_CAN_OVERRIDE_APP_ID = 64,
		G_APPLICATION_ALLOW_REPLACEMENT =  128,
		G_APPLICATION_REPLACE =            256,
	}
	[Flags]
	public enum GAsciiType : uint {
		None =              0,
		G_ASCII_ALNUM =     1,
		G_ASCII_ALPHA =     2,
		G_ASCII_CNTRL =     4,
		G_ASCII_DIGIT =     8,
		G_ASCII_GRAPH =    16,
		G_ASCII_LOWER =    32,
		G_ASCII_PRINT =    64,
		G_ASCII_PUNCT =   128,
		G_ASCII_SPACE =   256,
		G_ASCII_UPPER =   512,
		G_ASCII_XDIGIT = 1024,
	}
	[Flags]
	public enum GAskPasswordFlags : uint {
		None =                                0,
		G_ASK_PASSWORD_NEED_PASSWORD =        1,
		G_ASK_PASSWORD_NEED_USERNAME =        2,
		G_ASK_PASSWORD_NEED_DOMAIN =          4,
		G_ASK_PASSWORD_SAVING_SUPPORTED =     8,
		G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16,
		G_ASK_PASSWORD_TCRYPT =              32,
	}
	[Flags]
	public enum GBindingFlags : uint {
		G_BINDING_DEFAULT =        0,
		G_BINDING_BIDIRECTIONAL =  1,
		G_BINDING_SYNC_CREATE =    2,
		G_BINDING_INVERT_BOOLEAN = 4,
	}
	public enum GBookmarkFileError : uint {
		G_BOOKMARK_FILE_ERROR_INVALID_URI =        0,
		G_BOOKMARK_FILE_ERROR_INVALID_VALUE =      1,
		G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2,
		G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND =      3,
		G_BOOKMARK_FILE_ERROR_READ =               4,
		G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING =   5,
		G_BOOKMARK_FILE_ERROR_WRITE =              6,
		G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND =     7,
	}
	[Flags]
	public enum GBusNameOwnerFlags : uint {
		G_BUS_NAME_OWNER_FLAGS_NONE =              0,
		G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1,
		G_BUS_NAME_OWNER_FLAGS_REPLACE =           2,
		G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE =      4,
	}
	[Flags]
	public enum GBusNameWatcherFlags : uint {
		G_BUS_NAME_WATCHER_FLAGS_NONE =       0,
		G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1,
	}
	public enum GBusType : int {
		G_BUS_TYPE_STARTER = -1,
		G_BUS_TYPE_NONE =     0,
		G_BUS_TYPE_SYSTEM =   1,
		G_BUS_TYPE_SESSION =  2,
	}
	public enum GChecksumType : uint {
		G_CHECKSUM_MD5 =    0,
		G_CHECKSUM_SHA1 =   1,
		G_CHECKSUM_SHA256 = 2,
		G_CHECKSUM_SHA512 = 3,
		G_CHECKSUM_SHA384 = 4,
	}
	[Flags]
	public enum GConnectFlags : uint {
		G_CONNECT_DEFAULT = 0,
		G_CONNECT_AFTER =   1,
		G_CONNECT_SWAPPED = 2,
	}
	[Flags]
	public enum GConverterFlags : uint {
		G_CONVERTER_NO_FLAGS =     0,
		G_CONVERTER_INPUT_AT_END = 1,
		G_CONVERTER_FLUSH =        2,
	}
	public enum GConverterResult : uint {
		G_CONVERTER_ERROR =     0,
		G_CONVERTER_CONVERTED = 1,
		G_CONVERTER_FINISHED =  2,
		G_CONVERTER_FLUSHED =   3,
	}
	public enum GConvertError : uint {
		G_CONVERT_ERROR_NO_CONVERSION =     0,
		G_CONVERT_ERROR_ILLEGAL_SEQUENCE =  1,
		G_CONVERT_ERROR_FAILED =            2,
		G_CONVERT_ERROR_PARTIAL_INPUT =     3,
		G_CONVERT_ERROR_BAD_URI =           4,
		G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5,
		G_CONVERT_ERROR_NO_MEMORY =         6,
		G_CONVERT_ERROR_EMBEDDED_NUL =      7,
	}
	public enum GCredentialsType : uint {
		G_CREDENTIALS_TYPE_INVALID =              0,
		G_CREDENTIALS_TYPE_LINUX_UCRED =          1,
		G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED =     2,
		G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3,
		G_CREDENTIALS_TYPE_SOLARIS_UCRED =        4,
		G_CREDENTIALS_TYPE_NETBSD_UNPCBID =       5,
		G_CREDENTIALS_TYPE_APPLE_XUCRED =         6,
		G_CREDENTIALS_TYPE_WIN32_PID =            7,
	}
	public enum GDataStreamByteOrder : uint {
		G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN =    0,
		G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1,
		G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN =   2,
	}
	public enum GDataStreamNewlineType : uint {
		G_DATA_STREAM_NEWLINE_TYPE_LF =    0,
		G_DATA_STREAM_NEWLINE_TYPE_CR =    1,
		G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2,
		G_DATA_STREAM_NEWLINE_TYPE_ANY =   3,
	}
	public enum GDateDMY : uint {
		G_DATE_DAY =   0,
		G_DATE_MONTH = 1,
		G_DATE_YEAR =  2,
	}
	public enum GDateMonth : uint {
		G_DATE_BAD_MONTH = 0,
		G_DATE_JANUARY =   1,
		G_DATE_FEBRUARY =  2,
		G_DATE_MARCH =     3,
		G_DATE_APRIL =     4,
		G_DATE_MAY =       5,
		G_DATE_JUNE =      6,
		G_DATE_JULY =      7,
		G_DATE_AUGUST =    8,
		G_DATE_SEPTEMBER = 9,
		G_DATE_OCTOBER =  10,
		G_DATE_NOVEMBER = 11,
		G_DATE_DECEMBER = 12,
	}
	public enum GDateWeekday : uint {
		G_DATE_BAD_WEEKDAY = 0,
		G_DATE_MONDAY =      1,
		G_DATE_TUESDAY =     2,
		G_DATE_WEDNESDAY =   3,
		G_DATE_THURSDAY =    4,
		G_DATE_FRIDAY =      5,
		G_DATE_SATURDAY =    6,
		G_DATE_SUNDAY =      7,
	}
	[Flags]
	public enum GDBusCallFlags : uint {
		G_DBUS_CALL_FLAGS_NONE =                            0,
		G_DBUS_CALL_FLAGS_NO_AUTO_START =                   1,
		G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 2,
	}
	[Flags]
	public enum GDBusCapabilityFlags : uint {
		G_DBUS_CAPABILITY_FLAGS_NONE =            0,
		G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1,
	}
	[Flags]
	public enum GDBusConnectionFlags : uint {
		G_DBUS_CONNECTION_FLAGS_NONE =                              0,
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT =             1,
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER =             2,
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS =    4,
		G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION =            8,
		G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING =         16,
		G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = 32,
		G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE =                  64,
	}
	public enum GDBusError : uint {
		G_DBUS_ERROR_FAILED =                            0,
		G_DBUS_ERROR_NO_MEMORY =                         1,
		G_DBUS_ERROR_SERVICE_UNKNOWN =                   2,
		G_DBUS_ERROR_NAME_HAS_NO_OWNER =                 3,
		G_DBUS_ERROR_NO_REPLY =                          4,
		G_DBUS_ERROR_IO_ERROR =                          5,
		G_DBUS_ERROR_BAD_ADDRESS =                       6,
		G_DBUS_ERROR_NOT_SUPPORTED =                     7,
		G_DBUS_ERROR_LIMITS_EXCEEDED =                   8,
		G_DBUS_ERROR_ACCESS_DENIED =                     9,
		G_DBUS_ERROR_AUTH_FAILED =                      10,
		G_DBUS_ERROR_NO_SERVER =                        11,
		G_DBUS_ERROR_TIMEOUT =                          12,
		G_DBUS_ERROR_NO_NETWORK =                       13,
		G_DBUS_ERROR_ADDRESS_IN_USE =                   14,
		G_DBUS_ERROR_DISCONNECTED =                     15,
		G_DBUS_ERROR_INVALID_ARGS =                     16,
		G_DBUS_ERROR_FILE_NOT_FOUND =                   17,
		G_DBUS_ERROR_FILE_EXISTS =                      18,
		G_DBUS_ERROR_UNKNOWN_METHOD =                   19,
		G_DBUS_ERROR_TIMED_OUT =                        20,
		G_DBUS_ERROR_MATCH_RULE_NOT_FOUND =             21,
		G_DBUS_ERROR_MATCH_RULE_INVALID =               22,
		G_DBUS_ERROR_SPAWN_EXEC_FAILED =                23,
		G_DBUS_ERROR_SPAWN_FORK_FAILED =                24,
		G_DBUS_ERROR_SPAWN_CHILD_EXITED =               25,
		G_DBUS_ERROR_SPAWN_CHILD_SIGNALED =             26,
		G_DBUS_ERROR_SPAWN_FAILED =                     27,
		G_DBUS_ERROR_SPAWN_SETUP_FAILED =               28,
		G_DBUS_ERROR_SPAWN_CONFIG_INVALID =             29,
		G_DBUS_ERROR_SPAWN_SERVICE_INVALID =            30,
		G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND =          31,
		G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID =        32,
		G_DBUS_ERROR_SPAWN_FILE_INVALID =               33,
		G_DBUS_ERROR_SPAWN_NO_MEMORY =                  34,
		G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN =          35,
		G_DBUS_ERROR_INVALID_SIGNATURE =                36,
		G_DBUS_ERROR_INVALID_FILE_CONTENT =             37,
		G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38,
		G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN =           39,
		G_DBUS_ERROR_OBJECT_PATH_IN_USE =               40,
		G_DBUS_ERROR_UNKNOWN_OBJECT =                   41,
		G_DBUS_ERROR_UNKNOWN_INTERFACE =                42,
		G_DBUS_ERROR_UNKNOWN_PROPERTY =                 43,
		G_DBUS_ERROR_PROPERTY_READ_ONLY =               44,
	}
	[Flags]
	public enum GDBusInterfaceSkeletonFlags : uint {
		G_DBUS_INTERFACE_SKELETON_FLAGS_NONE =                                0,
		G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1,
	}
	public enum GDBusMessageByteOrder : uint {
		G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN =     66,
		G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108,
	}
	[Flags]
	public enum GDBusMessageFlags : uint {
		G_DBUS_MESSAGE_FLAGS_NONE =                            0,
		G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED =               1,
		G_DBUS_MESSAGE_FLAGS_NO_AUTO_START =                   2,
		G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 4,
	}
	public enum GDBusMessageHeaderField : uint {
		G_DBUS_MESSAGE_HEADER_FIELD_INVALID =      0,
		G_DBUS_MESSAGE_HEADER_FIELD_PATH =         1,
		G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE =    2,
		G_DBUS_MESSAGE_HEADER_FIELD_MEMBER =       3,
		G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME =   4,
		G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5,
		G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION =  6,
		G_DBUS_MESSAGE_HEADER_FIELD_SENDER =       7,
		G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE =    8,
		G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9,
	}
	public enum GDBusMessageType : uint {
		G_DBUS_MESSAGE_TYPE_INVALID =       0,
		G_DBUS_MESSAGE_TYPE_METHOD_CALL =   1,
		G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2,
		G_DBUS_MESSAGE_TYPE_ERROR =         3,
		G_DBUS_MESSAGE_TYPE_SIGNAL =        4,
	}
	[Flags]
	public enum GDBusObjectManagerClientFlags : uint {
		G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE =              0,
		G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1,
	}
	[Flags]
	public enum GDBusPropertyInfoFlags : uint {
		G_DBUS_PROPERTY_INFO_FLAGS_NONE =     0,
		G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1,
		G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2,
	}
	[Flags]
	public enum GDBusProxyFlags : uint {
		G_DBUS_PROXY_FLAGS_NONE =                               0,
		G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES =             1,
		G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS =             2,
		G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START =                  4,
		G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES =         8,
		G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 16,
		G_DBUS_PROXY_FLAGS_NO_MATCH_RULE =                     32,
	}
	[Flags]
	public enum GDBusSendMessageFlags : uint {
		G_DBUS_SEND_MESSAGE_FLAGS_NONE =            0,
		G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1,
	}
	[Flags]
	public enum GDBusServerFlags : uint {
		G_DBUS_SERVER_FLAGS_NONE =                             0,
		G_DBUS_SERVER_FLAGS_RUN_IN_THREAD =                    1,
		G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS =   2,
		G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = 4,
	}
	[Flags]
	public enum GDBusSignalFlags : uint {
		G_DBUS_SIGNAL_FLAGS_NONE =                 0,
		G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE =        1,
		G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 2,
		G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH =      4,
	}
	[Flags]
	public enum GDBusSubtreeFlags : uint {
		G_DBUS_SUBTREE_FLAGS_NONE =                           0,
		G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1,
	}
	[Flags]
	public enum GDriveStartFlags : uint {
		G_DRIVE_START_NONE = 0,
	}
	public enum GDriveStartStopType : uint {
		G_DRIVE_START_STOP_TYPE_UNKNOWN =   0,
		G_DRIVE_START_STOP_TYPE_SHUTDOWN =  1,
		G_DRIVE_START_STOP_TYPE_NETWORK =   2,
		G_DRIVE_START_STOP_TYPE_MULTIDISK = 3,
		G_DRIVE_START_STOP_TYPE_PASSWORD =  4,
	}
	public enum GEmblemOrigin : uint {
		G_EMBLEM_ORIGIN_UNKNOWN =      0,
		G_EMBLEM_ORIGIN_DEVICE =       1,
		G_EMBLEM_ORIGIN_LIVEMETADATA = 2,
		G_EMBLEM_ORIGIN_TAG =          3,
	}
	public enum GErrorType : uint {
		G_ERR_UNKNOWN =              0,
		G_ERR_UNEXP_EOF =            1,
		G_ERR_UNEXP_EOF_IN_STRING =  2,
		G_ERR_UNEXP_EOF_IN_COMMENT = 3,
		G_ERR_NON_DIGIT_IN_CONST =   4,
		G_ERR_DIGIT_RADIX =          5,
		G_ERR_FLOAT_RADIX =          6,
		G_ERR_FLOAT_MALFORMED =      7,
	}
	[Flags]
	public enum GFileAttributeInfoFlags : uint {
		G_FILE_ATTRIBUTE_INFO_NONE =            0,
		G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE =  1,
		G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2,
	}
	public enum GFileAttributeStatus : uint {
		G_FILE_ATTRIBUTE_STATUS_UNSET =         0,
		G_FILE_ATTRIBUTE_STATUS_SET =           1,
		G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2,
	}
	public enum GFileAttributeType : uint {
		G_FILE_ATTRIBUTE_TYPE_INVALID =     0,
		G_FILE_ATTRIBUTE_TYPE_STRING =      1,
		G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2,
		G_FILE_ATTRIBUTE_TYPE_BOOLEAN =     3,
		G_FILE_ATTRIBUTE_TYPE_UINT32 =      4,
		G_FILE_ATTRIBUTE_TYPE_INT32 =       5,
		G_FILE_ATTRIBUTE_TYPE_UINT64 =      6,
		G_FILE_ATTRIBUTE_TYPE_INT64 =       7,
		G_FILE_ATTRIBUTE_TYPE_OBJECT =      8,
		G_FILE_ATTRIBUTE_TYPE_STRINGV =     9,
	}
	[Flags]
	public enum GFileCopyFlags : uint {
		G_FILE_COPY_NONE =                  0,
		G_FILE_COPY_OVERWRITE =             1,
		G_FILE_COPY_BACKUP =                2,
		G_FILE_COPY_NOFOLLOW_SYMLINKS =     4,
		G_FILE_COPY_ALL_METADATA =          8,
		G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16,
		G_FILE_COPY_TARGET_DEFAULT_PERMS = 32,
	}
	[Flags]
	public enum GFileCreateFlags : uint {
		G_FILE_CREATE_NONE =                0,
		G_FILE_CREATE_PRIVATE =             1,
		G_FILE_CREATE_REPLACE_DESTINATION = 2,
	}
	public enum GFileError : uint {
		G_FILE_ERROR_EXIST =       0,
		G_FILE_ERROR_ISDIR =       1,
		G_FILE_ERROR_ACCES =       2,
		G_FILE_ERROR_NAMETOOLONG = 3,
		G_FILE_ERROR_NOENT =       4,
		G_FILE_ERROR_NOTDIR =      5,
		G_FILE_ERROR_NXIO =        6,
		G_FILE_ERROR_NODEV =       7,
		G_FILE_ERROR_ROFS =        8,
		G_FILE_ERROR_TXTBSY =      9,
		G_FILE_ERROR_FAULT =      10,
		G_FILE_ERROR_LOOP =       11,
		G_FILE_ERROR_NOSPC =      12,
		G_FILE_ERROR_NOMEM =      13,
		G_FILE_ERROR_MFILE =      14,
		G_FILE_ERROR_NFILE =      15,
		G_FILE_ERROR_BADF =       16,
		G_FILE_ERROR_INVAL =      17,
		G_FILE_ERROR_PIPE =       18,
		G_FILE_ERROR_AGAIN =      19,
		G_FILE_ERROR_INTR =       20,
		G_FILE_ERROR_IO =         21,
		G_FILE_ERROR_PERM =       22,
		G_FILE_ERROR_NOSYS =      23,
		G_FILE_ERROR_FAILED =     24,
	}
	[Flags]
	public enum GFileMeasureFlags : uint {
		G_FILE_MEASURE_NONE =             0,
		G_FILE_MEASURE_REPORT_ANY_ERROR = 2,
		G_FILE_MEASURE_APPARENT_SIZE =    4,
		G_FILE_MEASURE_NO_XDEV =          8,
	}
	public enum GFileMonitorEvent : uint {
		G_FILE_MONITOR_EVENT_CHANGED =           0,
		G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1,
		G_FILE_MONITOR_EVENT_DELETED =           2,
		G_FILE_MONITOR_EVENT_CREATED =           3,
		G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4,
		G_FILE_MONITOR_EVENT_PRE_UNMOUNT =       5,
		G_FILE_MONITOR_EVENT_UNMOUNTED =         6,
		G_FILE_MONITOR_EVENT_MOVED =             7,
		G_FILE_MONITOR_EVENT_RENAMED =           8,
		G_FILE_MONITOR_EVENT_MOVED_IN =          9,
		G_FILE_MONITOR_EVENT_MOVED_OUT =        10,
	}
	[Flags]
	public enum GFileMonitorFlags : uint {
		G_FILE_MONITOR_NONE =             0,
		G_FILE_MONITOR_WATCH_MOUNTS =     1,
		G_FILE_MONITOR_SEND_MOVED =       2,
		G_FILE_MONITOR_WATCH_HARD_LINKS = 4,
		G_FILE_MONITOR_WATCH_MOVES =      8,
	}
	[Flags]
	public enum GFileQueryInfoFlags : uint {
		G_FILE_QUERY_INFO_NONE =              0,
		G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1,
	}
	[Flags]
	public enum GFileSetContentsFlags : uint {
		G_FILE_SET_CONTENTS_NONE =          0,
		G_FILE_SET_CONTENTS_CONSISTENT =    1,
		G_FILE_SET_CONTENTS_DURABLE =       2,
		G_FILE_SET_CONTENTS_ONLY_EXISTING = 4,
	}
	public enum GFilesystemPreviewType : uint {
		G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
		G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL =  1,
		G_FILESYSTEM_PREVIEW_TYPE_NEVER =     2,
	}
	[Flags]
	public enum GFileTest : uint {
		None =                      0,
		G_FILE_TEST_IS_REGULAR =    1,
		G_FILE_TEST_IS_SYMLINK =    2,
		G_FILE_TEST_IS_DIR =        4,
		G_FILE_TEST_IS_EXECUTABLE = 8,
		G_FILE_TEST_EXISTS =       16,
	}
	public enum GFileType : uint {
		G_FILE_TYPE_UNKNOWN =       0,
		G_FILE_TYPE_REGULAR =       1,
		G_FILE_TYPE_DIRECTORY =     2,
		G_FILE_TYPE_SYMBOLIC_LINK = 3,
		G_FILE_TYPE_SPECIAL =       4,
		G_FILE_TYPE_SHORTCUT =      5,
		G_FILE_TYPE_MOUNTABLE =     6,
	}
	[Flags]
	public enum GFormatSizeFlags : uint {
		G_FORMAT_SIZE_DEFAULT =     0,
		G_FORMAT_SIZE_LONG_FORMAT = 1,
		G_FORMAT_SIZE_IEC_UNITS =   2,
		G_FORMAT_SIZE_BITS =        4,
		G_FORMAT_SIZE_ONLY_VALUE =  8,
		G_FORMAT_SIZE_ONLY_UNIT =  16,
	}
	public enum GHookFlagMask : uint {
		G_HOOK_FLAG_ACTIVE =  1,
		G_HOOK_FLAG_IN_CALL = 2,
		G_HOOK_FLAG_MASK =   15,
	}
	public enum GIOChannelError : uint {
		G_IO_CHANNEL_ERROR_FBIG =     0,
		G_IO_CHANNEL_ERROR_INVAL =    1,
		G_IO_CHANNEL_ERROR_IO =       2,
		G_IO_CHANNEL_ERROR_ISDIR =    3,
		G_IO_CHANNEL_ERROR_NOSPC =    4,
		G_IO_CHANNEL_ERROR_NXIO =     5,
		G_IO_CHANNEL_ERROR_OVERFLOW = 6,
		G_IO_CHANNEL_ERROR_PIPE =     7,
		G_IO_CHANNEL_ERROR_FAILED =   8,
	}
	[Flags]
	public enum GIOCondition : uint {
		None =       0,
		G_IO_IN =    1,
		G_IO_OUT =   4,
		G_IO_PRI =   2,
		G_IO_ERR =   8,
		G_IO_HUP =  16,
		G_IO_NVAL = 32,
	}
	public enum GIOError : uint {
		G_IO_ERROR_NONE =    0,
		G_IO_ERROR_AGAIN =   1,
		G_IO_ERROR_INVAL =   2,
		G_IO_ERROR_UNKNOWN = 3,
	}
	public enum GIOErrorEnum : uint {
		G_IO_ERROR_FAILED =               0,
		G_IO_ERROR_NOT_FOUND =            1,
		G_IO_ERROR_EXISTS =               2,
		G_IO_ERROR_IS_DIRECTORY =         3,
		G_IO_ERROR_NOT_DIRECTORY =        4,
		G_IO_ERROR_NOT_EMPTY =            5,
		G_IO_ERROR_NOT_REGULAR_FILE =     6,
		G_IO_ERROR_NOT_SYMBOLIC_LINK =    7,
		G_IO_ERROR_NOT_MOUNTABLE_FILE =   8,
		G_IO_ERROR_FILENAME_TOO_LONG =    9,
		G_IO_ERROR_INVALID_FILENAME =    10,
		G_IO_ERROR_TOO_MANY_LINKS =      11,
		G_IO_ERROR_NO_SPACE =            12,
		G_IO_ERROR_INVALID_ARGUMENT =    13,
		G_IO_ERROR_PERMISSION_DENIED =   14,
		G_IO_ERROR_NOT_SUPPORTED =       15,
		G_IO_ERROR_NOT_MOUNTED =         16,
		G_IO_ERROR_ALREADY_MOUNTED =     17,
		G_IO_ERROR_CLOSED =              18,
		G_IO_ERROR_CANCELLED =           19,
		G_IO_ERROR_PENDING =             20,
		G_IO_ERROR_READ_ONLY =           21,
		G_IO_ERROR_CANT_CREATE_BACKUP =  22,
		G_IO_ERROR_WRONG_ETAG =          23,
		G_IO_ERROR_TIMED_OUT =           24,
		G_IO_ERROR_WOULD_RECURSE =       25,
		G_IO_ERROR_BUSY =                26,
		G_IO_ERROR_WOULD_BLOCK =         27,
		G_IO_ERROR_HOST_NOT_FOUND =      28,
		G_IO_ERROR_WOULD_MERGE =         29,
		G_IO_ERROR_FAILED_HANDLED =      30,
		G_IO_ERROR_TOO_MANY_OPEN_FILES = 31,
		G_IO_ERROR_NOT_INITIALIZED =     32,
		G_IO_ERROR_ADDRESS_IN_USE =      33,
		G_IO_ERROR_PARTIAL_INPUT =       34,
		G_IO_ERROR_INVALID_DATA =        35,
		G_IO_ERROR_DBUS_ERROR =          36,
		G_IO_ERROR_HOST_UNREACHABLE =    37,
		G_IO_ERROR_NETWORK_UNREACHABLE = 38,
		G_IO_ERROR_CONNECTION_REFUSED =  39,
		G_IO_ERROR_PROXY_FAILED =        40,
		G_IO_ERROR_PROXY_AUTH_FAILED =   41,
		G_IO_ERROR_PROXY_NEED_AUTH =     42,
		G_IO_ERROR_PROXY_NOT_ALLOWED =   43,
		G_IO_ERROR_BROKEN_PIPE =         44,
		G_IO_ERROR_CONNECTION_CLOSED =   44,
		G_IO_ERROR_NOT_CONNECTED =       45,
		G_IO_ERROR_MESSAGE_TOO_LARGE =   46,
		G_IO_ERROR_NO_SUCH_DEVICE =      47,
	}
	[Flags]
	public enum GIOFlags : uint {
		G_IO_FLAG_NONE =         0,
		G_IO_FLAG_APPEND =       1,
		G_IO_FLAG_NONBLOCK =     2,
		G_IO_FLAG_IS_READABLE =  4,
		G_IO_FLAG_IS_WRITABLE =  8,
		G_IO_FLAG_IS_WRITEABLE = 8,
		G_IO_FLAG_IS_SEEKABLE = 16,
		G_IO_FLAG_MASK =        31,
		G_IO_FLAG_GET_MASK =    31,
		G_IO_FLAG_SET_MASK =     3,
	}
	[Flags]
	public enum GIOModuleScopeFlags : uint {
		G_IO_MODULE_SCOPE_NONE =             0,
		G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1,
	}
	public enum GIOStatus : uint {
		G_IO_STATUS_ERROR =  0,
		G_IO_STATUS_NORMAL = 1,
		G_IO_STATUS_EOF =    2,
		G_IO_STATUS_AGAIN =  3,
	}
	[Flags]
	public enum GIOStreamSpliceFlags : uint {
		G_IO_STREAM_SPLICE_NONE =          0,
		G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1,
		G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2,
		G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4,
	}
	public enum GKeyFileError : uint {
		G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0,
		G_KEY_FILE_ERROR_PARSE =            1,
		G_KEY_FILE_ERROR_NOT_FOUND =        2,
		G_KEY_FILE_ERROR_KEY_NOT_FOUND =    3,
		G_KEY_FILE_ERROR_GROUP_NOT_FOUND =  4,
		G_KEY_FILE_ERROR_INVALID_VALUE =    5,
	}
	[Flags]
	public enum GKeyFileFlags : uint {
		G_KEY_FILE_NONE =              0,
		G_KEY_FILE_KEEP_COMMENTS =     1,
		G_KEY_FILE_KEEP_TRANSLATIONS = 2,
	}
	public enum GlibTaskPriority : int {
		G_PRIORITY_HIGH =        -100,
		G_PRIORITY_DEFAULT =        0,
		G_PRIORITY_HIGH_IDLE =    100,
		G_PRIORITY_DEFAULT_IDLE = 200,
		G_PRIORITY_LOW =          300,
	}
	[Flags]
	public enum GLogLevelFlags : int {
		None =                 0,
		G_LOG_FLAG_RECURSION = 1,
		G_LOG_FLAG_FATAL =     2,
		G_LOG_LEVEL_ERROR =    4,
		G_LOG_LEVEL_CRITICAL = 8,
		G_LOG_LEVEL_WARNING = 16,
		G_LOG_LEVEL_MESSAGE = 32,
		G_LOG_LEVEL_INFO =    64,
		G_LOG_LEVEL_DEBUG =  128,
		G_LOG_LEVEL_MASK =    -4,
	}
	public enum GLogWriterOutput : uint {
		G_LOG_WRITER_HANDLED =   1,
		G_LOG_WRITER_UNHANDLED = 0,
	}
	[Flags]
	public enum GMainContextFlags : uint {
		G_MAIN_CONTEXT_FLAGS_NONE =              0,
		G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1,
	}
	[Flags]
	public enum GMarkupCollectType : uint {
		G_MARKUP_COLLECT_INVALID =      0,
		G_MARKUP_COLLECT_STRING =       1,
		G_MARKUP_COLLECT_STRDUP =       2,
		G_MARKUP_COLLECT_BOOLEAN =      3,
		G_MARKUP_COLLECT_TRISTATE =     4,
		G_MARKUP_COLLECT_OPTIONAL = 65536,
	}
	public enum GMarkupError : uint {
		G_MARKUP_ERROR_BAD_UTF8 =          0,
		G_MARKUP_ERROR_EMPTY =             1,
		G_MARKUP_ERROR_PARSE =             2,
		G_MARKUP_ERROR_UNKNOWN_ELEMENT =   3,
		G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4,
		G_MARKUP_ERROR_INVALID_CONTENT =   5,
		G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6,
	}
	[Flags]
	public enum GMarkupParseFlags : uint {
		G_MARKUP_DEFAULT_FLAGS =                    0,
		G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1,
		G_MARKUP_TREAT_CDATA_AS_TEXT =              2,
		G_MARKUP_PREFIX_ERROR_POSITION =            4,
		G_MARKUP_IGNORE_QUALIFIED =                 8,
	}
	public enum GMemoryMonitorWarningLevel : uint {
		G_MEMORY_MONITOR_WARNING_LEVEL_LOW =       50,
		G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM =   100,
		G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255,
	}
	public enum GModuleError : uint {
		G_MODULE_ERROR_FAILED =       0,
		G_MODULE_ERROR_CHECK_FAILED = 1,
	}
	[Flags]
	public enum GModuleFlags : uint {
		None =                0,
		G_MODULE_BIND_LAZY =  1,
		G_MODULE_BIND_LOCAL = 2,
		G_MODULE_BIND_MASK =  3,
	}
	[Flags]
	public enum GMountMountFlags : uint {
		G_MOUNT_MOUNT_NONE = 0,
	}
	public enum GMountOperationResult : uint {
		G_MOUNT_OPERATION_HANDLED =   0,
		G_MOUNT_OPERATION_ABORTED =   1,
		G_MOUNT_OPERATION_UNHANDLED = 2,
	}
	[Flags]
	public enum GMountUnmountFlags : uint {
		G_MOUNT_UNMOUNT_NONE =  0,
		G_MOUNT_UNMOUNT_FORCE = 1,
	}
	public enum GNetworkConnectivity : uint {
		G_NETWORK_CONNECTIVITY_LOCAL =   1,
		G_NETWORK_CONNECTIVITY_LIMITED = 2,
		G_NETWORK_CONNECTIVITY_PORTAL =  3,
		G_NETWORK_CONNECTIVITY_FULL =    4,
	}
	public enum GNormalizeMode : uint {
		G_NORMALIZE_DEFAULT =         0,
		G_NORMALIZE_NFD =             0,
		G_NORMALIZE_DEFAULT_COMPOSE = 1,
		G_NORMALIZE_NFC =             1,
		G_NORMALIZE_ALL =             2,
		G_NORMALIZE_NFKD =            2,
		G_NORMALIZE_ALL_COMPOSE =     3,
		G_NORMALIZE_NFKC =            3,
	}
	public enum GNotificationPriority : uint {
		G_NOTIFICATION_PRIORITY_NORMAL = 0,
		G_NOTIFICATION_PRIORITY_LOW =    1,
		G_NOTIFICATION_PRIORITY_HIGH =   2,
		G_NOTIFICATION_PRIORITY_URGENT = 3,
	}
	public enum GNumberParserError : uint {
		G_NUMBER_PARSER_ERROR_INVALID =       0,
		G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = 1,
	}
	public enum GOnceStatus : uint {
		G_ONCE_STATUS_NOTCALLED = 0,
		G_ONCE_STATUS_PROGRESS =  1,
		G_ONCE_STATUS_READY =     2,
	}
	public enum GOptionArg : uint {
		G_OPTION_ARG_NONE =           0,
		G_OPTION_ARG_STRING =         1,
		G_OPTION_ARG_INT =            2,
		G_OPTION_ARG_CALLBACK =       3,
		G_OPTION_ARG_FILENAME =       4,
		G_OPTION_ARG_STRING_ARRAY =   5,
		G_OPTION_ARG_FILENAME_ARRAY = 6,
		G_OPTION_ARG_DOUBLE =         7,
		G_OPTION_ARG_INT64 =          8,
	}
	public enum GOptionError : uint {
		G_OPTION_ERROR_UNKNOWN_OPTION = 0,
		G_OPTION_ERROR_BAD_VALUE =      1,
		G_OPTION_ERROR_FAILED =         2,
	}
	[Flags]
	public enum GOptionFlags : uint {
		G_OPTION_FLAG_NONE =          0,
		G_OPTION_FLAG_HIDDEN =        1,
		G_OPTION_FLAG_IN_MAIN =       2,
		G_OPTION_FLAG_REVERSE =       4,
		G_OPTION_FLAG_NO_ARG =        8,
		G_OPTION_FLAG_FILENAME =     16,
		G_OPTION_FLAG_OPTIONAL_ARG = 32,
		G_OPTION_FLAG_NOALIAS =      64,
	}
	[Flags]
	public enum GOutputStreamSpliceFlags : uint {
		G_OUTPUT_STREAM_SPLICE_NONE =         0,
		G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1,
		G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2,
	}
	[Flags]
	public enum GParamFlags : int {
		None =                             0,
		G_PARAM_READABLE =                 1,
		G_PARAM_WRITABLE =                 2,
		G_PARAM_READWRITE =                3,
		G_PARAM_CONSTRUCT =                4,
		G_PARAM_CONSTRUCT_ONLY =           8,
		G_PARAM_LAX_VALIDATION =          16,
		G_PARAM_STATIC_NAME =             32,
		G_PARAM_PRIVATE =                 32,
		G_PARAM_STATIC_NICK =             64,
		G_PARAM_STATIC_BLURB =           128,
		G_PARAM_EXPLICIT_NOTIFY = 1073741824,
		G_PARAM_DEPRECATED =     -2147483648,
	}
	public enum GPasswordSave : uint {
		G_PASSWORD_SAVE_NEVER =       0,
		G_PASSWORD_SAVE_FOR_SESSION = 1,
		G_PASSWORD_SAVE_PERMANENTLY = 2,
	}
	public enum GPollableReturn : int {
		G_POLLABLE_RETURN_FAILED =        0,
		G_POLLABLE_RETURN_OK =            1,
		G_POLLABLE_RETURN_WOULD_BLOCK = -27,
	}
	public enum GRegexCompileFlags : uint {
		G_REGEX_DEFAULT =                  0,
		G_REGEX_CASELESS =                 1,
		G_REGEX_MULTILINE =                2,
		G_REGEX_DOTALL =                   4,
		G_REGEX_EXTENDED =                 8,
		G_REGEX_ANCHORED =                16,
		G_REGEX_DOLLAR_ENDONLY =          32,
		G_REGEX_UNGREEDY =               512,
		G_REGEX_RAW =                   2048,
		G_REGEX_NO_AUTO_CAPTURE =       4096,
		G_REGEX_OPTIMIZE =              8192,
		G_REGEX_FIRSTLINE =           262144,
		G_REGEX_DUPNAMES =            524288,
		G_REGEX_NEWLINE_CR =         1048576,
		G_REGEX_NEWLINE_LF =         2097152,
		G_REGEX_NEWLINE_CRLF =       3145728,
		G_REGEX_NEWLINE_ANYCRLF =    5242880,
		G_REGEX_BSR_ANYCRLF =        8388608,
		G_REGEX_JAVASCRIPT_COMPAT = 33554432,
	}
	public enum GRegexError : uint {
		G_REGEX_ERROR_COMPILE =                                        0,
		G_REGEX_ERROR_OPTIMIZE =                                       1,
		G_REGEX_ERROR_REPLACE =                                        2,
		G_REGEX_ERROR_MATCH =                                          3,
		G_REGEX_ERROR_INTERNAL =                                       4,
		G_REGEX_ERROR_STRAY_BACKSLASH =                              101,
		G_REGEX_ERROR_MISSING_CONTROL_CHAR =                         102,
		G_REGEX_ERROR_UNRECOGNIZED_ESCAPE =                          103,
		G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER =                     104,
		G_REGEX_ERROR_QUANTIFIER_TOO_BIG =                           105,
		G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS =                 106,
		G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS =            107,
		G_REGEX_ERROR_RANGE_OUT_OF_ORDER =                           108,
		G_REGEX_ERROR_NOTHING_TO_REPEAT =                            109,
		G_REGEX_ERROR_UNRECOGNIZED_CHARACTER =                       112,
		G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS =              113,
		G_REGEX_ERROR_UNMATCHED_PARENTHESIS =                        114,
		G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE =              115,
		G_REGEX_ERROR_UNTERMINATED_COMMENT =                         118,
		G_REGEX_ERROR_EXPRESSION_TOO_LARGE =                         120,
		G_REGEX_ERROR_MEMORY_ERROR =                                 121,
		G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND =                   125,
		G_REGEX_ERROR_MALFORMED_CONDITION =                          126,
		G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES =                127,
		G_REGEX_ERROR_ASSERTION_EXPECTED =                           128,
		G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME =                     130,
		G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED =       131,
		G_REGEX_ERROR_HEX_CODE_TOO_LARGE =                           134,
		G_REGEX_ERROR_INVALID_CONDITION =                            135,
		G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND =              136,
		G_REGEX_ERROR_INFINITE_LOOP =                                140,
		G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR =           142,
		G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME =                    143,
		G_REGEX_ERROR_MALFORMED_PROPERTY =                           146,
		G_REGEX_ERROR_UNKNOWN_PROPERTY =                             147,
		G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG =                     148,
		G_REGEX_ERROR_TOO_MANY_SUBPATTERNS =                         149,
		G_REGEX_ERROR_INVALID_OCTAL_VALUE =                          151,
		G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE =                  154,
		G_REGEX_ERROR_DEFINE_REPETION =                              155,
		G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS =                 156,
		G_REGEX_ERROR_MISSING_BACK_REFERENCE =                       157,
		G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE =                   158,
		G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
		G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB =            160,
		G_REGEX_ERROR_NUMBER_TOO_BIG =                               161,
		G_REGEX_ERROR_MISSING_SUBPATTERN_NAME =                      162,
		G_REGEX_ERROR_MISSING_DIGIT =                                163,
		G_REGEX_ERROR_INVALID_DATA_CHARACTER =                       164,
		G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME =                        165,
		G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED =  166,
		G_REGEX_ERROR_INVALID_CONTROL_CHAR =                         168,
		G_REGEX_ERROR_MISSING_NAME =                                 169,
		G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS =                       171,
		G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES =                  172,
		G_REGEX_ERROR_NAME_TOO_LONG =                                175,
		G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE =                    176,
	}
	public enum GRegexMatchFlags : uint {
		G_REGEX_MATCH_DEFAULT =                  0,
		G_REGEX_MATCH_ANCHORED =                16,
		G_REGEX_MATCH_NOTBOL =                 128,
		G_REGEX_MATCH_NOTEOL =                 256,
		G_REGEX_MATCH_NOTEMPTY =              1024,
		G_REGEX_MATCH_PARTIAL =              32768,
		G_REGEX_MATCH_NEWLINE_CR =         1048576,
		G_REGEX_MATCH_NEWLINE_LF =         2097152,
		G_REGEX_MATCH_NEWLINE_CRLF =       3145728,
		G_REGEX_MATCH_NEWLINE_ANY =        4194304,
		G_REGEX_MATCH_NEWLINE_ANYCRLF =    5242880,
		G_REGEX_MATCH_BSR_ANYCRLF =        8388608,
		G_REGEX_MATCH_BSR_ANY =           16777216,
		G_REGEX_MATCH_PARTIAL_SOFT =         32768,
		G_REGEX_MATCH_PARTIAL_HARD =     134217728,
		G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456,
	}
	public enum GResolverError : uint {
		G_RESOLVER_ERROR_NOT_FOUND =         0,
		G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1,
		G_RESOLVER_ERROR_INTERNAL =          2,
	}
	[Flags]
	public enum GResolverNameLookupFlags : uint {
		G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT =   0,
		G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1,
		G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 2,
	}
	public enum GResolverRecordType : uint {
		G_RESOLVER_RECORD_SRV = 1,
		G_RESOLVER_RECORD_MX =  2,
		G_RESOLVER_RECORD_TXT = 3,
		G_RESOLVER_RECORD_SOA = 4,
		G_RESOLVER_RECORD_NS =  5,
	}
	public enum GResourceError : uint {
		G_RESOURCE_ERROR_NOT_FOUND = 0,
		G_RESOURCE_ERROR_INTERNAL =  1,
	}
	[Flags]
	public enum GResourceFlags : uint {
		G_RESOURCE_FLAGS_NONE =       0,
		G_RESOURCE_FLAGS_COMPRESSED = 1,
	}
	[Flags]
	public enum GResourceLookupFlags : uint {
		G_RESOURCE_LOOKUP_FLAGS_NONE = 0,
	}
	public enum GSeekType : uint {
		G_SEEK_CUR = 0,
		G_SEEK_SET = 1,
		G_SEEK_END = 2,
	}
	[Flags]
	public enum GSettingsBindFlags : uint {
		G_SETTINGS_BIND_DEFAULT =         0,
		G_SETTINGS_BIND_GET =             1,
		G_SETTINGS_BIND_SET =             2,
		G_SETTINGS_BIND_NO_SENSITIVITY =  4,
		G_SETTINGS_BIND_GET_NO_CHANGES =  8,
		G_SETTINGS_BIND_INVERT_BOOLEAN = 16,
	}
	public enum GShellError : uint {
		G_SHELL_ERROR_BAD_QUOTING =  0,
		G_SHELL_ERROR_EMPTY_STRING = 1,
		G_SHELL_ERROR_FAILED =       2,
	}
	[Flags]
	public enum GSignalFlags : uint {
		None =                                0,
		G_SIGNAL_RUN_FIRST =                  1,
		G_SIGNAL_RUN_LAST =                   2,
		G_SIGNAL_RUN_CLEANUP =                4,
		G_SIGNAL_NO_RECURSE =                 8,
		G_SIGNAL_DETAILED =                  16,
		G_SIGNAL_ACTION =                    32,
		G_SIGNAL_NO_HOOKS =                  64,
		G_SIGNAL_MUST_COLLECT =             128,
		G_SIGNAL_DEPRECATED =               256,
		G_SIGNAL_ACCUMULATOR_FIRST_RUN = 131072,
	}
	[Flags]
	public enum GSignalMatchType : uint {
		None =                      0,
		G_SIGNAL_MATCH_ID =         1,
		G_SIGNAL_MATCH_DETAIL =     2,
		G_SIGNAL_MATCH_CLOSURE =    4,
		G_SIGNAL_MATCH_FUNC =       8,
		G_SIGNAL_MATCH_DATA =      16,
		G_SIGNAL_MATCH_UNBLOCKED = 32,
	}
	public enum GSliceConfig : uint {
		G_SLICE_CONFIG_ALWAYS_MALLOC =      1,
		G_SLICE_CONFIG_BYPASS_MAGAZINES =   2,
		G_SLICE_CONFIG_WORKING_SET_MSECS =  3,
		G_SLICE_CONFIG_COLOR_INCREMENT =    4,
		G_SLICE_CONFIG_CHUNK_SIZES =        5,
		G_SLICE_CONFIG_CONTENTION_COUNTER = 6,
	}
	public enum GSocketClientEvent : uint {
		G_SOCKET_CLIENT_RESOLVING =         0,
		G_SOCKET_CLIENT_RESOLVED =          1,
		G_SOCKET_CLIENT_CONNECTING =        2,
		G_SOCKET_CLIENT_CONNECTED =         3,
		G_SOCKET_CLIENT_PROXY_NEGOTIATING = 4,
		G_SOCKET_CLIENT_PROXY_NEGOTIATED =  5,
		G_SOCKET_CLIENT_TLS_HANDSHAKING =   6,
		G_SOCKET_CLIENT_TLS_HANDSHAKED =    7,
		G_SOCKET_CLIENT_COMPLETE =          8,
	}
	public enum GSocketFamily : uint {
		G_SOCKET_FAMILY_INVALID = 0,
		G_SOCKET_FAMILY_UNIX =    1,
		G_SOCKET_FAMILY_IPV4 =    2,
		G_SOCKET_FAMILY_IPV6 =   10,
	}
	public enum GSocketListenerEvent : uint {
		G_SOCKET_LISTENER_BINDING =   0,
		G_SOCKET_LISTENER_BOUND =     1,
		G_SOCKET_LISTENER_LISTENING = 2,
		G_SOCKET_LISTENER_LISTENED =  3,
	}
	[Flags]
	public enum GSocketMsgFlags : uint {
		G_SOCKET_MSG_NONE =      0,
		G_SOCKET_MSG_OOB =       1,
		G_SOCKET_MSG_PEEK =      2,
		G_SOCKET_MSG_DONTROUTE = 4,
	}
	public enum GSocketProtocol : int {
		G_SOCKET_PROTOCOL_UNKNOWN = -1,
		G_SOCKET_PROTOCOL_DEFAULT =  0,
		G_SOCKET_PROTOCOL_TCP =      6,
		G_SOCKET_PROTOCOL_UDP =     17,
		G_SOCKET_PROTOCOL_SCTP =   132,
	}
	public enum GSocketType : uint {
		G_SOCKET_TYPE_INVALID =   0,
		G_SOCKET_TYPE_STREAM =    1,
		G_SOCKET_TYPE_DATAGRAM =  2,
		G_SOCKET_TYPE_SEQPACKET = 3,
	}
	public enum GSpawnError : uint {
		G_SPAWN_ERROR_FORK =        0,
		G_SPAWN_ERROR_READ =        1,
		G_SPAWN_ERROR_CHDIR =       2,
		G_SPAWN_ERROR_ACCES =       3,
		G_SPAWN_ERROR_PERM =        4,
		G_SPAWN_ERROR_TOO_BIG =     5,
		G_SPAWN_ERROR_2BIG =        5,
		G_SPAWN_ERROR_NOEXEC =      6,
		G_SPAWN_ERROR_NAMETOOLONG = 7,
		G_SPAWN_ERROR_NOENT =       8,
		G_SPAWN_ERROR_NOMEM =       9,
		G_SPAWN_ERROR_NOTDIR =     10,
		G_SPAWN_ERROR_LOOP =       11,
		G_SPAWN_ERROR_TXTBUSY =    12,
		G_SPAWN_ERROR_IO =         13,
		G_SPAWN_ERROR_NFILE =      14,
		G_SPAWN_ERROR_MFILE =      15,
		G_SPAWN_ERROR_INVAL =      16,
		G_SPAWN_ERROR_ISDIR =      17,
		G_SPAWN_ERROR_LIBBAD =     18,
		G_SPAWN_ERROR_FAILED =     19,
	}
	[Flags]
	public enum GSpawnFlags : uint {
		G_SPAWN_DEFAULT =                  0,
		G_SPAWN_LEAVE_DESCRIPTORS_OPEN =   1,
		G_SPAWN_DO_NOT_REAP_CHILD =        2,
		G_SPAWN_SEARCH_PATH =              4,
		G_SPAWN_STDOUT_TO_DEV_NULL =       8,
		G_SPAWN_STDERR_TO_DEV_NULL =      16,
		G_SPAWN_CHILD_INHERITS_STDIN =    32,
		G_SPAWN_FILE_AND_ARGV_ZERO =      64,
		G_SPAWN_SEARCH_PATH_FROM_ENVP =  128,
		G_SPAWN_CLOEXEC_PIPES =          256,
		G_SPAWN_CHILD_INHERITS_STDOUT =  512,
		G_SPAWN_CHILD_INHERITS_STDERR = 1024,
		G_SPAWN_STDIN_FROM_DEV_NULL =   2048,
	}
	[Flags]
	public enum GSubprocessFlags : uint {
		G_SUBPROCESS_FLAGS_NONE =                    0,
		G_SUBPROCESS_FLAGS_STDIN_PIPE =              1,
		G_SUBPROCESS_FLAGS_STDIN_INHERIT =           2,
		G_SUBPROCESS_FLAGS_STDOUT_PIPE =             4,
		G_SUBPROCESS_FLAGS_STDOUT_SILENCE =          8,
		G_SUBPROCESS_FLAGS_STDERR_PIPE =            16,
		G_SUBPROCESS_FLAGS_STDERR_SILENCE =         32,
		G_SUBPROCESS_FLAGS_STDERR_MERGE =           64,
		G_SUBPROCESS_FLAGS_INHERIT_FDS =           128,
		G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP = 256,
	}
	public enum GTaskPriority : uint {
		G_PRIORITY_DEFAULT =        0,
		G_PRIORITY_HIGH_IDLE =    100,
		G_PRIORITY_DEFAULT_IDLE = 200,
		G_PRIORITY_LOW =          300,
		G_PRIORITY_HIGH =  4294967196,
	}
	[Flags]
	public enum GTestDBusFlags : uint {
		G_TEST_DBUS_NONE = 0,
	}
	public enum GTestFileType : uint {
		G_TEST_DIST =  0,
		G_TEST_BUILT = 1,
	}
	public enum GTestLogType : uint {
		G_TEST_LOG_NONE =         0,
		G_TEST_LOG_ERROR =        1,
		G_TEST_LOG_START_BINARY = 2,
		G_TEST_LOG_LIST_CASE =    3,
		G_TEST_LOG_SKIP_CASE =    4,
		G_TEST_LOG_START_CASE =   5,
		G_TEST_LOG_STOP_CASE =    6,
		G_TEST_LOG_MIN_RESULT =   7,
		G_TEST_LOG_MAX_RESULT =   8,
		G_TEST_LOG_MESSAGE =      9,
		G_TEST_LOG_START_SUITE = 10,
		G_TEST_LOG_STOP_SUITE =  11,
	}
	public enum GTestResult : uint {
		G_TEST_RUN_SUCCESS =    0,
		G_TEST_RUN_SKIPPED =    1,
		G_TEST_RUN_FAILURE =    2,
		G_TEST_RUN_INCOMPLETE = 3,
	}
	[Flags]
	public enum GTestSubprocessFlags : uint {
		G_TEST_SUBPROCESS_DEFAULT =        0,
		G_TEST_SUBPROCESS_INHERIT_STDIN =  1,
		G_TEST_SUBPROCESS_INHERIT_STDOUT = 2,
		G_TEST_SUBPROCESS_INHERIT_STDERR = 4,
	}
	[Flags]
	public enum GTestTrapFlags : uint {
		G_TEST_TRAP_DEFAULT =          0,
		G_TEST_TRAP_SILENCE_STDOUT = 128,
		G_TEST_TRAP_SILENCE_STDERR = 256,
		G_TEST_TRAP_INHERIT_STDIN =  512,
	}
	public enum GThreadError : uint {
		G_THREAD_ERROR_AGAIN = 0,
	}
	public enum GThreadPriority : uint {
		G_THREAD_PRIORITY_LOW =    0,
		G_THREAD_PRIORITY_NORMAL = 1,
		G_THREAD_PRIORITY_HIGH =   2,
		G_THREAD_PRIORITY_URGENT = 3,
	}
	public enum GTimeType : uint {
		G_TIME_TYPE_STANDARD =  0,
		G_TIME_TYPE_DAYLIGHT =  1,
		G_TIME_TYPE_UNIVERSAL = 2,
	}
	public enum GTlsAuthenticationMode : uint {
		G_TLS_AUTHENTICATION_NONE =      0,
		G_TLS_AUTHENTICATION_REQUESTED = 1,
		G_TLS_AUTHENTICATION_REQUIRED =  2,
	}
	[Flags]
	public enum GTlsCertificateFlags : uint {
		G_TLS_CERTIFICATE_NO_FLAGS =       0,
		G_TLS_CERTIFICATE_UNKNOWN_CA =     1,
		G_TLS_CERTIFICATE_BAD_IDENTITY =   2,
		G_TLS_CERTIFICATE_NOT_ACTIVATED =  4,
		G_TLS_CERTIFICATE_EXPIRED =        8,
		G_TLS_CERTIFICATE_REVOKED =       16,
		G_TLS_CERTIFICATE_INSECURE =      32,
		G_TLS_CERTIFICATE_GENERIC_ERROR = 64,
		G_TLS_CERTIFICATE_VALIDATE_ALL = 127,
	}
	[Flags]
	public enum GTlsCertificateRequestFlags : uint {
		G_TLS_CERTIFICATE_REQUEST_NONE = 0,
	}
	public enum GTlsChannelBindingError : uint {
		G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED = 0,
		G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE =   1,
		G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE =   2,
		G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED =   3,
		G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR =   4,
	}
	public enum GTlsChannelBindingType : uint {
		G_TLS_CHANNEL_BINDING_TLS_UNIQUE =           0,
		G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT = 1,
		G_TLS_CHANNEL_BINDING_TLS_EXPORTER =         2,
	}
	[Flags]
	public enum GTlsDatabaseLookupFlags : uint {
		G_TLS_DATABASE_LOOKUP_NONE =    0,
		G_TLS_DATABASE_LOOKUP_KEYPAIR = 1,
	}
	[Flags]
	public enum GTlsDatabaseVerifyFlags : uint {
		G_TLS_DATABASE_VERIFY_NONE = 0,
	}
	public enum GTlsError : uint {
		G_TLS_ERROR_UNAVAILABLE =              0,
		G_TLS_ERROR_MISC =                     1,
		G_TLS_ERROR_BAD_CERTIFICATE =          2,
		G_TLS_ERROR_NOT_TLS =                  3,
		G_TLS_ERROR_HANDSHAKE =                4,
		G_TLS_ERROR_CERTIFICATE_REQUIRED =     5,
		G_TLS_ERROR_EOF =                      6,
		G_TLS_ERROR_INAPPROPRIATE_FALLBACK =   7,
		G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD = 8,
	}
	public enum GTlsInteractionResult : uint {
		G_TLS_INTERACTION_UNHANDLED = 0,
		G_TLS_INTERACTION_HANDLED =   1,
		G_TLS_INTERACTION_FAILED =    2,
	}
	[Flags]
	public enum GTlsPasswordFlags : uint {
		G_TLS_PASSWORD_NONE =                     0,
		G_TLS_PASSWORD_RETRY =                    2,
		G_TLS_PASSWORD_MANY_TRIES =               4,
		G_TLS_PASSWORD_FINAL_TRY =                8,
		G_TLS_PASSWORD_PKCS11_USER =             16,
		G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = 32,
		G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = 64,
	}
	public enum GTlsProtocolVersion : uint {
		G_TLS_PROTOCOL_VERSION_UNKNOWN =    0,
		G_TLS_PROTOCOL_VERSION_SSL_3_0 =    1,
		G_TLS_PROTOCOL_VERSION_TLS_1_0 =    2,
		G_TLS_PROTOCOL_VERSION_TLS_1_1 =    3,
		G_TLS_PROTOCOL_VERSION_TLS_1_2 =    4,
		G_TLS_PROTOCOL_VERSION_TLS_1_3 =    5,
		G_TLS_PROTOCOL_VERSION_DTLS_1_0 = 201,
		G_TLS_PROTOCOL_VERSION_DTLS_1_2 = 202,
	}
	public enum GTlsRehandshakeMode : uint {
		G_TLS_REHANDSHAKE_NEVER =    0,
		G_TLS_REHANDSHAKE_SAFELY =   1,
		G_TLS_REHANDSHAKE_UNSAFELY = 2,
	}
	public enum GTokenType : uint {
		G_TOKEN_EOF =               0,
		G_TOKEN_LEFT_PAREN =       40,
		G_TOKEN_RIGHT_PAREN =      41,
		G_TOKEN_LEFT_CURLY =      123,
		G_TOKEN_RIGHT_CURLY =     125,
		G_TOKEN_LEFT_BRACE =       91,
		G_TOKEN_RIGHT_BRACE =      93,
		G_TOKEN_EQUAL_SIGN =       61,
		G_TOKEN_COMMA =            44,
		G_TOKEN_NONE =            256,
		G_TOKEN_ERROR =           257,
		G_TOKEN_CHAR =            258,
		G_TOKEN_BINARY =          259,
		G_TOKEN_OCTAL =           260,
		G_TOKEN_INT =             261,
		G_TOKEN_HEX =             262,
		G_TOKEN_FLOAT =           263,
		G_TOKEN_STRING =          264,
		G_TOKEN_SYMBOL =          265,
		G_TOKEN_IDENTIFIER =      266,
		G_TOKEN_IDENTIFIER_NULL = 267,
		G_TOKEN_COMMENT_SINGLE =  268,
		G_TOKEN_COMMENT_MULTI =   269,
		G_TOKEN_LAST =            270,
	}
	[Flags]
	public enum GTraverseFlags : uint {
		None =                  0,
		G_TRAVERSE_LEAVES =     1,
		G_TRAVERSE_NON_LEAVES = 2,
		G_TRAVERSE_ALL =        3,
		G_TRAVERSE_MASK =       3,
		G_TRAVERSE_LEAFS =      1,
		G_TRAVERSE_NON_LEAFS =  2,
	}
	public enum GTraverseType : uint {
		G_IN_ORDER =    0,
		G_PRE_ORDER =   1,
		G_POST_ORDER =  2,
		G_LEVEL_ORDER = 3,
	}
	public enum GType : uintptr {
		G_TYPE_INVALID =   0,
		G_TYPE_NONE =      4,
		G_TYPE_INTERFACE = 8,
		G_TYPE_CHAR =     12,
		G_TYPE_UCHAR =    16,
		G_TYPE_BOOLEAN =  20,
		G_TYPE_INT =      24,
		G_TYPE_UINT =     28,
		G_TYPE_LONG =     32,
		G_TYPE_ULONG =    36,
		G_TYPE_INT64 =    40,
		G_TYPE_UINT64 =   44,
		G_TYPE_ENUM =     48,
		G_TYPE_FLAGS =    52,
		G_TYPE_FLOAT =    56,
		G_TYPE_DOUBLE =   60,
		G_TYPE_STRING =   64,
		G_TYPE_POINTER =  68,
		G_TYPE_BOXED =    72,
		G_TYPE_PARAM =    76,
		G_TYPE_OBJECT =   80,
	}
	[Flags]
	public enum GTypeDebugFlags : uint {
		G_TYPE_DEBUG_NONE =           0,
		G_TYPE_DEBUG_OBJECTS =        1,
		G_TYPE_DEBUG_SIGNALS =        2,
		G_TYPE_DEBUG_INSTANCE_COUNT = 4,
		G_TYPE_DEBUG_MASK =           7,
	}
	[Flags]
	public enum GTypeFlags : uint {
		G_TYPE_FLAG_NONE =            0,
		G_TYPE_FLAG_ABSTRACT =       16,
		G_TYPE_FLAG_VALUE_ABSTRACT = 32,
		G_TYPE_FLAG_FINAL =          64,
	}
	[Flags]
	public enum GTypeFundamentalFlags : uint {
		None =                       0,
		G_TYPE_FLAG_CLASSED =        1,
		G_TYPE_FLAG_INSTANTIATABLE = 2,
		G_TYPE_FLAG_DERIVABLE =      4,
		G_TYPE_FLAG_DEEP_DERIVABLE = 8,
	}
	public enum GUnicodeBreakType : uint {
		G_UNICODE_BREAK_MANDATORY =                     0,
		G_UNICODE_BREAK_CARRIAGE_RETURN =               1,
		G_UNICODE_BREAK_LINE_FEED =                     2,
		G_UNICODE_BREAK_COMBINING_MARK =                3,
		G_UNICODE_BREAK_SURROGATE =                     4,
		G_UNICODE_BREAK_ZERO_WIDTH_SPACE =              5,
		G_UNICODE_BREAK_INSEPARABLE =                   6,
		G_UNICODE_BREAK_NON_BREAKING_GLUE =             7,
		G_UNICODE_BREAK_CONTINGENT =                    8,
		G_UNICODE_BREAK_SPACE =                         9,
		G_UNICODE_BREAK_AFTER =                        10,
		G_UNICODE_BREAK_BEFORE =                       11,
		G_UNICODE_BREAK_BEFORE_AND_AFTER =             12,
		G_UNICODE_BREAK_HYPHEN =                       13,
		G_UNICODE_BREAK_NON_STARTER =                  14,
		G_UNICODE_BREAK_OPEN_PUNCTUATION =             15,
		G_UNICODE_BREAK_CLOSE_PUNCTUATION =            16,
		G_UNICODE_BREAK_QUOTATION =                    17,
		G_UNICODE_BREAK_EXCLAMATION =                  18,
		G_UNICODE_BREAK_IDEOGRAPHIC =                  19,
		G_UNICODE_BREAK_NUMERIC =                      20,
		G_UNICODE_BREAK_INFIX_SEPARATOR =              21,
		G_UNICODE_BREAK_SYMBOL =                       22,
		G_UNICODE_BREAK_ALPHABETIC =                   23,
		G_UNICODE_BREAK_PREFIX =                       24,
		G_UNICODE_BREAK_POSTFIX =                      25,
		G_UNICODE_BREAK_COMPLEX_CONTEXT =              26,
		G_UNICODE_BREAK_AMBIGUOUS =                    27,
		G_UNICODE_BREAK_UNKNOWN =                      28,
		G_UNICODE_BREAK_NEXT_LINE =                    29,
		G_UNICODE_BREAK_WORD_JOINER =                  30,
		G_UNICODE_BREAK_HANGUL_L_JAMO =                31,
		G_UNICODE_BREAK_HANGUL_V_JAMO =                32,
		G_UNICODE_BREAK_HANGUL_T_JAMO =                33,
		G_UNICODE_BREAK_HANGUL_LV_SYLLABLE =           34,
		G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE =          35,
		G_UNICODE_BREAK_CLOSE_PARANTHESIS =            36,
		G_UNICODE_BREAK_CLOSE_PARENTHESIS =            36,
		G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37,
		G_UNICODE_BREAK_HEBREW_LETTER =                38,
		G_UNICODE_BREAK_REGIONAL_INDICATOR =           39,
		G_UNICODE_BREAK_EMOJI_BASE =                   40,
		G_UNICODE_BREAK_EMOJI_MODIFIER =               41,
		G_UNICODE_BREAK_ZERO_WIDTH_JOINER =            42,
	}
	public enum GUnicodeScript : int {
		G_UNICODE_SCRIPT_INVALID_CODE =            -1,
		G_UNICODE_SCRIPT_COMMON =                   0,
		G_UNICODE_SCRIPT_INHERITED =                1,
		G_UNICODE_SCRIPT_ARABIC =                   2,
		G_UNICODE_SCRIPT_ARMENIAN =                 3,
		G_UNICODE_SCRIPT_BENGALI =                  4,
		G_UNICODE_SCRIPT_BOPOMOFO =                 5,
		G_UNICODE_SCRIPT_CHEROKEE =                 6,
		G_UNICODE_SCRIPT_COPTIC =                   7,
		G_UNICODE_SCRIPT_CYRILLIC =                 8,
		G_UNICODE_SCRIPT_DESERET =                  9,
		G_UNICODE_SCRIPT_DEVANAGARI =              10,
		G_UNICODE_SCRIPT_ETHIOPIC =                11,
		G_UNICODE_SCRIPT_GEORGIAN =                12,
		G_UNICODE_SCRIPT_GOTHIC =                  13,
		G_UNICODE_SCRIPT_GREEK =                   14,
		G_UNICODE_SCRIPT_GUJARATI =                15,
		G_UNICODE_SCRIPT_GURMUKHI =                16,
		G_UNICODE_SCRIPT_HAN =                     17,
		G_UNICODE_SCRIPT_HANGUL =                  18,
		G_UNICODE_SCRIPT_HEBREW =                  19,
		G_UNICODE_SCRIPT_HIRAGANA =                20,
		G_UNICODE_SCRIPT_KANNADA =                 21,
		G_UNICODE_SCRIPT_KATAKANA =                22,
		G_UNICODE_SCRIPT_KHMER =                   23,
		G_UNICODE_SCRIPT_LAO =                     24,
		G_UNICODE_SCRIPT_LATIN =                   25,
		G_UNICODE_SCRIPT_MALAYALAM =               26,
		G_UNICODE_SCRIPT_MONGOLIAN =               27,
		G_UNICODE_SCRIPT_MYANMAR =                 28,
		G_UNICODE_SCRIPT_OGHAM =                   29,
		G_UNICODE_SCRIPT_OLD_ITALIC =              30,
		G_UNICODE_SCRIPT_ORIYA =                   31,
		G_UNICODE_SCRIPT_RUNIC =                   32,
		G_UNICODE_SCRIPT_SINHALA =                 33,
		G_UNICODE_SCRIPT_SYRIAC =                  34,
		G_UNICODE_SCRIPT_TAMIL =                   35,
		G_UNICODE_SCRIPT_TELUGU =                  36,
		G_UNICODE_SCRIPT_THAANA =                  37,
		G_UNICODE_SCRIPT_THAI =                    38,
		G_UNICODE_SCRIPT_TIBETAN =                 39,
		G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL =     40,
		G_UNICODE_SCRIPT_YI =                      41,
		G_UNICODE_SCRIPT_TAGALOG =                 42,
		G_UNICODE_SCRIPT_HANUNOO =                 43,
		G_UNICODE_SCRIPT_BUHID =                   44,
		G_UNICODE_SCRIPT_TAGBANWA =                45,
		G_UNICODE_SCRIPT_BRAILLE =                 46,
		G_UNICODE_SCRIPT_CYPRIOT =                 47,
		G_UNICODE_SCRIPT_LIMBU =                   48,
		G_UNICODE_SCRIPT_OSMANYA =                 49,
		G_UNICODE_SCRIPT_SHAVIAN =                 50,
		G_UNICODE_SCRIPT_LINEAR_B =                51,
		G_UNICODE_SCRIPT_TAI_LE =                  52,
		G_UNICODE_SCRIPT_UGARITIC =                53,
		G_UNICODE_SCRIPT_NEW_TAI_LUE =             54,
		G_UNICODE_SCRIPT_BUGINESE =                55,
		G_UNICODE_SCRIPT_GLAGOLITIC =              56,
		G_UNICODE_SCRIPT_TIFINAGH =                57,
		G_UNICODE_SCRIPT_SYLOTI_NAGRI =            58,
		G_UNICODE_SCRIPT_OLD_PERSIAN =             59,
		G_UNICODE_SCRIPT_KHAROSHTHI =              60,
		G_UNICODE_SCRIPT_UNKNOWN =                 61,
		G_UNICODE_SCRIPT_BALINESE =                62,
		G_UNICODE_SCRIPT_CUNEIFORM =               63,
		G_UNICODE_SCRIPT_PHOENICIAN =              64,
		G_UNICODE_SCRIPT_PHAGS_PA =                65,
		G_UNICODE_SCRIPT_NKO =                     66,
		G_UNICODE_SCRIPT_KAYAH_LI =                67,
		G_UNICODE_SCRIPT_LEPCHA =                  68,
		G_UNICODE_SCRIPT_REJANG =                  69,
		G_UNICODE_SCRIPT_SUNDANESE =               70,
		G_UNICODE_SCRIPT_SAURASHTRA =              71,
		G_UNICODE_SCRIPT_CHAM =                    72,
		G_UNICODE_SCRIPT_OL_CHIKI =                73,
		G_UNICODE_SCRIPT_VAI =                     74,
		G_UNICODE_SCRIPT_CARIAN =                  75,
		G_UNICODE_SCRIPT_LYCIAN =                  76,
		G_UNICODE_SCRIPT_LYDIAN =                  77,
		G_UNICODE_SCRIPT_AVESTAN =                 78,
		G_UNICODE_SCRIPT_BAMUM =                   79,
		G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS =    80,
		G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC =        81,
		G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI =   82,
		G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN =  83,
		G_UNICODE_SCRIPT_JAVANESE =                84,
		G_UNICODE_SCRIPT_KAITHI =                  85,
		G_UNICODE_SCRIPT_LISU =                    86,
		G_UNICODE_SCRIPT_MEETEI_MAYEK =            87,
		G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN =       88,
		G_UNICODE_SCRIPT_OLD_TURKIC =              89,
		G_UNICODE_SCRIPT_SAMARITAN =               90,
		G_UNICODE_SCRIPT_TAI_THAM =                91,
		G_UNICODE_SCRIPT_TAI_VIET =                92,
		G_UNICODE_SCRIPT_BATAK =                   93,
		G_UNICODE_SCRIPT_BRAHMI =                  94,
		G_UNICODE_SCRIPT_MANDAIC =                 95,
		G_UNICODE_SCRIPT_CHAKMA =                  96,
		G_UNICODE_SCRIPT_MEROITIC_CURSIVE =        97,
		G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS =    98,
		G_UNICODE_SCRIPT_MIAO =                    99,
		G_UNICODE_SCRIPT_SHARADA =                100,
		G_UNICODE_SCRIPT_SORA_SOMPENG =           101,
		G_UNICODE_SCRIPT_TAKRI =                  102,
		G_UNICODE_SCRIPT_BASSA_VAH =              103,
		G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN =     104,
		G_UNICODE_SCRIPT_DUPLOYAN =               105,
		G_UNICODE_SCRIPT_ELBASAN =                106,
		G_UNICODE_SCRIPT_GRANTHA =                107,
		G_UNICODE_SCRIPT_KHOJKI =                 108,
		G_UNICODE_SCRIPT_KHUDAWADI =              109,
		G_UNICODE_SCRIPT_LINEAR_A =               110,
		G_UNICODE_SCRIPT_MAHAJANI =               111,
		G_UNICODE_SCRIPT_MANICHAEAN =             112,
		G_UNICODE_SCRIPT_MENDE_KIKAKUI =          113,
		G_UNICODE_SCRIPT_MODI =                   114,
		G_UNICODE_SCRIPT_MRO =                    115,
		G_UNICODE_SCRIPT_NABATAEAN =              116,
		G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN =      117,
		G_UNICODE_SCRIPT_OLD_PERMIC =             118,
		G_UNICODE_SCRIPT_PAHAWH_HMONG =           119,
		G_UNICODE_SCRIPT_PALMYRENE =              120,
		G_UNICODE_SCRIPT_PAU_CIN_HAU =            121,
		G_UNICODE_SCRIPT_PSALTER_PAHLAVI =        122,
		G_UNICODE_SCRIPT_SIDDHAM =                123,
		G_UNICODE_SCRIPT_TIRHUTA =                124,
		G_UNICODE_SCRIPT_WARANG_CITI =            125,
		G_UNICODE_SCRIPT_AHOM =                   126,
		G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS =  127,
		G_UNICODE_SCRIPT_HATRAN =                 128,
		G_UNICODE_SCRIPT_MULTANI =                129,
		G_UNICODE_SCRIPT_OLD_HUNGARIAN =          130,
		G_UNICODE_SCRIPT_SIGNWRITING =            131,
		G_UNICODE_SCRIPT_ADLAM =                  132,
		G_UNICODE_SCRIPT_BHAIKSUKI =              133,
		G_UNICODE_SCRIPT_MARCHEN =                134,
		G_UNICODE_SCRIPT_NEWA =                   135,
		G_UNICODE_SCRIPT_OSAGE =                  136,
		G_UNICODE_SCRIPT_TANGUT =                 137,
		G_UNICODE_SCRIPT_MASARAM_GONDI =          138,
		G_UNICODE_SCRIPT_NUSHU =                  139,
		G_UNICODE_SCRIPT_SOYOMBO =                140,
		G_UNICODE_SCRIPT_ZANABAZAR_SQUARE =       141,
		G_UNICODE_SCRIPT_DOGRA =                  142,
		G_UNICODE_SCRIPT_GUNJALA_GONDI =          143,
		G_UNICODE_SCRIPT_HANIFI_ROHINGYA =        144,
		G_UNICODE_SCRIPT_MAKASAR =                145,
		G_UNICODE_SCRIPT_MEDEFAIDRIN =            146,
		G_UNICODE_SCRIPT_OLD_SOGDIAN =            147,
		G_UNICODE_SCRIPT_SOGDIAN =                148,
		G_UNICODE_SCRIPT_ELYMAIC =                149,
		G_UNICODE_SCRIPT_NANDINAGARI =            150,
		G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG = 151,
		G_UNICODE_SCRIPT_WANCHO =                 152,
		G_UNICODE_SCRIPT_CHORASMIAN =             153,
		G_UNICODE_SCRIPT_DIVES_AKURU =            154,
		G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT =    155,
		G_UNICODE_SCRIPT_YEZIDI =                 156,
		G_UNICODE_SCRIPT_CYPRO_MINOAN =           157,
		G_UNICODE_SCRIPT_OLD_UYGHUR =             158,
		G_UNICODE_SCRIPT_TANGSA =                 159,
		G_UNICODE_SCRIPT_TOTO =                   160,
		G_UNICODE_SCRIPT_VITHKUQI =               161,
		G_UNICODE_SCRIPT_MATH =                   162,
		G_UNICODE_SCRIPT_KAWI =                   163,
		G_UNICODE_SCRIPT_NAG_MUNDARI =            164,
	}
	public enum GUnicodeType : uint {
		G_UNICODE_CONTROL =              0,
		G_UNICODE_FORMAT =               1,
		G_UNICODE_UNASSIGNED =           2,
		G_UNICODE_PRIVATE_USE =          3,
		G_UNICODE_SURROGATE =            4,
		G_UNICODE_LOWERCASE_LETTER =     5,
		G_UNICODE_MODIFIER_LETTER =      6,
		G_UNICODE_OTHER_LETTER =         7,
		G_UNICODE_TITLECASE_LETTER =     8,
		G_UNICODE_UPPERCASE_LETTER =     9,
		G_UNICODE_SPACING_MARK =        10,
		G_UNICODE_ENCLOSING_MARK =      11,
		G_UNICODE_NON_SPACING_MARK =    12,
		G_UNICODE_DECIMAL_NUMBER =      13,
		G_UNICODE_LETTER_NUMBER =       14,
		G_UNICODE_OTHER_NUMBER =        15,
		G_UNICODE_CONNECT_PUNCTUATION = 16,
		G_UNICODE_DASH_PUNCTUATION =    17,
		G_UNICODE_CLOSE_PUNCTUATION =   18,
		G_UNICODE_FINAL_PUNCTUATION =   19,
		G_UNICODE_INITIAL_PUNCTUATION = 20,
		G_UNICODE_OTHER_PUNCTUATION =   21,
		G_UNICODE_OPEN_PUNCTUATION =    22,
		G_UNICODE_CURRENCY_SYMBOL =     23,
		G_UNICODE_MODIFIER_SYMBOL =     24,
		G_UNICODE_MATH_SYMBOL =         25,
		G_UNICODE_OTHER_SYMBOL =        26,
		G_UNICODE_LINE_SEPARATOR =      27,
		G_UNICODE_PARAGRAPH_SEPARATOR = 28,
		G_UNICODE_SPACE_SEPARATOR =     29,
	}
	public enum GUnixSocketAddressType : uint {
		G_UNIX_SOCKET_ADDRESS_INVALID =         0,
		G_UNIX_SOCKET_ADDRESS_ANONYMOUS =       1,
		G_UNIX_SOCKET_ADDRESS_PATH =            2,
		G_UNIX_SOCKET_ADDRESS_ABSTRACT =        3,
		G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4,
	}
	public enum GUriError : uint {
		G_URI_ERROR_FAILED =          0,
		G_URI_ERROR_BAD_SCHEME =      1,
		G_URI_ERROR_BAD_USER =        2,
		G_URI_ERROR_BAD_PASSWORD =    3,
		G_URI_ERROR_BAD_AUTH_PARAMS = 4,
		G_URI_ERROR_BAD_HOST =        5,
		G_URI_ERROR_BAD_PORT =        6,
		G_URI_ERROR_BAD_PATH =        7,
		G_URI_ERROR_BAD_QUERY =       8,
		G_URI_ERROR_BAD_FRAGMENT =    9,
	}
	[Flags]
	public enum GUriFlags : uint {
		G_URI_FLAGS_NONE =               0,
		G_URI_FLAGS_PARSE_RELAXED =      1,
		G_URI_FLAGS_HAS_PASSWORD =       2,
		G_URI_FLAGS_HAS_AUTH_PARAMS =    4,
		G_URI_FLAGS_ENCODED =            8,
		G_URI_FLAGS_NON_DNS =           16,
		G_URI_FLAGS_ENCODED_QUERY =     32,
		G_URI_FLAGS_ENCODED_PATH =      64,
		G_URI_FLAGS_ENCODED_FRAGMENT = 128,
		G_URI_FLAGS_SCHEME_NORMALIZE = 256,
	}
	[Flags]
	public enum GUriHideFlags : uint {
		G_URI_HIDE_NONE =        0,
		G_URI_HIDE_USERINFO =    1,
		G_URI_HIDE_PASSWORD =    2,
		G_URI_HIDE_AUTH_PARAMS = 4,
		G_URI_HIDE_QUERY =       8,
		G_URI_HIDE_FRAGMENT =   16,
	}
	[Flags]
	public enum GUriParamsFlags : uint {
		G_URI_PARAMS_NONE =             0,
		G_URI_PARAMS_CASE_INSENSITIVE = 1,
		G_URI_PARAMS_WWW_FORM =         2,
		G_URI_PARAMS_PARSE_RELAXED =    4,
	}
	public enum GUserDirectory : uint {
		G_USER_DIRECTORY_DESKTOP =      0,
		G_USER_DIRECTORY_DOCUMENTS =    1,
		G_USER_DIRECTORY_DOWNLOAD =     2,
		G_USER_DIRECTORY_MUSIC =        3,
		G_USER_DIRECTORY_PICTURES =     4,
		G_USER_DIRECTORY_PUBLIC_SHARE = 5,
		G_USER_DIRECTORY_TEMPLATES =    6,
		G_USER_DIRECTORY_VIDEOS =       7,
		G_USER_N_DIRECTORIES =          8,
	}
	public enum GVariantClass : uint {
		G_VARIANT_CLASS_BOOLEAN =      98,
		G_VARIANT_CLASS_BYTE =        121,
		G_VARIANT_CLASS_INT16 =       110,
		G_VARIANT_CLASS_UINT16 =      113,
		G_VARIANT_CLASS_INT32 =       105,
		G_VARIANT_CLASS_UINT32 =      117,
		G_VARIANT_CLASS_INT64 =       120,
		G_VARIANT_CLASS_UINT64 =      116,
		G_VARIANT_CLASS_HANDLE =      104,
		G_VARIANT_CLASS_DOUBLE =      100,
		G_VARIANT_CLASS_STRING =      115,
		G_VARIANT_CLASS_OBJECT_PATH = 111,
		G_VARIANT_CLASS_SIGNATURE =   103,
		G_VARIANT_CLASS_VARIANT =     118,
		G_VARIANT_CLASS_MAYBE =       109,
		G_VARIANT_CLASS_ARRAY =        97,
		G_VARIANT_CLASS_TUPLE =        40,
		G_VARIANT_CLASS_DICT_ENTRY =  123,
	}
	public enum GVariantParseError : uint {
		G_VARIANT_PARSE_ERROR_FAILED =                        0,
		G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED =           1,
		G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE =             2,
		G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED =        3,
		G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END =              4,
		G_VARIANT_PARSE_ERROR_INVALID_CHARACTER =             5,
		G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING =         6,
		G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH =           7,
		G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE =             8,
		G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING =           9,
		G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE =               10,
		G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE =          11,
		G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG =               12,
		G_VARIANT_PARSE_ERROR_TYPE_ERROR =                   13,
		G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN =             14,
		G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD =              15,
		G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16,
		G_VARIANT_PARSE_ERROR_VALUE_EXPECTED =               17,
		G_VARIANT_PARSE_ERROR_RECURSION =                    18,
	}
	public enum GZlibCompressorFormat : uint {
		G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0,
		G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1,
		G_ZLIB_COMPRESSOR_FORMAT_RAW =  2,
	}
	public partial struct GAction {
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct GActionEntry {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<GSimpleAction*, GVariant*, void*> activate;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* parameter_type;
		[ExplicitOffset( Offset = 24 )]
		public sbyte* state;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GSimpleAction*, GVariant*, void*> change_state;
		[ExplicitOffset( Offset = 40 )]
		public uintptr[3] padding;
	}
	public partial struct GActionGroup {
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct GActionGroupInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GActionGroup*, sbyte*, Boolean32> has_action;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GActionGroup*, sbyte**> list_actions;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GActionGroup*, sbyte*, Boolean32> get_action_enabled;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GActionGroup*, sbyte*, GVariantType*> get_action_parameter_type;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GActionGroup*, sbyte*, GVariantType*> get_action_state_type;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GActionGroup*, sbyte*, GVariant*> get_action_state_hint;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GActionGroup*, sbyte*, GVariant*> get_action_state;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Action<GActionGroup*, sbyte*, GVariant*> change_action_state;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Action<GActionGroup*, sbyte*, GVariant*> activate_action;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Action<GActionGroup*, sbyte*> action_added;
		[ExplicitOffset( Offset = 96 )]
		public Functors.Action<GActionGroup*, sbyte*> action_removed;
		[ExplicitOffset( Offset = 104 )]
		public Functors.Action<GActionGroup*, sbyte*, Boolean32> action_enabled_changed;
		[ExplicitOffset( Offset = 112 )]
		public Functors.Action<GActionGroup*, sbyte*, GVariant*> action_state_changed;
		[ExplicitOffset( Offset = 120 )]
		public Functors.Func<GActionGroup*, sbyte*, Boolean32*, GVariantType**, GVariantType**, GVariant**, GVariant**, Boolean32> query_action;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GActionInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GAction*, sbyte*> get_name;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GAction*, GVariantType*> get_parameter_type;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GAction*, GVariantType*> get_state_type;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GAction*, GVariant*> get_state_hint;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GAction*, Boolean32> get_enabled;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GAction*, GVariant*> get_state;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Action<GAction*, GVariant*> change_state;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Action<GAction*, GVariant*> activate;
	}
	public partial struct GActionMap {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GActionMapInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GActionMap*, sbyte*, GAction*> lookup_action;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GActionMap*, GAction*> add_action;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GActionMap*, sbyte*> remove_action;
	}
	public partial struct GAllocator {
	}
	public partial struct GAppInfo {
	}
	[ExplicitSize( Size = 216 )]
	[Alignment( Boundary = 8 )]
	public partial struct GAppInfoIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GAppInfo*, GAppInfo*> dup;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GAppInfo*, GAppInfo*, Boolean32> equal;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GAppInfo*, sbyte*> get_id;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GAppInfo*, sbyte*> get_name;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GAppInfo*, sbyte*> get_description;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GAppInfo*, sbyte*> get_executable;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GAppInfo*, GIcon*> get_icon;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<GAppInfo*, GList*, GAppLaunchContext*, GError**, Boolean32> launch;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<GAppInfo*, Boolean32> supports_uris;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Func<GAppInfo*, Boolean32> supports_files;
		[ExplicitOffset( Offset = 96 )]
		public Functors.Func<GAppInfo*, GList*, GAppLaunchContext*, GError**, Boolean32> launch_uris;
		[ExplicitOffset( Offset = 104 )]
		public Functors.Func<GAppInfo*, Boolean32> should_show;
		[ExplicitOffset( Offset = 112 )]
		public Functors.Func<GAppInfo*, sbyte*, GError**, Boolean32> set_as_default_for_type;
		[ExplicitOffset( Offset = 120 )]
		public Functors.Func<GAppInfo*, sbyte*, GError**, Boolean32> set_as_default_for_extension;
		[ExplicitOffset( Offset = 128 )]
		public Functors.Func<GAppInfo*, sbyte*, GError**, Boolean32> add_supports_type;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Func<GAppInfo*, Boolean32> can_remove_supports_type;
		[ExplicitOffset( Offset = 144 )]
		public Functors.Func<GAppInfo*, sbyte*, GError**, Boolean32> remove_supports_type;
		[ExplicitOffset( Offset = 152 )]
		public Functors.Func<GAppInfo*, Boolean32> can_delete;
		[ExplicitOffset( Offset = 160 )]
		public Functors.Func<GAppInfo*, Boolean32> do_delete;
		[ExplicitOffset( Offset = 168 )]
		public Functors.Func<GAppInfo*, sbyte*> get_commandline;
		[ExplicitOffset( Offset = 176 )]
		public Functors.Func<GAppInfo*, sbyte*> get_display_name;
		[ExplicitOffset( Offset = 184 )]
		public Functors.Func<GAppInfo*, sbyte*, GError**, Boolean32> set_as_last_used_for_type;
		[ExplicitOffset( Offset = 192 )]
		public Functors.Func<GAppInfo*, sbyte**> get_supported_types;
		[ExplicitOffset( Offset = 200 )]
		public Functors.Action<GAppInfo*, GList*, GAppLaunchContext*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> launch_uris_async;
		[ExplicitOffset( Offset = 208 )]
		public Functors.Func<GAppInfo*, GAsyncResult*, GError**, Boolean32> launch_uris_finish;
	}
	public partial struct GAppInfoMonitor {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GAppLaunchContext : GObject {
		[ExplicitSize( Size = 200 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GAppLaunchContext*, GAppInfo*, GList*, sbyte*> _get_display;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GAppLaunchContext*, GAppInfo*, GList*, sbyte*> _get_startup_notify_id;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action<GAppLaunchContext*, sbyte*> _launch_failed;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action<GAppLaunchContext*, GAppInfo*, GVariant*> _launched;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action<GAppLaunchContext*, GAppInfo*, GVariant*> _launch_started;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action _g_reserved3;
		}
		[ExplicitOffset( Offset = 24 )]
		public GAppLaunchContextPrivate* _priv;
	}
	public partial struct GAppLaunchContextPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GApplication : GObject {
		[ExplicitSize( Size = 312 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GApplication*> _startup;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GApplication*> _activate;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action<GApplication*, GFile**, int, sbyte*> _open;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GApplication*, GApplicationCommandLine*, int> _command_line;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<GApplication*, sbyte***, int*, Boolean32> _local_command_line;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GApplication*, GVariant*> _before_emit;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action<GApplication*, GVariant*> _after_emit;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action<GApplication*, GVariantBuilder*> _add_platform_data;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action<GApplication*> _quit_mainloop;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action<GApplication*> _run_mainloop;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Action<GApplication*> _shutdown;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Func<GApplication*, GDBusConnection*, sbyte*, GError**, Boolean32> _dbus_register;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Action<GApplication*, GDBusConnection*, sbyte*> _dbus_unregister;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Func<GApplication*, GVariantDict*, int> _handle_local_options;
			[ExplicitOffset( Offset = 248 )]
			public Functors.Func<GApplication*, Boolean32> _name_lost;
			[ExplicitOffset( Offset = 256 )]
			public void*[7] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GApplicationPrivate* _priv;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GApplicationCommandLine : GObject {
		[ExplicitSize( Size = 248 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GApplicationCommandLine*, sbyte*> _print_literal;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GApplicationCommandLine*, sbyte*> _printerr_literal;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GApplicationCommandLine*, GInputStream*> _get_stdin;
			[ExplicitOffset( Offset = 160 )]
			public void*[11] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GApplicationCommandLinePrivate* _priv;
	}
	public partial struct GApplicationCommandLinePrivate {
	}
	public partial struct GApplicationPrivate {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GArray {
		[ExplicitOffset( Offset = 0 )]
		public sbyte* data;
		[ExplicitOffset( Offset = 8 )]
		public uint len;
	}
	public partial struct GAsyncInitable {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GAsyncInitableIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GAsyncInitable*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> init_async;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GAsyncInitable*, GAsyncResult*, GError**, Boolean32> init_finish;
	}
	public partial struct GAsyncQueue {
	}
	public partial struct GAsyncResult {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GAsyncResultIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GAsyncResult*, void*> get_user_data;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GAsyncResult*, GObject*> get_source_object;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GAsyncResult*, void*, Boolean32> is_tagged;
	}
	public partial struct GBinding {
	}
	public partial struct GBindingGroup {
	}
	public partial struct GBookmarkFile {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GBufferedInputStream : GFilterInputStream {
		[ExplicitSize( Size = 336 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 272 )]
			public Functors.Func<GBufferedInputStream*, intptr, GCancellable*, GError**, intptr> _fill;
			[ExplicitOffset( Offset = 280 )]
			public Functors.Action<GBufferedInputStream*, intptr, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _fill_async;
			[ExplicitOffset( Offset = 288 )]
			public Functors.Func<GBufferedInputStream*, GAsyncResult*, GError**, intptr> _fill_finish;
			[ExplicitOffset( Offset = 296 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 304 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 312 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 320 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 328 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 40 )]
		public new GBufferedInputStreamPrivate* _priv;
	}
	public partial struct GBufferedInputStreamPrivate {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GBufferedOutputStream : GFilterOutputStream {
		[ExplicitSize( Size = 336 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 320 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 328 )]
			public new Functors.Action _g_reserved2;
		}
		[ExplicitOffset( Offset = 40 )]
		public new GBufferedOutputStreamPrivate* _priv;
	}
	public partial struct GBufferedOutputStreamPrivate {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GByteArray {
		[ExplicitOffset( Offset = 0 )]
		public byte* data;
		[ExplicitOffset( Offset = 8 )]
		public uint len;
	}
	public partial struct GBytes {
	}
	public partial struct GBytesIcon {
	}
	public partial struct GCache {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GCancellable : GObject {
		[ExplicitSize( Size = 184 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GCancellable*> _cancelled;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 24 )]
		public GCancellablePrivate* _priv;
	}
	public partial struct GCancellablePrivate {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GCClosure {
		[ExplicitOffset( Offset = 0 )]
		public GClosure closure;
		[ExplicitOffset( Offset = 32 )]
		public void* callback;
	}
	public partial struct GCharsetConverter : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
	}
	public partial struct GChecksum {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GClosure {
		public uint ref_count { get { return cast<byte*>( &this )[0] | cast<ushort>( cast<byte*>( &this )[1] & 127 ) << 8; } set { cast<byte*>( &this )[0] = cast<byte>( value ); cast<byte*>( &this )[1] &= 128; cast<byte*>( &this )[1] |= cast<byte>( value >> 8 ) & 127; } }
		public bool meta_marshal_nouse { get { return ( cast<byte*>( &this )[1] & 128 ) != 0; } set { cast<byte*>( &this )[1] &= 127; cast<byte*>( &this )[1] |= cast<byte>( value ) << 7; } }
		public bool n_guards { get { return ( cast<byte*>( &this )[2] & 1 ) != 0; } set { cast<byte*>( &this )[2] &= 254; cast<byte*>( &this )[2] |= cast<byte>( value ) << 0; } }
		public uint n_fnotifiers { get { return cast<byte*>( &this )[2] >> 1 & 3; } set { cast<byte*>( &this )[2] &= 249; cast<byte*>( &this )[2] |= ( cast<byte>( value ) & 6 ) << 1; } }
		public uint n_inotifiers { get { return cast<byte*>( &this )[2] >> 3 | cast<ushort>( cast<byte*>( &this )[3] & 7 ) << 5; } set { cast<byte*>( &this )[2] &= 7; cast<byte*>( &this )[2] |= ( cast<byte>( value ) & 248 ) << 3; cast<byte*>( &this )[3] &= 248; cast<byte*>( &this )[3] |= cast<byte>( value >> 24 ) & 7; } }
		public bool in_inotify { get { return ( cast<byte*>( &this )[3] & 8 ) != 0; } set { cast<byte*>( &this )[3] &= 247; cast<byte*>( &this )[3] |= cast<byte>( value ) << 3; } }
		public bool floating { get { return ( cast<byte*>( &this )[3] & 16 ) != 0; } set { cast<byte*>( &this )[3] &= 239; cast<byte*>( &this )[3] |= cast<byte>( value ) << 4; } }
		public bool derivative_flag { get { return ( cast<byte*>( &this )[3] & 32 ) != 0; } set { cast<byte*>( &this )[3] &= 223; cast<byte*>( &this )[3] |= cast<byte>( value ) << 5; } }
		public bool in_marshal { get { return ( cast<byte*>( &this )[3] & 64 ) != 0; } set { cast<byte*>( &this )[3] &= 191; cast<byte*>( &this )[3] |= cast<byte>( value ) << 6; } }
		public bool is_invalid { get { return ( cast<byte*>( &this )[3] & 128 ) != 0; } set { cast<byte*>( &this )[3] &= 127; cast<byte*>( &this )[3] |= cast<byte>( value ) << 7; } }
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<GClosure*, GValue*, uint, GValue*, void*, void*> marshal;
		[ExplicitOffset( Offset = 16 )]
		public void* data;
		[ExplicitOffset( Offset = 24 )]
		public GClosureNotifyData* notifiers;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GClosureNotifyData {
		[ExplicitOffset( Offset = 0 )]
		public void* data;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<void*, GClosure*> notify;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GCompletion {
		[ExplicitOffset( Offset = 0 )]
		public GList* items;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<void*, sbyte*> func;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* prefix;
		[ExplicitOffset( Offset = 24 )]
		public GList* cache;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<sbyte*, sbyte*, uintptr, int> strncmp_func;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GCond {
		[ExplicitOffset( Offset = 0 )]
		public void* p;
		[ExplicitOffset( Offset = 8 )]
		public uint[2] i;
	}
	public partial struct GConverter {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GConverterIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GConverter*, void*, uintptr, void*, uintptr, GConverterFlags, uintptr*, uintptr*, GError**, GConverterResult> convert;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GConverter*> reset;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GConverterInputStream : GFilterInputStream {
		[ExplicitSize( Size = 312 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 272 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 280 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 288 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 296 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 304 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 40 )]
		public new GConverterInputStreamPrivate* _priv;
	}
	public partial struct GConverterInputStreamPrivate {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GConverterOutputStream : GFilterOutputStream {
		[ExplicitSize( Size = 360 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 320 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 328 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 336 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 344 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 352 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 40 )]
		public new GConverterOutputStreamPrivate* _priv;
	}
	public partial struct GConverterOutputStreamPrivate {
	}
	public partial struct GCredentials {
	}
	public partial struct GCredentialsClass {
	}
	public partial struct GData {
	}
	public partial struct GDatagramBased {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDatagramBasedInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GDatagramBased*, GInputMessage*, uint, int, intptr, GCancellable*, GError**, int> receive_messages;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GDatagramBased*, GOutputMessage*, uint, int, intptr, GCancellable*, GError**, int> send_messages;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GDatagramBased*, GIOCondition, GCancellable*, GSource*> create_source;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GDatagramBased*, GIOCondition, GIOCondition> condition_check;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GDatagramBased*, GIOCondition, intptr, GCancellable*, GError**, Boolean32> condition_wait;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDataInputStream : GBufferedInputStream {
		[ExplicitSize( Size = 376 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 336 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 344 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 352 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 360 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 368 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 48 )]
		public new GDataInputStreamPrivate* _priv;
	}
	public partial struct GDataInputStreamPrivate {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDataOutputStream : GFilterOutputStream {
		[ExplicitSize( Size = 360 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 320 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 328 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 336 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 344 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 352 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 40 )]
		public new GDataOutputStreamPrivate* _priv;
	}
	public partial struct GDataOutputStreamPrivate {
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct GDate {
		public uint julian_days { get { return cast<byte*>( &this )[0] | cast<ushort>( cast<byte*>( &this )[1] ) << 8 | cast<uint>( cast<byte*>( &this )[2] ) << 16 | cast<uint>( cast<byte*>( &this )[3] ) << 24; } set { cast<byte*>( &this )[0] = cast<byte>( value ); cast<byte*>( &this )[1] = cast<byte>( value >> 8 ); cast<byte*>( &this )[2] = cast<byte>( value >> 16 ); cast<byte*>( &this )[3] = cast<byte>( value >> 24 ); } }
		public bool julian { get { return ( cast<byte*>( &this )[4] & 1 ) != 0; } set { cast<byte*>( &this )[4] &= 254; cast<byte*>( &this )[4] |= cast<byte>( value ) << 0; } }
		public bool dmy { get { return ( cast<byte*>( &this )[4] & 2 ) != 0; } set { cast<byte*>( &this )[4] &= 253; cast<byte*>( &this )[4] |= cast<byte>( value ) << 1; } }
		public uint day { get { return cast<byte*>( &this )[4] >> 2; } set { cast<byte*>( &this )[4] &= 3; cast<byte*>( &this )[4] |= ( cast<byte>( value ) & 252 ) << 2; } }
		public uint month { get { return cast<byte*>( &this )[5] & 15; } set { cast<byte*>( &this )[5] &= 240; cast<byte*>( &this )[5] |= ( cast<byte>( value ) & 15 ); } }
		public uint year { get { return cast<byte*>( &this )[5] >> 4 | cast<ushort>( cast<byte*>( &this )[6] ) << 4 | cast<uint>( cast<byte*>( &this )[7] & 15 ) << 12; } set { cast<byte*>( &this )[5] &= 15; cast<byte*>( &this )[5] |= ( cast<byte>( value ) & 240 ) << 4; cast<byte*>( &this )[6] = cast<byte>( value >> 4 ); cast<byte*>( &this )[7] &= 240; cast<byte*>( &this )[7] |= cast<byte>( value >> 56 ) & 15; } }
	}
	public partial struct GDateTime {
	}
	public partial struct GDBusActionGroup {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusAnnotationInfo {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* key;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* value;
		[ExplicitOffset( Offset = 24 )]
		public GDBusAnnotationInfo** annotations;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusArgInfo {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* signature;
		[ExplicitOffset( Offset = 24 )]
		public GDBusAnnotationInfo** annotations;
	}
	public partial struct GDBusAuthObserver {
	}
	public partial struct GDBusConnection {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusErrorEntry {
		[ExplicitOffset( Offset = 0 )]
		public int error_code;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String dbus_error_name;
	}
	public partial struct GDBusInterface {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusInterfaceIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GDBusInterface*, GDBusInterfaceInfo*> get_info;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GDBusInterface*, GDBusObject*> get_object;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GDBusInterface*, GDBusObject*> set_object;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GDBusInterface*, GDBusObject*> dup_object;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusInterfaceInfo {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 16 )]
		public GDBusMethodInfo** methods;
		[ExplicitOffset( Offset = 24 )]
		public GDBusSignalInfo** signals;
		[ExplicitOffset( Offset = 32 )]
		public GDBusPropertyInfo** properties;
		[ExplicitOffset( Offset = 40 )]
		public GDBusAnnotationInfo** annotations;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusInterfaceSkeleton : GObject {
		[ExplicitSize( Size = 304 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GDBusInterfaceSkeleton*, GDBusInterfaceInfo*> _get_info;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GDBusInterfaceSkeleton*, GDBusInterfaceVTable*> _get_vtable;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GDBusInterfaceSkeleton*, GVariant*> _get_properties;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action<GDBusInterfaceSkeleton*> _flush;
			[ExplicitOffset( Offset = 168 )]
			public void*[8] _vfunc_padding;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Func<GDBusInterfaceSkeleton*, GDBusMethodInvocation*, Boolean32> _g_authorize_method;
			[ExplicitOffset( Offset = 240 )]
			public void*[8] _signal_padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GDBusInterfaceSkeletonPrivate* _priv;
	}
	public partial struct GDBusInterfaceSkeletonPrivate {
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusInterfaceVTable {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<GDBusConnection*, sbyte*, sbyte*, sbyte*, sbyte*, GVariant*, GDBusMethodInvocation*, void*> method_call;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<GDBusConnection*, sbyte*, sbyte*, sbyte*, sbyte*, GError**, void*, GVariant*> get_property;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GDBusConnection*, sbyte*, sbyte*, sbyte*, sbyte*, GVariant*, GError**, void*, Boolean32> set_property;
		[ExplicitOffset( Offset = 24 )]
		public void*[8] padding;
	}
	public partial struct GDBusMenuModel {
	}
	public partial struct GDBusMessage {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusMethodInfo {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 16 )]
		public GDBusArgInfo** in_args;
		[ExplicitOffset( Offset = 24 )]
		public GDBusArgInfo** out_args;
		[ExplicitOffset( Offset = 32 )]
		public GDBusAnnotationInfo** annotations;
	}
	public partial struct GDBusMethodInvocation {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusNodeInfo {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* path;
		[ExplicitOffset( Offset = 16 )]
		public GDBusInterfaceInfo** interfaces;
		[ExplicitOffset( Offset = 24 )]
		public GDBusNodeInfo** nodes;
		[ExplicitOffset( Offset = 32 )]
		public GDBusAnnotationInfo** annotations;
	}
	public partial struct GDBusObject {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusObjectIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GDBusObject*, sbyte*> get_object_path;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GDBusObject*, GList*> get_interfaces;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GDBusObject*, sbyte*, GDBusInterface*> get_interface;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Action<GDBusObject*, GDBusInterface*> interface_added;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Action<GDBusObject*, GDBusInterface*> interface_removed;
	}
	public partial struct GDBusObjectManager {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusObjectManagerClient : GObject {
		[ExplicitSize( Size = 216 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GDBusObjectManagerClient*, GDBusObjectProxy*, GDBusProxy*, sbyte*, sbyte*, GVariant*> _interface_proxy_signal;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GDBusObjectManagerClient*, GDBusObjectProxy*, GDBusProxy*, GVariant*, sbyte**> _interface_proxy_properties_changed;
			[ExplicitOffset( Offset = 152 )]
			public void*[8] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GDBusObjectManagerClientPrivate* _priv;
	}
	public partial struct GDBusObjectManagerClientPrivate {
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusObjectManagerIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GDBusObjectManager*, sbyte*> get_object_path;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GDBusObjectManager*, GList*> get_objects;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GDBusObjectManager*, sbyte*, GDBusObject*> get_object;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GDBusObjectManager*, sbyte*, sbyte*, GDBusInterface*> get_interface;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Action<GDBusObjectManager*, GDBusObject*> object_added;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Action<GDBusObjectManager*, GDBusObject*> object_removed;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Action<GDBusObjectManager*, GDBusObject*, GDBusInterface*> interface_added;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Action<GDBusObjectManager*, GDBusObject*, GDBusInterface*> interface_removed;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusObjectManagerServer : GObject {
		[ExplicitSize( Size = 200 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public void*[8] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GDBusObjectManagerServerPrivate* _priv;
	}
	public partial struct GDBusObjectManagerServerPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusObjectProxy : GObject {
		[ExplicitSize( Size = 200 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public void*[8] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GDBusObjectProxyPrivate* _priv;
	}
	public partial struct GDBusObjectProxyPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusObjectSkeleton : GObject {
		[ExplicitSize( Size = 208 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GDBusObjectSkeleton*, GDBusInterfaceSkeleton*, GDBusMethodInvocation*, Boolean32> _authorize_method;
			[ExplicitOffset( Offset = 144 )]
			public void*[8] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GDBusObjectSkeletonPrivate* _priv;
	}
	public partial struct GDBusObjectSkeletonPrivate {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusPropertyInfo {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* signature;
		[ExplicitOffset( Offset = 24 )]
		public GDBusPropertyInfoFlags flags;
		[ExplicitOffset( Offset = 32 )]
		public GDBusAnnotationInfo** annotations;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusProxy : GObject {
		[ExplicitSize( Size = 408 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GDBusProxy*, GVariant*, sbyte**> _g_properties_changed;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GDBusProxy*, sbyte*, sbyte*, GVariant*> _g_signal;
			[ExplicitOffset( Offset = 152 )]
			public void*[32] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GDBusProxyPrivate* _priv;
	}
	public partial struct GDBusProxyPrivate {
	}
	public partial struct GDBusServer {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusSignalInfo {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 16 )]
		public GDBusArgInfo** args;
		[ExplicitOffset( Offset = 24 )]
		public GDBusAnnotationInfo** annotations;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDBusSubtreeVTable {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<GDBusConnection*, sbyte*, sbyte*, void*, sbyte**> enumerate;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<GDBusConnection*, sbyte*, sbyte*, sbyte*, void*, GDBusInterfaceInfo**> introspect;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GDBusConnection*, sbyte*, sbyte*, sbyte*, sbyte*, void**, void*, GDBusInterfaceVTable*> dispatch;
		[ExplicitOffset( Offset = 24 )]
		public void*[8] padding;
	}
	public partial struct GDebugController {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDebugControllerDBus : GObject {
		[ExplicitSize( Size = 240 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GDebugControllerDBus*, GDBusMethodInvocation*, Boolean32> _authorize;
			[ExplicitOffset( Offset = 144 )]
			public void*[12] _padding;
		}
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDebugControllerInterface : GTypeInterface {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDebugKey {
		[ExplicitOffset( Offset = 0 )]
		public sbyte* key;
		[ExplicitOffset( Offset = 8 )]
		public uint value;
	}
	public partial struct GDir {
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDoubleIEEE754 {
		[Overlapped( Offset = 0 )]
		public double v_double;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_D4FB7288 mpn;
	}
	public partial struct GDrive {
	}
	[ExplicitSize( Size = 272 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDriveIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GDrive*> changed;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GDrive*> disconnected;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GDrive*> eject_button;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GDrive*, sbyte*> get_name;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GDrive*, GIcon*> get_icon;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GDrive*, Boolean32> has_volumes;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GDrive*, GList*> get_volumes;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<GDrive*, Boolean32> is_media_removable;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<GDrive*, Boolean32> has_media;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Func<GDrive*, Boolean32> is_media_check_automatic;
		[ExplicitOffset( Offset = 96 )]
		public Functors.Func<GDrive*, Boolean32> can_eject;
		[ExplicitOffset( Offset = 104 )]
		public Functors.Func<GDrive*, Boolean32> can_poll_for_media;
		[ExplicitOffset( Offset = 112 )]
		public Functors.Action<GDrive*, GMountUnmountFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject;
		[ExplicitOffset( Offset = 120 )]
		public Functors.Func<GDrive*, GAsyncResult*, GError**, Boolean32> eject_finish;
		[ExplicitOffset( Offset = 128 )]
		public Functors.Action<GDrive*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> poll_for_media;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Func<GDrive*, GAsyncResult*, GError**, Boolean32> poll_for_media_finish;
		[ExplicitOffset( Offset = 144 )]
		public Functors.Func<GDrive*, sbyte*, sbyte*> get_identifier;
		[ExplicitOffset( Offset = 152 )]
		public Functors.Func<GDrive*, sbyte**> enumerate_identifiers;
		[ExplicitOffset( Offset = 160 )]
		public Functors.Func<GDrive*, GDriveStartStopType> get_start_stop_type;
		[ExplicitOffset( Offset = 168 )]
		public Functors.Func<GDrive*, Boolean32> can_start;
		[ExplicitOffset( Offset = 176 )]
		public Functors.Func<GDrive*, Boolean32> can_start_degraded;
		[ExplicitOffset( Offset = 184 )]
		public Functors.Action<GDrive*, GDriveStartFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> start;
		[ExplicitOffset( Offset = 192 )]
		public Functors.Func<GDrive*, GAsyncResult*, GError**, Boolean32> start_finish;
		[ExplicitOffset( Offset = 200 )]
		public Functors.Func<GDrive*, Boolean32> can_stop;
		[ExplicitOffset( Offset = 208 )]
		public Functors.Action<GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> stop;
		[ExplicitOffset( Offset = 216 )]
		public Functors.Func<GDrive*, GAsyncResult*, GError**, Boolean32> stop_finish;
		[ExplicitOffset( Offset = 224 )]
		public Functors.Action<GDrive*> stop_button;
		[ExplicitOffset( Offset = 232 )]
		public Functors.Action<GDrive*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject_with_operation;
		[ExplicitOffset( Offset = 240 )]
		public Functors.Func<GDrive*, GAsyncResult*, GError**, Boolean32> eject_with_operation_finish;
		[ExplicitOffset( Offset = 248 )]
		public Functors.Func<GDrive*, sbyte*> get_sort_key;
		[ExplicitOffset( Offset = 256 )]
		public Functors.Func<GDrive*, GIcon*> get_symbolic_icon;
		[ExplicitOffset( Offset = 264 )]
		public Functors.Func<GDrive*, Boolean32> is_removable;
	}
	public partial struct GDtlsClientConnection {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDtlsClientConnectionInterface : GTypeInterface {
	}
	public partial struct GDtlsConnection {
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDtlsConnectionInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GDtlsConnection*, GTlsCertificate*, GTlsCertificateFlags, Boolean32> accept_certificate;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GDtlsConnection*, GCancellable*, GError**, Boolean32> handshake;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GDtlsConnection*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> handshake_async;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GDtlsConnection*, GAsyncResult*, GError**, Boolean32> handshake_finish;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GDtlsConnection*, Boolean32, Boolean32, GCancellable*, GError**, Boolean32> shutdown;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Action<GDtlsConnection*, Boolean32, Boolean32, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> shutdown_async;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GDtlsConnection*, GAsyncResult*, GError**, Boolean32> shutdown_finish;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Action<GDtlsConnection*, sbyte**> set_advertised_protocols;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<GDtlsConnection*, sbyte*> get_negotiated_protocol;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Func<GDtlsConnection*, GTlsChannelBindingType, GByteArray*, GError**, Boolean32> get_binding_data;
	}
	public partial struct GDtlsServerConnection {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GDtlsServerConnectionInterface : GTypeInterface {
	}
	public partial struct GEmblem {
	}
	public partial struct GEmblemClass {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GEmblemedIcon : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 24 )]
		public GEmblemedIconPrivate* _priv;
	}
	public partial struct GEmblemedIconPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GEnumClass {
		[ExplicitOffset( Offset = 0 )]
		public GTypeClass g_type_class;
		[ExplicitOffset( Offset = 8 )]
		public int minimum;
		[ExplicitOffset( Offset = 12 )]
		public int maximum;
		[ExplicitOffset( Offset = 16 )]
		public uint n_values;
		[ExplicitOffset( Offset = 24 )]
		public GEnumValue* values;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GEnumValue {
		[ExplicitOffset( Offset = 0 )]
		public int value;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String value_name;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* value_nick;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GError {
		[ExplicitOffset( Offset = 0 )]
		public uint domain;
		[ExplicitOffset( Offset = 4 )]
		public int code;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* message;
	}
	public partial struct GFile {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileAttributeInfo {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 8 )]
		public GFileAttributeType type;
		[ExplicitOffset( Offset = 12 )]
		public GFileAttributeInfoFlags flags;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileAttributeInfoList {
		[ExplicitOffset( Offset = 0 )]
		public GFileAttributeInfo* infos;
		[ExplicitOffset( Offset = 8 )]
		public int n_infos;
	}
	public partial struct GFileAttributeMatcher {
	}
	public partial struct GFileDescriptorBased {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileEnumerator : GObject {
		[ExplicitSize( Size = 240 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GFileEnumerator*, GCancellable*, GError**, GFileInfo*> _next_file;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GFileEnumerator*, GCancellable*, GError**, Boolean32> _close_fn;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action<GFileEnumerator*, int, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _next_files_async;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GFileEnumerator*, GAsyncResult*, GError**, GList*> _next_files_finish;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action<GFileEnumerator*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _close_async;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Func<GFileEnumerator*, GAsyncResult*, GError**, Boolean32> _close_finish;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Action _g_reserved6;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Action _g_reserved7;
		}
		[ExplicitOffset( Offset = 24 )]
		public GFileEnumeratorPrivate* _priv;
	}
	public partial struct GFileEnumeratorPrivate {
	}
	public partial struct GFileIcon {
	}
	public partial struct GFileIconClass {
	}
	[ExplicitSize( Size = 840 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GFile*, GFile*> dup;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GFile*, uint> hash;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GFile*, GFile*, Boolean32> equal;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GFile*, Boolean32> is_native;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GFile*, sbyte*, Boolean32> has_uri_scheme;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GFile*, sbyte*> get_uri_scheme;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GFile*, sbyte*> get_basename;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<GFile*, sbyte*> get_path;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<GFile*, sbyte*> get_uri;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Func<GFile*, sbyte*> get_parse_name;
		[ExplicitOffset( Offset = 96 )]
		public Functors.Func<GFile*, GFile*> get_parent;
		[ExplicitOffset( Offset = 104 )]
		public Functors.Func<GFile*, GFile*, Boolean32> prefix_matches;
		[ExplicitOffset( Offset = 112 )]
		public Functors.Func<GFile*, GFile*, sbyte*> get_relative_path;
		[ExplicitOffset( Offset = 120 )]
		public Functors.Func<GFile*, sbyte*, GFile*> resolve_relative_path;
		[ExplicitOffset( Offset = 128 )]
		public Functors.Func<GFile*, sbyte*, GError**, GFile*> get_child_for_display_name;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Func<GFile*, sbyte*, GFileQueryInfoFlags, GCancellable*, GError**, GFileEnumerator*> enumerate_children;
		[ExplicitOffset( Offset = 144 )]
		public Functors.Action<GFile*, sbyte*, GFileQueryInfoFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> enumerate_children_async;
		[ExplicitOffset( Offset = 152 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileEnumerator*> enumerate_children_finish;
		[ExplicitOffset( Offset = 160 )]
		public Functors.Func<GFile*, sbyte*, GFileQueryInfoFlags, GCancellable*, GError**, GFileInfo*> query_info;
		[ExplicitOffset( Offset = 168 )]
		public Functors.Action<GFile*, sbyte*, GFileQueryInfoFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> query_info_async;
		[ExplicitOffset( Offset = 176 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileInfo*> query_info_finish;
		[ExplicitOffset( Offset = 184 )]
		public Functors.Func<GFile*, sbyte*, GCancellable*, GError**, GFileInfo*> query_filesystem_info;
		[ExplicitOffset( Offset = 192 )]
		public Functors.Action<GFile*, sbyte*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> query_filesystem_info_async;
		[ExplicitOffset( Offset = 200 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileInfo*> query_filesystem_info_finish;
		[ExplicitOffset( Offset = 208 )]
		public Functors.Func<GFile*, GCancellable*, GError**, GMount*> find_enclosing_mount;
		[ExplicitOffset( Offset = 216 )]
		public Functors.Action<GFile*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> find_enclosing_mount_async;
		[ExplicitOffset( Offset = 224 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GMount*> find_enclosing_mount_finish;
		[ExplicitOffset( Offset = 232 )]
		public Functors.Func<GFile*, sbyte*, GCancellable*, GError**, GFile*> set_display_name;
		[ExplicitOffset( Offset = 240 )]
		public Functors.Action<GFile*, sbyte*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> set_display_name_async;
		[ExplicitOffset( Offset = 248 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFile*> set_display_name_finish;
		[ExplicitOffset( Offset = 256 )]
		public Functors.Func<GFile*, GCancellable*, GError**, GFileAttributeInfoList*> query_settable_attributes;
		[ExplicitOffset( Offset = 264 )]
		public Functors.Action _query_settable_attributes_async;
		[ExplicitOffset( Offset = 272 )]
		public Functors.Action _query_settable_attributes_finish;
		[ExplicitOffset( Offset = 280 )]
		public Functors.Func<GFile*, GCancellable*, GError**, GFileAttributeInfoList*> query_writable_namespaces;
		[ExplicitOffset( Offset = 288 )]
		public Functors.Action _query_writable_namespaces_async;
		[ExplicitOffset( Offset = 296 )]
		public Functors.Action _query_writable_namespaces_finish;
		[ExplicitOffset( Offset = 304 )]
		public Functors.Func<GFile*, sbyte*, GFileAttributeType, void*, GFileQueryInfoFlags, GCancellable*, GError**, Boolean32> set_attribute;
		[ExplicitOffset( Offset = 312 )]
		public Functors.Func<GFile*, GFileInfo*, GFileQueryInfoFlags, GCancellable*, GError**, Boolean32> set_attributes_from_info;
		[ExplicitOffset( Offset = 320 )]
		public Functors.Action<GFile*, GFileInfo*, GFileQueryInfoFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> set_attributes_async;
		[ExplicitOffset( Offset = 328 )]
		public Functors.Func<GFile*, GAsyncResult*, GFileInfo**, GError**, Boolean32> set_attributes_finish;
		[ExplicitOffset( Offset = 336 )]
		public Functors.Func<GFile*, GCancellable*, GError**, GFileInputStream*> read_fn;
		[ExplicitOffset( Offset = 344 )]
		public Functors.Action<GFile*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> read_async;
		[ExplicitOffset( Offset = 352 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileInputStream*> read_finish;
		[ExplicitOffset( Offset = 360 )]
		public Functors.Func<GFile*, GFileCreateFlags, GCancellable*, GError**, GFileOutputStream*> append_to;
		[ExplicitOffset( Offset = 368 )]
		public Functors.Action<GFile*, GFileCreateFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> append_to_async;
		[ExplicitOffset( Offset = 376 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileOutputStream*> append_to_finish;
		[ExplicitOffset( Offset = 384 )]
		public Functors.Func<GFile*, GFileCreateFlags, GCancellable*, GError**, GFileOutputStream*> create;
		[ExplicitOffset( Offset = 392 )]
		public Functors.Action<GFile*, GFileCreateFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> create_async;
		[ExplicitOffset( Offset = 400 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileOutputStream*> create_finish;
		[ExplicitOffset( Offset = 408 )]
		public Functors.Func<GFile*, sbyte*, Boolean32, GFileCreateFlags, GCancellable*, GError**, GFileOutputStream*> replace;
		[ExplicitOffset( Offset = 416 )]
		public Functors.Action<GFile*, sbyte*, Boolean32, GFileCreateFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> replace_async;
		[ExplicitOffset( Offset = 424 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileOutputStream*> replace_finish;
		[ExplicitOffset( Offset = 432 )]
		public Functors.Func<GFile*, GCancellable*, GError**, Boolean32> delete_file;
		[ExplicitOffset( Offset = 440 )]
		public Functors.Action<GFile*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> delete_file_async;
		[ExplicitOffset( Offset = 448 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> delete_file_finish;
		[ExplicitOffset( Offset = 456 )]
		public Functors.Func<GFile*, GCancellable*, GError**, Boolean32> trash;
		[ExplicitOffset( Offset = 464 )]
		public Functors.Action<GFile*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> trash_async;
		[ExplicitOffset( Offset = 472 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> trash_finish;
		[ExplicitOffset( Offset = 480 )]
		public Functors.Func<GFile*, GCancellable*, GError**, Boolean32> make_directory;
		[ExplicitOffset( Offset = 488 )]
		public Functors.Action<GFile*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> make_directory_async;
		[ExplicitOffset( Offset = 496 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> make_directory_finish;
		[ExplicitOffset( Offset = 504 )]
		public Functors.Func<GFile*, sbyte*, GCancellable*, GError**, Boolean32> make_symbolic_link;
		[ExplicitOffset( Offset = 512 )]
		public Functors.Action<GFile*, sbyte*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> make_symbolic_link_async;
		[ExplicitOffset( Offset = 520 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> make_symbolic_link_finish;
		[ExplicitOffset( Offset = 528 )]
		public Functors.Func<GFile*, GFile*, GFileCopyFlags, GCancellable*, Functors.Action<intptr, intptr, void*>, void*, GError**, Boolean32> copy;
		[ExplicitOffset( Offset = 536 )]
		public Functors.Action<GFile*, GFile*, GFileCopyFlags, int, GCancellable*, Functors.Action<intptr, intptr, void*>, void*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> copy_async;
		[ExplicitOffset( Offset = 544 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> copy_finish;
		[ExplicitOffset( Offset = 552 )]
		public Functors.Func<GFile*, GFile*, GFileCopyFlags, GCancellable*, Functors.Action<intptr, intptr, void*>, void*, GError**, Boolean32> move;
		[ExplicitOffset( Offset = 560 )]
		public Functors.Action<GFile*, GFile*, GFileCopyFlags, int, GCancellable*, Functors.Action<intptr, intptr, void*>, void*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> move_async;
		[ExplicitOffset( Offset = 568 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> move_finish;
		[ExplicitOffset( Offset = 576 )]
		public Functors.Action<GFile*, GMountMountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> mount_mountable;
		[ExplicitOffset( Offset = 584 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFile*> mount_mountable_finish;
		[ExplicitOffset( Offset = 592 )]
		public Functors.Action<GFile*, GMountUnmountFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> unmount_mountable;
		[ExplicitOffset( Offset = 600 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> unmount_mountable_finish;
		[ExplicitOffset( Offset = 608 )]
		public Functors.Action<GFile*, GMountUnmountFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject_mountable;
		[ExplicitOffset( Offset = 616 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> eject_mountable_finish;
		[ExplicitOffset( Offset = 624 )]
		public Functors.Action<GFile*, GMountMountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> mount_enclosing_volume;
		[ExplicitOffset( Offset = 632 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> mount_enclosing_volume_finish;
		[ExplicitOffset( Offset = 640 )]
		public Functors.Func<GFile*, GFileMonitorFlags, GCancellable*, GError**, GFileMonitor*> monitor_dir;
		[ExplicitOffset( Offset = 648 )]
		public Functors.Func<GFile*, GFileMonitorFlags, GCancellable*, GError**, GFileMonitor*> monitor_file;
		[ExplicitOffset( Offset = 656 )]
		public Functors.Func<GFile*, GCancellable*, GError**, GFileIOStream*> open_readwrite;
		[ExplicitOffset( Offset = 664 )]
		public Functors.Action<GFile*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> open_readwrite_async;
		[ExplicitOffset( Offset = 672 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileIOStream*> open_readwrite_finish;
		[ExplicitOffset( Offset = 680 )]
		public Functors.Func<GFile*, GFileCreateFlags, GCancellable*, GError**, GFileIOStream*> create_readwrite;
		[ExplicitOffset( Offset = 688 )]
		public Functors.Action<GFile*, GFileCreateFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> create_readwrite_async;
		[ExplicitOffset( Offset = 696 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileIOStream*> create_readwrite_finish;
		[ExplicitOffset( Offset = 704 )]
		public Functors.Func<GFile*, sbyte*, Boolean32, GFileCreateFlags, GCancellable*, GError**, GFileIOStream*> replace_readwrite;
		[ExplicitOffset( Offset = 712 )]
		public Functors.Action<GFile*, sbyte*, Boolean32, GFileCreateFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> replace_readwrite_async;
		[ExplicitOffset( Offset = 720 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, GFileIOStream*> replace_readwrite_finish;
		[ExplicitOffset( Offset = 728 )]
		public Functors.Action<GFile*, GDriveStartFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> start_mountable;
		[ExplicitOffset( Offset = 736 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> start_mountable_finish;
		[ExplicitOffset( Offset = 744 )]
		public Functors.Action<GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> stop_mountable;
		[ExplicitOffset( Offset = 752 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> stop_mountable_finish;
		[ExplicitOffset( Offset = 760 )]
		public Boolean32 supports_thread_contexts;
		[ExplicitOffset( Offset = 768 )]
		public Functors.Action<GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> unmount_mountable_with_operation;
		[ExplicitOffset( Offset = 776 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> unmount_mountable_with_operation_finish;
		[ExplicitOffset( Offset = 784 )]
		public Functors.Action<GFile*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject_mountable_with_operation;
		[ExplicitOffset( Offset = 792 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> eject_mountable_with_operation_finish;
		[ExplicitOffset( Offset = 800 )]
		public Functors.Action<GFile*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> poll_mountable;
		[ExplicitOffset( Offset = 808 )]
		public Functors.Func<GFile*, GAsyncResult*, GError**, Boolean32> poll_mountable_finish;
		[ExplicitOffset( Offset = 816 )]
		public Functors.Func<GFile*, GFileMeasureFlags, GCancellable*, Functors.Action<Boolean32, uintptr, uintptr, uintptr, void*>, void*, uintptr*, uintptr*, uintptr*, GError**, Boolean32> measure_disk_usage;
		[ExplicitOffset( Offset = 824 )]
		public Functors.Action<GFile*, GFileMeasureFlags, int, GCancellable*, Functors.Action<Boolean32, uintptr, uintptr, uintptr, void*>, void*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> measure_disk_usage_async;
		[ExplicitOffset( Offset = 832 )]
		public Functors.Func<GFile*, GAsyncResult*, uintptr*, uintptr*, uintptr*, GError**, Boolean32> measure_disk_usage_finish;
	}
	public partial struct GFileInfo {
	}
	public partial struct GFileInfoClass {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileInputStream : GInputStream {
		[ExplicitSize( Size = 336 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 248 )]
			public Functors.Func<GFileInputStream*, intptr> _tell;
			[ExplicitOffset( Offset = 256 )]
			public Functors.Func<GFileInputStream*, Boolean32> _can_seek;
			[ExplicitOffset( Offset = 264 )]
			public Functors.Func<GFileInputStream*, intptr, GSeekType, GCancellable*, GError**, Boolean32> _seek;
			[ExplicitOffset( Offset = 272 )]
			public Functors.Func<GFileInputStream*, sbyte*, GCancellable*, GError**, GFileInfo*> _query_info;
			[ExplicitOffset( Offset = 280 )]
			public Functors.Action<GFileInputStream*, sbyte*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _query_info_async;
			[ExplicitOffset( Offset = 288 )]
			public Functors.Func<GFileInputStream*, GAsyncResult*, GError**, GFileInfo*> _query_info_finish;
			[ExplicitOffset( Offset = 296 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 304 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 312 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 320 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 328 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GFileInputStreamPrivate* _priv;
	}
	public partial struct GFileInputStreamPrivate {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileIOStream : GIOStream {
		[ExplicitSize( Size = 368 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 256 )]
			public Functors.Func<GFileIOStream*, intptr> _tell;
			[ExplicitOffset( Offset = 264 )]
			public Functors.Func<GFileIOStream*, Boolean32> _can_seek;
			[ExplicitOffset( Offset = 272 )]
			public Functors.Func<GFileIOStream*, intptr, GSeekType, GCancellable*, GError**, Boolean32> _seek;
			[ExplicitOffset( Offset = 280 )]
			public Functors.Func<GFileIOStream*, Boolean32> _can_truncate;
			[ExplicitOffset( Offset = 288 )]
			public Functors.Func<GFileIOStream*, intptr, GCancellable*, GError**, Boolean32> _truncate_fn;
			[ExplicitOffset( Offset = 296 )]
			public Functors.Func<GFileIOStream*, sbyte*, GCancellable*, GError**, GFileInfo*> _query_info;
			[ExplicitOffset( Offset = 304 )]
			public Functors.Action<GFileIOStream*, sbyte*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _query_info_async;
			[ExplicitOffset( Offset = 312 )]
			public Functors.Func<GFileIOStream*, GAsyncResult*, GError**, GFileInfo*> _query_info_finish;
			[ExplicitOffset( Offset = 320 )]
			public Functors.Func<GFileIOStream*, sbyte*> _get_etag;
			[ExplicitOffset( Offset = 328 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 336 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 344 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 352 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 360 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GFileIOStreamPrivate* _priv;
	}
	public partial struct GFileIOStreamPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileMonitor : GObject {
		[ExplicitSize( Size = 192 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GFileMonitor*, GFile*, GFile*, GFileMonitorEvent> _changed;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GFileMonitor*, Boolean32> _cancel;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 24 )]
		public GFileMonitorPrivate* _priv;
	}
	public partial struct GFileMonitorPrivate {
	}
	public partial struct GFilenameCompleter : GObject {
		[ExplicitSize( Size = 168 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GFilenameCompleter*> _got_completion_data;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved3;
		}
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFileOutputStream : GOutputStream {
		[ExplicitSize( Size = 408 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 296 )]
			public Functors.Func<GFileOutputStream*, intptr> _tell;
			[ExplicitOffset( Offset = 304 )]
			public Functors.Func<GFileOutputStream*, Boolean32> _can_seek;
			[ExplicitOffset( Offset = 312 )]
			public Functors.Func<GFileOutputStream*, intptr, GSeekType, GCancellable*, GError**, Boolean32> _seek;
			[ExplicitOffset( Offset = 320 )]
			public Functors.Func<GFileOutputStream*, Boolean32> _can_truncate;
			[ExplicitOffset( Offset = 328 )]
			public Functors.Func<GFileOutputStream*, intptr, GCancellable*, GError**, Boolean32> _truncate_fn;
			[ExplicitOffset( Offset = 336 )]
			public Functors.Func<GFileOutputStream*, sbyte*, GCancellable*, GError**, GFileInfo*> _query_info;
			[ExplicitOffset( Offset = 344 )]
			public Functors.Action<GFileOutputStream*, sbyte*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _query_info_async;
			[ExplicitOffset( Offset = 352 )]
			public Functors.Func<GFileOutputStream*, GAsyncResult*, GError**, GFileInfo*> _query_info_finish;
			[ExplicitOffset( Offset = 360 )]
			public Functors.Func<GFileOutputStream*, sbyte*> _get_etag;
			[ExplicitOffset( Offset = 368 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 376 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 384 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 392 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 400 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GFileOutputStreamPrivate* _priv;
	}
	public partial struct GFileOutputStreamPrivate {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFilterInputStream : GInputStream {
		[ExplicitSize( Size = 272 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 248 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 256 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 264 )]
			public new Functors.Action _g_reserved3;
		}
		[ExplicitOffset( Offset = 32 )]
		public GInputStream* _base_stream;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFilterOutputStream : GOutputStream {
		[ExplicitSize( Size = 320 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 296 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 304 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 312 )]
			public Functors.Action _g_reserved3;
		}
		[ExplicitOffset( Offset = 32 )]
		public GOutputStream* _base_stream;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFlagsClass {
		[ExplicitOffset( Offset = 0 )]
		public GTypeClass g_type_class;
		[ExplicitOffset( Offset = 8 )]
		public uint mask;
		[ExplicitOffset( Offset = 12 )]
		public uint n_values;
		[ExplicitOffset( Offset = 16 )]
		public GFlagsValue* values;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GFlagsValue {
		[ExplicitOffset( Offset = 0 )]
		public uint value;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String value_name;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* value_nick;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct GFloatIEEE754 {
		[Overlapped( Offset = 0 )]
		public float v_float;
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_D4FB7161 mpn;
	}
	public partial struct GHashTable {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GHashTableIter {
		[ExplicitOffset( Offset = 0 )]
		public void* dummy1;
		[ExplicitOffset( Offset = 8 )]
		public void* dummy2;
		[ExplicitOffset( Offset = 16 )]
		public void* dummy3;
		[ExplicitOffset( Offset = 24 )]
		public int dummy4;
		[ExplicitOffset( Offset = 28 )]
		public Boolean32 dummy5;
		[ExplicitOffset( Offset = 32 )]
		public void* dummy6;
	}
	public partial struct GHmac {
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct GHook {
		[ExplicitOffset( Offset = 0 )]
		public void* data;
		[ExplicitOffset( Offset = 8 )]
		public GHook* next;
		[ExplicitOffset( Offset = 16 )]
		public GHook* prev;
		[ExplicitOffset( Offset = 24 )]
		public uint ref_count;
		[ExplicitOffset( Offset = 32 )]
		public uintptr hook_id;
		[ExplicitOffset( Offset = 40 )]
		public uint flags;
		[ExplicitOffset( Offset = 48 )]
		public void* func;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Action<void*> destroy;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GHookList {
		[ExplicitOffset( Offset = 0 )]
		public uintptr seq_id;
		public uint hook_size { get { return cast<byte*>( &this )[8] | cast<ushort>( cast<byte*>( &this )[9] ) << 8; } set { cast<byte*>( &this )[8] = cast<byte>( value ); cast<byte*>( &this )[9] = cast<byte>( value >> 8 ); } }
		public bool is_setup { get { return ( cast<byte*>( &this )[10] & 1 ) != 0; } set { cast<byte*>( &this )[10] &= 254; cast<byte*>( &this )[10] |= cast<byte>( value ) << 0; } }
		[ExplicitOffset( Offset = 16 )]
		public GHook* hooks;
		[ExplicitOffset( Offset = 24 )]
		public void* dummy3;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GHookList*, GHook*> finalize_hook;
		[ExplicitOffset( Offset = 40 )]
		public void*[2] dummy;
	}
	public partial struct GIcon {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GIconIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GIcon*, uint> hash;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GIcon*, GIcon*, Boolean32> equal;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GIcon*, GPtrArray*, int*, Boolean32> to_tokens;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<sbyte**, int, int, GError**, GIcon*> from_tokens;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GIcon*, GVariant*> serialize;
	}
	public partial struct GIConv {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInetAddress : GObject {
		[ExplicitSize( Size = 152 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GInetAddress*, sbyte*> _to_string;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GInetAddress*, byte*> _to_bytes;
		}
		[ExplicitOffset( Offset = 24 )]
		public GInetAddressPrivate* _priv;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInetAddressMask : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 24 )]
		public GInetAddressMaskPrivate* _priv;
	}
	public partial struct GInetAddressMaskPrivate {
	}
	public partial struct GInetAddressPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInetSocketAddress : GSocketAddress {
		[ExplicitSize( Size = 160 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 24 )]
		public GInetSocketAddressPrivate* _priv;
	}
	public partial struct GInetSocketAddressPrivate {
	}
	public partial struct GInitable {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInitableIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GInitable*, GCancellable*, GError**, Boolean32> init;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInputMessage {
		[ExplicitOffset( Offset = 0 )]
		public GSocketAddress** address;
		[ExplicitOffset( Offset = 8 )]
		public GInputVector* vectors;
		[ExplicitOffset( Offset = 16 )]
		public uint num_vectors;
		[ExplicitOffset( Offset = 24 )]
		public uintptr bytes_received;
		[ExplicitOffset( Offset = 32 )]
		public int flags;
		[ExplicitOffset( Offset = 40 )]
		public GSocketControlMessage*** control_messages;
		[ExplicitOffset( Offset = 48 )]
		public uint* num_control_messages;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInputStream : GObject {
		[ExplicitSize( Size = 248 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GInputStream*, void*, uintptr, GCancellable*, GError**, intptr> _read_fn;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GInputStream*, uintptr, GCancellable*, GError**, intptr> _skip;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GInputStream*, GCancellable*, GError**, Boolean32> _close_fn;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action<GInputStream*, void*, uintptr, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _read_async;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<GInputStream*, GAsyncResult*, GError**, intptr> _read_finish;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GInputStream*, uintptr, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _skip_async;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Func<GInputStream*, GAsyncResult*, GError**, intptr> _skip_finish;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action<GInputStream*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _close_async;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Func<GInputStream*, GAsyncResult*, GError**, Boolean32> _close_finish;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 24 )]
		public GInputStreamPrivate* _priv;
	}
	public partial struct GInputStreamPrivate {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInputVector {
		[ExplicitOffset( Offset = 0 )]
		public void* buffer;
		[ExplicitOffset( Offset = 8 )]
		public uintptr size;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GInterfaceInfo {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<void*, void*> interface_init;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<void*, void*> interface_finalize;
		[ExplicitOffset( Offset = 16 )]
		public void* interface_data;
	}
	[ExplicitSize( Size = 112 )]
	[Alignment( Boundary = 8 )]
	public partial struct GIOChannel {
		[ExplicitOffset( Offset = 0 )]
		public int ref_count;
		[ExplicitOffset( Offset = 8 )]
		public GIOFuncs* funcs;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* encoding;
		[ExplicitOffset( Offset = 24 )]
		public GIConv* read_cd;
		[ExplicitOffset( Offset = 32 )]
		public GIConv* write_cd;
		[ExplicitOffset( Offset = 40 )]
		public sbyte* line_term;
		[ExplicitOffset( Offset = 48 )]
		public uint line_term_len;
		[ExplicitOffset( Offset = 56 )]
		public uintptr buf_size;
		[ExplicitOffset( Offset = 64 )]
		public GString* read_buf;
		[ExplicitOffset( Offset = 72 )]
		public GString* encoded_read_buf;
		[ExplicitOffset( Offset = 80 )]
		public GString* write_buf;
		[ExplicitOffset( Offset = 88 )]
		public sbyte[6] partial_write_buf;
		public bool use_buffer { get { return ( cast<byte*>( &this )[94] & 1 ) != 0; } set { cast<byte*>( &this )[94] &= 254; cast<byte*>( &this )[94] |= cast<byte>( value ) << 0; } }
		public bool do_encode { get { return ( cast<byte*>( &this )[94] & 2 ) != 0; } set { cast<byte*>( &this )[94] &= 253; cast<byte*>( &this )[94] |= cast<byte>( value ) << 1; } }
		public bool close_on_unref { get { return ( cast<byte*>( &this )[94] & 4 ) != 0; } set { cast<byte*>( &this )[94] &= 251; cast<byte*>( &this )[94] |= cast<byte>( value ) << 2; } }
		public bool is_readable { get { return ( cast<byte*>( &this )[94] & 8 ) != 0; } set { cast<byte*>( &this )[94] &= 247; cast<byte*>( &this )[94] |= cast<byte>( value ) << 3; } }
		public bool is_writeable { get { return ( cast<byte*>( &this )[94] & 16 ) != 0; } set { cast<byte*>( &this )[94] &= 239; cast<byte*>( &this )[94] |= cast<byte>( value ) << 4; } }
		public bool is_seekable { get { return ( cast<byte*>( &this )[94] & 32 ) != 0; } set { cast<byte*>( &this )[94] &= 223; cast<byte*>( &this )[94] |= cast<byte>( value ) << 5; } }
		[ExplicitOffset( Offset = 96 )]
		public void* reserved1;
		[ExplicitOffset( Offset = 104 )]
		public void* reserved2;
	}
	public partial struct GIOExtension {
	}
	public partial struct GIOExtensionPoint {
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct GIOFuncs {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<GIOChannel*, sbyte*, uintptr, uintptr*, GError**, GIOStatus> io_read;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<GIOChannel*, sbyte*, uintptr, uintptr*, GError**, GIOStatus> io_write;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GIOChannel*, intptr, GSeekType, GError**, GIOStatus> io_seek;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GIOChannel*, GError**, GIOStatus> io_close;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GIOChannel*, GIOCondition, GSource*> io_create_watch;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Action<GIOChannel*> io_free;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GIOChannel*, GIOFlags, GError**, GIOStatus> io_set_flags;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GIOChannel*, GIOFlags> io_get_flags;
	}
	public partial struct GIOModule {
	}
	public partial struct GIOModuleClass {
	}
	public partial struct GIOModuleScope {
	}
	public partial struct GIOSchedulerJob {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GIOStream : GObject {
		[ExplicitSize( Size = 256 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GIOStream*, GInputStream*> _get_input_stream;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GIOStream*, GOutputStream*> _get_output_stream;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GIOStream*, GCancellable*, GError**, Boolean32> _close_fn;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action<GIOStream*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _close_async;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<GIOStream*, GAsyncResult*, GError**, Boolean32> _close_finish;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Action _g_reserved6;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Action _g_reserved7;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Action _g_reserved8;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Action _g_reserved9;
			[ExplicitOffset( Offset = 248 )]
			public Functors.Action _g_reserved10;
		}
		[ExplicitOffset( Offset = 24 )]
		public GIOStreamPrivate* _priv;
	}
	public partial struct GIOStreamAdapter {
	}
	public partial struct GIOStreamPrivate {
	}
	public partial struct GKeyFile {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GList {
		[ExplicitOffset( Offset = 0 )]
		public void* data;
		[ExplicitOffset( Offset = 8 )]
		public GList* next;
		[ExplicitOffset( Offset = 16 )]
		public GList* prev;
	}
	public partial struct GListModel {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GListModelInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GListModel*, uintptr> get_item_type;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GListModel*, uint> get_n_items;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GListModel*, uint, void*> get_item;
	}
	public partial struct GListStore : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
	}
	public partial struct GLoadableIcon {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GLoadableIconIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GLoadableIcon*, int, sbyte**, GCancellable*, GError**, GInputStream*> load;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GLoadableIcon*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> load_async;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GLoadableIcon*, GAsyncResult*, sbyte**, GError**, GInputStream*> load_finish;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GLogField {
		[ExplicitOffset( Offset = 0 )]
		public sbyte* key;
		[ExplicitOffset( Offset = 8 )]
		public void* value;
		[ExplicitOffset( Offset = 16 )]
		public intptr length;
	}
	public partial struct GMainContext {
	}
	public partial struct GMainLoop {
	}
	public partial struct GMappedFile {
	}
	public partial struct GMarkupParseContext {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMarkupParser {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<GMarkupParseContext*, sbyte*, sbyte**, sbyte**, void*, GError**> start_element;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<GMarkupParseContext*, sbyte*, void*, GError**> end_element;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GMarkupParseContext*, sbyte*, uintptr, void*, GError**> text;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GMarkupParseContext*, sbyte*, uintptr, void*, GError**> passthrough;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GMarkupParseContext*, GError*, void*> error;
	}
	public partial struct GMatchInfo {
	}
	public partial struct GMemChunk {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMemoryInputStream : GInputStream {
		[ExplicitSize( Size = 288 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 248 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 256 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 264 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 272 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 280 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GMemoryInputStreamPrivate* _priv;
	}
	public partial struct GMemoryInputStreamPrivate {
	}
	public partial struct GMemoryMonitor {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMemoryMonitorInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GMemoryMonitor*, GMemoryMonitorWarningLevel> low_memory_warning;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMemoryOutputStream : GOutputStream {
		[ExplicitSize( Size = 336 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 296 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 304 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 312 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 320 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 328 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GMemoryOutputStreamPrivate* _priv;
	}
	public partial struct GMemoryOutputStreamPrivate {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMemVTable {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<uintptr, void*> malloc;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<void*, uintptr, void*> realloc;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<void*> free;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<uintptr, uintptr, void*> calloc;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<uintptr, void*> try_malloc;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<void*, uintptr, void*> try_realloc;
	}
	public partial struct GMenu {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMenuAttributeIter : GObject {
		[ExplicitSize( Size = 144 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GMenuAttributeIter*, sbyte**, GVariant**, Boolean32> _get_next;
		}
		[ExplicitOffset( Offset = 24 )]
		public GMenuAttributeIterPrivate* _priv;
	}
	public partial struct GMenuAttributeIterPrivate {
	}
	public partial struct GMenuItem {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMenuLinkIter : GObject {
		[ExplicitSize( Size = 144 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GMenuLinkIter*, sbyte**, GMenuModel**, Boolean32> _get_next;
		}
		[ExplicitOffset( Offset = 24 )]
		public GMenuLinkIterPrivate* _priv;
	}
	public partial struct GMenuLinkIterPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMenuModel : GObject {
		[ExplicitSize( Size = 200 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GMenuModel*, Boolean32> _is_mutable;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GMenuModel*, int> _get_n_items;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action<GMenuModel*, int, GHashTable**> _get_item_attributes;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GMenuModel*, int, GMenuAttributeIter*> _iterate_item_attributes;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<GMenuModel*, int, sbyte*, GVariantType*, GVariant*> _get_item_attribute_value;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GMenuModel*, int, GHashTable**> _get_item_links;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Func<GMenuModel*, int, GMenuLinkIter*> _iterate_item_links;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Func<GMenuModel*, int, sbyte*, GMenuModel*> _get_item_link;
		}
		[ExplicitOffset( Offset = 24 )]
		public GMenuModelPrivate* _priv;
	}
	public partial struct GMenuModelPrivate {
	}
	public partial struct GModule {
	}
	public partial struct GMount {
	}
	[ExplicitSize( Size = 232 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMountIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GMount*> changed;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GMount*> unmounted;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GMount*, GFile*> get_root;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GMount*, sbyte*> get_name;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GMount*, GIcon*> get_icon;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GMount*, sbyte*> get_uuid;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GMount*, GVolume*> get_volume;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<GMount*, GDrive*> get_drive;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<GMount*, Boolean32> can_unmount;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Func<GMount*, Boolean32> can_eject;
		[ExplicitOffset( Offset = 96 )]
		public Functors.Action<GMount*, GMountUnmountFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> unmount;
		[ExplicitOffset( Offset = 104 )]
		public Functors.Func<GMount*, GAsyncResult*, GError**, Boolean32> unmount_finish;
		[ExplicitOffset( Offset = 112 )]
		public Functors.Action<GMount*, GMountUnmountFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject;
		[ExplicitOffset( Offset = 120 )]
		public Functors.Func<GMount*, GAsyncResult*, GError**, Boolean32> eject_finish;
		[ExplicitOffset( Offset = 128 )]
		public Functors.Action<GMount*, GMountMountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> remount;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Func<GMount*, GAsyncResult*, GError**, Boolean32> remount_finish;
		[ExplicitOffset( Offset = 144 )]
		public Functors.Action<GMount*, Boolean32, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> guess_content_type;
		[ExplicitOffset( Offset = 152 )]
		public Functors.Func<GMount*, GAsyncResult*, GError**, sbyte**> guess_content_type_finish;
		[ExplicitOffset( Offset = 160 )]
		public Functors.Func<GMount*, Boolean32, GCancellable*, GError**, sbyte**> guess_content_type_sync;
		[ExplicitOffset( Offset = 168 )]
		public Functors.Action<GMount*> pre_unmount;
		[ExplicitOffset( Offset = 176 )]
		public Functors.Action<GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> unmount_with_operation;
		[ExplicitOffset( Offset = 184 )]
		public Functors.Func<GMount*, GAsyncResult*, GError**, Boolean32> unmount_with_operation_finish;
		[ExplicitOffset( Offset = 192 )]
		public Functors.Action<GMount*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject_with_operation;
		[ExplicitOffset( Offset = 200 )]
		public Functors.Func<GMount*, GAsyncResult*, GError**, Boolean32> eject_with_operation_finish;
		[ExplicitOffset( Offset = 208 )]
		public Functors.Func<GMount*, GFile*> get_default_location;
		[ExplicitOffset( Offset = 216 )]
		public Functors.Func<GMount*, sbyte*> get_sort_key;
		[ExplicitOffset( Offset = 224 )]
		public Functors.Func<GMount*, GIcon*> get_symbolic_icon;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMountOperation : GObject {
		[ExplicitSize( Size = 256 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GMountOperation*, sbyte*, sbyte*, sbyte*, GAskPasswordFlags> _ask_password;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GMountOperation*, sbyte*, sbyte**> _ask_question;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action<GMountOperation*, GMountOperationResult> _reply;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action<GMountOperation*> _aborted;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action<GMountOperation*, sbyte*, GArray*, sbyte**> _show_processes;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GMountOperation*, sbyte*, intptr, intptr> _show_unmount_progress;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Action _g_reserved6;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Action _g_reserved7;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Action _g_reserved8;
			[ExplicitOffset( Offset = 248 )]
			public Functors.Action _g_reserved9;
		}
		[ExplicitOffset( Offset = 24 )]
		public GMountOperationPrivate* _priv;
	}
	public partial struct GMountOperationPrivate {
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct GMutex {
		[Overlapped( Offset = 0 )]
		public void* p;
		[Overlapped( Offset = 0 )]
		public uint[2] i;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GNativeSocketAddress : GSocketAddress {
		[ExplicitSize( Size = 160 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 24 )]
		public GNativeSocketAddressPrivate* _priv;
	}
	public partial struct GNativeSocketAddressPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GNativeVolumeMonitor : GVolumeMonitor {
		[ExplicitSize( Size = 344 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 336 )]
			public Functors.Func<sbyte*, GCancellable*, GMount*> _get_mount_for_mount_path;
		}
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GNetworkAddress : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 24 )]
		public GNetworkAddressPrivate* _priv;
	}
	public partial struct GNetworkAddressPrivate {
	}
	public partial struct GNetworkMonitor {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GNetworkMonitorInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GNetworkMonitor*, Boolean32> network_changed;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GNetworkMonitor*, GSocketConnectable*, GCancellable*, GError**, Boolean32> can_reach;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GNetworkMonitor*, GSocketConnectable*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> can_reach_async;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GNetworkMonitor*, GAsyncResult*, GError**, Boolean32> can_reach_finish;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GNetworkService : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 24 )]
		public GNetworkServicePrivate* _priv;
	}
	public partial struct GNetworkServicePrivate {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GNode {
		[ExplicitOffset( Offset = 0 )]
		public void* data;
		[ExplicitOffset( Offset = 8 )]
		public GNode* next;
		[ExplicitOffset( Offset = 16 )]
		public GNode* prev;
		[ExplicitOffset( Offset = 24 )]
		public GNode* parent;
		[ExplicitOffset( Offset = 32 )]
		public GNode* children;
	}
	public partial struct GNotification {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GObject : GTypeInstance {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : GTypeClass {
			[ExplicitOffset( Offset = 8 )]
			public GSList* _construct_properties;
			[ExplicitOffset( Offset = 16 )]
			public Functors.Func<uintptr, uint, GObjectConstructParam*, GObject*> _constructor;
			[ExplicitOffset( Offset = 24 )]
			public Functors.Action<GObject*, uint, GValue*, GParamSpec*> _set_property;
			[ExplicitOffset( Offset = 32 )]
			public Functors.Action<GObject*, uint, GValue*, GParamSpec*> _get_property;
			[ExplicitOffset( Offset = 40 )]
			public Functors.Action<GObject*> _dispose;
			[ExplicitOffset( Offset = 48 )]
			public Functors.Action<GObject*> _finalize;
			[ExplicitOffset( Offset = 56 )]
			public Functors.Action<GObject*, uint, GParamSpec**> _dispatch_properties_changed;
			[ExplicitOffset( Offset = 64 )]
			public Functors.Action<GObject*, GParamSpec*> _notify;
			[ExplicitOffset( Offset = 72 )]
			public Functors.Action<GObject*> _constructed;
			[ExplicitOffset( Offset = 80 )]
			public uintptr _flags;
			[ExplicitOffset( Offset = 88 )]
			public uintptr _n_construct_properties;
			[ExplicitOffset( Offset = 96 )]
			public void* _pspecs;
			[ExplicitOffset( Offset = 104 )]
			public uintptr _n_pspecs;
			[ExplicitOffset( Offset = 112 )]
			public void*[3] _pdummy;
		}
		[ExplicitOffset( Offset = 8 )]
		public uint _ref_count;
		[ExplicitOffset( Offset = 16 )]
		public GData* _qdata;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GObjectConstructParam {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec* pspec;
		[ExplicitOffset( Offset = 8 )]
		public GValue* value;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GOnce {
		[ExplicitOffset( Offset = 0 )]
		public GOnceStatus status;
		[ExplicitOffset( Offset = 8 )]
		public void* retval;
	}
	public partial struct GOptionContext {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GOptionEntry {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String long_name;
		[ExplicitOffset( Offset = 8 )]
		public sbyte short_name;
		[ExplicitOffset( Offset = 12 )]
		public int flags;
		[ExplicitOffset( Offset = 16 )]
		public GOptionArg arg;
		[ExplicitOffset( Offset = 24 )]
		public void* arg_data;
		[ExplicitOffset( Offset = 32 )]
		public CUtf8String description;
		[ExplicitOffset( Offset = 40 )]
		public CUtf8String arg_description;
	}
	public partial struct GOptionGroup {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GOutputMessage {
		[ExplicitOffset( Offset = 0 )]
		public GSocketAddress* address;
		[ExplicitOffset( Offset = 8 )]
		public GOutputVector* vectors;
		[ExplicitOffset( Offset = 16 )]
		public uint num_vectors;
		[ExplicitOffset( Offset = 20 )]
		public uint bytes_sent;
		[ExplicitOffset( Offset = 24 )]
		public GSocketControlMessage** control_messages;
		[ExplicitOffset( Offset = 32 )]
		public uint num_control_messages;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GOutputStream : GObject {
		[ExplicitSize( Size = 296 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GOutputStream*, void*, uintptr, GCancellable*, GError**, intptr> _write_fn;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, GCancellable*, GError**, intptr> _splice;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GOutputStream*, GCancellable*, GError**, Boolean32> _flush;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GOutputStream*, GCancellable*, GError**, Boolean32> _close_fn;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action<GOutputStream*, void*, uintptr, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _write_async;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Func<GOutputStream*, GAsyncResult*, GError**, intptr> _write_finish;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action<GOutputStream*, GInputStream*, GOutputStreamSpliceFlags, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _splice_async;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Func<GOutputStream*, GAsyncResult*, GError**, intptr> _splice_finish;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action<GOutputStream*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _flush_async;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Func<GOutputStream*, GAsyncResult*, GError**, Boolean32> _flush_finish;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Action<GOutputStream*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _close_async;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Func<GOutputStream*, GAsyncResult*, GError**, Boolean32> _close_finish;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Func<GOutputStream*, GOutputVector*, uintptr, uintptr*, GCancellable*, GError**, Boolean32> _writev_fn;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Action<GOutputStream*, GOutputVector*, uintptr, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _writev_async;
			[ExplicitOffset( Offset = 248 )]
			public Functors.Func<GOutputStream*, GAsyncResult*, uintptr*, GError**, Boolean32> _writev_finish;
			[ExplicitOffset( Offset = 256 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 264 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 272 )]
			public Functors.Action _g_reserved6;
			[ExplicitOffset( Offset = 280 )]
			public Functors.Action _g_reserved7;
			[ExplicitOffset( Offset = 288 )]
			public Functors.Action _g_reserved8;
		}
		[ExplicitOffset( Offset = 24 )]
		public GOutputStreamPrivate* _priv;
	}
	public partial struct GOutputStreamPrivate {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GOutputVector {
		[ExplicitOffset( Offset = 0 )]
		public void* buffer;
		[ExplicitOffset( Offset = 8 )]
		public uintptr size;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParameter {
		[ExplicitOffset( Offset = 0 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 8 )]
		public GValue value;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpec {
		[ExplicitOffset( Offset = 0 )]
		public GTypeInstance g_type_instance;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 16 )]
		public GParamFlags flags;
		[ExplicitOffset( Offset = 24 )]
		public uintptr value_type;
		[ExplicitOffset( Offset = 32 )]
		public uintptr owner_type;
		[ExplicitOffset( Offset = 40 )]
		public sbyte* _nick;
		[ExplicitOffset( Offset = 48 )]
		public sbyte* _blurb;
		[ExplicitOffset( Offset = 56 )]
		public GData* qdata;
		[ExplicitOffset( Offset = 64 )]
		public uint ref_count;
		[ExplicitOffset( Offset = 68 )]
		public uint param_id;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecBoolean {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public Boolean32 default_value;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecBoxed {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecChar {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public sbyte minimum;
		[ExplicitOffset( Offset = 73 )]
		public sbyte maximum;
		[ExplicitOffset( Offset = 74 )]
		public sbyte default_value;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecClass {
		[ExplicitOffset( Offset = 0 )]
		public GTypeClass g_type_class;
		[ExplicitOffset( Offset = 8 )]
		public uintptr value_type;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GParamSpec*> finalize;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GParamSpec*, GValue*> value_set_default;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GParamSpec*, GValue*, Boolean32> value_validate;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GParamSpec*, GValue*, GValue*, int> values_cmp;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GParamSpec*, GValue*, Boolean32> value_is_valid;
		[ExplicitOffset( Offset = 56 )]
		public void*[3] dummy;
	}
	[ExplicitSize( Size = 104 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecDouble {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public double minimum;
		[ExplicitOffset( Offset = 80 )]
		public double maximum;
		[ExplicitOffset( Offset = 88 )]
		public double default_value;
		[ExplicitOffset( Offset = 96 )]
		public double epsilon;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecEnum {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public GEnumClass* enum_class;
		[ExplicitOffset( Offset = 80 )]
		public int default_value;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecFlags {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public GFlagsClass* flags_class;
		[ExplicitOffset( Offset = 80 )]
		public uint default_value;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecFloat {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public float minimum;
		[ExplicitOffset( Offset = 76 )]
		public float maximum;
		[ExplicitOffset( Offset = 80 )]
		public float default_value;
		[ExplicitOffset( Offset = 84 )]
		public float epsilon;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecGType {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public uintptr is_a_type;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecInt {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public int minimum;
		[ExplicitOffset( Offset = 76 )]
		public int maximum;
		[ExplicitOffset( Offset = 80 )]
		public int default_value;
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecInt64 {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public intptr minimum;
		[ExplicitOffset( Offset = 80 )]
		public intptr maximum;
		[ExplicitOffset( Offset = 88 )]
		public intptr default_value;
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecLong {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public intptr minimum;
		[ExplicitOffset( Offset = 80 )]
		public intptr maximum;
		[ExplicitOffset( Offset = 88 )]
		public intptr default_value;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecObject {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecOverride {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public GParamSpec* overridden;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecParam {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecPointer {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
	}
	public partial struct GParamSpecPool {
	}
	[ExplicitSize( Size = 104 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecString {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public sbyte* default_value;
		[ExplicitOffset( Offset = 80 )]
		public sbyte* cset_first;
		[ExplicitOffset( Offset = 88 )]
		public sbyte* cset_nth;
		[ExplicitOffset( Offset = 96 )]
		public sbyte substitutor;
		public bool null_fold_if_empty { get { return ( cast<byte*>( &this )[97] & 1 ) != 0; } set { cast<byte*>( &this )[97] &= 254; cast<byte*>( &this )[97] |= cast<byte>( value ) << 0; } }
		public bool ensure_non_null { get { return ( cast<byte*>( &this )[97] & 2 ) != 0; } set { cast<byte*>( &this )[97] &= 253; cast<byte*>( &this )[97] |= cast<byte>( value ) << 1; } }
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecTypeInfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort instance_size;
		[ExplicitOffset( Offset = 2 )]
		public ushort n_preallocs;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<GParamSpec*> instance_init;
		[ExplicitOffset( Offset = 16 )]
		public uintptr value_type;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GParamSpec*> finalize;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GParamSpec*, GValue*> value_set_default;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GParamSpec*, GValue*, Boolean32> value_validate;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GParamSpec*, GValue*, GValue*, int> values_cmp;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecUChar {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public byte minimum;
		[ExplicitOffset( Offset = 73 )]
		public byte maximum;
		[ExplicitOffset( Offset = 74 )]
		public byte default_value;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecUInt {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public uint minimum;
		[ExplicitOffset( Offset = 76 )]
		public uint maximum;
		[ExplicitOffset( Offset = 80 )]
		public uint default_value;
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecUInt64 {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public uintptr minimum;
		[ExplicitOffset( Offset = 80 )]
		public uintptr maximum;
		[ExplicitOffset( Offset = 88 )]
		public uintptr default_value;
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecULong {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public uintptr minimum;
		[ExplicitOffset( Offset = 80 )]
		public uintptr maximum;
		[ExplicitOffset( Offset = 88 )]
		public uintptr default_value;
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecUnichar {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public uint default_value;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecValueArray {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public GParamSpec* element_spec;
		[ExplicitOffset( Offset = 80 )]
		public uint fixed_n_elements;
	}
	[ExplicitSize( Size = 120 )]
	[Alignment( Boundary = 8 )]
	public partial struct GParamSpecVariant {
		[ExplicitOffset( Offset = 0 )]
		public GParamSpec parent_instance;
		[ExplicitOffset( Offset = 72 )]
		public GVariantType* type;
		[ExplicitOffset( Offset = 80 )]
		public GVariant* default_value;
		[ExplicitOffset( Offset = 88 )]
		public void*[4] padding;
	}
	public partial struct GPatternSpec {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GPermission : GObject {
		[ExplicitSize( Size = 312 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GPermission*, GCancellable*, GError**, Boolean32> _acquire;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GPermission*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _acquire_async;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GPermission*, GAsyncResult*, GError**, Boolean32> _acquire_finish;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GPermission*, GCancellable*, GError**, Boolean32> _release;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action<GPermission*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _release_async;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Func<GPermission*, GAsyncResult*, GError**, Boolean32> _release_finish;
			[ExplicitOffset( Offset = 184 )]
			public void*[16] _reserved;
		}
		[ExplicitOffset( Offset = 24 )]
		public GPermissionPrivate* _priv;
	}
	public partial struct GPermissionPrivate {
	}
	public partial struct GPollableInputStream {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GPollableInputStreamInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GPollableInputStream*, Boolean32> can_poll;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GPollableInputStream*, Boolean32> is_readable;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GPollableInputStream*, GCancellable*, GSource*> create_source;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GPollableInputStream*, void*, uintptr, GError**, intptr> read_nonblocking;
	}
	public partial struct GPollableOutputStream {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GPollableOutputStreamInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GPollableOutputStream*, Boolean32> can_poll;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GPollableOutputStream*, Boolean32> is_writable;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GPollableOutputStream*, GCancellable*, GSource*> create_source;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GPollableOutputStream*, void*, uintptr, GError**, intptr> write_nonblocking;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GPollableOutputStream*, GOutputVector*, uintptr, uintptr*, GError**, GPollableReturn> writev_nonblocking;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct GPollFD {
		[ExplicitOffset( Offset = 0 )]
		public int fd;
		[ExplicitOffset( Offset = 4 )]
		public ushort events;
		[ExplicitOffset( Offset = 6 )]
		public ushort revents;
	}
	public partial struct GPowerProfileMonitor {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GPowerProfileMonitorInterface : GTypeInterface {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GPrivate {
		[ExplicitOffset( Offset = 0 )]
		public void* p;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<void*> notify;
		[ExplicitOffset( Offset = 16 )]
		public void*[2] future;
	}
	public partial struct GPropertyAction {
	}
	public partial struct GProxy {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GProxyAddress : GInetSocketAddress {
		[ExplicitSize( Size = 160 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 32 )]
		public new GProxyAddressPrivate* _priv;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GProxyAddressEnumerator : GSocketAddressEnumerator {
		[ExplicitSize( Size = 216 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action _g_reserved6;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action _g_reserved7;
		}
		[ExplicitOffset( Offset = 24 )]
		public GProxyAddressEnumeratorPrivate* _priv;
	}
	public partial struct GProxyAddressEnumeratorPrivate {
	}
	public partial struct GProxyAddressPrivate {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GProxyInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GProxy*, GIOStream*, GProxyAddress*, GCancellable*, GError**, GIOStream*> connect;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GProxy*, GIOStream*, GProxyAddress*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> connect_async;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GProxy*, GAsyncResult*, GError**, GIOStream*> connect_finish;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GProxy*, Boolean32> supports_hostname;
	}
	public partial struct GProxyResolver {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GProxyResolverInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GProxyResolver*, Boolean32> is_supported;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GProxyResolver*, sbyte*, GCancellable*, GError**, sbyte**> lookup;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GProxyResolver*, sbyte*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> lookup_async;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GProxyResolver*, GAsyncResult*, GError**, sbyte**> lookup_finish;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GPtrArray {
		[ExplicitOffset( Offset = 0 )]
		public void** pdata;
		[ExplicitOffset( Offset = 8 )]
		public uint len;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GQueue {
		[ExplicitOffset( Offset = 0 )]
		public GList* head;
		[ExplicitOffset( Offset = 8 )]
		public GList* tail;
		[ExplicitOffset( Offset = 16 )]
		public uint length;
	}
	public partial struct GRand {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GRecMutex {
		[ExplicitOffset( Offset = 0 )]
		public void* p;
		[ExplicitOffset( Offset = 8 )]
		public uint[2] i;
	}
	public partial struct GRegex {
	}
	public partial struct GRelation {
	}
	public partial struct GRemoteActionGroup {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GRemoteActionGroupInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GRemoteActionGroup*, sbyte*, GVariant*, GVariant*> activate_action_full;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GRemoteActionGroup*, sbyte*, GVariant*, GVariant*> change_action_state_full;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GResolver : GObject {
		[ExplicitSize( Size = 264 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GResolver*> _reload;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GResolver*, sbyte*, GCancellable*, GError**, GList*> _lookup_by_name;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action<GResolver*, sbyte*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_by_name_async;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GResolver*, GAsyncResult*, GError**, GList*> _lookup_by_name_finish;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<GResolver*, GInetAddress*, GCancellable*, GError**, sbyte*> _lookup_by_address;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GResolver*, GInetAddress*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_by_address_async;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Func<GResolver*, GAsyncResult*, GError**, sbyte*> _lookup_by_address_finish;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Func<GResolver*, sbyte*, GCancellable*, GError**, GList*> _lookup_service;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action<GResolver*, sbyte*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_service_async;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Func<GResolver*, GAsyncResult*, GError**, GList*> _lookup_service_finish;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Func<GResolver*, sbyte*, GResolverRecordType, GCancellable*, GError**, GList*> _lookup_records;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Action<GResolver*, sbyte*, GResolverRecordType, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_records_async;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Func<GResolver*, GAsyncResult*, GError**, GList*> _lookup_records_finish;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Action<GResolver*, sbyte*, GResolverNameLookupFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_by_name_with_flags_async;
			[ExplicitOffset( Offset = 248 )]
			public Functors.Func<GResolver*, GAsyncResult*, GError**, GList*> _lookup_by_name_with_flags_finish;
			[ExplicitOffset( Offset = 256 )]
			public Functors.Func<GResolver*, sbyte*, GResolverNameLookupFlags, GCancellable*, GError**, GList*> _lookup_by_name_with_flags;
		}
		[ExplicitOffset( Offset = 24 )]
		public GResolverPrivate* _priv;
	}
	public partial struct GResolverPrivate {
	}
	public partial struct GResource {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GRWLock {
		[ExplicitOffset( Offset = 0 )]
		public void* p;
		[ExplicitOffset( Offset = 8 )]
		public uint[2] i;
	}
	[ExplicitSize( Size = 144 )]
	[Alignment( Boundary = 8 )]
	public partial struct GScanner {
		[ExplicitOffset( Offset = 0 )]
		public void* user_data;
		[ExplicitOffset( Offset = 8 )]
		public uint max_parse_errors;
		[ExplicitOffset( Offset = 12 )]
		public uint parse_errors;
		[ExplicitOffset( Offset = 16 )]
		public CUtf8String input_name;
		[ExplicitOffset( Offset = 24 )]
		public GData* qdata;
		[ExplicitOffset( Offset = 32 )]
		public GScannerConfig* config;
		[ExplicitOffset( Offset = 40 )]
		public GTokenType token;
		[ExplicitOffset( Offset = 48 )]
		public GTokenValue value;
		[ExplicitOffset( Offset = 56 )]
		public uint line;
		[ExplicitOffset( Offset = 60 )]
		public uint position;
		[ExplicitOffset( Offset = 64 )]
		public GTokenType next_token;
		[ExplicitOffset( Offset = 72 )]
		public GTokenValue next_value;
		[ExplicitOffset( Offset = 80 )]
		public uint next_line;
		[ExplicitOffset( Offset = 84 )]
		public uint next_position;
		[ExplicitOffset( Offset = 88 )]
		public GHashTable* symbol_table;
		[ExplicitOffset( Offset = 96 )]
		public int input_fd;
		[ExplicitOffset( Offset = 104 )]
		public CUtf8String text;
		[ExplicitOffset( Offset = 112 )]
		public CUtf8String text_end;
		[ExplicitOffset( Offset = 120 )]
		public sbyte* buffer;
		[ExplicitOffset( Offset = 128 )]
		public uint scope_id;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Action<GScanner*, sbyte*, Boolean32> msg_handler;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GScannerConfig {
		[ExplicitOffset( Offset = 0 )]
		public sbyte* cset_skip_characters;
		[ExplicitOffset( Offset = 8 )]
		public sbyte* cset_identifier_first;
		[ExplicitOffset( Offset = 16 )]
		public sbyte* cset_identifier_nth;
		[ExplicitOffset( Offset = 24 )]
		public CUtf8String cpair_comment_single;
		public bool case_sensitive { get { return ( cast<byte*>( &this )[32] & 1 ) != 0; } set { cast<byte*>( &this )[32] &= 254; cast<byte*>( &this )[32] |= cast<byte>( value ) << 0; } }
		public bool skip_comment_multi { get { return ( cast<byte*>( &this )[32] & 2 ) != 0; } set { cast<byte*>( &this )[32] &= 253; cast<byte*>( &this )[32] |= cast<byte>( value ) << 1; } }
		public bool skip_comment_single { get { return ( cast<byte*>( &this )[32] & 4 ) != 0; } set { cast<byte*>( &this )[32] &= 251; cast<byte*>( &this )[32] |= cast<byte>( value ) << 2; } }
		public bool scan_comment_multi { get { return ( cast<byte*>( &this )[32] & 8 ) != 0; } set { cast<byte*>( &this )[32] &= 247; cast<byte*>( &this )[32] |= cast<byte>( value ) << 3; } }
		public bool scan_identifier { get { return ( cast<byte*>( &this )[32] & 16 ) != 0; } set { cast<byte*>( &this )[32] &= 239; cast<byte*>( &this )[32] |= cast<byte>( value ) << 4; } }
		public bool scan_identifier_1char { get { return ( cast<byte*>( &this )[32] & 32 ) != 0; } set { cast<byte*>( &this )[32] &= 223; cast<byte*>( &this )[32] |= cast<byte>( value ) << 5; } }
		public bool scan_identifier_NULL { get { return ( cast<byte*>( &this )[32] & 64 ) != 0; } set { cast<byte*>( &this )[32] &= 191; cast<byte*>( &this )[32] |= cast<byte>( value ) << 6; } }
		public bool scan_symbols { get { return ( cast<byte*>( &this )[32] & 128 ) != 0; } set { cast<byte*>( &this )[32] &= 127; cast<byte*>( &this )[32] |= cast<byte>( value ) << 7; } }
		public bool scan_binary { get { return ( cast<byte*>( &this )[33] & 1 ) != 0; } set { cast<byte*>( &this )[33] &= 254; cast<byte*>( &this )[33] |= cast<byte>( value ) << 0; } }
		public bool scan_octal { get { return ( cast<byte*>( &this )[33] & 2 ) != 0; } set { cast<byte*>( &this )[33] &= 253; cast<byte*>( &this )[33] |= cast<byte>( value ) << 1; } }
		public bool scan_float { get { return ( cast<byte*>( &this )[33] & 4 ) != 0; } set { cast<byte*>( &this )[33] &= 251; cast<byte*>( &this )[33] |= cast<byte>( value ) << 2; } }
		public bool scan_hex { get { return ( cast<byte*>( &this )[33] & 8 ) != 0; } set { cast<byte*>( &this )[33] &= 247; cast<byte*>( &this )[33] |= cast<byte>( value ) << 3; } }
		public bool scan_hex_dollar { get { return ( cast<byte*>( &this )[33] & 16 ) != 0; } set { cast<byte*>( &this )[33] &= 239; cast<byte*>( &this )[33] |= cast<byte>( value ) << 4; } }
		public bool scan_string_sq { get { return ( cast<byte*>( &this )[33] & 32 ) != 0; } set { cast<byte*>( &this )[33] &= 223; cast<byte*>( &this )[33] |= cast<byte>( value ) << 5; } }
		public bool scan_string_dq { get { return ( cast<byte*>( &this )[33] & 64 ) != 0; } set { cast<byte*>( &this )[33] &= 191; cast<byte*>( &this )[33] |= cast<byte>( value ) << 6; } }
		public bool numbers_2_int { get { return ( cast<byte*>( &this )[33] & 128 ) != 0; } set { cast<byte*>( &this )[33] &= 127; cast<byte*>( &this )[33] |= cast<byte>( value ) << 7; } }
		public bool int_2_float { get { return ( cast<byte*>( &this )[34] & 1 ) != 0; } set { cast<byte*>( &this )[34] &= 254; cast<byte*>( &this )[34] |= cast<byte>( value ) << 0; } }
		public bool identifier_2_string { get { return ( cast<byte*>( &this )[34] & 2 ) != 0; } set { cast<byte*>( &this )[34] &= 253; cast<byte*>( &this )[34] |= cast<byte>( value ) << 1; } }
		public bool char_2_token { get { return ( cast<byte*>( &this )[34] & 4 ) != 0; } set { cast<byte*>( &this )[34] &= 251; cast<byte*>( &this )[34] |= cast<byte>( value ) << 2; } }
		public bool symbol_2_token { get { return ( cast<byte*>( &this )[34] & 8 ) != 0; } set { cast<byte*>( &this )[34] &= 247; cast<byte*>( &this )[34] |= cast<byte>( value ) << 3; } }
		public bool scope_0_fallback { get { return ( cast<byte*>( &this )[34] & 16 ) != 0; } set { cast<byte*>( &this )[34] &= 239; cast<byte*>( &this )[34] |= cast<byte>( value ) << 4; } }
		public bool store_int64 { get { return ( cast<byte*>( &this )[34] & 32 ) != 0; } set { cast<byte*>( &this )[34] &= 223; cast<byte*>( &this )[34] |= cast<byte>( value ) << 5; } }
		[ExplicitOffset( Offset = 36 )]
		public uint padding_dummy;
	}
	public partial struct GSeekable {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSeekableIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GSeekable*, intptr> tell;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GSeekable*, Boolean32> can_seek;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GSeekable*, intptr, GSeekType, GCancellable*, GError**, Boolean32> seek;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GSeekable*, Boolean32> can_truncate;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GSeekable*, intptr, GCancellable*, GError**, Boolean32> truncate_fn;
	}
	public partial struct GSequence {
	}
	public partial struct GSequenceIter {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSettings : GObject {
		[ExplicitSize( Size = 328 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GSettings*, sbyte*> _writable_changed;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GSettings*, sbyte*> _changed;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GSettings*, uint, Boolean32> _writable_change_event;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GSettings*, uint*, int, Boolean32> _change_event;
			[ExplicitOffset( Offset = 168 )]
			public void*[20] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GSettingsPrivate* _priv;
	}
	public partial struct GSettingsBackend {
	}
	public partial struct GSettingsPrivate {
	}
	public partial struct GSettingsSchema {
	}
	public partial struct GSettingsSchemaKey {
	}
	public partial struct GSettingsSchemaSource {
	}
	public partial struct GSignalGroup {
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct GSignalInvocationHint {
		[ExplicitOffset( Offset = 0 )]
		public uint signal_id;
		[ExplicitOffset( Offset = 4 )]
		public uint detail;
		[ExplicitOffset( Offset = 8 )]
		public GSignalFlags run_type;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSignalQuery {
		[ExplicitOffset( Offset = 0 )]
		public uint signal_id;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String signal_name;
		[ExplicitOffset( Offset = 16 )]
		public uintptr itype;
		[ExplicitOffset( Offset = 24 )]
		public GSignalFlags signal_flags;
		[ExplicitOffset( Offset = 32 )]
		public uintptr return_type;
		[ExplicitOffset( Offset = 40 )]
		public uint n_params;
		[ExplicitOffset( Offset = 48 )]
		public uintptr* param_types;
	}
	public partial struct GSimpleAction {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSimpleActionGroup : GObject {
		[ExplicitSize( Size = 232 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public void*[12] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GSimpleActionGroupPrivate* _priv;
	}
	public partial struct GSimpleActionGroupPrivate {
	}
	public partial struct GSimpleAsyncResult {
	}
	public partial struct GSimpleAsyncResultClass {
	}
	public partial struct GSimpleIOStream {
	}
	public partial struct GSimplePermission {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSimpleProxyResolver : GObject {
		[ExplicitSize( Size = 176 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 24 )]
		public GSimpleProxyResolverPrivate* _priv;
	}
	public partial struct GSimpleProxyResolverPrivate {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSList {
		[ExplicitOffset( Offset = 0 )]
		public void* data;
		[ExplicitOffset( Offset = 8 )]
		public GSList* next;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocket : GObject {
		[ExplicitSize( Size = 216 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved6;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved7;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action _g_reserved8;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action _g_reserved9;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action _g_reserved10;
		}
		[ExplicitOffset( Offset = 24 )]
		public GSocketPrivate* _priv;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketAddress : GObject {
		[ExplicitSize( Size = 160 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GSocketAddress*, GSocketFamily> _get_family;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GSocketAddress*, intptr> _get_native_size;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GSocketAddress*, void*, uintptr, GError**, Boolean32> _to_native;
		}
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketAddressEnumerator : GObject {
		[ExplicitSize( Size = 160 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GSocketAddressEnumerator*, GCancellable*, GError**, GSocketAddress*> _next;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GSocketAddressEnumerator*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _next_async;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GSocketAddressEnumerator*, GAsyncResult*, GError**, GSocketAddress*> _next_finish;
		}
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketClient : GObject {
		[ExplicitSize( Size = 176 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GSocketClient*, GSocketClientEvent, GSocketConnectable*, GIOStream*> _event;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved4;
		}
		[ExplicitOffset( Offset = 24 )]
		public GSocketClientPrivate* _priv;
	}
	public partial struct GSocketClientPrivate {
	}
	public partial struct GSocketConnectable {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketConnectableIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GSocketConnectable*, GSocketAddressEnumerator*> enumerate;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GSocketConnectable*, GSocketAddressEnumerator*> proxy_enumerate;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GSocketConnectable*, sbyte*> to_string;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketConnection : GIOStream {
		[ExplicitSize( Size = 304 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 256 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 264 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 272 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 280 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 288 )]
			public new Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 296 )]
			public new Functors.Action _g_reserved6;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GSocketConnectionPrivate* _priv;
	}
	public partial struct GSocketConnectionPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketControlMessage : GObject {
		[ExplicitSize( Size = 216 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GSocketControlMessage*, uintptr> _get_size;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GSocketControlMessage*, int> _get_level;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GSocketControlMessage*, int> _get_type;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action<GSocketControlMessage*, void*> _serialize;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<int, int, uintptr, void*, GSocketControlMessage*> _deserialize;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 24 )]
		public GSocketControlMessagePrivate* _priv;
	}
	public partial struct GSocketControlMessagePrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketListener : GObject {
		[ExplicitSize( Size = 192 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GSocketListener*> _changed;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GSocketListener*, GSocketListenerEvent, GSocket*> _event;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action _g_reserved6;
		}
		[ExplicitOffset( Offset = 24 )]
		public GSocketListenerPrivate* _priv;
	}
	public partial struct GSocketListenerPrivate {
	}
	public partial struct GSocketPrivate {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSocketService : GSocketListener {
		[ExplicitSize( Size = 248 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 192 )]
			public Functors.Func<GSocketService*, GSocketConnection*, GObject*, Boolean32> _incoming;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 208 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 216 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 224 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 232 )]
			public new Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 240 )]
			public new Functors.Action _g_reserved6;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GSocketServicePrivate* _priv;
	}
	public partial struct GSocketServicePrivate {
	}
	[ExplicitSize( Size = 96 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSource {
		[ExplicitOffset( Offset = 0 )]
		public void* callback_data;
		[ExplicitOffset( Offset = 8 )]
		public GSourceCallbackFuncs* callback_funcs;
		[ExplicitOffset( Offset = 16 )]
		public GSourceFuncs* source_funcs;
		[ExplicitOffset( Offset = 24 )]
		public uint ref_count;
		[ExplicitOffset( Offset = 32 )]
		public GMainContext* context;
		[ExplicitOffset( Offset = 40 )]
		public int priority;
		[ExplicitOffset( Offset = 44 )]
		public uint flags;
		[ExplicitOffset( Offset = 48 )]
		public uint source_id;
		[ExplicitOffset( Offset = 56 )]
		public GSList* poll_fds;
		[ExplicitOffset( Offset = 64 )]
		public GSource* prev;
		[ExplicitOffset( Offset = 72 )]
		public GSource* next;
		[ExplicitOffset( Offset = 80 )]
		public CUtf8String name;
		[ExplicitOffset( Offset = 88 )]
		public GSourcePrivate* priv;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSourceCallbackFuncs {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<void*> ref;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<void*> unref;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<void*, GSource*, Functors.Func<void*, Boolean32>*, void**> get;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GSourceFuncs {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<GSource*, int*, Boolean32> prepare;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Func<GSource*, Boolean32> check;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GSource*, Functors.Func<void*, Boolean32>, void*, Boolean32> dispatch;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GSource*> finalize;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<void*, Boolean32> closure_callback;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Action closure_marshal;
	}
	public partial struct GSourcePrivate {
	}
	public partial struct GSrvTarget {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GStaticMutex {
		[ExplicitOffset( Offset = 0 )]
		public GMutex* mutex;
		[ExplicitOffset( Offset = 8 )]
		public pthread_mutex_t unused;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct GStaticPrivate {
		[ExplicitOffset( Offset = 0 )]
		public uint index;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct GStaticRecMutex {
		[ExplicitOffset( Offset = 0 )]
		public GStaticMutex mutex;
		[ExplicitOffset( Offset = 56 )]
		public uint depth;
		[ExplicitOffset( Offset = 64 )]
		public UnnamedUnion_73EEC793 unused;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GStaticResource {
		[ExplicitOffset( Offset = 0 )]
		public byte* data;
		[ExplicitOffset( Offset = 8 )]
		public uintptr data_len;
		[ExplicitOffset( Offset = 16 )]
		public GResource* resource;
		[ExplicitOffset( Offset = 24 )]
		public GStaticResource* next;
		[ExplicitOffset( Offset = 32 )]
		public void* padding;
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GStaticRWLock {
		[ExplicitOffset( Offset = 0 )]
		public GStaticMutex mutex;
		[ExplicitOffset( Offset = 56 )]
		public GCond* read_cond;
		[ExplicitOffset( Offset = 64 )]
		public GCond* write_cond;
		[ExplicitOffset( Offset = 72 )]
		public uint read_counter;
		[ExplicitOffset( Offset = 76 )]
		public Boolean32 have_writer;
		[ExplicitOffset( Offset = 80 )]
		public uint want_to_read;
		[ExplicitOffset( Offset = 84 )]
		public uint want_to_write;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GString {
		[ExplicitOffset( Offset = 0 )]
		public sbyte* str;
		[ExplicitOffset( Offset = 8 )]
		public uintptr len;
		[ExplicitOffset( Offset = 16 )]
		public uintptr allocated_len;
	}
	public partial struct GStringChunk {
	}
	public partial struct GStrvBuilder {
	}
	public partial struct GSubprocess {
	}
	public partial struct GSubprocessLauncher {
	}
	public partial struct GTask {
	}
	public partial struct GTaskClass {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTcpConnection : GSocketConnection {
		[ExplicitSize( Size = 304 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 40 )]
		public new GTcpConnectionPrivate* _priv;
	}
	public partial struct GTcpConnectionPrivate {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTcpWrapperConnection : GTcpConnection {
		[ExplicitSize( Size = 304 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 48 )]
		public new GTcpWrapperConnectionPrivate* _priv;
	}
	public partial struct GTcpWrapperConnectionPrivate {
	}
	public partial struct GTestCase {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct GTestConfig {
		[ExplicitOffset( Offset = 0 )]
		public Boolean32 test_initialized;
		[ExplicitOffset( Offset = 4 )]
		public Boolean32 test_quick;
		[ExplicitOffset( Offset = 8 )]
		public Boolean32 test_perf;
		[ExplicitOffset( Offset = 12 )]
		public Boolean32 test_verbose;
		[ExplicitOffset( Offset = 16 )]
		public Boolean32 test_quiet;
		[ExplicitOffset( Offset = 20 )]
		public Boolean32 test_undefined;
	}
	public partial struct GTestDBus {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTestLogBuffer {
		[ExplicitOffset( Offset = 0 )]
		public GString* data;
		[ExplicitOffset( Offset = 8 )]
		public GSList* msgs;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTestLogMsg {
		[ExplicitOffset( Offset = 0 )]
		public GTestLogType log_type;
		[ExplicitOffset( Offset = 4 )]
		public uint n_strings;
		[ExplicitOffset( Offset = 8 )]
		public sbyte** strings;
		[ExplicitOffset( Offset = 16 )]
		public uint n_nums;
		[ExplicitOffset( Offset = 24 )]
		public uint[4]* nums;
	}
	public partial struct GTestSuite {
	}
	public partial struct GThemedIcon {
	}
	public partial struct GThemedIconClass {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GThread {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<void*, void*> func;
		[ExplicitOffset( Offset = 8 )]
		public void* data;
		[ExplicitOffset( Offset = 16 )]
		public Boolean32 joinable;
		[ExplicitOffset( Offset = 20 )]
		public GThreadPriority priority;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GThreadedSocketService : GSocketService {
		[ExplicitSize( Size = 296 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 248 )]
			public Functors.Func<GThreadedSocketService*, GSocketConnection*, GObject*, Boolean32> _run;
			[ExplicitOffset( Offset = 256 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 264 )]
			public new Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 272 )]
			public new Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 280 )]
			public new Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 288 )]
			public new Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 40 )]
		public new GThreadedSocketServicePrivate* _priv;
	}
	public partial struct GThreadedSocketServicePrivate {
	}
	[ExplicitSize( Size = 168 )]
	[Alignment( Boundary = 8 )]
	public partial struct GThreadFunctions {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Func<GMutex*> mutex_new;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<GMutex*> mutex_lock;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GMutex*, Boolean32> mutex_trylock;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GMutex*> mutex_unlock;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GMutex*> mutex_free;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GCond*> cond_new;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Action<GCond*> cond_signal;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Action<GCond*> cond_broadcast;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Action<GCond*, GMutex*> cond_wait;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<GCond*, GMutex*, GTimeVal*, Boolean32> cond_timed_wait;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Action<GCond*> cond_free;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Func<Functors.Action<void*>, GPrivate*> private_new;
		[ExplicitOffset( Offset = 96 )]
		public Functors.Func<GPrivate*, void*> private_get;
		[ExplicitOffset( Offset = 104 )]
		public Functors.Action<GPrivate*, void*> private_set;
		[ExplicitOffset( Offset = 112 )]
		public Functors.Action<Functors.Func<void*, void*>, void*, uintptr, Boolean32, Boolean32, GThreadPriority, void*, GError**> thread_create;
		[ExplicitOffset( Offset = 120 )]
		public Functors.Action thread_yield;
		[ExplicitOffset( Offset = 128 )]
		public Functors.Action<void*> thread_join;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Action thread_exit;
		[ExplicitOffset( Offset = 144 )]
		public Functors.Action<void*, GThreadPriority> thread_set_priority;
		[ExplicitOffset( Offset = 152 )]
		public Functors.Action<void*> thread_self;
		[ExplicitOffset( Offset = 160 )]
		public Functors.Func<void*, void*, Boolean32> thread_equal;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GThreadPool {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<void*, void*> func;
		[ExplicitOffset( Offset = 8 )]
		public void* user_data;
		[ExplicitOffset( Offset = 16 )]
		public Boolean32 exclusive;
	}
	public partial struct GTimer {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTimeVal {
		[ExplicitOffset( Offset = 0 )]
		public intptr tv_sec;
		[ExplicitOffset( Offset = 8 )]
		public intptr tv_usec;
	}
	public partial struct GTimeZone {
	}
	public partial struct GTlsBackend {
	}
	[ExplicitSize( Size = 88 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsBackendInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Func<GTlsBackend*, Boolean32> supports_tls;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<uintptr> get_certificate_type;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<uintptr> get_client_connection_type;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<uintptr> get_server_connection_type;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<uintptr> get_file_database_type;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GTlsBackend*, GTlsDatabase*> get_default_database;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GTlsBackend*, Boolean32> supports_dtls;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<uintptr> get_dtls_client_connection_type;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<uintptr> get_dtls_server_connection_type;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsCertificate : GObject {
		[ExplicitSize( Size = 208 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GTlsCertificate*, GSocketConnectable*, GTlsCertificate*, GTlsCertificateFlags> _verify;
			[ExplicitOffset( Offset = 144 )]
			public void*[8] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GTlsCertificatePrivate* _priv;
	}
	public partial struct GTlsCertificatePrivate {
	}
	public partial struct GTlsClientConnection {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsClientConnectionInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GTlsClientConnection*, GTlsClientConnection*> copy_session_state;
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsConnection : GIOStream {
		[ExplicitSize( Size = 352 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 256 )]
			public Functors.Func<GTlsConnection*, GTlsCertificate*, GTlsCertificateFlags, Boolean32> _accept_certificate;
			[ExplicitOffset( Offset = 264 )]
			public Functors.Func<GTlsConnection*, GCancellable*, GError**, Boolean32> _handshake;
			[ExplicitOffset( Offset = 272 )]
			public Functors.Action<GTlsConnection*, int, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _handshake_async;
			[ExplicitOffset( Offset = 280 )]
			public Functors.Func<GTlsConnection*, GAsyncResult*, GError**, Boolean32> _handshake_finish;
			[ExplicitOffset( Offset = 288 )]
			public Functors.Func<GTlsConnection*, GTlsChannelBindingType, GByteArray*, GError**, Boolean32> _get_binding_data;
			[ExplicitOffset( Offset = 296 )]
			public Functors.Func<GTlsConnection*, sbyte*> _get_negotiated_protocol;
			[ExplicitOffset( Offset = 304 )]
			public void*[6] _padding;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GTlsConnectionPrivate* _priv;
	}
	public partial struct GTlsConnectionPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsDatabase : GObject {
		[ExplicitSize( Size = 368 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GTlsDatabase*, GTlsCertificate*, sbyte*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, GError**, GTlsCertificateFlags> _verify_chain;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GTlsDatabase*, GTlsCertificate*, sbyte*, GSocketConnectable*, GTlsInteraction*, GTlsDatabaseVerifyFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _verify_chain_async;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GTlsDatabase*, GAsyncResult*, GError**, GTlsCertificateFlags> _verify_chain_finish;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GTlsDatabase*, GTlsCertificate*, sbyte*> _create_certificate_handle;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<GTlsDatabase*, sbyte*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**, GTlsCertificate*> _lookup_certificate_for_handle;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GTlsDatabase*, sbyte*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_certificate_for_handle_async;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Func<GTlsDatabase*, GAsyncResult*, GError**, GTlsCertificate*> _lookup_certificate_for_handle_finish;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Func<GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**, GTlsCertificate*> _lookup_certificate_issuer;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action<GTlsDatabase*, GTlsCertificate*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_certificate_issuer_async;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Func<GTlsDatabase*, GAsyncResult*, GError**, GTlsCertificate*> _lookup_certificate_issuer_finish;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Func<GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, GError**, GList*> _lookup_certificates_issued_by;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Action<GTlsDatabase*, GByteArray*, GTlsInteraction*, GTlsDatabaseLookupFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _lookup_certificates_issued_by_async;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Func<GTlsDatabase*, GAsyncResult*, GError**, GList*> _lookup_certificates_issued_by_finish;
			[ExplicitOffset( Offset = 240 )]
			public void*[16] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GTlsDatabasePrivate* _priv;
	}
	public partial struct GTlsDatabasePrivate {
	}
	public partial struct GTlsFileDatabase {
	}
	[ExplicitSize( Size = 80 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsFileDatabaseInterface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public void*[8] padding;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsInteraction : GObject {
		[ExplicitSize( Size = 352 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GTlsInteraction*, GTlsPassword*, GCancellable*, GError**, GTlsInteractionResult> _ask_password;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GTlsInteraction*, GTlsPassword*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _ask_password_async;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GTlsInteraction*, GAsyncResult*, GError**, GTlsInteractionResult> _ask_password_finish;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GTlsInteraction*, GTlsConnection*, GTlsCertificateRequestFlags, GCancellable*, GError**, GTlsInteractionResult> _request_certificate;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action<GTlsInteraction*, GTlsConnection*, GTlsCertificateRequestFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> _request_certificate_async;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Func<GTlsInteraction*, GAsyncResult*, GError**, GTlsInteractionResult> _request_certificate_finish;
			[ExplicitOffset( Offset = 184 )]
			public void*[21] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GTlsInteractionPrivate* _priv;
	}
	public partial struct GTlsInteractionPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsPassword : GObject {
		[ExplicitSize( Size = 192 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GTlsPassword*, uintptr*, byte*> _get_value;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GTlsPassword*, byte*, intptr, Functors.Action<void*>> _set_value;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GTlsPassword*, sbyte*> _get_default_warning;
			[ExplicitOffset( Offset = 160 )]
			public void*[4] _padding;
		}
		[ExplicitOffset( Offset = 24 )]
		public GTlsPasswordPrivate* _priv;
	}
	public partial struct GTlsPasswordPrivate {
	}
	public partial struct GTlsServerConnection {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTlsServerConnectionInterface : GTypeInterface {
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTokenValue {
		[Overlapped( Offset = 0 )]
		public void* v_symbol;
		[Overlapped( Offset = 0 )]
		public sbyte* v_identifier;
		[Overlapped( Offset = 0 )]
		public uintptr v_binary;
		[Overlapped( Offset = 0 )]
		public uintptr v_octal;
		[Overlapped( Offset = 0 )]
		public uintptr v_int;
		[Overlapped( Offset = 0 )]
		public uintptr v_int64;
		[Overlapped( Offset = 0 )]
		public double v_float;
		[Overlapped( Offset = 0 )]
		public uintptr v_hex;
		[Overlapped( Offset = 0 )]
		public sbyte* v_string;
		[Overlapped( Offset = 0 )]
		public sbyte* v_comment;
		[Overlapped( Offset = 0 )]
		public byte v_char;
		[Overlapped( Offset = 0 )]
		public uint v_error;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTrashStack {
		[ExplicitOffset( Offset = 0 )]
		public GTrashStack* next;
	}
	public partial struct GTree {
	}
	public partial struct GTreeNode {
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct GTuples {
		[ExplicitOffset( Offset = 0 )]
		public uint len;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypeClass {
		[ExplicitOffset( Offset = 0 )]
		public uintptr g_type;
	}
	public partial struct GTypeCValue {
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct GTypeFundamentalInfo {
		[ExplicitOffset( Offset = 0 )]
		public GTypeFundamentalFlags type_flags;
	}
	[ExplicitSize( Size = 72 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypeInfo {
		[ExplicitOffset( Offset = 0 )]
		public ushort class_size;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<void*> base_init;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<void*> base_finalize;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<void*, void*> class_init;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<void*, void*> class_finalize;
		[ExplicitOffset( Offset = 40 )]
		public void* class_data;
		[ExplicitOffset( Offset = 48 )]
		public ushort instance_size;
		[ExplicitOffset( Offset = 50 )]
		public ushort n_preallocs;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Action<GTypeInstance*, void*> instance_init;
		[ExplicitOffset( Offset = 64 )]
		public GTypeValueTable* value_table;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypeInstance {
		[ExplicitOffset( Offset = 0 )]
		public GTypeClass* g_class;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypeInterface {
		[ExplicitOffset( Offset = 0 )]
		public uintptr g_type;
		[ExplicitOffset( Offset = 8 )]
		public uintptr g_instance_type;
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypeModule : GObject {
		[ExplicitSize( Size = 184 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GTypeModule*, Boolean32> _load;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GTypeModule*> _unload;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _reserved1;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _reserved2;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _reserved3;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action _reserved4;
		}
		[ExplicitOffset( Offset = 24 )]
		public uint _use_count;
		[ExplicitOffset( Offset = 32 )]
		public GSList* _type_infos;
		[ExplicitOffset( Offset = 40 )]
		public GSList* _interface_infos;
		[ExplicitOffset( Offset = 48 )]
		public CUtf8String _name;
	}
	public partial struct GTypePlugin {
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypePluginClass : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GTypePlugin*> use_plugin;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GTypePlugin*> unuse_plugin;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Action<GTypePlugin*, uintptr, GTypeInfo*, GTypeValueTable*> complete_type_info;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Action<GTypePlugin*, uintptr, uintptr, GInterfaceInfo*> complete_interface_info;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypeQuery {
		[ExplicitOffset( Offset = 0 )]
		public uintptr type;
		[ExplicitOffset( Offset = 8 )]
		public CUtf8String type_name;
		[ExplicitOffset( Offset = 16 )]
		public uint class_size;
		[ExplicitOffset( Offset = 20 )]
		public uint instance_size;
	}
	[ExplicitSize( Size = 64 )]
	[Alignment( Boundary = 8 )]
	public partial struct GTypeValueTable {
		[ExplicitOffset( Offset = 0 )]
		public Functors.Action<GValue*> value_init;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<GValue*> value_free;
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GValue*, GValue*> value_copy;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Func<GValue*, void*> value_peek_pointer;
		[ExplicitOffset( Offset = 32 )]
		public sbyte* collect_format;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GValue*, uint, GTypeCValue*, uint, sbyte*> collect_value;
		[ExplicitOffset( Offset = 48 )]
		public sbyte* lcopy_format;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GValue*, uint, GTypeCValue*, uint, sbyte*> lcopy_value;
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 8 )]
	public partial struct GUnixConnection : GSocketConnection {
		[ExplicitSize( Size = 304 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 40 )]
		public new GUnixConnectionPrivate* _priv;
	}
	public partial struct GUnixConnectionPrivate {
	}
	[ExplicitSize( Size = 40 )]
	[Alignment( Boundary = 8 )]
	public partial struct GUnixCredentialsMessage : GSocketControlMessage {
		[ExplicitSize( Size = 232 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 216 )]
			public new Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 224 )]
			public new Functors.Action _g_reserved2;
		}
		[ExplicitOffset( Offset = 32 )]
		public new GUnixCredentialsMessagePrivate* _priv;
	}
	public partial struct GUnixCredentialsMessagePrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GUnixFDList : GObject {
		[ExplicitSize( Size = 176 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action _g_reserved5;
		}
		[ExplicitOffset( Offset = 24 )]
		public GUnixFDListPrivate* _priv;
	}
	public partial struct GUnixFDListPrivate {
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GUnixSocketAddress : GSocketAddress {
		[ExplicitSize( Size = 160 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
		[ExplicitOffset( Offset = 24 )]
		public GUnixSocketAddressPrivate* _priv;
	}
	public partial struct GUnixSocketAddressPrivate {
	}
	public partial struct GUri {
	}
	[ExplicitSize( Size = 280 )]
	[Alignment( Boundary = 8 )]
	public partial struct GUriParamsIter {
		[ExplicitOffset( Offset = 0 )]
		public int dummy0;
		[ExplicitOffset( Offset = 8 )]
		public void* dummy1;
		[ExplicitOffset( Offset = 16 )]
		public void* dummy2;
		[ExplicitOffset( Offset = 24 )]
		public byte[256] dummy3;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GValue {
		[ExplicitOffset( Offset = 0 )]
		public uintptr g_type;
		[ExplicitOffset( Offset = 8 )]
		public UnnamedUnion_5F01EB73[2] data;
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GValueArray {
		[ExplicitOffset( Offset = 0 )]
		public uint n_values;
		[ExplicitOffset( Offset = 8 )]
		public GValue* values;
		[ExplicitOffset( Offset = 16 )]
		public uint n_prealloced;
	}
	public partial struct GVariant {
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct GVariantBuilder {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedUnion_FBB44948 u;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct GVariantDict {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedUnion_FBB46585 u;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct GVariantIter {
		[ExplicitOffset( Offset = 0 )]
		public uintptr[16] x;
	}
	public partial struct GVariantType {
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 8 )]
	public partial struct GVfs : GObject {
		[ExplicitSize( Size = 272 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Func<GVfs*, Boolean32> _is_active;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Func<GVfs*, sbyte*, GFile*> _get_file_for_path;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Func<GVfs*, sbyte*, GFile*> _get_file_for_uri;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Func<GVfs*, sbyte**> _get_supported_uri_schemes;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Func<GVfs*, sbyte*, GFile*> _parse_name;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GVfs*, sbyte*, uintptr, GFileAttributeMatcher*, GFileInfo*, GCancellable*, void**, Functors.Action<void*>*> _local_file_add_info;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action<GVfs*, GFileAttributeInfoList*> _add_writable_namespaces;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Func<GVfs*, sbyte*, GFileInfo*, GFileQueryInfoFlags, GCancellable*, GError**, Boolean32> _local_file_set_attributes;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action<GVfs*, sbyte*> _local_file_removed;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action<GVfs*, sbyte*, sbyte*> _local_file_moved;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Func<GVfs*, GVariant*, GIcon*> _deserialize_icon;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 248 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 256 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 264 )]
			public Functors.Action _g_reserved6;
		}
	}
	public partial struct GVolume {
	}
	[ExplicitSize( Size = 184 )]
	[Alignment( Boundary = 8 )]
	public partial struct GVolumeIface : GTypeInterface {
		[ExplicitOffset( Offset = 16 )]
		public Functors.Action<GVolume*> changed;
		[ExplicitOffset( Offset = 24 )]
		public Functors.Action<GVolume*> removed;
		[ExplicitOffset( Offset = 32 )]
		public Functors.Func<GVolume*, sbyte*> get_name;
		[ExplicitOffset( Offset = 40 )]
		public Functors.Func<GVolume*, GIcon*> get_icon;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<GVolume*, sbyte*> get_uuid;
		[ExplicitOffset( Offset = 56 )]
		public Functors.Func<GVolume*, GDrive*> get_drive;
		[ExplicitOffset( Offset = 64 )]
		public Functors.Func<GVolume*, GMount*> get_mount;
		[ExplicitOffset( Offset = 72 )]
		public Functors.Func<GVolume*, Boolean32> can_mount;
		[ExplicitOffset( Offset = 80 )]
		public Functors.Func<GVolume*, Boolean32> can_eject;
		[ExplicitOffset( Offset = 88 )]
		public Functors.Action<GVolume*, GMountMountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> mount_fn;
		[ExplicitOffset( Offset = 96 )]
		public Functors.Func<GVolume*, GAsyncResult*, GError**, Boolean32> mount_finish;
		[ExplicitOffset( Offset = 104 )]
		public Functors.Action<GVolume*, GMountUnmountFlags, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject;
		[ExplicitOffset( Offset = 112 )]
		public Functors.Func<GVolume*, GAsyncResult*, GError**, Boolean32> eject_finish;
		[ExplicitOffset( Offset = 120 )]
		public Functors.Func<GVolume*, sbyte*, sbyte*> get_identifier;
		[ExplicitOffset( Offset = 128 )]
		public Functors.Func<GVolume*, sbyte**> enumerate_identifiers;
		[ExplicitOffset( Offset = 136 )]
		public Functors.Func<GVolume*, Boolean32> should_automount;
		[ExplicitOffset( Offset = 144 )]
		public Functors.Func<GVolume*, GFile*> get_activation_root;
		[ExplicitOffset( Offset = 152 )]
		public Functors.Action<GVolume*, GMountUnmountFlags, GMountOperation*, GCancellable*, Functors.Action<GObject*, GAsyncResult*, void*>, void*> eject_with_operation;
		[ExplicitOffset( Offset = 160 )]
		public Functors.Func<GVolume*, GAsyncResult*, GError**, Boolean32> eject_with_operation_finish;
		[ExplicitOffset( Offset = 168 )]
		public Functors.Func<GVolume*, sbyte*> get_sort_key;
		[ExplicitOffset( Offset = 176 )]
		public Functors.Func<GVolume*, GIcon*> get_symbolic_icon;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 8 )]
	public partial struct GVolumeMonitor : GObject {
		[ExplicitSize( Size = 336 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 136 )]
			public Functors.Action<GVolumeMonitor*, GVolume*> _volume_added;
			[ExplicitOffset( Offset = 144 )]
			public Functors.Action<GVolumeMonitor*, GVolume*> _volume_removed;
			[ExplicitOffset( Offset = 152 )]
			public Functors.Action<GVolumeMonitor*, GVolume*> _volume_changed;
			[ExplicitOffset( Offset = 160 )]
			public Functors.Action<GVolumeMonitor*, GMount*> _mount_added;
			[ExplicitOffset( Offset = 168 )]
			public Functors.Action<GVolumeMonitor*, GMount*> _mount_removed;
			[ExplicitOffset( Offset = 176 )]
			public Functors.Action<GVolumeMonitor*, GMount*> _mount_pre_unmount;
			[ExplicitOffset( Offset = 184 )]
			public Functors.Action<GVolumeMonitor*, GMount*> _mount_changed;
			[ExplicitOffset( Offset = 192 )]
			public Functors.Action<GVolumeMonitor*, GDrive*> _drive_connected;
			[ExplicitOffset( Offset = 200 )]
			public Functors.Action<GVolumeMonitor*, GDrive*> _drive_disconnected;
			[ExplicitOffset( Offset = 208 )]
			public Functors.Action<GVolumeMonitor*, GDrive*> _drive_changed;
			[ExplicitOffset( Offset = 216 )]
			public Functors.Func<Boolean32> _is_supported;
			[ExplicitOffset( Offset = 224 )]
			public Functors.Func<GVolumeMonitor*, GList*> _get_connected_drives;
			[ExplicitOffset( Offset = 232 )]
			public Functors.Func<GVolumeMonitor*, GList*> _get_volumes;
			[ExplicitOffset( Offset = 240 )]
			public Functors.Func<GVolumeMonitor*, GList*> _get_mounts;
			[ExplicitOffset( Offset = 248 )]
			public Functors.Func<GVolumeMonitor*, sbyte*, GVolume*> _get_volume_for_uuid;
			[ExplicitOffset( Offset = 256 )]
			public Functors.Func<GVolumeMonitor*, sbyte*, GMount*> _get_mount_for_uuid;
			[ExplicitOffset( Offset = 264 )]
			public Functors.Func<GMount*, GVolumeMonitor*, GVolume*> _adopt_orphan_mount;
			[ExplicitOffset( Offset = 272 )]
			public Functors.Action<GVolumeMonitor*, GDrive*> _drive_eject_button;
			[ExplicitOffset( Offset = 280 )]
			public Functors.Action<GVolumeMonitor*, GDrive*> _drive_stop_button;
			[ExplicitOffset( Offset = 288 )]
			public Functors.Action _g_reserved1;
			[ExplicitOffset( Offset = 296 )]
			public Functors.Action _g_reserved2;
			[ExplicitOffset( Offset = 304 )]
			public Functors.Action _g_reserved3;
			[ExplicitOffset( Offset = 312 )]
			public Functors.Action _g_reserved4;
			[ExplicitOffset( Offset = 320 )]
			public Functors.Action _g_reserved5;
			[ExplicitOffset( Offset = 328 )]
			public Functors.Action _g_reserved6;
		}
		[ExplicitOffset( Offset = 24 )]
		public void* _priv;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct GWeakRef {
		[ExplicitOffset( Offset = 0 )]
		public UnnamedUnion_44C3E6D9 priv;
	}
	public partial struct GZlibCompressor : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
	}
	public partial struct GZlibDecompressor : GObject {
		[ExplicitSize( Size = 136 )]
		[Alignment( Boundary = 8 )]
		public new partial struct Class : basetype.Class {
		}
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_D4FB7161 {
		public uint mantissa { get { return cast<byte*>( &this )[0] | cast<ushort>( cast<byte*>( &this )[1] ) << 8 | cast<uint>( cast<byte*>( &this )[2] & 127 ) << 16; } set { cast<byte*>( &this )[0] = cast<byte>( value ); cast<byte*>( &this )[1] = cast<byte>( value >> 8 ); cast<byte*>( &this )[2] &= 128; cast<byte*>( &this )[2] |= cast<byte>( value >> 16 ) & 127; } }
		public uint biased_exponent { get { return cast<byte*>( &this )[2] >> 7 | cast<ushort>( cast<byte*>( &this )[3] & 127 ) << 1; } set { cast<byte*>( &this )[2] &= 127; cast<byte*>( &this )[2] |= ( cast<byte>( value ) & 128 ) << 7; cast<byte*>( &this )[3] &= 128; cast<byte*>( &this )[3] |= cast<byte>( value >> 24 ) & 127; } }
		public bool sign { get { return ( cast<byte*>( &this )[3] & 128 ) != 0; } set { cast<byte*>( &this )[3] &= 127; cast<byte*>( &this )[3] |= cast<byte>( value ) << 7; } }
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct UnnamedStruct_D4FB7288 {
		public uint mantissa_low { get { return cast<byte*>( &this )[0] | cast<ushort>( cast<byte*>( &this )[1] ) << 8 | cast<uint>( cast<byte*>( &this )[2] ) << 16 | cast<uint>( cast<byte*>( &this )[3] ) << 24; } set { cast<byte*>( &this )[0] = cast<byte>( value ); cast<byte*>( &this )[1] = cast<byte>( value >> 8 ); cast<byte*>( &this )[2] = cast<byte>( value >> 16 ); cast<byte*>( &this )[3] = cast<byte>( value >> 24 ); } }
		public uint mantissa_high { get { return cast<byte*>( &this )[4] | cast<ushort>( cast<byte*>( &this )[5] ) << 8 | cast<uint>( cast<byte*>( &this )[6] & 15 ) << 16; } set { cast<byte*>( &this )[4] = cast<byte>( value ); cast<byte*>( &this )[5] = cast<byte>( value >> 8 ); cast<byte*>( &this )[6] &= 240; cast<byte*>( &this )[6] |= cast<byte>( value >> 48 ) & 15; } }
		public uint biased_exponent { get { return cast<byte*>( &this )[6] >> 4 | cast<ushort>( cast<byte*>( &this )[7] & 127 ) << 4; } set { cast<byte*>( &this )[6] &= 15; cast<byte*>( &this )[6] |= ( cast<byte>( value ) & 240 ) << 4; cast<byte*>( &this )[7] &= 128; cast<byte*>( &this )[7] |= cast<byte>( value >> 56 ) & 127; } }
		public bool sign { get { return ( cast<byte*>( &this )[7] & 128 ) != 0; } set { cast<byte*>( &this )[7] &= 127; cast<byte*>( &this )[7] |= cast<byte>( value ) << 7; } }
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedStruct_FBB446FC {
		[ExplicitOffset( Offset = 0 )]
		public uintptr partial_magic;
		[ExplicitOffset( Offset = 8 )]
		public GVariantType* type;
		[ExplicitOffset( Offset = 16 )]
		public uintptr[14] y;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedStruct_FBB46541 {
		[ExplicitOffset( Offset = 0 )]
		public GVariant* asv;
		[ExplicitOffset( Offset = 8 )]
		public uintptr partial_magic;
		[ExplicitOffset( Offset = 16 )]
		public uintptr[14] y;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_44C3E6D9 {
		[Overlapped( Offset = 0 )]
		public void* p;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_5F01EB73 {
		[Overlapped( Offset = 0 )]
		public int v_int;
		[Overlapped( Offset = 0 )]
		public uint v_uint;
		[Overlapped( Offset = 0 )]
		public intptr v_long;
		[Overlapped( Offset = 0 )]
		public uintptr v_ulong;
		[Overlapped( Offset = 0 )]
		public intptr v_int64;
		[Overlapped( Offset = 0 )]
		public uintptr v_uint64;
		[Overlapped( Offset = 0 )]
		public float v_float;
		[Overlapped( Offset = 0 )]
		public double v_double;
		[Overlapped( Offset = 0 )]
		public void* v_pointer;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_73EEC793 {
		[Overlapped( Offset = 0 )]
		public pthread_t owner;
		[Overlapped( Offset = 0 )]
		public double dummy;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_FBB44948 {
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_FBB446FC s;
		[Overlapped( Offset = 0 )]
		public uintptr[16] x;
	}
	[ExplicitSize( Size = 128 )]
	[Alignment( Boundary = 8 )]
	public partial struct UnnamedUnion_FBB46585 {
		[Overlapped( Offset = 0 )]
		public UnnamedStruct_FBB46541 s;
		[Overlapped( Offset = 0 )]
		public uintptr[16] x;
	}
}