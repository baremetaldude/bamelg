//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//

using System;
using System.Runtime.InteropServices;

using Platform.Cairo;
using Platform.Glib;
using Platform.Libc;

namespace Platform.Pango {
	[ExternLibrary( Image = "/usr/lib/libpango-1.0.so" )]
	public static partial struct PangoApi {
		public extern static PangoCoverage* pango_coverage_copy( PangoCoverage* coverage );
		public extern static PangoCoverage* pango_coverage_from_bytes( byte* bytes, int nBytes );
		public extern static PangoCoverageLevel pango_coverage_get( PangoCoverage* coverage, int index_ );
		public extern static void pango_coverage_max( PangoCoverage* coverage, PangoCoverage* other );
		public extern static PangoCoverage* pango_coverage_new();
		public extern static PangoCoverage* pango_coverage_ref( PangoCoverage* coverage );
		public extern static void pango_coverage_set( PangoCoverage* coverage, int index_, PangoCoverageLevel level );
		public extern static void pango_coverage_to_bytes( PangoCoverage* coverage, byte** bytes, int* nBytes );
		public extern static void pango_coverage_unref( PangoCoverage* coverage );

		public extern static void pango_extents_to_pixels( PangoRectangle* inclusive, PangoRectangle* nearest );
		[BackendHintReadNone]
		public extern static int pango_units_from_double( double d );
		[BackendHintReadNone]
		public extern static double pango_units_to_double( int i );

		public extern static void pango_matrix_concat( PangoMatrix* matrix, PangoMatrix* newMatrix );
		public extern static PangoMatrix* pango_matrix_copy( PangoMatrix* matrix );
		public extern static void pango_matrix_free( PangoMatrix* matrix );
		[BackendHintReadOnly]
		public extern static double pango_matrix_get_font_scale_factor( PangoMatrix* matrix );
		[BackendHintReadNone]
		public extern static uintptr pango_matrix_get_type();
		public extern static void pango_matrix_rotate( PangoMatrix* matrix, double degrees );
		public extern static void pango_matrix_scale( PangoMatrix* matrix, double scaleX, double scaleY );
		public extern static void pango_matrix_transform_distance( PangoMatrix* matrix, double* dx, double* dy );
		public extern static void pango_matrix_transform_pixel_rectangle( PangoMatrix* matrix, PangoRectangle* rect );
		public extern static void pango_matrix_transform_point( PangoMatrix* matrix, double* x, double* y );
		public extern static void pango_matrix_transform_rectangle( PangoMatrix* matrix, PangoRectangle* rect );
		public extern static void pango_matrix_translate( PangoMatrix* matrix, double tx, double ty );

		[BackendHintReadNone]
		public extern static PangoScript pango_script_for_unichar( uint ch );
		[BackendHintReadOnly]
		public extern static PangoLanguage* pango_script_get_sample_language( PangoScript script );
		public extern static void pango_script_iter_free( PangoScriptIter* iter );
		public extern static void pango_script_iter_get_range( PangoScriptIter* iter, sbyte** start, sbyte** end, PangoScript* script );
		public extern static PangoScriptIter* pango_script_iter_new( CUtf8String text, int length );
		public extern static Boolean32 pango_script_iter_next( PangoScriptIter* iter );

		public extern static PangoLanguage* pango_language_from_string( sbyte* language );
		[BackendHintReadNone]
		public extern static PangoLanguage* pango_language_get_default();
		[BackendHintReadNone]
		public extern static sbyte* pango_language_get_sample_string( PangoLanguage* language );
		public extern static PangoScript* pango_language_get_scripts( PangoLanguage* language, int* numScripts );
		[BackendHintReadNone]
		public extern static uintptr pango_language_get_type();
		[BackendHintReadOnly]
		public extern static Boolean32 pango_language_includes_script( PangoLanguage* language, PangoScript script );
		[BackendHintReadOnly]
		public extern static Boolean32 pango_language_matches( PangoLanguage* language, sbyte* rangeList );
		[BackendHintReadNone]
		public extern static sbyte* pango_language_to_string( PangoLanguage* language );

		[BackendHintReadOnly]
		public extern static PangoGravity pango_gravity_get_for_matrix( PangoMatrix* matrix );
		[BackendHintReadNone]
		public extern static PangoGravity pango_gravity_get_for_script( PangoScript script, PangoGravity baseGravity, PangoGravityHint hint );
		[BackendHintReadNone]
		public extern static PangoGravity pango_gravity_get_for_script_and_width( PangoScript script, Boolean32 wide, PangoGravity baseGravity, PangoGravityHint hint );
		[BackendHintReadNone]
		public extern static double pango_gravity_to_rotation( PangoGravity gravity );

		[BackendHintReadNone]
		public extern static PangoBidiType pango_bidi_type_for_unichar( uint ch );
		public extern static PangoDirection pango_find_base_dir( CUtf8String text, int length );
		public extern static Boolean32 pango_get_mirror_char( uint ch, uint* mirroredCh );
		[BackendHintReadNone]
		public extern static PangoDirection pango_unichar_direction( uint ch );

		public extern static PangoFontDescription* pango_font_describe( PangoFont* font );
		public extern static PangoFontDescription* pango_font_describe_with_absolute_size( PangoFont* font );
		[BackendHintReadOnly]
		public extern static Boolean32 pango_font_description_better_match( PangoFontDescription* desc, PangoFontDescription* oldMatch, PangoFontDescription* newMatch );
		public extern static PangoFontDescription* pango_font_description_copy( PangoFontDescription* desc );
		public extern static PangoFontDescription* pango_font_description_copy_static( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static Boolean32 pango_font_description_equal( PangoFontDescription* desc1, PangoFontDescription* desc2 );
		public extern static void pango_font_description_free( PangoFontDescription* desc );
		public extern static PangoFontDescription* pango_font_description_from_string( CUtf8String str );
		[BackendHintReadOnly]
		public extern static sbyte* pango_font_description_get_family( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static PangoGravity pango_font_description_get_gravity( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static PangoFontMask pango_font_description_get_set_fields( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static int pango_font_description_get_size( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static Boolean32 pango_font_description_get_size_is_absolute( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static PangoStretch pango_font_description_get_stretch( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static PangoStyle pango_font_description_get_style( PangoFontDescription* desc );
		[BackendHintReadNone]
		public extern static uintptr pango_font_description_get_type();
		[BackendHintReadOnly]
		public extern static PangoVariant pango_font_description_get_variant( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static PangoWeight pango_font_description_get_weight( PangoFontDescription* desc );
		[BackendHintReadOnly]
		public extern static uint pango_font_description_hash( PangoFontDescription* desc );
		public extern static void pango_font_description_merge( PangoFontDescription* desc, PangoFontDescription* descToMerge, Boolean32 replaceExisting );
		public extern static void pango_font_description_merge_static( PangoFontDescription* desc, PangoFontDescription* descToMerge, Boolean32 replaceExisting );
		public extern static PangoFontDescription* pango_font_description_new();
		public extern static void pango_font_description_set_absolute_size( PangoFontDescription* desc, double size );
		public extern static void pango_font_description_set_family( PangoFontDescription* desc, sbyte* family );
		public extern static void pango_font_description_set_family_static( PangoFontDescription* desc, sbyte* family );
		public extern static void pango_font_description_set_gravity( PangoFontDescription* desc, PangoGravity gravity );
		public extern static void pango_font_description_set_size( PangoFontDescription* desc, int size );
		public extern static void pango_font_description_set_stretch( PangoFontDescription* desc, PangoStretch stretch );
		public extern static void pango_font_description_set_style( PangoFontDescription* desc, PangoStyle style );
		public extern static void pango_font_description_set_variant( PangoFontDescription* desc, PangoVariant variant );
		public extern static void pango_font_description_set_weight( PangoFontDescription* desc, PangoWeight weight );
		public extern static sbyte* pango_font_description_to_filename( PangoFontDescription* desc );
		public extern static sbyte* pango_font_description_to_string( PangoFontDescription* desc );
		public extern static void pango_font_description_unset_fields( PangoFontDescription* desc, PangoFontMask toUnset );
		public extern static void pango_font_descriptions_free( PangoFontDescription** descs, int nDescs );
		public extern static PangoFontDescription* pango_font_face_describe( PangoFontFace* face );
		[BackendHintReadOnly]
		public extern static sbyte* pango_font_face_get_face_name( PangoFontFace* face );
		[BackendHintReadNone]
		public extern static uintptr pango_font_face_get_type();
		[BackendHintReadOnly]
		public extern static Boolean32 pango_font_face_is_synthesized( PangoFontFace* face );
		public extern static void pango_font_face_list_sizes( PangoFontFace* face, int** sizes, int* nSizes );
		[BackendHintReadOnly]
		public extern static sbyte* pango_font_family_get_name( PangoFontFamily* family );
		[BackendHintReadNone]
		public extern static uintptr pango_font_family_get_type();
		[BackendHintReadOnly]
		public extern static Boolean32 pango_font_family_is_monospace( PangoFontFamily* family );
		public extern static void pango_font_family_list_faces( PangoFontFamily* family, PangoFontFace*** faces, int* nFaces );
		public extern static PangoEngineShape* pango_font_find_shaper( PangoFont* font, PangoLanguage* language, uint ch );
		public extern static PangoCoverage* pango_font_get_coverage( PangoFont* font, PangoLanguage* language );
		public extern static PangoFontMap* pango_font_get_font_map( PangoFont* font );
		public extern static void pango_font_get_glyph_extents( PangoFont* font, uint glyph, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static PangoFontMetrics* pango_font_get_metrics( PangoFont* font, PangoLanguage* language );
		[BackendHintReadNone]
		public extern static uintptr pango_font_get_type();
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_approximate_char_width( PangoFontMetrics* metrics );
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_approximate_digit_width( PangoFontMetrics* metrics );
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_ascent( PangoFontMetrics* metrics );
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_descent( PangoFontMetrics* metrics );
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_strikethrough_position( PangoFontMetrics* metrics );
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_strikethrough_thickness( PangoFontMetrics* metrics );
		[BackendHintReadNone]
		public extern static uintptr pango_font_metrics_get_type();
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_underline_position( PangoFontMetrics* metrics );
		[BackendHintReadOnly]
		public extern static int pango_font_metrics_get_underline_thickness( PangoFontMetrics* metrics );
		public extern static PangoFontMetrics* pango_font_metrics_ref( PangoFontMetrics* metrics );
		public extern static void pango_font_metrics_unref( PangoFontMetrics* metrics );

		public extern static PangoAttribute* pango_attr_background_new( ushort red, ushort green, ushort blue );
		public extern static PangoAttribute* pango_attr_fallback_new( Boolean32 enableFallback );
		public extern static PangoAttribute* pango_attr_family_new( sbyte* family );
		public extern static PangoAttribute* pango_attr_font_desc_new( PangoFontDescription* desc );
		public extern static PangoAttribute* pango_attr_foreground_new( ushort red, ushort green, ushort blue );
		public extern static PangoAttribute* pango_attr_gravity_hint_new( PangoGravityHint hint );
		public extern static PangoAttribute* pango_attr_gravity_new( PangoGravity gravity );
		public extern static PangoAttrIterator* pango_attr_iterator_copy( PangoAttrIterator* iterator );
		public extern static void pango_attr_iterator_destroy( PangoAttrIterator* iterator );
		public extern static PangoAttribute* pango_attr_iterator_get( PangoAttrIterator* iterator, PangoAttrType type );
		public extern static GSList* pango_attr_iterator_get_attrs( PangoAttrIterator* iterator );
		public extern static void pango_attr_iterator_get_font( PangoAttrIterator* iterator, PangoFontDescription* desc, PangoLanguage** language, GSList** extraAttrs );
		public extern static Boolean32 pango_attr_iterator_next( PangoAttrIterator* iterator );
		public extern static void pango_attr_iterator_range( PangoAttrIterator* iterator, int* start, int* end );
		public extern static PangoAttribute* pango_attr_language_new( PangoLanguage* language );
		public extern static PangoAttribute* pango_attr_letter_spacing_new( int letterSpacing );
		public extern static void pango_attr_list_change( PangoAttrList* list, PangoAttribute* attr );
		public extern static PangoAttrList* pango_attr_list_copy( PangoAttrList* list );
		public extern static PangoAttrList* pango_attr_list_filter( PangoAttrList* list, Functors.Func<PangoAttribute*, void*, Boolean32> func, void* data );
		public extern static PangoAttrIterator* pango_attr_list_get_iterator( PangoAttrList* list );
		[BackendHintReadNone]
		public extern static uintptr pango_attr_list_get_type();
		public extern static void pango_attr_list_insert( PangoAttrList* list, PangoAttribute* attr );
		public extern static void pango_attr_list_insert_before( PangoAttrList* list, PangoAttribute* attr );
		public extern static PangoAttrList* pango_attr_list_new();
		public extern static PangoAttrList* pango_attr_list_ref( PangoAttrList* list );
		public extern static void pango_attr_list_splice( PangoAttrList* list, PangoAttrList* other, int pos, int len );
		public extern static void pango_attr_list_unref( PangoAttrList* list );
		public extern static PangoAttribute* pango_attr_rise_new( int rise );
		public extern static PangoAttribute* pango_attr_scale_new( double scaleFactor );
		public extern static PangoAttribute* pango_attr_shape_new( PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static PangoAttribute* pango_attr_shape_new_with_data( PangoRectangle* inkRect, PangoRectangle* logicalRect, void* data, Functors.Func<void*, void*> copyFunc, Functors.Action<void*> destroyFunc );
		public extern static PangoAttribute* pango_attr_size_new( int size );
		public extern static PangoAttribute* pango_attr_size_new_absolute( int size );
		public extern static PangoAttribute* pango_attr_stretch_new( PangoStretch stretch );
		public extern static PangoAttribute* pango_attr_strikethrough_color_new( ushort red, ushort green, ushort blue );
		public extern static PangoAttribute* pango_attr_strikethrough_new( Boolean32 strikethrough );
		public extern static PangoAttribute* pango_attr_style_new( PangoStyle style );
		[BackendHintReadNone]
		public extern static sbyte* pango_attr_type_get_name( PangoAttrType type );
		public extern static PangoAttrType pango_attr_type_register( CUtf8String name );
		public extern static PangoAttribute* pango_attr_underline_color_new( ushort red, ushort green, ushort blue );
		public extern static PangoAttribute* pango_attr_underline_new( PangoUnderline underline );
		public extern static PangoAttribute* pango_attr_variant_new( PangoVariant variant );
		public extern static PangoAttribute* pango_attr_weight_new( PangoWeight weight );
		public extern static PangoAttribute* pango_attribute_copy( PangoAttribute* attr );
		public extern static void pango_attribute_destroy( PangoAttribute* attr );
		[BackendHintReadOnly]
		public extern static Boolean32 pango_attribute_equal( PangoAttribute* attr1, PangoAttribute* attr2 );
		public extern static void pango_attribute_init( PangoAttribute* attr, PangoAttrClass* klass );
		public extern static PangoColor* pango_color_copy( PangoColor* src );
		public extern static void pango_color_free( PangoColor* color );
		[BackendHintReadNone]
		public extern static uintptr pango_color_get_type();
		public extern static Boolean32 pango_color_parse( PangoColor* color, sbyte* spec );
		public extern static sbyte* pango_color_to_string( PangoColor* color );
		public extern static Boolean32 pango_markup_parser_finish( GMarkupParseContext* context, PangoAttrList** attrList, sbyte** text, uint* accelChar, GError** error );
		public extern static GMarkupParseContext* pango_markup_parser_new( uint accelMarker );
		public extern static Boolean32 pango_parse_markup( CUtf8String markupText, int length, uint accelMarker, PangoAttrList** attrList, sbyte** text, uint* accelChar, GError** error );

		public extern static PangoItem* pango_item_copy( PangoItem* item );
		public extern static void pango_item_free( PangoItem* item );
		[BackendHintReadNone]
		public extern static uintptr pango_item_get_type();
		public extern static PangoItem* pango_item_new();
		public extern static PangoItem* pango_item_split( PangoItem* orig, int splitIndex, int splitOffset );

		public extern static void pango_break( CUtf8String text, int length, PangoAnalysis* analysis, PangoLogAttr* attrs, int attrsLen );
		public extern static void pango_find_paragraph_boundary( CUtf8String text, int length, int* paragraphDelimiterIndex, int* nextParagraphStart );
		public extern static void pango_get_log_attrs( CUtf8String text, int length, int level, PangoLanguage* language, PangoLogAttr* logAttrs, int attrsLen );

		public extern static void pango_fontset_foreach( PangoFontset* fontset, Functors.Func<PangoFontset*, PangoFont*, void*, Boolean32> func, void* data );
		public extern static PangoFont* pango_fontset_get_font( PangoFontset* fontset, uint wc );
		public extern static PangoFontMetrics* pango_fontset_get_metrics( PangoFontset* fontset );
		[BackendHintReadNone]
		public extern static uintptr pango_fontset_get_type();

		public extern static void pango_font_map_changed( PangoFontMap* fontmap );
		public extern static PangoContext* pango_font_map_create_context( PangoFontMap* fontmap );
		public extern static uint pango_font_map_get_serial( PangoFontMap* fontmap );
		[BackendHintReadNone]
		public extern static uintptr pango_font_map_get_type();
		public extern static void pango_font_map_list_families( PangoFontMap* fontmap, PangoFontFamily*** families, int* nFamilies );
		public extern static PangoFont* pango_font_map_load_font( PangoFontMap* fontmap, PangoContext* context, PangoFontDescription* desc );
		public extern static PangoFontset* pango_font_map_load_fontset( PangoFontMap* fontmap, PangoContext* context, PangoFontDescription* desc, PangoLanguage* language );

		public extern static void pango_context_changed( PangoContext* context );
		public extern static PangoDirection pango_context_get_base_dir( PangoContext* context );
		public extern static PangoGravity pango_context_get_base_gravity( PangoContext* context );
		public extern static PangoFontDescription* pango_context_get_font_description( PangoContext* context );
		public extern static PangoFontMap* pango_context_get_font_map( PangoContext* context );
		public extern static PangoGravity pango_context_get_gravity( PangoContext* context );
		public extern static PangoGravityHint pango_context_get_gravity_hint( PangoContext* context );
		public extern static PangoLanguage* pango_context_get_language( PangoContext* context );
		public extern static PangoMatrix* pango_context_get_matrix( PangoContext* context );
		public extern static PangoFontMetrics* pango_context_get_metrics( PangoContext* context, PangoFontDescription* desc, PangoLanguage* language );
		public extern static uint pango_context_get_serial( PangoContext* context );
		[BackendHintReadNone]
		public extern static uintptr pango_context_get_type();
		public extern static void pango_context_list_families( PangoContext* context, PangoFontFamily*** families, int* nFamilies );
		public extern static PangoFont* pango_context_load_font( PangoContext* context, PangoFontDescription* desc );
		public extern static PangoFontset* pango_context_load_fontset( PangoContext* context, PangoFontDescription* desc, PangoLanguage* language );
		public extern static PangoContext* pango_context_new();
		public extern static void pango_context_set_base_dir( PangoContext* context, PangoDirection direction );
		public extern static void pango_context_set_base_gravity( PangoContext* context, PangoGravity gravity );
		public extern static void pango_context_set_font_description( PangoContext* context, PangoFontDescription* desc );
		public extern static void pango_context_set_font_map( PangoContext* context, PangoFontMap* fontMap );
		public extern static void pango_context_set_gravity_hint( PangoContext* context, PangoGravityHint hint );
		public extern static void pango_context_set_language( PangoContext* context, PangoLanguage* language );
		public extern static void pango_context_set_matrix( PangoContext* context, PangoMatrix* matrix );
		public extern static GList* pango_itemize( PangoContext* context, CUtf8String text, int startIndex, int length, PangoAttrList* attrs, PangoAttrIterator* cachedIter );
		public extern static GList* pango_itemize_with_base_dir( PangoContext* context, PangoDirection baseDir, CUtf8String text, int startIndex, int length, PangoAttrList* attrs, PangoAttrIterator* cachedIter );

		public extern static PangoGlyphString* pango_glyph_string_copy( PangoGlyphString* @string );
		public extern static void pango_glyph_string_extents( PangoGlyphString* glyphs, PangoFont* font, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static void pango_glyph_string_extents_range( PangoGlyphString* glyphs, int start, int end, PangoFont* font, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static void pango_glyph_string_free( PangoGlyphString* @string );
		public extern static void pango_glyph_string_get_logical_widths( PangoGlyphString* glyphs, CUtf8String text, int length, int embeddingLevel, int* logicalWidths );
		[BackendHintReadNone]
		public extern static uintptr pango_glyph_string_get_type();
		public extern static int pango_glyph_string_get_width( PangoGlyphString* glyphs );
		public extern static void pango_glyph_string_index_to_x( PangoGlyphString* glyphs, CUtf8String text, int length, PangoAnalysis* analysis, int index_, Boolean32 trailing, int* xPos );
		public extern static PangoGlyphString* pango_glyph_string_new();
		public extern static void pango_glyph_string_set_size( PangoGlyphString* @string, int newLen );
		public extern static void pango_glyph_string_x_to_index( PangoGlyphString* glyphs, CUtf8String text, int length, PangoAnalysis* analysis, int xPos, int* index_, int* trailing );
		public extern static GList* pango_reorder_items( GList* logicalItems );
		public extern static void pango_shape( CUtf8String text, int length, PangoAnalysis* analysis, PangoGlyphString* glyphs );
		public extern static void pango_shape_full( CUtf8String itemText, int itemLength, CUtf8String paragraphText, int paragraphLength, PangoAnalysis* analysis, PangoGlyphString* glyphs );

		[BackendHintReadNone]
		public extern static uintptr pango_alignment_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_attr_type_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_bidi_type_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_coverage_level_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_direction_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_ellipsize_mode_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_font_mask_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_gravity_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_gravity_hint_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_render_part_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_script_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_stretch_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_style_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_tab_align_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_underline_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_variant_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_weight_get_type();
		[BackendHintReadNone]
		public extern static uintptr pango_wrap_mode_get_type();

		public extern static GSList* pango_glyph_item_apply_attrs( PangoGlyphItem* glyphItem, CUtf8String text, PangoAttrList* list );
		public extern static PangoGlyphItem* pango_glyph_item_copy( PangoGlyphItem* orig );
		public extern static void pango_glyph_item_free( PangoGlyphItem* glyphItem );
		public extern static void pango_glyph_item_get_logical_widths( PangoGlyphItem* glyphItem, CUtf8String text, int* logicalWidths );
		[BackendHintReadNone]
		public extern static uintptr pango_glyph_item_get_type();
		public extern static PangoGlyphItemIter* pango_glyph_item_iter_copy( PangoGlyphItemIter* orig );
		public extern static void pango_glyph_item_iter_free( PangoGlyphItemIter* iter );
		[BackendHintReadNone]
		public extern static uintptr pango_glyph_item_iter_get_type();
		public extern static Boolean32 pango_glyph_item_iter_init_end( PangoGlyphItemIter* iter, PangoGlyphItem* glyphItem, CUtf8String text );
		public extern static Boolean32 pango_glyph_item_iter_init_start( PangoGlyphItemIter* iter, PangoGlyphItem* glyphItem, CUtf8String text );
		public extern static Boolean32 pango_glyph_item_iter_next_cluster( PangoGlyphItemIter* iter );
		public extern static Boolean32 pango_glyph_item_iter_prev_cluster( PangoGlyphItemIter* iter );
		public extern static void pango_glyph_item_letter_space( PangoGlyphItem* glyphItem, CUtf8String text, PangoLogAttr* logAttrs, int letterSpacing );
		public extern static PangoGlyphItem* pango_glyph_item_split( PangoGlyphItem* orig, CUtf8String text, int splitIndex );

		public extern static PangoTabArray* pango_tab_array_copy( PangoTabArray* src );
		public extern static void pango_tab_array_free( PangoTabArray* tabArray );
		public extern static Boolean32 pango_tab_array_get_positions_in_pixels( PangoTabArray* tabArray );
		public extern static int pango_tab_array_get_size( PangoTabArray* tabArray );
		public extern static void pango_tab_array_get_tab( PangoTabArray* tabArray, int tabIndex, PangoTabAlign* alignment, int* location );
		public extern static void pango_tab_array_get_tabs( PangoTabArray* tabArray, PangoTabAlign** alignments, int** locations );
		[BackendHintReadNone]
		public extern static uintptr pango_tab_array_get_type();
		public extern static PangoTabArray* pango_tab_array_new( int initialSize, Boolean32 positionsInPixels );
		public extern static void pango_tab_array_resize( PangoTabArray* tabArray, int newSize );
		public extern static void pango_tab_array_set_tab( PangoTabArray* tabArray, int tabIndex, PangoTabAlign alignment, int location );

		public extern static void pango_layout_context_changed( PangoLayout* layout );
		public extern static PangoLayout* pango_layout_copy( PangoLayout* src );
		public extern static PangoAlignment pango_layout_get_alignment( PangoLayout* layout );
		public extern static PangoAttrList* pango_layout_get_attributes( PangoLayout* layout );
		public extern static Boolean32 pango_layout_get_auto_dir( PangoLayout* layout );
		public extern static int pango_layout_get_baseline( PangoLayout* layout );
		public extern static int pango_layout_get_character_count( PangoLayout* layout );
		public extern static PangoContext* pango_layout_get_context( PangoLayout* layout );
		public extern static void pango_layout_get_cursor_pos( PangoLayout* layout, int index_, PangoRectangle* strongPos, PangoRectangle* weakPos );
		public extern static PangoEllipsizeMode pango_layout_get_ellipsize( PangoLayout* layout );
		public extern static void pango_layout_get_extents( PangoLayout* layout, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static PangoFontDescription* pango_layout_get_font_description( PangoLayout* layout );
		public extern static int pango_layout_get_height( PangoLayout* layout );
		public extern static int pango_layout_get_indent( PangoLayout* layout );
		public extern static PangoLayoutIter* pango_layout_get_iter( PangoLayout* layout );
		public extern static Boolean32 pango_layout_get_justify( PangoLayout* layout );
		public extern static PangoLayoutLine* pango_layout_get_line( PangoLayout* layout, int line );
		public extern static int pango_layout_get_line_count( PangoLayout* layout );
		public extern static PangoLayoutLine* pango_layout_get_line_readonly( PangoLayout* layout, int line );
		public extern static GSList* pango_layout_get_lines( PangoLayout* layout );
		public extern static GSList* pango_layout_get_lines_readonly( PangoLayout* layout );
		public extern static void pango_layout_get_log_attrs( PangoLayout* layout, PangoLogAttr** attrs, int* nAttrs );
		public extern static PangoLogAttr* pango_layout_get_log_attrs_readonly( PangoLayout* layout, int* nAttrs );
		public extern static void pango_layout_get_pixel_extents( PangoLayout* layout, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static void pango_layout_get_pixel_size( PangoLayout* layout, int* width, int* height );
		public extern static uint pango_layout_get_serial( PangoLayout* layout );
		public extern static Boolean32 pango_layout_get_single_paragraph_mode( PangoLayout* layout );
		public extern static void pango_layout_get_size( PangoLayout* layout, int* width, int* height );
		public extern static int pango_layout_get_spacing( PangoLayout* layout );
		public extern static PangoTabArray* pango_layout_get_tabs( PangoLayout* layout );
		public extern static sbyte* pango_layout_get_text( PangoLayout* layout );
		[BackendHintReadNone]
		public extern static uintptr pango_layout_get_type();
		public extern static int pango_layout_get_unknown_glyphs_count( PangoLayout* layout );
		public extern static int pango_layout_get_width( PangoLayout* layout );
		public extern static PangoWrapMode pango_layout_get_wrap( PangoLayout* layout );
		public extern static void pango_layout_index_to_line_x( PangoLayout* layout, int index_, Boolean32 trailing, int* line, int* xPos );
		public extern static void pango_layout_index_to_pos( PangoLayout* layout, int index_, PangoRectangle* pos );
		public extern static Boolean32 pango_layout_is_ellipsized( PangoLayout* layout );
		public extern static Boolean32 pango_layout_is_wrapped( PangoLayout* layout );
		public extern static Boolean32 pango_layout_iter_at_last_line( PangoLayoutIter* iter );
		public extern static PangoLayoutIter* pango_layout_iter_copy( PangoLayoutIter* iter );
		public extern static void pango_layout_iter_free( PangoLayoutIter* iter );
		public extern static int pango_layout_iter_get_baseline( PangoLayoutIter* iter );
		public extern static void pango_layout_iter_get_char_extents( PangoLayoutIter* iter, PangoRectangle* logicalRect );
		public extern static void pango_layout_iter_get_cluster_extents( PangoLayoutIter* iter, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static int pango_layout_iter_get_index( PangoLayoutIter* iter );
		public extern static PangoLayout* pango_layout_iter_get_layout( PangoLayoutIter* iter );
		public extern static void pango_layout_iter_get_layout_extents( PangoLayoutIter* iter, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static PangoLayoutLine* pango_layout_iter_get_line( PangoLayoutIter* iter );
		public extern static void pango_layout_iter_get_line_extents( PangoLayoutIter* iter, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static PangoLayoutLine* pango_layout_iter_get_line_readonly( PangoLayoutIter* iter );
		public extern static void pango_layout_iter_get_line_yrange( PangoLayoutIter* iter, int* y0_, int* y1_ );
		public extern static PangoGlyphItem* pango_layout_iter_get_run( PangoLayoutIter* iter );
		public extern static void pango_layout_iter_get_run_extents( PangoLayoutIter* iter, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static PangoGlyphItem* pango_layout_iter_get_run_readonly( PangoLayoutIter* iter );
		[BackendHintReadNone]
		public extern static uintptr pango_layout_iter_get_type();
		public extern static Boolean32 pango_layout_iter_next_char( PangoLayoutIter* iter );
		public extern static Boolean32 pango_layout_iter_next_cluster( PangoLayoutIter* iter );
		public extern static Boolean32 pango_layout_iter_next_line( PangoLayoutIter* iter );
		public extern static Boolean32 pango_layout_iter_next_run( PangoLayoutIter* iter );
		public extern static void pango_layout_line_get_extents( PangoLayoutLine* line, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		public extern static void pango_layout_line_get_pixel_extents( PangoLayoutLine* layoutLine, PangoRectangle* inkRect, PangoRectangle* logicalRect );
		[BackendHintReadNone]
		public extern static uintptr pango_layout_line_get_type();
		public extern static void pango_layout_line_get_x_ranges( PangoLayoutLine* line, int startIndex, int endIndex, int** ranges, int* nRanges );
		public extern static void pango_layout_line_index_to_x( PangoLayoutLine* line, int index_, Boolean32 trailing, int* xPos );
		public extern static PangoLayoutLine* pango_layout_line_ref( PangoLayoutLine* line );
		public extern static void pango_layout_line_unref( PangoLayoutLine* line );
		public extern static Boolean32 pango_layout_line_x_to_index( PangoLayoutLine* line, int xPos, int* index_, int* trailing );
		public extern static void pango_layout_move_cursor_visually( PangoLayout* layout, Boolean32 strong, int oldIndex, int oldTrailing, int direction, int* newIndex, int* newTrailing );
		public extern static PangoLayout* pango_layout_new( PangoContext* context );
		public extern static void pango_layout_set_alignment( PangoLayout* layout, PangoAlignment alignment );
		public extern static void pango_layout_set_attributes( PangoLayout* layout, PangoAttrList* attrs );
		public extern static void pango_layout_set_auto_dir( PangoLayout* layout, Boolean32 autoDir );
		public extern static void pango_layout_set_ellipsize( PangoLayout* layout, PangoEllipsizeMode ellipsize );
		public extern static void pango_layout_set_font_description( PangoLayout* layout, PangoFontDescription* desc );
		public extern static void pango_layout_set_height( PangoLayout* layout, int height );
		public extern static void pango_layout_set_indent( PangoLayout* layout, int indent );
		public extern static void pango_layout_set_justify( PangoLayout* layout, Boolean32 justify );
		public extern static void pango_layout_set_markup( PangoLayout* layout, sbyte* markup, int length );
		public extern static void pango_layout_set_markup_with_accel( PangoLayout* layout, sbyte* markup, int length, uint accelMarker, uint* accelChar );
		public extern static void pango_layout_set_single_paragraph_mode( PangoLayout* layout, Boolean32 setting );
		public extern static void pango_layout_set_spacing( PangoLayout* layout, int spacing );
		public extern static void pango_layout_set_tabs( PangoLayout* layout, PangoTabArray* tabs );
		public extern static void pango_layout_set_text( PangoLayout* layout, CUtf8String text, int length );
		public extern static void pango_layout_set_width( PangoLayout* layout, int width );
		public extern static void pango_layout_set_wrap( PangoLayout* layout, PangoWrapMode wrap );
		public extern static Boolean32 pango_layout_xy_to_index( PangoLayout* layout, int x, int y, int* index_, int* trailing );

		public extern static void pango_renderer_activate( PangoRenderer* renderer );
		public extern static void pango_renderer_deactivate( PangoRenderer* renderer );
		public extern static void pango_renderer_draw_error_underline( PangoRenderer* renderer, int x, int y, int width, int height );
		public extern static void pango_renderer_draw_glyph( PangoRenderer* renderer, PangoFont* font, uint glyph, double x, double y );
		public extern static void pango_renderer_draw_glyph_item( PangoRenderer* renderer, CUtf8String text, PangoGlyphItem* glyphItem, int x, int y );
		public extern static void pango_renderer_draw_glyphs( PangoRenderer* renderer, PangoFont* font, PangoGlyphString* glyphs, int x, int y );
		public extern static void pango_renderer_draw_layout( PangoRenderer* renderer, PangoLayout* layout, int x, int y );
		public extern static void pango_renderer_draw_layout_line( PangoRenderer* renderer, PangoLayoutLine* line, int x, int y );
		public extern static void pango_renderer_draw_rectangle( PangoRenderer* renderer, PangoRenderPart part, int x, int y, int width, int height );
		public extern static void pango_renderer_draw_trapezoid( PangoRenderer* renderer, PangoRenderPart part, double y1_, double x11, double x21, double y2, double x12, double x22 );
		public extern static PangoColor* pango_renderer_get_color( PangoRenderer* renderer, PangoRenderPart part );
		public extern static PangoLayout* pango_renderer_get_layout( PangoRenderer* renderer );
		public extern static PangoLayoutLine* pango_renderer_get_layout_line( PangoRenderer* renderer );
		public extern static PangoMatrix* pango_renderer_get_matrix( PangoRenderer* renderer );
		[BackendHintReadNone]
		public extern static uintptr pango_renderer_get_type();
		public extern static void pango_renderer_part_changed( PangoRenderer* renderer, PangoRenderPart part );
		public extern static void pango_renderer_set_color( PangoRenderer* renderer, PangoRenderPart part, PangoColor* color );
		public extern static void pango_renderer_set_matrix( PangoRenderer* renderer, PangoMatrix* matrix );

		[BackendHintReadNone]
		public extern static Boolean32 pango_is_zero_width( uint ch );
		public extern static byte* pango_log2vis_get_embedding_levels( CUtf8String text, int length, PangoDirection* pbaseDir );
		public extern static Boolean32 pango_parse_enum( uintptr type, sbyte* str, int* value, Boolean32 warn, sbyte** possibleValues );
		public extern static Boolean32 pango_parse_stretch( sbyte* str, PangoStretch* stretch, Boolean32 warn );
		public extern static Boolean32 pango_parse_style( sbyte* str, PangoStyle* style, Boolean32 warn );
		public extern static Boolean32 pango_parse_variant( sbyte* str, PangoVariant* variant, Boolean32 warn );
		public extern static Boolean32 pango_parse_weight( sbyte* str, PangoWeight* weight, Boolean32 warn );
		public extern static void pango_quantize_line_geometry( int* thickness, int* position );
		public extern static int pango_read_line( FILE* stream, GString* str );
		public extern static Boolean32 pango_scan_int( sbyte** pos, int* out );
		public extern static Boolean32 pango_scan_string( sbyte** pos, GString* out );
		public extern static Boolean32 pango_scan_word( sbyte** pos, GString* out );
		public extern static Boolean32 pango_skip_space( sbyte** pos );
		public extern static sbyte** pango_split_file_list( sbyte* str );
		public extern static sbyte* pango_trim_string( sbyte* str );
		[BackendHintReadNone]
		public extern static int pango_version();
		[BackendHintReadNone]
		public extern static sbyte* pango_version_check( int requiredMajor, int requiredMinor, int requiredMicro );
		[BackendHintReadNone]
		public extern static sbyte* pango_version_string();
	}
	[ExternLibrary( Image = "/usr/lib/libpangocairo-1.0.so" )]
	public static partial struct PangoCairoApi {
		public extern static cairo_font_options_t* pango_cairo_context_get_font_options( PangoContext* context );
		public extern static double pango_cairo_context_get_resolution( PangoContext* context );
		public extern static Functors.Action<cairo_t*, PangoAttrShape*, Boolean32, void*> pango_cairo_context_get_shape_renderer( PangoContext* context, void** data );
		public extern static void pango_cairo_context_set_font_options( PangoContext* context, cairo_font_options_t* options );
		public extern static void pango_cairo_context_set_resolution( PangoContext* context, double dpi );
		public extern static void pango_cairo_context_set_shape_renderer( PangoContext* context, Functors.Action<cairo_t*, PangoAttrShape*, Boolean32, void*> func, void* data, Functors.Action<void*> dnotify );
		public extern static PangoContext* pango_cairo_create_context( cairo_t* cr );
		public extern static PangoLayout* pango_cairo_create_layout( cairo_t* cr );
		public extern static void pango_cairo_error_underline_path( cairo_t* cr, double x, double y, double width, double height );
		public extern static cairo_scaled_font_t* pango_cairo_font_get_scaled_font( PangoCairoFont* font );
		[BackendHintReadNone]
		public extern static uintptr pango_cairo_font_get_type();
		public extern static PangoContext* pango_cairo_font_map_create_context( PangoCairoFontMap* fontmap );
		public extern static PangoFontMap* pango_cairo_font_map_get_default();
		public extern static cairo_font_type_t pango_cairo_font_map_get_font_type( PangoCairoFontMap* fontmap );
		public extern static double pango_cairo_font_map_get_resolution( PangoCairoFontMap* fontmap );
		[BackendHintReadNone]
		public extern static uintptr pango_cairo_font_map_get_type();
		public extern static PangoFontMap* pango_cairo_font_map_new();
		public extern static PangoFontMap* pango_cairo_font_map_new_for_font_type( cairo_font_type_t fonttype );
		public extern static void pango_cairo_font_map_set_default( PangoCairoFontMap* fontmap );
		public extern static void pango_cairo_font_map_set_resolution( PangoCairoFontMap* fontmap, double dpi );
		public extern static void pango_cairo_glyph_string_path( cairo_t* cr, PangoFont* font, PangoGlyphString* glyphs );
		public extern static void pango_cairo_layout_line_path( cairo_t* cr, PangoLayoutLine* line );
		public extern static void pango_cairo_layout_path( cairo_t* cr, PangoLayout* layout );
		public extern static void pango_cairo_show_error_underline( cairo_t* cr, double x, double y, double width, double height );
		public extern static void pango_cairo_show_glyph_item( cairo_t* cr, CUtf8String text, PangoGlyphItem* glyphItem );
		public extern static void pango_cairo_show_glyph_string( cairo_t* cr, PangoFont* font, PangoGlyphString* glyphs );
		public extern static void pango_cairo_show_layout( cairo_t* cr, PangoLayout* layout );
		public extern static void pango_cairo_show_layout_line( cairo_t* cr, PangoLayoutLine* line );
		public extern static void pango_cairo_update_context( cairo_t* cr, PangoContext* context );
		public extern static void pango_cairo_update_layout( cairo_t* cr, PangoLayout* layout );
	}
	public enum PangoAlignment : uint {
		PANGO_ALIGN_LEFT =   0,
		PANGO_ALIGN_CENTER = 1,
		PANGO_ALIGN_RIGHT =  2,
	}
	public enum PangoAttrType : uint {
		PANGO_ATTR_INVALID =              0,
		PANGO_ATTR_LANGUAGE =             1,
		PANGO_ATTR_FAMILY =               2,
		PANGO_ATTR_STYLE =                3,
		PANGO_ATTR_WEIGHT =               4,
		PANGO_ATTR_VARIANT =              5,
		PANGO_ATTR_STRETCH =              6,
		PANGO_ATTR_SIZE =                 7,
		PANGO_ATTR_FONT_DESC =            8,
		PANGO_ATTR_FOREGROUND =           9,
		PANGO_ATTR_BACKGROUND =          10,
		PANGO_ATTR_UNDERLINE =           11,
		PANGO_ATTR_STRIKETHROUGH =       12,
		PANGO_ATTR_RISE =                13,
		PANGO_ATTR_SHAPE =               14,
		PANGO_ATTR_SCALE =               15,
		PANGO_ATTR_FALLBACK =            16,
		PANGO_ATTR_LETTER_SPACING =      17,
		PANGO_ATTR_UNDERLINE_COLOR =     18,
		PANGO_ATTR_STRIKETHROUGH_COLOR = 19,
		PANGO_ATTR_ABSOLUTE_SIZE =       20,
		PANGO_ATTR_GRAVITY =             21,
		PANGO_ATTR_GRAVITY_HINT =        22,
	}
	public enum PangoBidiType : uint {
		PANGO_BIDI_TYPE_L =    0,
		PANGO_BIDI_TYPE_LRE =  1,
		PANGO_BIDI_TYPE_LRO =  2,
		PANGO_BIDI_TYPE_R =    3,
		PANGO_BIDI_TYPE_AL =   4,
		PANGO_BIDI_TYPE_RLE =  5,
		PANGO_BIDI_TYPE_RLO =  6,
		PANGO_BIDI_TYPE_PDF =  7,
		PANGO_BIDI_TYPE_EN =   8,
		PANGO_BIDI_TYPE_ES =   9,
		PANGO_BIDI_TYPE_ET =  10,
		PANGO_BIDI_TYPE_AN =  11,
		PANGO_BIDI_TYPE_CS =  12,
		PANGO_BIDI_TYPE_NSM = 13,
		PANGO_BIDI_TYPE_BN =  14,
		PANGO_BIDI_TYPE_B =   15,
		PANGO_BIDI_TYPE_S =   16,
		PANGO_BIDI_TYPE_WS =  17,
		PANGO_BIDI_TYPE_ON =  18,
	}
	public enum PangoCoverageLevel : uint {
		PANGO_COVERAGE_NONE =        0,
		PANGO_COVERAGE_FALLBACK =    1,
		PANGO_COVERAGE_APPROXIMATE = 2,
		PANGO_COVERAGE_EXACT =       3,
	}
	public enum PangoDirection : uint {
		PANGO_DIRECTION_LTR =      0,
		PANGO_DIRECTION_RTL =      1,
		PANGO_DIRECTION_TTB_LTR =  2,
		PANGO_DIRECTION_TTB_RTL =  3,
		PANGO_DIRECTION_WEAK_LTR = 4,
		PANGO_DIRECTION_WEAK_RTL = 5,
		PANGO_DIRECTION_NEUTRAL =  6,
	}
	public enum PangoEllipsizeMode : uint {
		PANGO_ELLIPSIZE_NONE =   0,
		PANGO_ELLIPSIZE_START =  1,
		PANGO_ELLIPSIZE_MIDDLE = 2,
		PANGO_ELLIPSIZE_END =    3,
	}
	[Flags]
	public enum PangoFontMask : uint {
		None =                     0,
		PANGO_FONT_MASK_FAMILY =   1,
		PANGO_FONT_MASK_STYLE =    2,
		PANGO_FONT_MASK_VARIANT =  4,
		PANGO_FONT_MASK_WEIGHT =   8,
		PANGO_FONT_MASK_STRETCH = 16,
		PANGO_FONT_MASK_SIZE =    32,
		PANGO_FONT_MASK_GRAVITY = 64,
	}
	public enum PangoGravity : uint {
		PANGO_GRAVITY_SOUTH = 0,
		PANGO_GRAVITY_EAST =  1,
		PANGO_GRAVITY_NORTH = 2,
		PANGO_GRAVITY_WEST =  3,
		PANGO_GRAVITY_AUTO =  4,
	}
	public enum PangoGravityHint : uint {
		PANGO_GRAVITY_HINT_NATURAL = 0,
		PANGO_GRAVITY_HINT_STRONG =  1,
		PANGO_GRAVITY_HINT_LINE =    2,
	}
	public enum PangoRenderPart : uint {
		PANGO_RENDER_PART_FOREGROUND =    0,
		PANGO_RENDER_PART_BACKGROUND =    1,
		PANGO_RENDER_PART_UNDERLINE =     2,
		PANGO_RENDER_PART_STRIKETHROUGH = 3,
	}
	public enum PangoScript : int {
		PANGO_SCRIPT_INVALID_CODE =         -1,
		PANGO_SCRIPT_COMMON =                0,
		PANGO_SCRIPT_INHERITED =             1,
		PANGO_SCRIPT_ARABIC =                2,
		PANGO_SCRIPT_ARMENIAN =              3,
		PANGO_SCRIPT_BENGALI =               4,
		PANGO_SCRIPT_BOPOMOFO =              5,
		PANGO_SCRIPT_CHEROKEE =              6,
		PANGO_SCRIPT_COPTIC =                7,
		PANGO_SCRIPT_CYRILLIC =              8,
		PANGO_SCRIPT_DESERET =               9,
		PANGO_SCRIPT_DEVANAGARI =           10,
		PANGO_SCRIPT_ETHIOPIC =             11,
		PANGO_SCRIPT_GEORGIAN =             12,
		PANGO_SCRIPT_GOTHIC =               13,
		PANGO_SCRIPT_GREEK =                14,
		PANGO_SCRIPT_GUJARATI =             15,
		PANGO_SCRIPT_GURMUKHI =             16,
		PANGO_SCRIPT_HAN =                  17,
		PANGO_SCRIPT_HANGUL =               18,
		PANGO_SCRIPT_HEBREW =               19,
		PANGO_SCRIPT_HIRAGANA =             20,
		PANGO_SCRIPT_KANNADA =              21,
		PANGO_SCRIPT_KATAKANA =             22,
		PANGO_SCRIPT_KHMER =                23,
		PANGO_SCRIPT_LAO =                  24,
		PANGO_SCRIPT_LATIN =                25,
		PANGO_SCRIPT_MALAYALAM =            26,
		PANGO_SCRIPT_MONGOLIAN =            27,
		PANGO_SCRIPT_MYANMAR =              28,
		PANGO_SCRIPT_OGHAM =                29,
		PANGO_SCRIPT_OLD_ITALIC =           30,
		PANGO_SCRIPT_ORIYA =                31,
		PANGO_SCRIPT_RUNIC =                32,
		PANGO_SCRIPT_SINHALA =              33,
		PANGO_SCRIPT_SYRIAC =               34,
		PANGO_SCRIPT_TAMIL =                35,
		PANGO_SCRIPT_TELUGU =               36,
		PANGO_SCRIPT_THAANA =               37,
		PANGO_SCRIPT_THAI =                 38,
		PANGO_SCRIPT_TIBETAN =              39,
		PANGO_SCRIPT_CANADIAN_ABORIGINAL =  40,
		PANGO_SCRIPT_YI =                   41,
		PANGO_SCRIPT_TAGALOG =              42,
		PANGO_SCRIPT_HANUNOO =              43,
		PANGO_SCRIPT_BUHID =                44,
		PANGO_SCRIPT_TAGBANWA =             45,
		PANGO_SCRIPT_BRAILLE =              46,
		PANGO_SCRIPT_CYPRIOT =              47,
		PANGO_SCRIPT_LIMBU =                48,
		PANGO_SCRIPT_OSMANYA =              49,
		PANGO_SCRIPT_SHAVIAN =              50,
		PANGO_SCRIPT_LINEAR_B =             51,
		PANGO_SCRIPT_TAI_LE =               52,
		PANGO_SCRIPT_UGARITIC =             53,
		PANGO_SCRIPT_NEW_TAI_LUE =          54,
		PANGO_SCRIPT_BUGINESE =             55,
		PANGO_SCRIPT_GLAGOLITIC =           56,
		PANGO_SCRIPT_TIFINAGH =             57,
		PANGO_SCRIPT_SYLOTI_NAGRI =         58,
		PANGO_SCRIPT_OLD_PERSIAN =          59,
		PANGO_SCRIPT_KHAROSHTHI =           60,
		PANGO_SCRIPT_UNKNOWN =              61,
		PANGO_SCRIPT_BALINESE =             62,
		PANGO_SCRIPT_CUNEIFORM =            63,
		PANGO_SCRIPT_PHOENICIAN =           64,
		PANGO_SCRIPT_PHAGS_PA =             65,
		PANGO_SCRIPT_NKO =                  66,
		PANGO_SCRIPT_KAYAH_LI =             67,
		PANGO_SCRIPT_LEPCHA =               68,
		PANGO_SCRIPT_REJANG =               69,
		PANGO_SCRIPT_SUNDANESE =            70,
		PANGO_SCRIPT_SAURASHTRA =           71,
		PANGO_SCRIPT_CHAM =                 72,
		PANGO_SCRIPT_OL_CHIKI =             73,
		PANGO_SCRIPT_VAI =                  74,
		PANGO_SCRIPT_CARIAN =               75,
		PANGO_SCRIPT_LYCIAN =               76,
		PANGO_SCRIPT_LYDIAN =               77,
		PANGO_SCRIPT_BATAK =                78,
		PANGO_SCRIPT_BRAHMI =               79,
		PANGO_SCRIPT_MANDAIC =              80,
		PANGO_SCRIPT_CHAKMA =               81,
		PANGO_SCRIPT_MEROITIC_CURSIVE =     82,
		PANGO_SCRIPT_MEROITIC_HIEROGLYPHS = 83,
		PANGO_SCRIPT_MIAO =                 84,
		PANGO_SCRIPT_SHARADA =              85,
		PANGO_SCRIPT_SORA_SOMPENG =         86,
		PANGO_SCRIPT_TAKRI =                87,
	}
	public enum PangoStretch : uint {
		PANGO_STRETCH_ULTRA_CONDENSED = 0,
		PANGO_STRETCH_EXTRA_CONDENSED = 1,
		PANGO_STRETCH_CONDENSED =       2,
		PANGO_STRETCH_SEMI_CONDENSED =  3,
		PANGO_STRETCH_NORMAL =          4,
		PANGO_STRETCH_SEMI_EXPANDED =   5,
		PANGO_STRETCH_EXPANDED =        6,
		PANGO_STRETCH_EXTRA_EXPANDED =  7,
		PANGO_STRETCH_ULTRA_EXPANDED =  8,
	}
	public enum PangoStyle : uint {
		PANGO_STYLE_NORMAL =  0,
		PANGO_STYLE_OBLIQUE = 1,
		PANGO_STYLE_ITALIC =  2,
	}
	public enum PangoTabAlign : uint {
		PANGO_TAB_LEFT = 0,
	}
	public enum PangoUnderline : uint {
		PANGO_UNDERLINE_NONE =   0,
		PANGO_UNDERLINE_SINGLE = 1,
		PANGO_UNDERLINE_DOUBLE = 2,
		PANGO_UNDERLINE_LOW =    3,
		PANGO_UNDERLINE_ERROR =  4,
	}
	public enum PangoVariant : uint {
		PANGO_VARIANT_NORMAL =     0,
		PANGO_VARIANT_SMALL_CAPS = 1,
	}
	public enum PangoWeight : uint {
		PANGO_WEIGHT_THIN =        100,
		PANGO_WEIGHT_ULTRALIGHT =  200,
		PANGO_WEIGHT_LIGHT =       300,
		PANGO_WEIGHT_SEMILIGHT =   350,
		PANGO_WEIGHT_BOOK =        380,
		PANGO_WEIGHT_NORMAL =      400,
		PANGO_WEIGHT_MEDIUM =      500,
		PANGO_WEIGHT_SEMIBOLD =    600,
		PANGO_WEIGHT_BOLD =        700,
		PANGO_WEIGHT_ULTRABOLD =   800,
		PANGO_WEIGHT_HEAVY =       900,
		PANGO_WEIGHT_ULTRAHEAVY = 1000,
	}
	public enum PangoWrapMode : uint {
		PANGO_WRAP_WORD =      0,
		PANGO_WRAP_CHAR =      1,
		PANGO_WRAP_WORD_CHAR = 2,
	}
	[ExplicitSize( Size = 24 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAnalysis {
		[ExplicitOffset( Offset = 0 )]
		public PangoEngineShape* shape_engine;
		[ExplicitOffset( Offset = 4 )]
		public PangoEngineLang* lang_engine;
		[ExplicitOffset( Offset = 8 )]
		public PangoFont* font;
		[ExplicitOffset( Offset = 12 )]
		public byte level;
		[ExplicitOffset( Offset = 13 )]
		public byte gravity;
		[ExplicitOffset( Offset = 14 )]
		public byte flags;
		[ExplicitOffset( Offset = 15 )]
		public byte script;
		[ExplicitOffset( Offset = 16 )]
		public PangoLanguage* language;
		[ExplicitOffset( Offset = 20 )]
		public GSList* extra_attrs;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrClass {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttrType type;
		[ExplicitOffset( Offset = 4 )]
		public Functors.Func<PangoAttribute*, PangoAttribute*> copy;
		[ExplicitOffset( Offset = 8 )]
		public Functors.Action<PangoAttribute*> destroy;
		[ExplicitOffset( Offset = 12 )]
		public Functors.Func<PangoAttribute*, PangoAttribute*, Boolean32> equal;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrColor {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public PangoColor color;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrFloat {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public double value;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrFontDesc {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public PangoFontDescription* desc;
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttribute {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttrClass* klass;
		[ExplicitOffset( Offset = 4 )]
		public uint start_index;
		[ExplicitOffset( Offset = 8 )]
		public uint end_index;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrInt {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public int value;
	}
	public partial struct PangoAttrIterator {
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrLanguage {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public PangoLanguage* value;
	}
	public partial struct PangoAttrList {
	}
	[ExplicitSize( Size = 56 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrShape {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public PangoRectangle ink_rect;
		[ExplicitOffset( Offset = 28 )]
		public PangoRectangle logical_rect;
		[ExplicitOffset( Offset = 44 )]
		public void* data;
		[ExplicitOffset( Offset = 48 )]
		public Functors.Func<void*, void*> copy_func;
		[ExplicitOffset( Offset = 52 )]
		public Functors.Action<void*> destroy_func;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrSize {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public int size;
		public bool absolute { get { return ( cast<byte*>( &this )[16] & 1 ) != 0; } set { cast<byte*>( &this )[16] &= 254; cast<byte*>( &this )[16] |= cast<byte>( value ) << 0; } }
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoAttrString {
		[ExplicitOffset( Offset = 0 )]
		public PangoAttribute attr;
		[ExplicitOffset( Offset = 12 )]
		public sbyte* value;
	}
	public partial struct PangoCairoFont {
	}
	public partial struct PangoCairoFontMap {
	}
	[ExplicitSize( Size = 6 )]
	[Alignment( Boundary = 2 )]
	public partial struct PangoColor {
		[ExplicitOffset( Offset = 0 )]
		public ushort red;
		[ExplicitOffset( Offset = 2 )]
		public ushort green;
		[ExplicitOffset( Offset = 4 )]
		public ushort blue;
	}
	public partial struct PangoContext {
	}
	public partial struct PangoContextClass {
	}
	public partial struct PangoCoverage {
	}
	public partial struct PangoEngineLang {
	}
	public partial struct PangoEngineShape {
	}
	public partial struct PangoFont {
	}
	public partial struct PangoFontDescription {
	}
	public partial struct PangoFontFace {
	}
	public partial struct PangoFontFamily {
	}
	public partial struct PangoFontMap {
	}
	public partial struct PangoFontMetrics {
	}
	public partial struct PangoFontset {
	}
	[ExplicitSize( Size = 12 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoGlyphGeometry {
		[ExplicitOffset( Offset = 0 )]
		public int width;
		[ExplicitOffset( Offset = 4 )]
		public int x_offset;
		[ExplicitOffset( Offset = 8 )]
		public int y_offset;
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoGlyphInfo {
		[ExplicitOffset( Offset = 0 )]
		public uint glyph;
		[ExplicitOffset( Offset = 4 )]
		public PangoGlyphGeometry geometry;
		[ExplicitOffset( Offset = 16 )]
		public PangoGlyphVisAttr attr;
	}
	[ExplicitSize( Size = 8 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoGlyphItem {
		[ExplicitOffset( Offset = 0 )]
		public PangoItem* item;
		[ExplicitOffset( Offset = 4 )]
		public PangoGlyphString* glyphs;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoGlyphItemIter {
		[ExplicitOffset( Offset = 0 )]
		public PangoGlyphItem* glyph_item;
		[ExplicitOffset( Offset = 4 )]
		public CUtf8String text;
		[ExplicitOffset( Offset = 8 )]
		public int start_glyph;
		[ExplicitOffset( Offset = 12 )]
		public int start_index;
		[ExplicitOffset( Offset = 16 )]
		public int start_char;
		[ExplicitOffset( Offset = 20 )]
		public int end_glyph;
		[ExplicitOffset( Offset = 24 )]
		public int end_index;
		[ExplicitOffset( Offset = 28 )]
		public int end_char;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoGlyphString {
		[ExplicitOffset( Offset = 0 )]
		public int num_glyphs;
		[ExplicitOffset( Offset = 4 )]
		public PangoGlyphInfo* glyphs;
		[ExplicitOffset( Offset = 8 )]
		public int* log_clusters;
		[ExplicitOffset( Offset = 12 )]
		public int space;
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoGlyphVisAttr {
		public bool is_cluster_start { get { return ( cast<byte*>( &this )[0] & 1 ) != 0; } set { cast<byte*>( &this )[0] &= 254; cast<byte*>( &this )[0] |= cast<byte>( value ) << 0; } }
	}
	[ExplicitSize( Size = 36 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoItem {
		[ExplicitOffset( Offset = 0 )]
		public int offset;
		[ExplicitOffset( Offset = 4 )]
		public int length;
		[ExplicitOffset( Offset = 8 )]
		public int num_chars;
		[ExplicitOffset( Offset = 12 )]
		public PangoAnalysis analysis;
	}
	public partial struct PangoLanguage {
	}
	public partial struct PangoLayout {
	}
	public partial struct PangoLayoutClass {
	}
	public partial struct PangoLayoutIter {
	}
	[ExplicitSize( Size = 20 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoLayoutLine {
		[ExplicitOffset( Offset = 0 )]
		public PangoLayout* layout;
		[ExplicitOffset( Offset = 4 )]
		public int start_index;
		[ExplicitOffset( Offset = 8 )]
		public int length;
		[ExplicitOffset( Offset = 12 )]
		public GSList* runs;
		public bool is_paragraph_start { get { return ( cast<byte*>( &this )[16] & 1 ) != 0; } set { cast<byte*>( &this )[16] &= 254; cast<byte*>( &this )[16] |= cast<byte>( value ) << 0; } }
		public uint resolved_dir { get { return cast<byte*>( &this )[16] >> 1 & 7; } set { cast<byte*>( &this )[16] &= 241; cast<byte*>( &this )[16] |= ( cast<byte>( value ) & 14 ) << 1; } }
	}
	[ExplicitSize( Size = 4 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoLogAttr {
		public bool is_line_break { get { return ( cast<byte*>( &this )[0] & 1 ) != 0; } set { cast<byte*>( &this )[0] &= 254; cast<byte*>( &this )[0] |= cast<byte>( value ) << 0; } }
		public bool is_mandatory_break { get { return ( cast<byte*>( &this )[0] & 2 ) != 0; } set { cast<byte*>( &this )[0] &= 253; cast<byte*>( &this )[0] |= cast<byte>( value ) << 1; } }
		public bool is_char_break { get { return ( cast<byte*>( &this )[0] & 4 ) != 0; } set { cast<byte*>( &this )[0] &= 251; cast<byte*>( &this )[0] |= cast<byte>( value ) << 2; } }
		public bool is_white { get { return ( cast<byte*>( &this )[0] & 8 ) != 0; } set { cast<byte*>( &this )[0] &= 247; cast<byte*>( &this )[0] |= cast<byte>( value ) << 3; } }
		public bool is_cursor_position { get { return ( cast<byte*>( &this )[0] & 16 ) != 0; } set { cast<byte*>( &this )[0] &= 239; cast<byte*>( &this )[0] |= cast<byte>( value ) << 4; } }
		public bool is_word_start { get { return ( cast<byte*>( &this )[0] & 32 ) != 0; } set { cast<byte*>( &this )[0] &= 223; cast<byte*>( &this )[0] |= cast<byte>( value ) << 5; } }
		public bool is_word_end { get { return ( cast<byte*>( &this )[0] & 64 ) != 0; } set { cast<byte*>( &this )[0] &= 191; cast<byte*>( &this )[0] |= cast<byte>( value ) << 6; } }
		public bool is_sentence_boundary { get { return ( cast<byte*>( &this )[0] & 128 ) != 0; } set { cast<byte*>( &this )[0] &= 127; cast<byte*>( &this )[0] |= cast<byte>( value ) << 7; } }
		public bool is_sentence_start { get { return ( cast<byte*>( &this )[1] & 1 ) != 0; } set { cast<byte*>( &this )[1] &= 254; cast<byte*>( &this )[1] |= cast<byte>( value ) << 0; } }
		public bool is_sentence_end { get { return ( cast<byte*>( &this )[1] & 2 ) != 0; } set { cast<byte*>( &this )[1] &= 253; cast<byte*>( &this )[1] |= cast<byte>( value ) << 1; } }
		public bool backspace_deletes_character { get { return ( cast<byte*>( &this )[1] & 4 ) != 0; } set { cast<byte*>( &this )[1] &= 251; cast<byte*>( &this )[1] |= cast<byte>( value ) << 2; } }
		public bool is_expandable_space { get { return ( cast<byte*>( &this )[1] & 8 ) != 0; } set { cast<byte*>( &this )[1] &= 247; cast<byte*>( &this )[1] |= cast<byte>( value ) << 3; } }
		public bool is_word_boundary { get { return ( cast<byte*>( &this )[1] & 16 ) != 0; } set { cast<byte*>( &this )[1] &= 239; cast<byte*>( &this )[1] |= cast<byte>( value ) << 4; } }
	}
	[ExplicitSize( Size = 48 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoMatrix {
		[ExplicitOffset( Offset = 0 )]
		public double xx;
		[ExplicitOffset( Offset = 8 )]
		public double xy;
		[ExplicitOffset( Offset = 16 )]
		public double yx;
		[ExplicitOffset( Offset = 24 )]
		public double yy;
		[ExplicitOffset( Offset = 32 )]
		public double x0;
		[ExplicitOffset( Offset = 40 )]
		public double y0;
	}
	[ExplicitSize( Size = 16 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoRectangle {
		[ExplicitOffset( Offset = 0 )]
		public int x;
		[ExplicitOffset( Offset = 4 )]
		public int y;
		[ExplicitOffset( Offset = 8 )]
		public int width;
		[ExplicitOffset( Offset = 12 )]
		public int height;
	}
	[ExplicitSize( Size = 32 )]
	[Alignment( Boundary = 4 )]
	public partial struct PangoRenderer : GObject {
		[ExplicitSize( Size = 124 )]
		[Alignment( Boundary = 4 )]
		public new partial struct Class : basetype.Class {
			[ExplicitOffset( Offset = 68 )]
			public Functors.Action<PangoRenderer*, PangoFont*, PangoGlyphString*, int, int> _draw_glyphs;
			[ExplicitOffset( Offset = 72 )]
			public Functors.Action<PangoRenderer*, PangoRenderPart, int, int, int, int> _draw_rectangle;
			[ExplicitOffset( Offset = 76 )]
			public Functors.Action<PangoRenderer*, int, int, int, int> _draw_error_underline;
			[ExplicitOffset( Offset = 80 )]
			public Functors.Action<PangoRenderer*, PangoAttrShape*, int, int> _draw_shape;
			[ExplicitOffset( Offset = 84 )]
			public Functors.Action<PangoRenderer*, PangoRenderPart, double, double, double, double, double, double> _draw_trapezoid;
			[ExplicitOffset( Offset = 88 )]
			public Functors.Action<PangoRenderer*, PangoFont*, uint, double, double> _draw_glyph;
			[ExplicitOffset( Offset = 92 )]
			public Functors.Action<PangoRenderer*, PangoRenderPart> _part_changed;
			[ExplicitOffset( Offset = 96 )]
			public Functors.Action<PangoRenderer*> _begin;
			[ExplicitOffset( Offset = 100 )]
			public Functors.Action<PangoRenderer*> _end;
			[ExplicitOffset( Offset = 104 )]
			public Functors.Action<PangoRenderer*, PangoGlyphItem*> _prepare_run;
			[ExplicitOffset( Offset = 108 )]
			public Functors.Action<PangoRenderer*, sbyte*, PangoGlyphItem*, int, int> _draw_glyph_item;
			[ExplicitOffset( Offset = 112 )]
			public Functors.Action _pango_reserved2;
			[ExplicitOffset( Offset = 116 )]
			public Functors.Action _pango_reserved3;
			[ExplicitOffset( Offset = 120 )]
			public Functors.Action _pango_reserved4;
		}
		[ExplicitOffset( Offset = 12 )]
		public PangoUnderline _underline;
		[ExplicitOffset( Offset = 16 )]
		public Boolean32 _strikethrough;
		[ExplicitOffset( Offset = 20 )]
		public int _active_count;
		[ExplicitOffset( Offset = 24 )]
		public PangoMatrix* _matrix;
		[ExplicitOffset( Offset = 28 )]
		public PangoRendererPrivate* _priv;
	}
	public partial struct PangoRendererPrivate {
	}
	public partial struct PangoScriptIter {
	}
	public partial struct PangoTabArray {
	}
}