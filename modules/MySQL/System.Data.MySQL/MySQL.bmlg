//
// Created by Eugeny Grishul
//
// See license at http://bamelg.com/license.txt
//
// See http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol
//

using System;
using System.Collections;
using System.Hash;
using System.IO;
using System.Reflection;
using System.Runtime;

namespace System.Data.MySQL {
	public partial class MySQLConnection : System.Net.NetworkClient {
		private BinaryReader _binaryReader;
		private BinaryWriter _binaryWriter;
		private BufferedReadStream _bufferedReadStream;

		public MySQLConnectionParameters Parameters;

		public MySQLConnection() {
		}

		public override void Dispose() {
			_stream = null;
			_binaryReader = null;
			_binaryWriter = null;
			_bufferedReadStream = null;

			base.Dispose();
		}

		private ulong ReadFieldLength() { return ReadFieldLength( false ); }

		private ulong ReadFieldLength( bool& isNull ) {
			var prefix = _binaryReader.ReadUInt8();
			isNull = false;

			switch( prefix ) {
				case 0xFB: isNull = true; return ulong.MaxValue;
				case 0xFC: return _binaryReader.ReadUInt16();

				case 0xFD: {
						ulong_littleendian result;
						_binaryReader.BaseStream.Read( &result, 3 );
						return result;
					}

				case 0xFE: return _binaryReader.ReadUInt64();
				default: return prefix;
			}
		}

		private void WriteFieldLength( ulong length ) {
			if( length < 251 )
				_binaryWriter.Write( ( byte ) length );
			else if( length < 65536 ) {
				_binaryWriter.Write( ( byte ) 252 );
				_binaryWriter.Write( ( ushort_littleendian ) length );
			}
			else if( length < 16777216 ) {
				ulong_littleendian lengthLE = length;
				_binaryWriter.Write( ( byte ) 253 );
				_binaryWriter.BaseStream.Write( &lengthLE, 3 );
			}
			else {
				_binaryWriter.Write( ( byte ) 254 );
				_binaryWriter.Write( ( ulong_littleendian ) length );
			}
		}

		List<byte> _nullTerminatedBuffer = new List<byte>( 32 );
		private Utf8String ReadNullTerminatedString() {
			_nullTerminatedBuffer.Clear();

			while( true ) {
				var @char = _binaryReader.ReadUInt8();
				if( @char == 0 ) {
					// Console.WriteLine( "bc: {0}", buffer.Count );
					return Utf8String.FromUtf8( _nullTerminatedBuffer.GetBuffer(), ( uint ) _nullTerminatedBuffer.Count );
				}

				_nullTerminatedBuffer.Add( @char );
			}

			return null;
		}

		private Utf8String ReadLengthPrefixedUtf8String() { return ReadLengthPrefixedUtf8String( false ); }
		private Utf8String ReadLengthPrefixedUtf8String( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return null;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( length == 0 || contents == null ) return "";

			var result = Utf8String.FromUtf8( contents, length );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private byte[] ReadLengthPrefixedArray() {
			bool isNull;
			var length = ( uint ) ReadFieldLength( isNull );
			if( length == 0 || isNull ) return null;

			var result = new[length] byte;
			_bufferedReadStream.Read( &result[0], ( uint ) length );

			return result;
		}

		private void SkipLengthPrefixedArray() {
			bool isNull;
			var length = ( uint ) ReadFieldLength( isNull );
			if( length == 0 || isNull ) return;
			_bufferedReadStream.Drain( ( uint ) length );
		}

		private void WriteNullTerminatedString( Utf8String value ) {
			_binaryWriter.BaseStream.Write( value.GetChars(), ( uint ) value.ByteLength + 1 );
		}

		private bool ParseBit( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return false;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return false;

			_bufferedReadStream.Drain( ( uint ) length );
			return *contents != 0;
		}

		private sbyte ParseInt8( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			sbyte result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseInt8( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private byte ParseUInt8( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			byte result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseUInt8( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private short ParseInt16( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			short result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseInt16( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private ushort ParseUInt16( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			ushort result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseUInt16( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private int ParseInt32( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			int result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseInt32( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private uint ParseUInt32( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			uint result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseUInt32( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private long ParseInt64( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			long result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseInt64( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private ulong ParseUInt64( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			ulong result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseUInt64( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private float ParseFloat( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			double result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseDoubleIEEE754( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return ( float ) result;
		}

		private double ParseDouble( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return 0;

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return 0;

			double result;
			Assert.IsTrue( PrimitiveTypesParser.TryParseDoubleIEEE754( contents, length, result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private DateTime ParseDateTime( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return new DateTime( 0 );

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return new DateTime( 0 );

			DateTime result;
			Assert.IsTrue( DateTime.TryParse( new CStringSpan( contents, length ), result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		private TimeSpan ParseTime( bool& isNull ) {
			var length = ( uint ) ReadFieldLength( isNull );
			if( isNull ) return new TimeSpan( 0 );

			var contents = ( byte* ) _bufferedReadStream.Peek( ( uint ) length );
			if( contents == null ) return new TimeSpan( 0 );

			TimeSpan result;
			Assert.IsTrue( TimeSpan.TryParse( new CStringSpan( contents, length ), result ) );
			_bufferedReadStream.Drain( ( uint ) length );
			return result;
		}

		protected override bool OnConnected() {
			if( Parameters.Schema == null ) Parameters.Schema = "";
			if( Parameters.User == null ) Parameters.User = "";

			_binaryReader = new BinaryReader( _bufferedReadStream = new BufferedReadStream( _stream ) );
			_binaryWriter = new BinaryWriter( _stream );

			if( CheckError() ) {
				ReadError();
				return false;
			}

			[DisableWarningUnreachable]
			if( Trace ) Console.WriteLine( "MySQL connection info:" );

			PacketHeader greetingHeader;
			_binaryReader.BaseStream.Read( &greetingHeader, sizeof( greetingHeader ) );

			var protocol = _binaryReader.ReadUInt8();

			var versionString = ReadNullTerminatedString();
			[DisableWarningUnreachable]
			if( Trace ) Console.WriteLine( "  Version: '{0}'; Protocol: {1}", versionString, protocol );

			var threadId = _binaryReader.ReadUInt32();
			var scramble = ReadNullTerminatedString();
			// [DisableWarningUnreachable]
			// if( Trace ) Console.WriteLine( "Scramble1: '{0}'", scramble );

			var caps = ( Capabilities ) _binaryReader.ReadUInt16();

			var charsetId = _binaryReader.ReadUInt8();
			[DisableWarningUnreachable]
			if( Trace ) Console.WriteLine( "  Character set: {0}", charsetId );

			var serverStatus = ( ServerStatus ) _binaryReader.ReadUInt16();
			[DisableWarningUnreachable]
			if( Trace ) Console.WriteLine( "  Server status: {0}", serverStatus );

			caps |= ( Capabilities )( ( uint ) _binaryReader.ReadUInt16() << 16 );
			[DisableWarningUnreachable]
			if( Trace ) Console.WriteLine( "  Server caps: {0}", caps );

			{
				byte[11] filler;
				_binaryReader.BaseStream.Read( &filler[0], sizeof( filler ) );
			}

			scramble += ReadNullTerminatedString();
			// [DisableWarningUnreachable]
			// if( Trace ) Console.WriteLine( "Scramble2: '{0}'", scramble );

			Utf8String authenticationMethod = "";
			if( ( caps & Capabilities.PluginAuthentication ) != 0 ) {
				authenticationMethod = ReadNullTerminatedString();
				[DisableWarningUnreachable]
				if( Trace ) Console.WriteLine( "  Authentication method: {0}", authenticationMethod );
			}

			// Authenticate
			PacketHeader loginHeader;
			loginHeader.PacketLength = 33 + ( Parameters.Schema.ByteLength + 1 ) + ( Parameters.User.ByteLength + 1 ) + sizeof( SHA1 );
			loginHeader.PacketNumber = 1;

			_binaryWriter.BaseStream.Write( &loginHeader, sizeof( loginHeader ) );

			_binaryWriter.Write( ( Capabilities.LongPassword | Capabilities.FoundRows | Capabilities.LongColumnFlags | Capabilities.ConnectWithDatabase | Capabilities.LocalFiles | Capabilities.Protocol41 | Capabilities.SecureConnection | Capabilities.Transactions ).Value() ); // client caps
			_binaryWriter.Write( 0x00FFFFFF ); // max packet
			_binaryWriter.Write( ( byte ) 33 ); // charset
			{
				var filler = new byte[23] default( 0 );
				_binaryWriter.BaseStream.Write( &filler[0], sizeof( filler ) );
			}

			WriteNullTerminatedString( Parameters.User );

			// http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol#Password_functions
			{
				var tempHash = Parameters.PasswordSecondHash;
				var token = new SHA1( new MemorySegment( scramble.GetChars(), scramble.ByteLength ), new MemorySegment( &tempHash, sizeof( tempHash ) ) );
				Memory.PerformXor( &token, &token, &Parameters.PasswordFirstHash, sizeof( token ) );

				_binaryWriter.Write( ( byte ) sizeof( SHA1 ) );
				_binaryWriter.BaseStream.Write( &token, sizeof( token ) );
			}

			WriteNullTerminatedString( Parameters.Schema );
			_binaryWriter.Flush();

			return EnsureOK();
		}

		private void WriteCommand( Command command ) {
			PacketHeader header;
			header.PacketLength = 1;
			header.PacketNumber = 0;

			_binaryWriter.BaseStream.Write( &header, sizeof( header ) );
			_binaryWriter.Write( command.Value() );
		}

		public bool Ping() {
			WriteCommand( Command.Ping );
			_binaryWriter.Flush();

			return EnsureOK();
		}

		private void Quit() {
			WriteCommand( Command.Quit );
			_binaryWriter.Flush();
			// EnsureOK(); no response from server
		}

		public void Shutdown() {
			WriteCommand( Command.Shutdown );
			_binaryWriter.Flush();

			// return EnsureOK();
		}

		// Useful commands:
		//  "SET SQL_SELECT_LIMIT=0" - prepare to get schema
		//  "SET SQL_SELECT_LIMIT=1" - prepare to get schema + 1 row
		//  "SET NAMES utf8"
		//  "SHOW VARIABLES/TABLES/DATABASES"
		public bool ExecuteCommand( Utf8String command ) {
			PacketHeader header;
			header.PacketLength = command.ByteLength + 1;
			header.PacketNumber = 0;

			_binaryWriter.BaseStream.Write( &header, sizeof( header ) );
			_binaryWriter.Write( Command.Query.Value() );
			_binaryWriter.BaseStream.Write( command.GetChars(), command.ByteLength );
			_binaryWriter.Flush();

			return EnsureOK();
		}

		public struct FieldInfo : IFormattable {
			public Utf8String Name, OriginalName;
			public FieldType FieldType;
			public uint Length;
			public FieldFlags FieldFlags;
			public byte Decimals;
			public Utf8String Catalog, Database, Table, OriginalTable;
			public ushort Charset;

			public void ToString( StringBuilder builder, string format ) {
				builder.Concat( "Name='", Name, "' OriginalName='", OriginalName, "' FieldType='", FieldType, "' Length='", Length, "' FieldFlags='", FieldFlags, "' Decimals='", Decimals, "' Catalog='", Catalog, "' Database='", Database, "' Table='", Table, "' OriginalTable='", OriginalTable, "' Charset='", Charset, '\'' );
			}
		}

		public bool Trace = false;

		private bool _queryExecuting = false;

		public class QueryReader {
			private declaringtype _parent;
			private bool _initialized;
			private bool _usable;
			private Utf8String _command;
			private FieldInfo[] Fields;
			private uint _rowCounter;

			private Binder.Context* _context;

			public Binder.MapperUtf8 Mapper;
			public uint[] OrdinalMapping;

			public QueryReader( declaringtype parent, Utf8String command, Binder.Context& context ) {
				_parent = parent;
				_command = command;
				_context = &context;
				_usable = _parent.SendQuery( command );
			}

			public bool MoveNext() {
				PacketHeader header;

				if( !_initialized ) {
					_initialized = true;

					[DisableWarningUnreachable]
					if( _parent.Trace ) Console.WriteLine( "Schema for query: '{0}'", _command );

					_parent._binaryReader.BaseStream.Read( &header, sizeof( header ) );

					var numberOfFields = ( uint ) _parent.ReadFieldLength();
					Fields = new[numberOfFields] FieldInfo;
					OrdinalMapping = new[numberOfFields] uint default( uint.MaxValue );

					for( var i = 0U; i < numberOfFields; ++i ) {
						var& currentField = Fields[i];

						PacketHeader fieldHeader;
						_parent._binaryReader.BaseStream.Read( &fieldHeader, sizeof( fieldHeader ) );
						currentField.Catalog = _parent.ReadLengthPrefixedUtf8String();
						currentField.Database = _parent.ReadLengthPrefixedUtf8String();
						currentField.Table = _parent.ReadLengthPrefixedUtf8String();
						currentField.OriginalTable = _parent.ReadLengthPrefixedUtf8String();
						currentField.Name = _parent.ReadLengthPrefixedUtf8String();
						currentField.OriginalName = _parent.ReadLengthPrefixedUtf8String();
						_parent._binaryReader.ReadUInt8();
						currentField.Charset = _parent._binaryReader.ReadUInt16();
						currentField.Length = _parent._binaryReader.ReadUInt32();
						currentField.FieldType = ( FieldType ) _parent._binaryReader.ReadUInt8();
						currentField.FieldFlags = ( FieldFlags ) _parent._binaryReader.ReadUInt16();
						currentField.Decimals = _parent._binaryReader.ReadUInt8();
						_parent._binaryReader.ReadUInt16();

						[DisableWarningUnreachable]
						if( _parent.Trace ) Console.WriteLine( "  Column[{0}]: {1}", i, currentField );

						if( ( currentField.FieldFlags & FieldFlags.Unsigned ) != 0 ) {
							switch( currentField.FieldType ) {
								case FieldType.TinyInt:
								case FieldType.SmallInt:
								case FieldType.Int:
								case FieldType.BigInt:
									currentField.FieldType |= ( FieldType ) 128;
									break;
							}
						}

						OrdinalMapping[i] = Mapper[currentField.Name];
					}

					_parent.ReadEnd();

					_parent._queryExecuting = true;
				}

				if( _parent.CheckEnd() ) {
					_parent.ReadEnd();
					_parent._queryExecuting = false;
					// cancel = true;
					return false;
				}

				[DisableWarningUnreachable]
				if( _parent.Trace ) Console.WriteLine( "Reading row: {0}", _rowCounter );
				++_rowCounter;

				PacketHeader rowHeader;
				_parent._binaryReader.BaseStream.Read( &rowHeader, sizeof( rowHeader ) );

				bool isNull;
				for( var i = 0; i < Fields.Length; ++i ) {
					var& currentField = Fields[i];

					var ordinal = OrdinalMapping[i];
					var bindable = ordinal != -1;

					[DisableWarningUnreachable]
					if( _parent.Trace ) Console.WriteLine( " Reading column[{0}] {1}({2})", i, currentField.Name, currentField.FieldType );

					switch( currentField.FieldType ) {
						case FieldType.Bit: {
								var value = _parent.ParseBit( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.TinyInt: {
								var value = _parent.ParseInt8( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.UnsignedTinyInt: {
								var value = _parent.ParseUInt8( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.SmallInt: {
								var value = _parent.ParseInt16( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.UnsignedSmallInt: {
								var value = _parent.ParseUInt16( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.MediumInt: {
								var value = _parent.ParseInt32( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.UnsignedMediumInt: {
								var value = _parent.ParseUInt32( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.Int: {
								var value = _parent.ParseInt32( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.UnsignedInt: {
								var value = _parent.ParseUInt32( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.BigInt: {
								var value = _parent.ParseInt64( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.UnsignedBigInt: {
								var value = _parent.ParseUInt64( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.Float: {
								var value = _parent.ParseFloat( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.Double: {
								var value = _parent.ParseDouble( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.NewDecimal: {
								var value = _parent.ParseDouble( isNull ); // TODO add proper decimal support
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.String: {
								var value = _parent.ReadLengthPrefixedUtf8String( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.VarString: {
								var value = _parent.ReadLengthPrefixedUtf8String( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.Timestamp: {
								var value = _parent.ParseDateTime( isNull );
								value.Kind = DateTimeKind.Local; // stored in UTC, but converted to local on retrieval
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.DateTime: {
								var value = _parent.ParseDateTime( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.Date: {
								var value = _parent.ParseDateTime( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.Time: {
								var value = _parent.ParseTime( isNull );
								if( bindable ) _context->Binder.SetValue( *_context, ordinal, value );
								break;
							}

						case FieldType.Blob: {
								if( bindable ) {
									var value = _parent.ReadLengthPrefixedArray();
									_context->Binder.SetValue( *_context, ordinal, value );
								}
								else
									_parent.SkipLengthPrefixedArray();

								break;
							}

						default: {
								var value = _parent.ReadLengthPrefixedUtf8String();
								Assert.NotImplemented( string.Format( "Type == '{0}', Value == '{1}'", currentField.FieldType, value ) );
								Console.WriteLine( value );
								break;
							}
					}
				}

				return true;
			}
		}

		public QueryReader ExecuteReader<T>( Binder.Context& context, Utf8String command ) {
			if( !Assert.IsFalse( _queryExecuting ) ) return null;

			return new QueryReader( this, command, context ) {
				Binder = Binder<T>.Instance,
				NameMapping = Binder<T>.NameMapping
			};
		}

		public yield<T> ExecuteQuery<T>( Utf8String command ) {
			if( !Assert.IsFalse( _queryExecuting ) ) yield break;

			var row = new T();
			var rowContext = Mapper<T>.Instance.Binder.CreateContext( &row );

			var reader = new QueryReader( this, command, rowContext ) {
				Mapper = Mapper<T>.Instance
			};

			while( reader.MoveNext() )
				yield return row;
		}

		private bool SendQuery( Utf8String command ) {
			if( !Assert.IsFalse( _queryExecuting ) ) return false;

			PacketHeader header;
			header.PacketLength = command.ByteLength + 1;
			header.PacketNumber = 0;

			_binaryWriter.BaseStream.Write( &header, sizeof( header ) );
			_binaryWriter.Write( Command.Query.Value() );
			_binaryWriter.BaseStream.Write( command.GetChars(), command.ByteLength );
			_binaryWriter.Flush();

			// ============================================================

			if( CheckError() ) {
				ReadError();
				return false;
			}

			return true;
		}

		private class Mapper<T> {
			public static readonly Binder.MapperUtf8 Instance = new Binder.MapperUtf8( typeof( T ) );
		}

		private bool CheckError() {
			var& header = *( PacketHeaderSig* ) _bufferedReadStream.Peek( sizeof( PacketHeaderSig ) );
			if( header == nullref ) return true;

			if( header.Sig == 0xFF ) {
				return true;
			}

			return false;
		}

		private bool CheckEnd() {
			var& header = *( PacketHeaderSig* ) _bufferedReadStream.Peek( sizeof( PacketHeaderSig ) );
			if( header == nullref ) return true;

			if( header.Sig == 0xFE && header.PacketLength <= 5 )
				return true;

			return false;
		}

		private bool ReadEnd() {
			PacketHeaderSig header;
			_binaryReader.BaseStream.Read( &header, sizeof( header ) );
			Assert.IsTrue( header.Sig == 0xFE && header.PacketLength <= 5 );

			var warnings = _binaryReader.ReadUInt16();
			var serverStatus = _binaryReader.ReadUInt16();

			return false;
		}

		private void ReadError() {
			PacketHeaderSig header;
			var readen = _binaryReader.BaseStream.Read( &header, sizeof( header ) );
			Console.WriteLine( "ReadError: {0}", readen );
			Assert.IsTrue( header.Sig == 0xFF );

			var errorCode = _binaryReader.ReadUInt16();

			var stringLength = header.PacketLength - 3;
			var start = _bufferedReadStream.Peek( stringLength );
			Console.WriteLine( "Server error: {0}", Utf8String.FromUtf8( ( byte* ) start, stringLength ) );
			_bufferedReadStream.Drain( stringLength );
		}

		private bool EnsureOK() {
			if( CheckError() ) {
				ReadError();
				return false;
			}

			PacketHeader header;
			_binaryReader.BaseStream.Read( &header, sizeof( header ) );
			// Console.WriteLine( "ok Header: {0}", header.ToString() );

			var protocol = _binaryReader.ReadUInt8();
			var affectedRows = ReadFieldLength();
			var lastInsertId = ReadFieldLength();
			var serverStatus = ( ServerStatus ) _binaryReader.ReadUInt16();
			var warnings = _binaryReader.ReadUInt8();
			_binaryReader.ReadUInt8();

			return true;
		}

		private struct PacketHeader {
			private uint_littleendian _lengthID;
			public uint PacketLength { get { return _lengthID & 0x00FFFFFFU; } set { _lengthID = BitOperations.MergeBits( value, _lengthID, 0xFF000000U ); } }
			public uint PacketNumber { get { return _lengthID >> 24; } set { _lengthID = ( value << 24 ) | ( _lengthID & 0x00FFFFFF ); } }

			public string ToString() { return string.Format( "PacketLength = {0}, PacketNumber = {1}", PacketLength, PacketNumber ); }
		}

		// used for packets checking against EOF and errors
		private struct PacketHeaderSig : PacketHeader {
			public byte Sig;
		}

		private struct CharacterSet {
			public string Name;
			public int ByteCount;

			public CharacterSet( string name, int byteCount ) {
				Name = name;
				ByteCount = byteCount;
			}
		}

		public struct Transaction : IDisposable {
			public readonly MySQLConnection Connection;

			public Transaction( MySQLConnection connection ) {
				Connection = connection;
			}

			public void Dispose() {
			}

			public void Commit() {
			}
		}
	}

	public struct MySQLConnectionParameters {
		public Utf8String Charset, User, Schema;

		// Dont store password
		public Utf8String Password {
			set {
				PasswordFirstHash = new SHA1( value );
				PasswordSecondHash = new SHA1( new MemorySegment( &PasswordFirstHash, sizeof( PasswordFirstHash ) ) );
			}
		}

		public SHA1 PasswordFirstHash, PasswordSecondHash;
	}
}